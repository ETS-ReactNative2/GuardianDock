{"version":3,"sources":["FlatList.js"],"names":["Platform","require","deepDiffer","React","View","VirtualizedList","StyleSheet","invariant","removeClippedSubviewsOrDefault","removeClippedSubviews","OS","numColumnsOrDefault","numColumns","FlatList","props","_virtualizedListPairs","_captureRef","ref","_listRef","_getItem","data","index","ret","kk","item","push","_getItemCount","Math","ceil","length","_keyExtractor","items","keyExtractor","defaultKeyExtractor","Array","isArray","map","join","_renderer","ListItemComponent","renderItem","columnWrapperStyle","virtualizedListRenderKey","renderer","info","compose","styles","row","it","element","separators","_checkProps","viewabilityConfigCallbackPairs","pair","viewabilityConfig","onViewableItemsChanged","_createOnViewableItemsChanged","params","scrollToEnd","scrollToIndex","scrollToItem","scrollToOffset","recordInteraction","flashScrollIndicators","getScrollResponder","getScrollRef","getScrollableNode","setNativeProps","prevProps","getItem","getItemCount","horizontal","arr","v","forEach","ii","key","changed","viewableItems","_pushMultiColumnViewable","_removeClippedSubviews","restProps","PureComponent","create","flexDirection","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n * @format\n */\n\nconst Platform = require('../Utilities/Platform');\nconst deepDiffer = require('../Utilities/differ/deepDiffer');\nconst React = require('react');\nconst View = require('../Components/View/View');\nconst VirtualizedList = require('./VirtualizedList');\nconst StyleSheet = require('../StyleSheet/StyleSheet');\n\nconst invariant = require('invariant');\n\nimport typeof ScrollViewNativeComponent from '../Components/ScrollView/ScrollViewNativeComponent';\nimport {type ScrollResponderType} from '../Components/ScrollView/ScrollView';\nimport type {ViewStyleProp} from '../StyleSheet/StyleSheet';\nimport type {\n  ViewToken,\n  ViewabilityConfigCallbackPair,\n} from './ViewabilityHelper';\nimport type {RenderItemType, RenderItemProps} from './VirtualizedList';\nimport {keyExtractor as defaultKeyExtractor} from './VirtualizeUtils';\n\ntype RequiredProps<ItemT> = {|\n  /**\n   * For simplicity, data is just a plain array. If you want to use something else, like an\n   * immutable list, use the underlying `VirtualizedList` directly.\n   */\n  data: ?$ReadOnlyArray<ItemT>,\n|};\ntype OptionalProps<ItemT> = {|\n  /**\n   * Takes an item from `data` and renders it into the list. Example usage:\n   *\n   *     <FlatList\n   *       ItemSeparatorComponent={Platform.OS !== 'android' && ({highlighted}) => (\n   *         <View style={[style.separator, highlighted && {marginLeft: 0}]} />\n   *       )}\n   *       data={[{title: 'Title Text', key: 'item1'}]}\n   *       renderItem={({item, separators}) => (\n   *         <TouchableHighlight\n   *           onPress={() => this._onPress(item)}\n   *           onShowUnderlay={separators.highlight}\n   *           onHideUnderlay={separators.unhighlight}>\n   *           <View style={{backgroundColor: 'white'}}>\n   *             <Text>{item.title}</Text>\n   *           </View>\n   *         </TouchableHighlight>\n   *       )}\n   *     />\n   *\n   * Provides additional metadata like `index` if you need it, as well as a more generic\n   * `separators.updateProps` function which let's you set whatever props you want to change the\n   * rendering of either the leading separator or trailing separator in case the more common\n   * `highlight` and `unhighlight` (which set the `highlighted: boolean` prop) are insufficient for\n   * your use-case.\n   */\n  renderItem?: ?RenderItemType<ItemT>,\n\n  /**\n   * Optional custom style for multi-item rows generated when numColumns > 1.\n   */\n  columnWrapperStyle?: ViewStyleProp,\n  /**\n   * A marker property for telling the list to re-render (since it implements `PureComponent`). If\n   * any of your `renderItem`, Header, Footer, etc. functions depend on anything outside of the\n   * `data` prop, stick it here and treat it immutably.\n   */\n  extraData?: any,\n  /**\n   * `getItemLayout` is an optional optimizations that let us skip measurement of dynamic content if\n   * you know the height of items a priori. `getItemLayout` is the most efficient, and is easy to\n   * use if you have fixed height items, for example:\n   *\n   *     getItemLayout={(data, index) => (\n   *       {length: ITEM_HEIGHT, offset: ITEM_HEIGHT * index, index}\n   *     )}\n   *\n   * Adding `getItemLayout` can be a great performance boost for lists of several hundred items.\n   * Remember to include separator length (height or width) in your offset calculation if you\n   * specify `ItemSeparatorComponent`.\n   */\n  getItemLayout?: (\n    data: ?Array<ItemT>,\n    index: number,\n  ) => {\n    length: number,\n    offset: number,\n    index: number,\n    ...\n  },\n  /**\n   * If true, renders items next to each other horizontally instead of stacked vertically.\n   */\n  horizontal?: ?boolean,\n  /**\n   * How many items to render in the initial batch. This should be enough to fill the screen but not\n   * much more. Note these items will never be unmounted as part of the windowed rendering in order\n   * to improve perceived performance of scroll-to-top actions.\n   */\n  initialNumToRender?: ?number,\n  /**\n   * Instead of starting at the top with the first item, start at `initialScrollIndex`. This\n   * disables the \"scroll to top\" optimization that keeps the first `initialNumToRender` items\n   * always rendered and immediately renders the items starting at this initial index. Requires\n   * `getItemLayout` to be implemented.\n   */\n  initialScrollIndex?: ?number,\n  /**\n   * Reverses the direction of scroll. Uses scale transforms of -1.\n   */\n  inverted?: ?boolean,\n  /**\n   * Used to extract a unique key for a given item at the specified index. Key is used for caching\n   * and as the react key to track item re-ordering. The default extractor checks `item.key`, then\n   * falls back to using the index, like React does.\n   */\n  keyExtractor?: ?(item: ItemT, index: number) => string,\n  /**\n   * Multiple columns can only be rendered with `horizontal={false}` and will zig-zag like a\n   * `flexWrap` layout. Items should all be the same height - masonry layouts are not supported.\n   *\n   * The default value is 1.\n   */\n  numColumns?: number,\n  /**\n   * Note: may have bugs (missing content) in some circumstances - use at your own risk.\n   *\n   * This may improve scroll performance for large lists.\n   *\n   * The default value is true for Android.\n   */\n  removeClippedSubviews?: boolean,\n  /**\n   * See `ScrollView` for flow type and further documentation.\n   */\n  fadingEdgeLength?: ?number,\n|};\n\n/**\n * Default Props Helper Functions\n * Use the following helper functions for default values\n */\n\n// removeClippedSubviewsOrDefault(this.props.removeClippedSubviews)\nfunction removeClippedSubviewsOrDefault(removeClippedSubviews: ?boolean) {\n  return removeClippedSubviews ?? Platform.OS === 'android';\n}\n\n// numColumnsOrDefault(this.props.numColumns)\nfunction numColumnsOrDefault(numColumns: ?number) {\n  return numColumns ?? 1;\n}\n\ntype FlatListProps<ItemT> = {|\n  ...RequiredProps<ItemT>,\n  ...OptionalProps<ItemT>,\n|};\n\ntype VirtualizedListProps = React.ElementConfig<typeof VirtualizedList>;\n\nexport type Props<ItemT> = {\n  ...$Diff<\n    VirtualizedListProps,\n    {\n      getItem: $PropertyType<VirtualizedListProps, 'getItem'>,\n      getItemCount: $PropertyType<VirtualizedListProps, 'getItemCount'>,\n      getItemLayout: $PropertyType<VirtualizedListProps, 'getItemLayout'>,\n      renderItem: $PropertyType<VirtualizedListProps, 'renderItem'>,\n      keyExtractor: $PropertyType<VirtualizedListProps, 'keyExtractor'>,\n      ...\n    },\n  >,\n  ...FlatListProps<ItemT>,\n  ...\n};\n\n/**\n * A performant interface for rendering simple, flat lists, supporting the most handy features:\n *\n *  - Fully cross-platform.\n *  - Optional horizontal mode.\n *  - Configurable viewability callbacks.\n *  - Header support.\n *  - Footer support.\n *  - Separator support.\n *  - Pull to Refresh.\n *  - Scroll loading.\n *  - ScrollToIndex support.\n *\n * If you need section support, use [`<SectionList>`](docs/sectionlist.html).\n *\n * Minimal Example:\n *\n *     <FlatList\n *       data={[{key: 'a'}, {key: 'b'}]}\n *       renderItem={({item}) => <Text>{item.key}</Text>}\n *     />\n *\n * More complex, multi-select example demonstrating `PureComponent` usage for perf optimization and avoiding bugs.\n *\n * - By binding the `onPressItem` handler, the props will remain `===` and `PureComponent` will\n *   prevent wasteful re-renders unless the actual `id`, `selected`, or `title` props change, even\n *   if the components rendered in `MyListItem` did not have such optimizations.\n * - By passing `extraData={this.state}` to `FlatList` we make sure `FlatList` itself will re-render\n *   when the `state.selected` changes. Without setting this prop, `FlatList` would not know it\n *   needs to re-render any items because it is also a `PureComponent` and the prop comparison will\n *   not show any changes.\n * - `keyExtractor` tells the list to use the `id`s for the react keys instead of the default `key` property.\n *\n *\n *     class MyListItem extends React.PureComponent {\n *       _onPress = () => {\n *         this.props.onPressItem(this.props.id);\n *       };\n *\n *       render() {\n *         const textColor = this.props.selected ? \"red\" : \"black\";\n *         return (\n *           <TouchableOpacity onPress={this._onPress}>\n *             <View>\n *               <Text style={{ color: textColor }}>\n *                 {this.props.title}\n *               </Text>\n *             </View>\n *           </TouchableOpacity>\n *         );\n *       }\n *     }\n *\n *     class MultiSelectList extends React.PureComponent {\n *       state = {selected: (new Map(): Map<string, boolean>)};\n *\n *       _keyExtractor = (item, index) => item.id;\n *\n *       _onPressItem = (id: string) => {\n *         // updater functions are preferred for transactional updates\n *         this.setState((state) => {\n *           // copy the map rather than modifying state.\n *           const selected = new Map(state.selected);\n *           selected.set(id, !selected.get(id)); // toggle\n *           return {selected};\n *         });\n *       };\n *\n *       _renderItem = ({item}) => (\n *         <MyListItem\n *           id={item.id}\n *           onPressItem={this._onPressItem}\n *           selected={!!this.state.selected.get(item.id)}\n *           title={item.title}\n *         />\n *       );\n *\n *       render() {\n *         return (\n *           <FlatList\n *             data={this.props.data}\n *             extraData={this.state}\n *             keyExtractor={this._keyExtractor}\n *             renderItem={this._renderItem}\n *           />\n *         );\n *       }\n *     }\n *\n * This is a convenience wrapper around [`<VirtualizedList>`](docs/virtualizedlist.html),\n * and thus inherits its props (as well as those of `ScrollView`) that aren't explicitly listed\n * here, along with the following caveats:\n *\n * - Internal state is not preserved when content scrolls out of the render window. Make sure all\n *   your data is captured in the item data or external stores like Flux, Redux, or Relay.\n * - This is a `PureComponent` which means that it will not re-render if `props` remain shallow-\n *   equal. Make sure that everything your `renderItem` function depends on is passed as a prop\n *   (e.g. `extraData`) that is not `===` after updates, otherwise your UI may not update on\n *   changes. This includes the `data` prop and parent component state.\n * - In order to constrain memory and enable smooth scrolling, content is rendered asynchronously\n *   offscreen. This means it's possible to scroll faster than the fill rate ands momentarily see\n *   blank content. This is a tradeoff that can be adjusted to suit the needs of each application,\n *   and we are working on improving it behind the scenes.\n * - By default, the list looks for a `key` prop on each item and uses that for the React key.\n *   Alternatively, you can provide a custom `keyExtractor` prop.\n *\n * Also inherits [ScrollView Props](docs/scrollview.html#props), unless it is nested in another FlatList of same orientation.\n */\nclass FlatList<ItemT> extends React.PureComponent<Props<ItemT>, void> {\n  props: Props<ItemT>;\n  /**\n   * Scrolls to the end of the content. May be janky without `getItemLayout` prop.\n   */\n  scrollToEnd(params?: ?{animated?: ?boolean, ...}) {\n    if (this._listRef) {\n      this._listRef.scrollToEnd(params);\n    }\n  }\n\n  /**\n   * Scrolls to the item at the specified index such that it is positioned in the viewable area\n   * such that `viewPosition` 0 places it at the top, 1 at the bottom, and 0.5 centered in the\n   * middle. `viewOffset` is a fixed number of pixels to offset the final target position.\n   *\n   * Note: cannot scroll to locations outside the render window without specifying the\n   * `getItemLayout` prop.\n   */\n  scrollToIndex(params: {\n    animated?: ?boolean,\n    index: number,\n    viewOffset?: number,\n    viewPosition?: number,\n    ...\n  }) {\n    if (this._listRef) {\n      this._listRef.scrollToIndex(params);\n    }\n  }\n\n  /**\n   * Requires linear scan through data - use `scrollToIndex` instead if possible.\n   *\n   * Note: cannot scroll to locations outside the render window without specifying the\n   * `getItemLayout` prop.\n   */\n  scrollToItem(params: {\n    animated?: ?boolean,\n    item: ItemT,\n    viewPosition?: number,\n    ...\n  }) {\n    if (this._listRef) {\n      this._listRef.scrollToItem(params);\n    }\n  }\n\n  /**\n   * Scroll to a specific content pixel offset in the list.\n   *\n   * Check out [scrollToOffset](docs/virtualizedlist.html#scrolltooffset) of VirtualizedList\n   */\n  scrollToOffset(params: {animated?: ?boolean, offset: number, ...}) {\n    if (this._listRef) {\n      this._listRef.scrollToOffset(params);\n    }\n  }\n\n  /**\n   * Tells the list an interaction has occurred, which should trigger viewability calculations, e.g.\n   * if `waitForInteractions` is true and the user has not scrolled. This is typically called by\n   * taps on items or by navigation actions.\n   */\n  recordInteraction() {\n    if (this._listRef) {\n      this._listRef.recordInteraction();\n    }\n  }\n\n  /**\n   * Displays the scroll indicators momentarily.\n   *\n   * @platform ios\n   */\n  flashScrollIndicators() {\n    if (this._listRef) {\n      this._listRef.flashScrollIndicators();\n    }\n  }\n\n  /**\n   * Provides a handle to the underlying scroll responder.\n   */\n  getScrollResponder(): ?ScrollResponderType {\n    if (this._listRef) {\n      return this._listRef.getScrollResponder();\n    }\n  }\n\n  /**\n   * Provides a reference to the underlying host component\n   */\n  getNativeScrollRef():\n    | ?React.ElementRef<typeof View>\n    | ?React.ElementRef<ScrollViewNativeComponent> {\n    if (this._listRef) {\n      /* $FlowFixMe[incompatible-return] Suppresses errors found when fixing\n       * TextInput typing */\n      return this._listRef.getScrollRef();\n    }\n  }\n\n  getScrollableNode(): any {\n    if (this._listRef) {\n      return this._listRef.getScrollableNode();\n    }\n  }\n\n  setNativeProps(props: {[string]: mixed, ...}) {\n    if (this._listRef) {\n      this._listRef.setNativeProps(props);\n    }\n  }\n\n  constructor(props: Props<ItemT>) {\n    super(props);\n    this._checkProps(this.props);\n    if (this.props.viewabilityConfigCallbackPairs) {\n      this._virtualizedListPairs = this.props.viewabilityConfigCallbackPairs.map(\n        pair => ({\n          viewabilityConfig: pair.viewabilityConfig,\n          onViewableItemsChanged: this._createOnViewableItemsChanged(\n            pair.onViewableItemsChanged,\n          ),\n        }),\n      );\n    } else if (this.props.onViewableItemsChanged) {\n      this._virtualizedListPairs.push({\n        /* $FlowFixMe[incompatible-call] (>=0.63.0 site=react_native_fb) This\n         * comment suppresses an error found when Flow v0.63 was deployed. To\n         * see the error delete this comment and run Flow. */\n        viewabilityConfig: this.props.viewabilityConfig,\n        onViewableItemsChanged: this._createOnViewableItemsChanged(\n          this.props.onViewableItemsChanged,\n        ),\n      });\n    }\n  }\n\n  componentDidUpdate(prevProps: Props<ItemT>) {\n    invariant(\n      prevProps.numColumns === this.props.numColumns,\n      'Changing numColumns on the fly is not supported. Change the key prop on FlatList when ' +\n        'changing the number of columns to force a fresh render of the component.',\n    );\n    invariant(\n      prevProps.onViewableItemsChanged === this.props.onViewableItemsChanged,\n      'Changing onViewableItemsChanged on the fly is not supported',\n    );\n    invariant(\n      !deepDiffer(prevProps.viewabilityConfig, this.props.viewabilityConfig),\n      'Changing viewabilityConfig on the fly is not supported',\n    );\n    invariant(\n      prevProps.viewabilityConfigCallbackPairs ===\n        this.props.viewabilityConfigCallbackPairs,\n      'Changing viewabilityConfigCallbackPairs on the fly is not supported',\n    );\n\n    this._checkProps(this.props);\n  }\n\n  _listRef: ?React.ElementRef<typeof VirtualizedList>;\n  _virtualizedListPairs: Array<ViewabilityConfigCallbackPair> = [];\n\n  _captureRef = ref => {\n    this._listRef = ref;\n  };\n\n  _checkProps(props: Props<ItemT>) {\n    const {\n      // $FlowFixMe[prop-missing] this prop doesn't exist, is only used for an invariant\n      getItem,\n      // $FlowFixMe[prop-missing] this prop doesn't exist, is only used for an invariant\n      getItemCount,\n      horizontal,\n      columnWrapperStyle,\n      onViewableItemsChanged,\n      viewabilityConfigCallbackPairs,\n    } = props;\n    const numColumns = numColumnsOrDefault(this.props.numColumns);\n    invariant(\n      !getItem && !getItemCount,\n      'FlatList does not support custom data formats.',\n    );\n    if (numColumns > 1) {\n      invariant(!horizontal, 'numColumns does not support horizontal.');\n    } else {\n      invariant(\n        !columnWrapperStyle,\n        'columnWrapperStyle not supported for single column lists',\n      );\n    }\n    invariant(\n      !(onViewableItemsChanged && viewabilityConfigCallbackPairs),\n      'FlatList does not support setting both onViewableItemsChanged and ' +\n        'viewabilityConfigCallbackPairs.',\n    );\n  }\n\n  _getItem = (data: Array<ItemT>, index: number) => {\n    const numColumns = numColumnsOrDefault(this.props.numColumns);\n    if (numColumns > 1) {\n      const ret = [];\n      for (let kk = 0; kk < numColumns; kk++) {\n        const item = data[index * numColumns + kk];\n        if (item != null) {\n          ret.push(item);\n        }\n      }\n      return ret;\n    } else {\n      return data[index];\n    }\n  };\n\n  _getItemCount = (data: ?Array<ItemT>): number => {\n    if (data) {\n      const numColumns = numColumnsOrDefault(this.props.numColumns);\n      return numColumns > 1 ? Math.ceil(data.length / numColumns) : data.length;\n    } else {\n      return 0;\n    }\n  };\n\n  _keyExtractor = (items: ItemT | Array<ItemT>, index: number) => {\n    const numColumns = numColumnsOrDefault(this.props.numColumns);\n    const keyExtractor = this.props.keyExtractor ?? defaultKeyExtractor;\n\n    if (numColumns > 1) {\n      if (Array.isArray(items)) {\n        return items\n          .map((item, kk) =>\n            keyExtractor(((item: $FlowFixMe): ItemT), index * numColumns + kk),\n          )\n          .join(':');\n      } else {\n        invariant(\n          Array.isArray(items),\n          'FlatList: Encountered internal consistency error, expected each item to consist of an ' +\n            'array with 1-%s columns; instead, received a single item.',\n          numColumns,\n        );\n      }\n    } else {\n      // $FlowFixMe[incompatible-call] Can't call keyExtractor with an array\n      return keyExtractor(items, index);\n    }\n  };\n\n  _pushMultiColumnViewable(arr: Array<ViewToken>, v: ViewToken): void {\n    const numColumns = numColumnsOrDefault(this.props.numColumns);\n    const keyExtractor = this.props.keyExtractor ?? defaultKeyExtractor;\n    v.item.forEach((item, ii) => {\n      invariant(v.index != null, 'Missing index!');\n      const index = v.index * numColumns + ii;\n      arr.push({...v, item, key: keyExtractor(item, index), index});\n    });\n  }\n\n  _createOnViewableItemsChanged(\n    onViewableItemsChanged: ?(info: {\n      viewableItems: Array<ViewToken>,\n      changed: Array<ViewToken>,\n      ...\n    }) => void,\n  ) {\n    return (info: {\n      viewableItems: Array<ViewToken>,\n      changed: Array<ViewToken>,\n      ...\n    }) => {\n      const numColumns = numColumnsOrDefault(this.props.numColumns);\n      if (onViewableItemsChanged) {\n        if (numColumns > 1) {\n          const changed = [];\n          const viewableItems = [];\n          info.viewableItems.forEach(v =>\n            this._pushMultiColumnViewable(viewableItems, v),\n          );\n          info.changed.forEach(v => this._pushMultiColumnViewable(changed, v));\n          onViewableItemsChanged({viewableItems, changed});\n        } else {\n          onViewableItemsChanged(info);\n        }\n      }\n    };\n  }\n\n  _renderer = () => {\n    const {ListItemComponent, renderItem, columnWrapperStyle} = this.props;\n    const numColumns = numColumnsOrDefault(this.props.numColumns);\n\n    let virtualizedListRenderKey = ListItemComponent\n      ? 'ListItemComponent'\n      : 'renderItem';\n\n    const renderer = (props): React.Node => {\n      if (ListItemComponent) {\n        // $FlowFixMe[not-a-component] Component isn't valid\n        // $FlowFixMe[incompatible-type-arg] Component isn't valid\n        // $FlowFixMe[incompatible-return] Component isn't valid\n        return <ListItemComponent {...props} />;\n      } else if (renderItem) {\n        // $FlowFixMe[incompatible-call]\n        return renderItem(props);\n      } else {\n        return null;\n      }\n    };\n\n    return {\n      /* $FlowFixMe[invalid-computed-prop] (>=0.111.0 site=react_native_fb)\n       * This comment suppresses an error found when Flow v0.111 was deployed.\n       * To see the error, delete this comment and run Flow. */\n      [virtualizedListRenderKey]: (info: RenderItemProps<ItemT>) => {\n        if (numColumns > 1) {\n          const {item, index} = info;\n          invariant(\n            Array.isArray(item),\n            'Expected array of items with numColumns > 1',\n          );\n          return (\n            <View style={StyleSheet.compose(styles.row, columnWrapperStyle)}>\n              {item.map((it, kk) => {\n                const element = renderer({\n                  item: it,\n                  index: index * numColumns + kk,\n                  separators: info.separators,\n                });\n                return element != null ? (\n                  <React.Fragment key={kk}>{element}</React.Fragment>\n                ) : null;\n              })}\n            </View>\n          );\n        } else {\n          return renderer(info);\n        }\n      },\n    };\n  };\n\n  render(): React.Node {\n    const {\n      numColumns,\n      columnWrapperStyle,\n      removeClippedSubviews: _removeClippedSubviews,\n      ...restProps\n    } = this.props;\n\n    return (\n      <VirtualizedList\n        {...restProps}\n        getItem={this._getItem}\n        getItemCount={this._getItemCount}\n        keyExtractor={this._keyExtractor}\n        ref={this._captureRef}\n        viewabilityConfigCallbackPairs={this._virtualizedListPairs}\n        removeClippedSubviews={removeClippedSubviewsOrDefault(\n          _removeClippedSubviews,\n        )}\n        {...this._renderer()}\n      />\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  row: {flexDirection: 'row'},\n});\n\nmodule.exports = FlatList;\n"]}