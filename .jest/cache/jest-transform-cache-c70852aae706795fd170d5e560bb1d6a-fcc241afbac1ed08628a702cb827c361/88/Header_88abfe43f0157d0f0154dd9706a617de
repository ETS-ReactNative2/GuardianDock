69f810e34465ec237367c9683e1829d5
"use strict";

var _interopRequireDefault2 = require("@babel/runtime/helpers/interopRequireDefault");

var _objectWithoutProperties2 = _interopRequireDefault2(require("@babel/runtime/helpers/objectWithoutProperties"));

var _excluded = ["height", "minHeight", "maxHeight", "backgroundColor", "borderBottomColor", "borderBottomEndRadius", "borderBottomLeftRadius", "borderBottomRightRadius", "borderBottomStartRadius", "borderBottomWidth", "borderColor", "borderEndColor", "borderEndWidth", "borderLeftColor", "borderLeftWidth", "borderRadius", "borderRightColor", "borderRightWidth", "borderStartColor", "borderStartWidth", "borderStyle", "borderTopColor", "borderTopEndRadius", "borderTopLeftRadius", "borderTopRightRadius", "borderTopStartRadius", "borderTopWidth", "borderWidth", "boxShadow", "elevation", "shadowColor", "shadowOffset", "shadowOpacity", "shadowRadius", "opacity", "transform"];
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = Header;

var React = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

var _reactNativeSafeAreaContext = require("react-native-safe-area-context");

var _getDefaultHeaderHeight = _interopRequireDefault(require("./getDefaultHeaderHeight"));

var _HeaderBackground = _interopRequireDefault(require("./HeaderBackground"));

var _HeaderShownContext = _interopRequireDefault(require("./HeaderShownContext"));

var _HeaderTitle = _interopRequireDefault(require("./HeaderTitle"));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

function _getRequireWildcardCache(nodeInterop) {
  if (typeof WeakMap !== "function") return null;
  var cacheBabelInterop = new WeakMap();
  var cacheNodeInterop = new WeakMap();
  return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {
    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
  })(nodeInterop);
}

function _interopRequireWildcard(obj, nodeInterop) {
  if (!nodeInterop && obj && obj.__esModule) {
    return obj;
  }

  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }

  var cache = _getRequireWildcardCache(nodeInterop);

  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }

  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

  for (var key in obj) {
    if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }

  newObj.default = obj;

  if (cache) {
    cache.set(obj, newObj);
  }

  return newObj;
}

var warnIfHeaderStylesDefined = function warnIfHeaderStylesDefined(styles) {
  Object.keys(styles).forEach(function (styleProp) {
    var value = styles[styleProp];

    if (styleProp === 'position' && value === 'absolute') {
      console.warn("position: 'absolute' is not supported on headerStyle. If you would like to render content under the header, use the 'headerTransparent' option.");
    } else if (value !== undefined) {
      console.warn(styleProp + " was given a value of " + value + ", this has no effect on headerStyle.");
    }
  });
};

function Header(props) {
  var insets = (0, _reactNativeSafeAreaContext.useSafeAreaInsets)();
  var frame = (0, _reactNativeSafeAreaContext.useSafeAreaFrame)();
  var isParentHeaderShown = React.useContext(_HeaderShownContext.default);
  var _props$layout = props.layout,
      layout = _props$layout === void 0 ? frame : _props$layout,
      _props$modal = props.modal,
      modal = _props$modal === void 0 ? false : _props$modal,
      title = props.title,
      customTitle = props.headerTitle,
      _props$headerTitleAli = props.headerTitleAlign,
      headerTitleAlign = _props$headerTitleAli === void 0 ? _reactNative.Platform.select({
    ios: 'center',
    default: 'left'
  }) : _props$headerTitleAli,
      headerLeft = props.headerLeft,
      headerLeftLabelVisible = props.headerLeftLabelVisible,
      headerTransparent = props.headerTransparent,
      headerTintColor = props.headerTintColor,
      headerBackground = props.headerBackground,
      headerRight = props.headerRight,
      titleAllowFontScaling = props.headerTitleAllowFontScaling,
      titleStyle = props.headerTitleStyle,
      leftContainerStyle = props.headerLeftContainerStyle,
      rightContainerStyle = props.headerRightContainerStyle,
      titleContainerStyle = props.headerTitleContainerStyle,
      backgroundContainerStyle = props.headerBackgroundContainerStyle,
      customHeaderStyle = props.headerStyle,
      headerShadowVisible = props.headerShadowVisible,
      headerPressColor = props.headerPressColor,
      headerPressOpacity = props.headerPressOpacity,
      _props$headerStatusBa = props.headerStatusBarHeight,
      headerStatusBarHeight = _props$headerStatusBa === void 0 ? isParentHeaderShown ? 0 : insets.top : _props$headerStatusBa;
  var defaultHeight = (0, _getDefaultHeaderHeight.default)(layout, modal, headerStatusBarHeight);

  var _reactNative$StyleShe = _reactNative.StyleSheet.flatten(customHeaderStyle || {}),
      _reactNative$StyleShe2 = _reactNative$StyleShe.height,
      height = _reactNative$StyleShe2 === void 0 ? defaultHeight : _reactNative$StyleShe2,
      minHeight = _reactNative$StyleShe.minHeight,
      maxHeight = _reactNative$StyleShe.maxHeight,
      backgroundColor = _reactNative$StyleShe.backgroundColor,
      borderBottomColor = _reactNative$StyleShe.borderBottomColor,
      borderBottomEndRadius = _reactNative$StyleShe.borderBottomEndRadius,
      borderBottomLeftRadius = _reactNative$StyleShe.borderBottomLeftRadius,
      borderBottomRightRadius = _reactNative$StyleShe.borderBottomRightRadius,
      borderBottomStartRadius = _reactNative$StyleShe.borderBottomStartRadius,
      borderBottomWidth = _reactNative$StyleShe.borderBottomWidth,
      borderColor = _reactNative$StyleShe.borderColor,
      borderEndColor = _reactNative$StyleShe.borderEndColor,
      borderEndWidth = _reactNative$StyleShe.borderEndWidth,
      borderLeftColor = _reactNative$StyleShe.borderLeftColor,
      borderLeftWidth = _reactNative$StyleShe.borderLeftWidth,
      borderRadius = _reactNative$StyleShe.borderRadius,
      borderRightColor = _reactNative$StyleShe.borderRightColor,
      borderRightWidth = _reactNative$StyleShe.borderRightWidth,
      borderStartColor = _reactNative$StyleShe.borderStartColor,
      borderStartWidth = _reactNative$StyleShe.borderStartWidth,
      borderStyle = _reactNative$StyleShe.borderStyle,
      borderTopColor = _reactNative$StyleShe.borderTopColor,
      borderTopEndRadius = _reactNative$StyleShe.borderTopEndRadius,
      borderTopLeftRadius = _reactNative$StyleShe.borderTopLeftRadius,
      borderTopRightRadius = _reactNative$StyleShe.borderTopRightRadius,
      borderTopStartRadius = _reactNative$StyleShe.borderTopStartRadius,
      borderTopWidth = _reactNative$StyleShe.borderTopWidth,
      borderWidth = _reactNative$StyleShe.borderWidth,
      boxShadow = _reactNative$StyleShe.boxShadow,
      elevation = _reactNative$StyleShe.elevation,
      shadowColor = _reactNative$StyleShe.shadowColor,
      shadowOffset = _reactNative$StyleShe.shadowOffset,
      shadowOpacity = _reactNative$StyleShe.shadowOpacity,
      shadowRadius = _reactNative$StyleShe.shadowRadius,
      opacity = _reactNative$StyleShe.opacity,
      transform = _reactNative$StyleShe.transform,
      unsafeStyles = (0, _objectWithoutProperties2.default)(_reactNative$StyleShe, _excluded);

  if (process.env.NODE_ENV !== 'production') {
    warnIfHeaderStylesDefined(unsafeStyles);
  }

  var safeStyles = {
    backgroundColor: backgroundColor,
    borderBottomColor: borderBottomColor,
    borderBottomEndRadius: borderBottomEndRadius,
    borderBottomLeftRadius: borderBottomLeftRadius,
    borderBottomRightRadius: borderBottomRightRadius,
    borderBottomStartRadius: borderBottomStartRadius,
    borderBottomWidth: borderBottomWidth,
    borderColor: borderColor,
    borderEndColor: borderEndColor,
    borderEndWidth: borderEndWidth,
    borderLeftColor: borderLeftColor,
    borderLeftWidth: borderLeftWidth,
    borderRadius: borderRadius,
    borderRightColor: borderRightColor,
    borderRightWidth: borderRightWidth,
    borderStartColor: borderStartColor,
    borderStartWidth: borderStartWidth,
    borderStyle: borderStyle,
    borderTopColor: borderTopColor,
    borderTopEndRadius: borderTopEndRadius,
    borderTopLeftRadius: borderTopLeftRadius,
    borderTopRightRadius: borderTopRightRadius,
    borderTopStartRadius: borderTopStartRadius,
    borderTopWidth: borderTopWidth,
    borderWidth: borderWidth,
    boxShadow: boxShadow,
    elevation: elevation,
    shadowColor: shadowColor,
    shadowOffset: shadowOffset,
    shadowOpacity: shadowOpacity,
    shadowRadius: shadowRadius,
    opacity: opacity,
    transform: transform
  };

  for (var styleProp in safeStyles) {
    if (safeStyles[styleProp] === undefined) {
      delete safeStyles[styleProp];
    }
  }

  var backgroundStyle = [safeStyles, headerShadowVisible === false && {
    elevation: 0,
    shadowOpacity: 0,
    borderBottomWidth: 0
  }];
  var leftButton = headerLeft ? headerLeft({
    tintColor: headerTintColor,
    pressColor: headerPressColor,
    pressOpacity: headerPressOpacity,
    labelVisible: headerLeftLabelVisible
  }) : null;
  var rightButton = headerRight ? headerRight({
    tintColor: headerTintColor,
    pressColor: headerPressColor,
    pressOpacity: headerPressOpacity
  }) : null;
  var headerTitle = typeof customTitle !== 'function' ? function (props) {
    return React.createElement(_HeaderTitle.default, props);
  } : customTitle;
  return React.createElement(React.Fragment, null, React.createElement(_reactNative.Animated.View, {
    pointerEvents: "box-none",
    style: [_reactNative.StyleSheet.absoluteFill, {
      zIndex: 0
    }, backgroundContainerStyle]
  }, headerBackground ? headerBackground({
    style: backgroundStyle
  }) : headerTransparent ? null : React.createElement(_HeaderBackground.default, {
    style: backgroundStyle
  })), React.createElement(_reactNative.Animated.View, {
    pointerEvents: "box-none",
    style: [{
      height: height,
      minHeight: minHeight,
      maxHeight: maxHeight,
      opacity: opacity,
      transform: transform
    }]
  }, React.createElement(_reactNative.View, {
    pointerEvents: "none",
    style: {
      height: headerStatusBarHeight
    }
  }), React.createElement(_reactNative.View, {
    pointerEvents: "box-none",
    style: styles.content
  }, React.createElement(_reactNative.Animated.View, {
    pointerEvents: "box-none",
    style: [styles.left, headerTitleAlign === 'center' && styles.expand, {
      marginStart: insets.left
    }, leftContainerStyle]
  }, leftButton), React.createElement(_reactNative.Animated.View, {
    pointerEvents: "box-none",
    style: [styles.title, {
      maxWidth: headerTitleAlign === 'center' ? layout.width - ((leftButton ? headerLeftLabelVisible !== false ? 80 : 32 : 16) + Math.max(insets.left, insets.right)) * 2 : layout.width - ((leftButton ? 72 : 16) + (rightButton ? 72 : 16) + insets.left - insets.right)
    }, titleContainerStyle]
  }, headerTitle({
    children: title,
    allowFontScaling: titleAllowFontScaling,
    tintColor: headerTintColor,
    style: titleStyle
  })), React.createElement(_reactNative.Animated.View, {
    pointerEvents: "box-none",
    style: [styles.right, styles.expand, {
      marginEnd: insets.right
    }, rightContainerStyle]
  }, rightButton))));
}

var styles = _reactNative.StyleSheet.create({
  content: {
    flex: 1,
    flexDirection: 'row',
    alignItems: 'stretch'
  },
  title: {
    marginHorizontal: 16,
    justifyContent: 'center'
  },
  left: {
    justifyContent: 'center',
    alignItems: 'flex-start'
  },
  right: {
    justifyContent: 'center',
    alignItems: 'flex-end'
  },
  expand: {
    flexGrow: 1,
    flexBasis: 0
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,