8b081be6858d02e7d45dcc86f72ed7b7
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PrivateValueStore = void 0;

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

var PrivateValueStore = (0, _createClass2.default)(function PrivateValueStore() {
  (0, _classCallCheck2.default)(this, PrivateValueStore);

  _defineProperty(this, '', void 0);
});
exports.PrivateValueStore = PrivateValueStore;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,