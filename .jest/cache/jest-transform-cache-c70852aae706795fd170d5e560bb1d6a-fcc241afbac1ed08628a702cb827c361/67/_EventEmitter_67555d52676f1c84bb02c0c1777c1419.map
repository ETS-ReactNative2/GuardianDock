{"version":3,"sources":["_EventEmitter.js"],"names":["invariant","require","sparseFilterPredicate","EventEmitter","subscriber","_subscriber","EventSubscriptionVendor","console","warn","eventType","listener","context","addSubscription","EmitterSubscription","removeAllSubscriptions","subscription","__removeSubscription","emitter","removeSubscription","subscriptions","getSubscriptionsForType","filter","length","args","i","l","apply","remove","module","exports"],"mappings":";;;;;;AAaA;;AAEA;;AAJA,IAAMA,SAAS,GAAGC,OAAO,CAAC,WAAD,CAAzB;;AAMA,IAAMC,qBAAqB,GAAG,SAAxBA,qBAAwB;AAAA,SAAM,IAAN;AAAA,CAA9B;;IAeMC,Y;AAMJ,wBAAYC,UAAZ,EAAoE;AAAA;AAAA,SALpEC,WAKoE,GALX,IAAIC,gCAAJ,EAKW;;AAClE,QAAIF,UAAU,IAAI,IAAlB,EAAwB;AACtBG,MAAAA,OAAO,CAACC,IAAR,CAAa,wDAAb;AACA,WAAKH,WAAL,GAAmBD,UAAnB;AACD;AACF;;;;WAaD,qBACEK,SADF,EAGEC,QAHF,EAIEC,OAJF,EAKqB;AACnB,aAAQ,KAAKN,WAAL,CAAiBO,eAAjB,CACNH,SADM,EAEN,IAAII,4BAAJ,CAAwB,IAAxB,EAA8B,KAAKR,WAAnC,EAAgDK,QAAhD,EAA0DC,OAA1D,CAFM,CAAR;AAID;;;WASD,4BAA+CF,SAA/C,EAAoE;AAClE,WAAKJ,WAAL,CAAiBS,sBAAjB,CAAwCL,SAAxC;AACD;;;WAKD,4BACEM,YADF,EAEQ;AACNR,MAAAA,OAAO,CAACC,IAAR,CACE,uEACE,2DAFJ;;AAIA,WAAKQ,oBAAL,CAA0BD,YAA1B;AACD;;;WAKD,8BACEA,YADF,EAEQ;AACNf,MAAAA,SAAS,CACPe,YAAY,CAACE,OAAb,KAAyB,IADlB,EAEP,+CAFO,CAAT;;AAIA,WAAKZ,WAAL,CAAiBa,kBAAjB,CAAoCH,YAApC;AACD;;;WASD,uBAA0CN,SAA1C,EAAgE;AAC9D,UAAMU,aAAa,GAAG,KAAKd,WAAL,CAAiBe,uBAAjB,CAAyCX,SAAzC,CAAtB;;AACA,aAAOU,aAAa,GAKhBA,aAAa,CAACE,MAAd,CAAqBnB,qBAArB,EAA4CoB,MAL5B,GAMhB,CANJ;AAOD;;;WAgBD,cACEb,SADF,EAGQ;AACN,UAAMU,aAAa,GAAG,KAAKd,WAAL,CAAiBe,uBAAjB,CAAyCX,SAAzC,CAAtB;;AACA,UAAIU,aAAJ,EAAmB;AAAA,0CAHhBI,IAGgB;AAHhBA,UAAAA,IAGgB;AAAA;;AACjB,aAAK,IAAIC,CAAC,GAAG,CAAR,EAAWC,CAAC,GAAGN,aAAa,CAACG,MAAlC,EAA0CE,CAAC,GAAGC,CAA9C,EAAiDD,CAAC,EAAlD,EAAsD;AACpD,cAAMT,YAAY,GAAGI,aAAa,CAACK,CAAD,CAAlC;;AAGA,cAAIT,YAAY,IAAIA,YAAY,CAACL,QAAjC,EAA2C;AACzCK,YAAAA,YAAY,CAACL,QAAb,CAAsBgB,KAAtB,CAA4BX,YAAY,CAACJ,OAAzC,EAAkDY,IAAlD;AACD;AACF;AACF;AACF;;;WAKD,wBACEd,SADF,EAGEC,QAHF,EAIQ;AACNH,MAAAA,OAAO,CAACC,IAAR,CACE,kCAAgCC,SAAhC,iCACE,gEADF,GAEE,yCAHJ;;AAKA,UAAMU,aAAa,GAAG,KAAKd,WAAL,CAAiBe,uBAAjB,CAAyCX,SAAzC,CAAtB;;AACA,UAAIU,aAAJ,EAAmB;AACjB,aAAK,IAAIK,CAAC,GAAG,CAAR,EAAWC,CAAC,GAAGN,aAAa,CAACG,MAAlC,EAA0CE,CAAC,GAAGC,CAA9C,EAAiDD,CAAC,EAAlD,EAAsD;AACpD,cAAMT,YAAY,GAAGI,aAAa,CAACK,CAAD,CAAlC;;AAIA,cAAIT,YAAY,IAAIA,YAAY,CAACL,QAAb,KAA0BA,QAA9C,EAAwD;AACtDK,YAAAA,YAAY,CAACY,MAAb;AACD;AACF;AACF;AACF;;;;;AAGHC,MAAM,CAACC,OAAP,GAAiB1B,YAAjB","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow strict\n * @typecheck\n */\n\nconst invariant = require('invariant');\n\nimport EmitterSubscription from './_EmitterSubscription';\nimport {type EventSubscription} from './EventSubscription';\nimport EventSubscriptionVendor from './_EventSubscriptionVendor';\n\nconst sparseFilterPredicate = () => true;\n\n/**\n * @class EventEmitter\n * @description\n * An EventEmitter is responsible for managing a set of listeners and publishing\n * events to them when it is told that such events happened. In addition to the\n * data for the given event it also sends a event control object which allows\n * the listeners/handlers to prevent the default behavior of the given event.\n *\n * The emitter is designed to be generic enough to support all the different\n * contexts in which one might want to emit events. It is a simple multicast\n * mechanism on top of which extra functionality can be composed. For example, a\n * more advanced emitter may use an EventHolder and EventFactory.\n */\nclass EventEmitter<EventDefinitions: {...}> {\n  _subscriber: EventSubscriptionVendor<EventDefinitions> = new EventSubscriptionVendor<EventDefinitions>();\n\n  /**\n   * @constructor\n   */\n  constructor(subscriber: ?EventSubscriptionVendor<EventDefinitions>) {\n    if (subscriber != null) {\n      console.warn('EventEmitter(...): Constructor argument is deprecated.');\n      this._subscriber = subscriber;\n    }\n  }\n\n  /**\n   * Adds a listener to be invoked when events of the specified type are\n   * emitted. An optional calling context may be provided. The data arguments\n   * emitted will be passed to the listener function.\n   *\n   * @param {string} eventType - Name of the event to listen to\n   * @param {function} listener - Function to invoke when the specified event is\n   *   emitted\n   * @param {*} context - Optional context object to use when invoking the\n   *   listener\n   */\n  addListener<K: $Keys<EventDefinitions>>(\n    eventType: K,\n    // FIXME: listeners should return void instead of mixed to prevent issues\n    listener: (...$ElementType<EventDefinitions, K>) => mixed,\n    context: $FlowFixMe,\n  ): EventSubscription {\n    return (this._subscriber.addSubscription(\n      eventType,\n      new EmitterSubscription(this, this._subscriber, listener, context),\n    ): $FlowFixMe);\n  }\n\n  /**\n   * Removes all of the registered listeners, including those registered as\n   * listener maps.\n   *\n   * @param {?string} eventType - Optional name of the event whose registered\n   *   listeners to remove\n   */\n  removeAllListeners<K: $Keys<EventDefinitions>>(eventType: ?K): void {\n    this._subscriber.removeAllSubscriptions(eventType);\n  }\n\n  /**\n   * @deprecated Use `remove` on the EventSubscription from `addListener`.\n   */\n  removeSubscription<K: $Keys<EventDefinitions>>(\n    subscription: EmitterSubscription<EventDefinitions, K>,\n  ): void {\n    console.warn(\n      'EventEmitter.removeSubscription(...): Method has been deprecated. ' +\n        'Please instead use `remove()` on the subscription itself.',\n    );\n    this.__removeSubscription(subscription);\n  }\n\n  /**\n   * Called by `EmitterSubscription` to bypass the above deprecation warning.\n   */\n  __removeSubscription<K: $Keys<EventDefinitions>>(\n    subscription: EmitterSubscription<EventDefinitions, K>,\n  ): void {\n    invariant(\n      subscription.emitter === this,\n      'Subscription does not belong to this emitter.',\n    );\n    this._subscriber.removeSubscription(subscription);\n  }\n\n  /**\n   * Returns the number of listeners that are currently registered for the given\n   * event.\n   *\n   * @param {string} eventType - Name of the event to query\n   * @returns {number}\n   */\n  listenerCount<K: $Keys<EventDefinitions>>(eventType: K): number {\n    const subscriptions = this._subscriber.getSubscriptionsForType(eventType);\n    return subscriptions\n      ? // We filter out missing entries because the array is sparse.\n        // \"callbackfn is called only for elements of the array which actually\n        // exist; it is not called for missing elements of the array.\"\n        // https://www.ecma-international.org/ecma-262/9.0/index.html#sec-array.prototype.filter\n        subscriptions.filter(sparseFilterPredicate).length\n      : 0;\n  }\n\n  /**\n   * Emits an event of the given type with the given data. All handlers of that\n   * particular type will be notified.\n   *\n   * @param {string} eventType - Name of the event to emit\n   * @param {...*} Arbitrary arguments to be passed to each registered listener\n   *\n   * @example\n   *   emitter.addListener('someEvent', function(message) {\n   *     console.log(message);\n   *   });\n   *\n   *   emitter.emit('someEvent', 'abc'); // logs 'abc'\n   */\n  emit<K: $Keys<EventDefinitions>>(\n    eventType: K,\n    ...args: $ElementType<EventDefinitions, K>\n  ): void {\n    const subscriptions = this._subscriber.getSubscriptionsForType(eventType);\n    if (subscriptions) {\n      for (let i = 0, l = subscriptions.length; i < l; i++) {\n        const subscription = subscriptions[i];\n\n        // The subscription may have been removed during this event loop.\n        if (subscription && subscription.listener) {\n          subscription.listener.apply(subscription.context, args);\n        }\n      }\n    }\n  }\n\n  /**\n   * @deprecated Use `remove` on the EventSubscription from `addListener`.\n   */\n  removeListener<K: $Keys<EventDefinitions>>(\n    eventType: K,\n    // FIXME: listeners should return void instead of mixed to prevent issues\n    listener: (...$ElementType<EventDefinitions, K>) => mixed,\n  ): void {\n    console.warn(\n      `EventEmitter.removeListener('${eventType}', ...): Method has been ` +\n        'deprecated. Please instead use `remove()` on the subscription ' +\n        'returned by `EventEmitter.addListener`.',\n    );\n    const subscriptions = this._subscriber.getSubscriptionsForType(eventType);\n    if (subscriptions) {\n      for (let i = 0, l = subscriptions.length; i < l; i++) {\n        const subscription = subscriptions[i];\n\n        // The subscription may have been removed during this event loop.\n        // its listener matches the listener in method parameters\n        if (subscription && subscription.listener === listener) {\n          subscription.remove();\n        }\n      }\n    }\n  }\n}\n\nmodule.exports = EventEmitter;\n"]}