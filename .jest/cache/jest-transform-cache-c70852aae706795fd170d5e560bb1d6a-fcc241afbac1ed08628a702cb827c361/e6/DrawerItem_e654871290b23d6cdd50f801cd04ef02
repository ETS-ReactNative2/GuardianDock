0d76a2ab795153dce0bdea27ab325c8d
"use strict";

var _interopRequireDefault2 = require("@babel/runtime/helpers/interopRequireDefault");

var _objectWithoutProperties2 = _interopRequireDefault2(require("@babel/runtime/helpers/objectWithoutProperties"));

var _excluded = ["children", "style", "onPress", "onLongPress", "to", "accessibilityRole"],
    _excluded2 = ["icon", "label", "labelStyle", "to", "focused", "allowFontScaling", "activeTintColor", "inactiveTintColor", "activeBackgroundColor", "inactiveBackgroundColor", "style", "onPress", "pressColor", "pressOpacity"];
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = DrawerItem;

var _elements = require("@react-navigation/elements");

var _native = require("@react-navigation/native");

var _color = _interopRequireDefault(require("color"));

var React = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

function _getRequireWildcardCache(nodeInterop) {
  if (typeof WeakMap !== "function") return null;
  var cacheBabelInterop = new WeakMap();
  var cacheNodeInterop = new WeakMap();
  return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {
    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
  })(nodeInterop);
}

function _interopRequireWildcard(obj, nodeInterop) {
  if (!nodeInterop && obj && obj.__esModule) {
    return obj;
  }

  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }

  var cache = _getRequireWildcardCache(nodeInterop);

  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }

  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

  for (var key in obj) {
    if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }

  newObj.default = obj;

  if (cache) {
    cache.set(obj, newObj);
  }

  return newObj;
}

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

var LinkPressable = function LinkPressable(_ref) {
  var children = _ref.children,
      style = _ref.style,
      _onPress = _ref.onPress,
      onLongPress = _ref.onLongPress,
      to = _ref.to,
      accessibilityRole = _ref.accessibilityRole,
      rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);

  if (_reactNative.Platform.OS === 'web' && to) {
    return React.createElement(_native.Link, _extends({}, rest, {
      to: to,
      style: [styles.button, style],
      onPress: function onPress(e) {
        if (!(e.metaKey || e.altKey || e.ctrlKey || e.shiftKey) && (e.button == null || e.button === 0)) {
          e.preventDefault();
          _onPress === null || _onPress === void 0 ? void 0 : _onPress(e);
        }
      },
      onLongPress: onLongPress !== null && onLongPress !== void 0 ? onLongPress : undefined
    }), children);
  } else {
    return React.createElement(_elements.PlatformPressable, _extends({}, rest, {
      accessibilityRole: accessibilityRole,
      onPress: _onPress
    }), React.createElement(_reactNative.View, {
      style: style
    }, children));
  }
};

function DrawerItem(props) {
  var _ref2 = (0, _native.useTheme)(),
      colors = _ref2.colors;

  var icon = props.icon,
      label = props.label,
      labelStyle = props.labelStyle,
      to = props.to,
      _props$focused = props.focused,
      focused = _props$focused === void 0 ? false : _props$focused,
      allowFontScaling = props.allowFontScaling,
      _props$activeTintColo = props.activeTintColor,
      activeTintColor = _props$activeTintColo === void 0 ? colors.primary : _props$activeTintColo,
      _props$inactiveTintCo = props.inactiveTintColor,
      inactiveTintColor = _props$inactiveTintCo === void 0 ? (0, _color.default)(colors.text).alpha(0.68).rgb().string() : _props$inactiveTintCo,
      _props$activeBackgrou = props.activeBackgroundColor,
      activeBackgroundColor = _props$activeBackgrou === void 0 ? (0, _color.default)(activeTintColor).alpha(0.12).rgb().string() : _props$activeBackgrou,
      _props$inactiveBackgr = props.inactiveBackgroundColor,
      inactiveBackgroundColor = _props$inactiveBackgr === void 0 ? 'transparent' : _props$inactiveBackgr,
      style = props.style,
      onPress = props.onPress,
      pressColor = props.pressColor,
      pressOpacity = props.pressOpacity,
      rest = (0, _objectWithoutProperties2.default)(props, _excluded2);

  var _reactNative$StyleShe = _reactNative.StyleSheet.flatten(style || {}),
      _reactNative$StyleShe2 = _reactNative$StyleShe.borderRadius,
      borderRadius = _reactNative$StyleShe2 === void 0 ? 4 : _reactNative$StyleShe2;

  var color = focused ? activeTintColor : inactiveTintColor;
  var backgroundColor = focused ? activeBackgroundColor : inactiveBackgroundColor;
  var iconNode = icon ? icon({
    size: 24,
    focused: focused,
    color: color
  }) : null;
  return React.createElement(_reactNative.View, _extends({
    collapsable: false
  }, rest, {
    style: [styles.container, {
      borderRadius: borderRadius,
      backgroundColor: backgroundColor
    }, style]
  }), React.createElement(LinkPressable, {
    onPress: onPress,
    style: [styles.wrapper, {
      borderRadius: borderRadius
    }],
    accessibilityRole: "button",
    accessibilityState: {
      selected: focused
    },
    pressColor: pressColor,
    pressOpacity: pressOpacity,
    to: to
  }, React.createElement(React.Fragment, null, iconNode, React.createElement(_reactNative.View, {
    style: [styles.label, {
      marginLeft: iconNode ? 32 : 0,
      marginVertical: 5
    }]
  }, typeof label === 'string' ? React.createElement(_reactNative.Text, {
    numberOfLines: 1,
    allowFontScaling: allowFontScaling,
    style: [{
      color: color,
      fontWeight: '500'
    }, labelStyle]
  }, label) : label({
    color: color,
    focused: focused
  })))));
}

var styles = _reactNative.StyleSheet.create({
  container: {
    marginHorizontal: 10,
    marginVertical: 4,
    overflow: 'hidden'
  },
  wrapper: {
    flexDirection: 'row',
    alignItems: 'center',
    padding: 8
  },
  label: {
    marginRight: 32,
    flex: 1
  },
  button: {
    display: 'flex'
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,