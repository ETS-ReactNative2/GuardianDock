{"version":3,"mappings":";;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiFA,IAAMA,aAAa,GAAG,SAAhBA,aAAgB,OAchB;AAAA,MAbJC,QAaI,QAbJA,QAaI;AAAA,MAZJC,KAYI,QAZJA,KAYI;AAAA,MAXJC,QAWI,QAXJA,OAWI;AAAA,MAVJC,WAUI,QAVJA,WAUI;AAAA,MATJC,EASI,QATJA,EASI;AAAA,MARJC,iBAQI,QARJA,iBAQI;AAAA,MAPDC,IAOC;;AACJ,MAAIC,sBAASC,EAATD,KAAgB,KAAhBA,IAAyBH,EAA7B,EAAiC;AAG/B,WACEK,oBAACC,YAAD,eACMJ,IADN;AAEEF,QAAE,EAAEA,EAFN;AAGEH,WAAK,EAAE,CAACU,MAAM,CAACC,MAAR,EAAgBX,KAAhB,CAHT;AAIEC,aAAO,EAAGW,kBAAD,EAAY;AACnB,YACE,EAAEA,CAAC,CAACC,OAAFD,IAAaA,CAAC,CAACE,MAAfF,IAAyBA,CAAC,CAACG,OAA3BH,IAAsCA,CAAC,CAACI,QAA1C,MACCJ,CAAC,CAACD,MAAFC,IAAY,IAAZA,IAAoBA,CAAC,CAACD,MAAFC,KAAa,CADlC,CADF,EAGE;AACAA,WAAC,CAACK,cAAFL;AACAX,kBAAO,SAAPA,YAAO,WAAPA,oBAAO,CAAGW,CAAH,CAAPX;AACD;AAXL;AAaEC,iBAAW,EAAEA,WAAF,SAAEA,eAAF,WAAEA,iBAAegB;AAb9B,QAeGnB,QAfH,CADF;AAHF,SAsBO;AACL,WACES,oBAACW,2BAAD,eACMd,IADN;AAEED,uBAAiB,EAAEA,iBAFrB;AAGEH,aAAO,EAAEA;AAHX,QAKEO,oBAACY,iBAAD;AAAMpB,WAAK,EAAEA;AAAb,OAAqBD,QAArB,CALF,CADF;AASD;AA/CH;;AAqDe,SAASsB,UAAT,CAAoBC,KAApB,EAAkC;AAC/C,cAAmB,uBAAnB;AAAA,MAAQC,MAAR,SAAQA,MAAR;;AAEA,MACEC,IADF,GAgBIF,KAhBJ,CACEE,IADF;AAAA,MAEEC,KAFF,GAgBIH,KAhBJ,CAEEG,KAFF;AAAA,MAGEC,UAHF,GAgBIJ,KAhBJ,CAGEI,UAHF;AAAA,MAIEvB,EAJF,GAgBImB,KAhBJ,CAIEnB,EAJF;AAAA,uBAgBImB,KAhBJ,CAKEK,OALF;AAAA,MAKEA,OALF,+BAKY,KALZ;AAAA,MAMEC,gBANF,GAgBIN,KAhBJ,CAMEM,gBANF;AAAA,8BAgBIN,KAhBJ,CAOEO,eAPF;AAAA,MAOEA,eAPF,sCAOoBN,MAAM,CAACO,OAP3B;AAAA,8BAgBIR,KAhBJ,CAQES,iBARF;AAAA,MAQEA,iBARF,sCAQsB,oBAAMR,MAAM,CAACS,IAAb,EAAmBC,KAAnB,CAAyB,IAAzB,EAA+BC,GAA/B,GAAqCC,MAArC,EARtB;AAAA,8BAgBIb,KAhBJ,CASEc,qBATF;AAAA,MASEA,qBATF,sCAS0B,oBAAMP,eAAN,EAAuBI,KAAvB,CAA6B,IAA7B,EAAmCC,GAAnC,GAAyCC,MAAzC,EAT1B;AAAA,8BAgBIb,KAhBJ,CAUEe,uBAVF;AAAA,MAUEA,uBAVF,sCAU4B,aAV5B;AAAA,MAWErC,KAXF,GAgBIsB,KAhBJ,CAWEtB,KAXF;AAAA,MAYEC,OAZF,GAgBIqB,KAhBJ,CAYErB,OAZF;AAAA,MAaEqC,UAbF,GAgBIhB,KAhBJ,CAaEgB,UAbF;AAAA,MAcEC,YAdF,GAgBIjB,KAhBJ,CAcEiB,YAdF;AAAA,MAeKlC,IAfL,0CAgBIiB,KAhBJ;;AAkBA,8BAA6BkB,wBAAWC,OAAXD,CAAmBxC,KAAK,IAAI,EAA5BwC,CAA7B;AAAA,qDAAQE,YAAR;AAAA,MAAQA,YAAR,uCAAuB,CAAvB;;AACA,MAAMC,KAAK,GAAGhB,OAAO,GAAGE,eAAH,GAAqBE,iBAA1C;AACA,MAAMa,eAAe,GAAGjB,OAAO,GAC3BS,qBAD2B,GAE3BC,uBAFJ;AAIA,MAAMQ,QAAQ,GAAGrB,IAAI,GAAGA,IAAI,CAAC;AAAEsB,QAAI,EAAE,EAAR;AAAYnB,WAAZ,EAAYA,OAAZ;AAAqBgB;AAArB,GAAD,CAAP,GAAwC,IAA7D;AAEA,SACEnC,oBAACY,iBAAD;AACE2B,eAAW,EAAE;AADf,KAEM1C,IAFN;AAGEL,SAAK,EAAE,CAACU,MAAM,CAACsC,SAAR,EAAmB;AAAEN,kBAAF,EAAEA,YAAF;AAAgBE;AAAhB,KAAnB,EAAsD5C,KAAtD;AAHT,MAKEQ,oBAACV,aAAD;AACEG,WAAO,EAAEA,OADX;AAEED,SAAK,EAAE,CAACU,MAAM,CAACuC,OAAR,EAAiB;AAAEP;AAAF,KAAjB,CAFT;AAGEtC,qBAAiB,EAAC,QAHpB;AAIE8C,sBAAkB,EAAE;AAAEC,cAAQ,EAAExB;AAAZ,KAJtB;AAKEW,cAAU,EAAEA,UALd;AAMEC,gBAAY,EAAEA,YANhB;AAOEpC,MAAE,EAAEA;AAPN,KASEK,oBAACA,KAAD,CAAO4C,QAAP,QACGP,QADH,EAEErC,oBAACY,iBAAD;AACEpB,SAAK,EAAE,CACLU,MAAM,CAACe,KADF,EAEL;AAAE4B,gBAAU,EAAER,QAAQ,GAAG,EAAH,GAAQ,CAA9B;AAAiCS,oBAAc,EAAE;AAAjD,KAFK;AADT,KAMG,OAAO7B,KAAP,KAAiB,QAAjB,GACCjB,oBAACY,iBAAD;AACEmC,iBAAa,EAAE,CADjB;AAEE3B,oBAAgB,EAAEA,gBAFpB;AAGE5B,SAAK,EAAE,CACL;AACE2C,WADF,EACEA,KADF;AAEEa,gBAAU,EAAE;AAFd,KADK,EAKL9B,UALK;AAHT,KAWGD,KAXH,CADD,GAeCA,KAAK,CAAC;AAAEkB,SAAF,EAAEA,KAAF;AAAShB;AAAT,GAAD,CArBT,CAFF,CATF,CALF,CADF;AA6CD;;AAED,IAAMjB,MAAM,GAAG8B,wBAAWiB,MAAXjB,CAAkB;AAC/BQ,WAAS,EAAE;AACTU,oBAAgB,EAAE,EADT;AAETJ,kBAAc,EAAE,CAFP;AAGTK,YAAQ,EAAE;AAHD,GADoB;AAM/BV,SAAO,EAAE;AACPW,iBAAa,EAAE,KADR;AAEPC,cAAU,EAAE,QAFL;AAGPC,WAAO,EAAE;AAHF,GANsB;AAW/BrC,OAAK,EAAE;AACLsC,eAAW,EAAE,EADR;AAELC,QAAI,EAAE;AAFD,GAXwB;AAe/BrD,QAAM,EAAE;AACNsD,WAAO,EAAE;AADH;AAfuB,CAAlBzB,CAAf","names":["LinkPressable","children","style","onPress","onLongPress","to","accessibilityRole","rest","Platform","OS","React","_native","styles","button","e","metaKey","altKey","ctrlKey","shiftKey","preventDefault","undefined","_elements","_reactNative","DrawerItem","props","colors","icon","label","labelStyle","focused","allowFontScaling","activeTintColor","primary","inactiveTintColor","text","alpha","rgb","string","activeBackgroundColor","inactiveBackgroundColor","pressColor","pressOpacity","StyleSheet","flatten","borderRadius","color","backgroundColor","iconNode","size","collapsable","container","wrapper","accessibilityState","selected","Fragment","marginLeft","marginVertical","numberOfLines","fontWeight","create","marginHorizontal","overflow","flexDirection","alignItems","padding","marginRight","flex","display"],"sources":["DrawerItem.tsx"],"sourcesContent":["import { PlatformPressable } from '@react-navigation/elements';\nimport { Link, useTheme } from '@react-navigation/native';\nimport Color from 'color';\nimport * as React from 'react';\nimport {\n  Platform,\n  StyleProp,\n  StyleSheet,\n  Text,\n  TextStyle,\n  View,\n  ViewStyle,\n} from 'react-native';\n\ntype Props = {\n  /**\n   * The label text of the item.\n   */\n  label:\n    | string\n    | ((props: { focused: boolean; color: string }) => React.ReactNode);\n  /**\n   * Icon to display for the `DrawerItem`.\n   */\n  icon?: (props: {\n    focused: boolean;\n    size: number;\n    color: string;\n  }) => React.ReactNode;\n  /**\n   * URL to use for the link to the tab.\n   */\n  to?: string;\n  /**\n   * Whether to highlight the drawer item as active.\n   */\n  focused?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress: () => void;\n  /**\n   * Color for the icon and label when the item is active.\n   */\n  activeTintColor?: string;\n  /**\n   * Color for the icon and label when the item is inactive.\n   */\n  inactiveTintColor?: string;\n  /**\n   * Background color for item when its active.\n   */\n  activeBackgroundColor?: string;\n  /**\n   * Background color for item when its inactive.\n   */\n  inactiveBackgroundColor?: string;\n  /**\n   * Color of the touchable effect on press.\n   * Only supported on Android.\n   *\n   * @platform android\n   */\n  pressColor?: string;\n  /**\n   * Opacity of the touchable effect on press.\n   * Only supported on iOS.\n   *\n   * @platform ios\n   */\n  pressOpacity?: number;\n  /**\n   * Style object for the label element.\n   */\n  labelStyle?: StyleProp<TextStyle>;\n  /**\n   * Style object for the wrapper element.\n   */\n  style?: StyleProp<ViewStyle>;\n  /**\n   * Whether label font should scale to respect Text Size accessibility settings.\n   */\n  allowFontScaling?: boolean;\n};\n\nconst LinkPressable = ({\n  children,\n  style,\n  onPress,\n  onLongPress,\n  to,\n  accessibilityRole,\n  ...rest\n}: Omit<React.ComponentProps<typeof PlatformPressable>, 'style'> & {\n  style: StyleProp<ViewStyle>;\n} & {\n  to?: string;\n  children: React.ReactNode;\n  onPress?: () => void;\n}) => {\n  if (Platform.OS === 'web' && to) {\n    // React Native Web doesn't forward `onClick` if we use `TouchableWithoutFeedback`.\n    // We need to use `onClick` to be able to prevent default browser handling of links.\n    return (\n      <Link\n        {...rest}\n        to={to}\n        style={[styles.button, style]}\n        onPress={(e: any) => {\n          if (\n            !(e.metaKey || e.altKey || e.ctrlKey || e.shiftKey) && // ignore clicks with modifier keys\n            (e.button == null || e.button === 0) // ignore everything but left clicks\n          ) {\n            e.preventDefault();\n            onPress?.(e);\n          }\n        }}\n        onLongPress={onLongPress ?? undefined}\n      >\n        {children}\n      </Link>\n    );\n  } else {\n    return (\n      <PlatformPressable\n        {...rest}\n        accessibilityRole={accessibilityRole}\n        onPress={onPress}\n      >\n        <View style={style}>{children}</View>\n      </PlatformPressable>\n    );\n  }\n};\n\n/**\n * A component used to show an action item with an icon and a label in a navigation drawer.\n */\nexport default function DrawerItem(props: Props) {\n  const { colors } = useTheme();\n\n  const {\n    icon,\n    label,\n    labelStyle,\n    to,\n    focused = false,\n    allowFontScaling,\n    activeTintColor = colors.primary,\n    inactiveTintColor = Color(colors.text).alpha(0.68).rgb().string(),\n    activeBackgroundColor = Color(activeTintColor).alpha(0.12).rgb().string(),\n    inactiveBackgroundColor = 'transparent',\n    style,\n    onPress,\n    pressColor,\n    pressOpacity,\n    ...rest\n  } = props;\n\n  const { borderRadius = 4 } = StyleSheet.flatten(style || {});\n  const color = focused ? activeTintColor : inactiveTintColor;\n  const backgroundColor = focused\n    ? activeBackgroundColor\n    : inactiveBackgroundColor;\n\n  const iconNode = icon ? icon({ size: 24, focused, color }) : null;\n\n  return (\n    <View\n      collapsable={false}\n      {...rest}\n      style={[styles.container, { borderRadius, backgroundColor }, style]}\n    >\n      <LinkPressable\n        onPress={onPress}\n        style={[styles.wrapper, { borderRadius }]}\n        accessibilityRole=\"button\"\n        accessibilityState={{ selected: focused }}\n        pressColor={pressColor}\n        pressOpacity={pressOpacity}\n        to={to}\n      >\n        <React.Fragment>\n          {iconNode}\n          <View\n            style={[\n              styles.label,\n              { marginLeft: iconNode ? 32 : 0, marginVertical: 5 },\n            ]}\n          >\n            {typeof label === 'string' ? (\n              <Text\n                numberOfLines={1}\n                allowFontScaling={allowFontScaling}\n                style={[\n                  {\n                    color,\n                    fontWeight: '500',\n                  },\n                  labelStyle,\n                ]}\n              >\n                {label}\n              </Text>\n            ) : (\n              label({ color, focused })\n            )}\n          </View>\n        </React.Fragment>\n      </LinkPressable>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    marginHorizontal: 10,\n    marginVertical: 4,\n    overflow: 'hidden',\n  },\n  wrapper: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    padding: 8,\n  },\n  label: {\n    marginRight: 32,\n    flex: 1,\n  },\n  button: {\n    display: 'flex',\n  },\n});\n"]}