{"version":3,"sources":["TouchableWithoutFeedback.js"],"names":["PASSTHROUGH_PROPS","TouchableWithoutFeedback","state","pressability","Pressability","createPressabilityConfig","props","element","React","Children","only","children","__DEV__","type","View","push","hitSlop","getEventHandlers","onBlur","onFocus","eventHandlersWithoutBlurAndFocus","elementProps","accessible","accessibilityState","disabled","focusable","onPress","undefined","prop","cloneElement","configure","reset","Component","cancelable","rejectResponderTermination","delayLongPress","delayPressIn","delayPressOut","minPressDuration","pressRectOffset","pressRetentionOffset","android_disableSound","touchSoundDisabled","onLongPress","onPressIn","onPressOut","displayName","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\nimport Pressability, {\n  type PressabilityConfig,\n} from '../../Pressability/Pressability';\nimport {PressabilityDebugView} from '../../Pressability/PressabilityDebug';\nimport type {\n  AccessibilityActionEvent,\n  AccessibilityActionInfo,\n  AccessibilityRole,\n  AccessibilityState,\n  AccessibilityValue,\n} from '../../Components/View/ViewAccessibility';\nimport type {EdgeInsetsProp} from '../../StyleSheet/EdgeInsetsPropType';\nimport type {\n  BlurEvent,\n  FocusEvent,\n  LayoutEvent,\n  PressEvent,\n} from '../../Types/CoreEventTypes';\nimport View from '../../Components/View/View';\nimport * as React from 'react';\n\ntype Props = $ReadOnly<{|\n  accessibilityActions?: ?$ReadOnlyArray<AccessibilityActionInfo>,\n  accessibilityElementsHidden?: ?boolean,\n  accessibilityHint?: ?Stringish,\n  accessibilityIgnoresInvertColors?: ?boolean,\n  accessibilityLabel?: ?Stringish,\n  accessibilityLiveRegion?: ?('none' | 'polite' | 'assertive'),\n  accessibilityRole?: ?AccessibilityRole,\n  accessibilityState?: ?AccessibilityState,\n  accessibilityValue?: ?AccessibilityValue,\n  accessibilityViewIsModal?: ?boolean,\n  accessible?: ?boolean,\n  children?: ?React.Node,\n  delayLongPress?: ?number,\n  delayPressIn?: ?number,\n  delayPressOut?: ?number,\n  disabled?: ?boolean,\n  focusable?: ?boolean,\n  hitSlop?: ?EdgeInsetsProp,\n  importantForAccessibility?: ?('auto' | 'yes' | 'no' | 'no-hide-descendants'),\n  nativeID?: ?string,\n  onAccessibilityAction?: ?(event: AccessibilityActionEvent) => mixed,\n  onBlur?: ?(event: BlurEvent) => mixed,\n  onFocus?: ?(event: FocusEvent) => mixed,\n  onLayout?: ?(event: LayoutEvent) => mixed,\n  onLongPress?: ?(event: PressEvent) => mixed,\n  onPress?: ?(event: PressEvent) => mixed,\n  onPressIn?: ?(event: PressEvent) => mixed,\n  onPressOut?: ?(event: PressEvent) => mixed,\n  pressRetentionOffset?: ?EdgeInsetsProp,\n  rejectResponderTermination?: ?boolean,\n  testID?: ?string,\n  touchSoundDisabled?: ?boolean,\n|}>;\n\ntype State = $ReadOnly<{|\n  pressability: Pressability,\n|}>;\n\nconst PASSTHROUGH_PROPS = [\n  'accessibilityActions',\n  'accessibilityElementsHidden',\n  'accessibilityHint',\n  'accessibilityIgnoresInvertColors',\n  'accessibilityLabel',\n  'accessibilityLiveRegion',\n  'accessibilityRole',\n  'accessibilityValue',\n  'accessibilityViewIsModal',\n  'hitSlop',\n  'importantForAccessibility',\n  'nativeID',\n  'onAccessibilityAction',\n  'onBlur',\n  'onFocus',\n  'onLayout',\n  'testID',\n];\n\nclass TouchableWithoutFeedback extends React.Component<Props, State> {\n  state: State = {\n    pressability: new Pressability(createPressabilityConfig(this.props)),\n  };\n\n  render(): React.Node {\n    const element = React.Children.only(this.props.children);\n    const children = [element.props.children];\n    if (__DEV__) {\n      if (element.type === View) {\n        children.push(\n          <PressabilityDebugView color=\"red\" hitSlop={this.props.hitSlop} />,\n        );\n      }\n    }\n\n    // BACKWARD-COMPATIBILITY: Focus and blur events were never supported before\n    // adopting `Pressability`, so preserve that behavior.\n    const {\n      onBlur,\n      onFocus,\n      ...eventHandlersWithoutBlurAndFocus\n    } = this.state.pressability.getEventHandlers();\n\n    const elementProps: {[string]: mixed, ...} = {\n      ...eventHandlersWithoutBlurAndFocus,\n      accessible: this.props.accessible !== false,\n      accessibilityState:\n        this.props.disabled != null\n          ? {\n              ...this.props.accessibilityState,\n              disabled: this.props.disabled,\n            }\n          : this.props.accessibilityState,\n      focusable:\n        this.props.focusable !== false && this.props.onPress !== undefined,\n    };\n    for (const prop of PASSTHROUGH_PROPS) {\n      if (this.props[prop] !== undefined) {\n        elementProps[prop] = this.props[prop];\n      }\n    }\n\n    return React.cloneElement(element, elementProps, ...children);\n  }\n\n  componentDidUpdate(): void {\n    this.state.pressability.configure(createPressabilityConfig(this.props));\n  }\n\n  componentWillUnmount(): void {\n    this.state.pressability.reset();\n  }\n}\n\nfunction createPressabilityConfig(props: Props): PressabilityConfig {\n  return {\n    cancelable: !props.rejectResponderTermination,\n    disabled:\n      props.disabled !== null\n        ? props.disabled\n        : props.accessibilityState?.disabled,\n    hitSlop: props.hitSlop,\n    delayLongPress: props.delayLongPress,\n    delayPressIn: props.delayPressIn,\n    delayPressOut: props.delayPressOut,\n    minPressDuration: 0,\n    pressRectOffset: props.pressRetentionOffset,\n    android_disableSound: props.touchSoundDisabled,\n    onBlur: props.onBlur,\n    onFocus: props.onFocus,\n    onLongPress: props.onLongPress,\n    onPress: props.onPress,\n    onPressIn: props.onPressIn,\n    onPressOut: props.onPressOut,\n  };\n}\n\nTouchableWithoutFeedback.displayName = 'TouchableWithoutFeedback';\n\nmodule.exports = TouchableWithoutFeedback;\n"]}