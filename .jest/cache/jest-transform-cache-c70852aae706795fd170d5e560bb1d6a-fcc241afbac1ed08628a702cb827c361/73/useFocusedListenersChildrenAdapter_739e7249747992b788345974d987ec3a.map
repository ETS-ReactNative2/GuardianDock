{"version":3,"mappings":";;;;;;;;;;;;;AACA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAce,SAASA,kCAAT,OAGH;AAAA,MAFVC,UAEU,QAFVA,UAEU;AAAA,MADVC,gBACU,QADVA,gBACU;;AACV,0BAAwBC,KAAK,CAACC,UAAND,CAAiBE,iCAAjBF,CAAxB;AAAA,MAAQG,WAAR,qBAAQA,WAAR;;AAEA,MAAMC,QAAQ,GAAGJ,KAAK,CAACK,WAANL,CACdM,kBAAD,EAA8C;AAC5C,QAAIR,UAAU,CAACS,SAAXT,EAAJ,EAA4B;AAC1B,2DAAuBC,gBAAvB,wCAAyC;AAAA,YAA9BK,SAA8B;;AACvC,yBAA4BA,SAAQ,CAACE,QAAD,CAApC;AAAA,YAAQE,OAAR,cAAQA,OAAR;AAAA,YAAiBC,MAAjB,cAAiBA,MAAjB;;AAEA,YAAID,OAAJ,EAAa;AACX,iBAAO;AAAEA,mBAAF,EAAEA,OAAF;AAAWC;AAAX,WAAP;AACD;AACF;;AAED,aAAO;AAAED,eAAO,EAAE,IAAX;AAAiBC,cAAM,EAAEH,QAAQ,CAACR,UAAD;AAAjC,OAAP;AATF,WAUO;AACL,aAAO;AAAEU,eAAO,EAAE,KAAX;AAAkBC,cAAM,EAAE;AAA1B,OAAP;AACD;AAdY,KAgBf,CAACV,gBAAD,EAAmBD,UAAnB,CAhBeE,CAAjB;AAmBAA,OAAK,CAACU,SAANV,CACE;AAAA,WAAMG,WAAN,SAAMA,eAAN,WAAMA,GAAN,MAAMA,cAAW,CAAG,OAAH,EAAYC,QAAZ,CAAjB;AAAA,GADFJ,EAEE,CAACG,WAAD,EAAcC,QAAd,CAFFJ;AAID","names":["useFocusedListenersChildrenAdapter","navigation","focusedListeners","React","useContext","NavigationBuilderContext","addListener","listener","useCallback","callback","isFocused","handled","result","useEffect"],"sources":["useFocusedListenersChildrenAdapter.tsx"],"sourcesContent":["import type { ParamListBase } from '@react-navigation/routers';\nimport * as React from 'react';\n\nimport NavigationBuilderContext, {\n  FocusedNavigationCallback,\n  FocusedNavigationListener,\n} from './NavigationBuilderContext';\nimport type { NavigationHelpers } from './types';\n\ntype Options = {\n  navigation: NavigationHelpers<ParamListBase>;\n  focusedListeners: FocusedNavigationListener[];\n};\n\n/**\n * Hook for passing focus callback to children\n */\nexport default function useFocusedListenersChildrenAdapter({\n  navigation,\n  focusedListeners,\n}: Options) {\n  const { addListener } = React.useContext(NavigationBuilderContext);\n\n  const listener = React.useCallback(\n    (callback: FocusedNavigationCallback<any>) => {\n      if (navigation.isFocused()) {\n        for (const listener of focusedListeners) {\n          const { handled, result } = listener(callback);\n\n          if (handled) {\n            return { handled, result };\n          }\n        }\n\n        return { handled: true, result: callback(navigation) };\n      } else {\n        return { handled: false, result: null };\n      }\n    },\n    [focusedListeners, navigation]\n  );\n\n  React.useEffect(\n    () => addListener?.('focus', listener),\n    [addListener, listener]\n  );\n}\n"]}