{"version":3,"mappings":"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","names":["BLUR_ANIMATION_DURATION","FOCUS_ANIMATION_DURATION","TextInput","_args","_defineProperty","props","value","undefined","defaultValue","labeled","Animated","Value","validInputValue","error","focused","placeholder","labelLayout","measured","width","height","leftLayout","rightLayout","timer","clearTimeout","setTimeout","setState","scale","theme","animation","timing","state","toValue","duration","useNativeDriver","start","event","nativeEvent","layout","args","disabled","editable","onFocus","onBlur","onChangeText","e","root","_this$root","focus","componentDidUpdate","prevProps","prevState","isFocusChanged","isValueChanged","isLabelLayoutChanged","isLabelChanged","label","isErrorChanged","minimizeLabel","restoreLabel","showPlaceholder","hidePlaceholder","showError","hideError","componentWillUnmount","setNativeProps","isFocused","clear","blur","render","mode","rest","React","_TextInputOutlined","parentState","innerRef","ref","handleFocus","forceFocus","handleBlur","handleChangeText","onLayoutAnimatedText","handleLayoutAnimatedText","onLeftAffixLayoutChange","onRightAffixLayoutChange","_TextInputFlat","nextProps","Component","TextInputIcon","TextInputAffix","dense","multiline","_reactNative"],"sources":["TextInput.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  Animated,\n  TextInput as NativeTextInput,\n  LayoutChangeEvent,\n  StyleProp,\n  TextStyle,\n} from 'react-native';\nimport { areLabelsEqual } from './helpers';\nimport TextInputOutlined from './TextInputOutlined';\nimport TextInputFlat from './TextInputFlat';\nimport TextInputIcon from './Adornment/TextInputIcon';\nimport TextInputAffix from './Adornment/TextInputAffix';\nimport { withTheme } from '../../core/theming';\nimport type { RenderProps, State, TextInputLabelProp } from './types';\nimport type { $Omit } from '../../types';\n\nconst BLUR_ANIMATION_DURATION = 180;\nconst FOCUS_ANIMATION_DURATION = 150;\n\nexport type TextInputProps = React.ComponentPropsWithRef<\n  typeof NativeTextInput\n> & {\n  /**\n   * Mode of the TextInput.\n   * - `flat` - flat input with an underline.\n   * - `outlined` - input with an outline.\n   *\n   * In `outlined` mode, the background color of the label is derived from `colors.background` in theme or the `backgroundColor` style.\n   * This component render TextInputOutlined or TextInputFlat based on that props\n   */\n  mode?: 'flat' | 'outlined';\n  left?: React.ReactNode;\n  right?: React.ReactNode;\n  /**\n   * If true, user won't be able to interact with the component.\n   */\n  disabled?: boolean;\n  /**\n   * The text or component to use for the floating label.\n   */\n  label?: TextInputLabelProp;\n  /**\n   * Placeholder for the input.\n   */\n  placeholder?: string;\n  /**\n   * Whether to style the TextInput with error style.\n   */\n  error?: boolean;\n  /**\n   * Callback that is called when the text input's text changes. Changed text is passed as an argument to the callback handler.\n   */\n  onChangeText?: Function;\n  /**\n   * Selection color of the input\n   */\n  selectionColor?: string;\n  /**\n   * Inactive underline color of the input.\n   */\n  underlineColor?: string;\n  /**\n   * Active underline color of the input.\n   */\n  activeUnderlineColor?: string;\n  /**\n   * Inactive outline color of the input.\n   */\n  outlineColor?: string;\n  /**\n   * Active outline color of the input.\n   */\n  activeOutlineColor?: string;\n  /**\n   * Sets min height with densed layout. For `TextInput` in `flat` mode\n   * height is `64dp` or in dense layout - `52dp` with label or `40dp` without label.\n   * For `TextInput` in `outlined` mode\n   * height is `56dp` or in dense layout - `40dp` regardless of label.\n   * When you apply `height` prop in style the `dense` prop affects only `paddingVertical` inside `TextInput`\n   */\n  dense?: boolean;\n  /**\n   * Whether the input can have multiple lines.\n   */\n  multiline?: boolean;\n  /**\n   * The number of lines to show in the input (Android only).\n   */\n  numberOfLines?: number;\n  /**\n   * Callback that is called when the text input is focused.\n   */\n  onFocus?: (args: any) => void;\n  /**\n   * Callback that is called when the text input is blurred.\n   */\n  onBlur?: (args: any) => void;\n  /**\n   *\n   * Callback to render a custom input component such as `react-native-text-input-mask`\n   * instead of the default `TextInput` component from `react-native`.\n   *\n   * Example:\n   * ```js\n   * <TextInput\n   *   label=\"Phone number\"\n   *   render={props =>\n   *     <TextInputMask\n   *       {...props}\n   *       mask=\"+[00] [000] [000] [000]\"\n   *     />\n   *   }\n   * />\n   * ```\n   */\n  render?: (props: RenderProps) => React.ReactNode;\n  /**\n   * Value of the text input.\n   */\n  value?: string;\n  /**\n   * Pass `fontSize` prop to modify the font size inside `TextInput`.\n   * Pass `height` prop to set `TextInput` height. When `height` is passed,\n   * `dense` prop will affect only input's `paddingVertical`.\n   * Pass `paddingHorizontal` to modify horizontal padding.\n   * This can be used to get MD Guidelines v1 TextInput look.\n   */\n  style?: StyleProp<TextStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n};\n\n/**\n * A component to allow users to input text.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/textinput-flat.focused.png\" />\n *     <figcaption>Flat (focused)</figcaption>\n *   </figure>\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/textinput-flat.disabled.png\" />\n *     <figcaption>Flat (disabled)</figcaption>\n *   </figure>\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/textinput-outlined.focused.png\" />\n *     <figcaption>Outlined (focused)</figcaption>\n *   </figure>\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/textinput-outlined.disabled.png\" />\n *     <figcaption>Outlined (disabled)</figcaption>\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { TextInput } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [text, setText] = React.useState('');\n *\n *   return (\n *     <TextInput\n *       label=\"Email\"\n *       value={text}\n *       onChangeText={text => setText(text)}\n *     />\n *   );\n * };\n *\n * export default MyComponent;\n * ```\n *\n * @extends TextInput props https://reactnative.dev/docs/textinput#props\n */\n\nclass TextInput extends React.Component<TextInputProps, State> {\n  // @component ./Adornment/TextInputIcon.tsx\n  static Icon = TextInputIcon;\n\n  // @component ./Adornment/TextInputAffix.tsx\n  static Affix = TextInputAffix;\n\n  static defaultProps: Partial<TextInputProps> = {\n    mode: 'flat',\n    dense: false,\n    disabled: false,\n    error: false,\n    multiline: false,\n    editable: true,\n    render: (props: RenderProps) => <NativeTextInput {...props} />,\n  };\n\n  static getDerivedStateFromProps(nextProps: TextInputProps, prevState: State) {\n    return {\n      value:\n        typeof nextProps.value !== 'undefined'\n          ? nextProps.value\n          : prevState.value,\n    };\n  }\n  validInputValue =\n    this.props.value !== undefined ? this.props.value : this.props.defaultValue;\n\n  state = {\n    labeled: new Animated.Value(this.validInputValue ? 0 : 1),\n    error: new Animated.Value(this.props.error ? 1 : 0),\n    focused: false,\n    placeholder: '',\n    value: this.validInputValue,\n    labelLayout: {\n      measured: false,\n      width: 0,\n      height: 0,\n    },\n    leftLayout: {\n      width: null,\n      height: null,\n    },\n    rightLayout: {\n      width: null,\n      height: null,\n    },\n  };\n\n  ref: NativeTextInput | undefined | null;\n\n  componentDidUpdate(prevProps: TextInputProps, prevState: State) {\n    const isFocusChanged = prevState.focused !== this.state.focused;\n    const isValueChanged = prevState.value !== this.state.value;\n    const isLabelLayoutChanged =\n      prevState.labelLayout !== this.state.labelLayout;\n    const isLabelChanged = !areLabelsEqual(prevProps.label, this.props.label);\n    const isErrorChanged = prevProps.error !== this.props.error;\n    if (\n      isFocusChanged ||\n      isValueChanged ||\n      // workaround for animated regression for react native > 0.61\n      // https://github.com/callstack/react-native-paper/pull/1440\n      isLabelLayoutChanged\n    ) {\n      // The label should be minimized if the text input is focused, or has text\n      // In minimized mode, the label moves up and becomes small\n      if (this.state.value || this.state.focused) {\n        this.minimizeLabel();\n      } else {\n        this.restoreLabel();\n      }\n    }\n\n    if (isFocusChanged || isLabelChanged) {\n      // Show placeholder text only if the input is focused, or there's no label\n      // We don't show placeholder if there's a label because the label acts as placeholder\n      // When focused, the label moves up, so we can show a placeholder\n      if (this.state.focused || !this.props.label) {\n        this.showPlaceholder();\n      } else {\n        this.hidePlaceholder();\n      }\n    }\n\n    if (isErrorChanged) {\n      // When the input has an error, we wiggle the label and apply error styles\n      if (this.props.error) {\n        this.showError();\n      } else {\n        this.hideError();\n      }\n    }\n  }\n\n  componentWillUnmount() {\n    if (this.timer) {\n      clearTimeout(this.timer);\n    }\n  }\n\n  private showPlaceholder = () => {\n    if (this.timer) {\n      clearTimeout(this.timer);\n    }\n\n    // Set the placeholder in a delay to offset the label animation\n    // If we show it immediately, they'll overlap and look ugly\n    this.timer = (setTimeout(\n      () =>\n        this.setState({\n          placeholder: this.props.placeholder,\n        }),\n      50\n    ) as unknown) as NodeJS.Timeout;\n  };\n\n  private hidePlaceholder = () =>\n    this.setState({\n      placeholder: '',\n    });\n\n  private timer?: NodeJS.Timeout;\n  private root: NativeTextInput | undefined | null;\n\n  private showError = () => {\n    const { scale } = this.props.theme.animation;\n    Animated.timing(this.state.error, {\n      toValue: 1,\n      duration: FOCUS_ANIMATION_DURATION * scale,\n      useNativeDriver: true,\n    }).start();\n  };\n\n  private hideError = () => {\n    const { scale } = this.props.theme.animation;\n    Animated.timing(this.state.error, {\n      toValue: 0,\n      duration: BLUR_ANIMATION_DURATION * scale,\n      useNativeDriver: true,\n    }).start();\n  };\n\n  private restoreLabel = () => {\n    const { scale } = this.props.theme.animation;\n    Animated.timing(this.state.labeled, {\n      toValue: 1,\n      duration: FOCUS_ANIMATION_DURATION * scale,\n      useNativeDriver: true,\n    }).start();\n  };\n\n  private minimizeLabel = () => {\n    const { scale } = this.props.theme.animation;\n    Animated.timing(this.state.labeled, {\n      toValue: 0,\n      duration: BLUR_ANIMATION_DURATION * scale,\n      useNativeDriver: true,\n    }).start();\n  };\n\n  private onLeftAffixLayoutChange = (event: LayoutChangeEvent) => {\n    this.setState({\n      leftLayout: {\n        height: event.nativeEvent.layout.height,\n        width: event.nativeEvent.layout.width,\n      },\n    });\n  };\n\n  private onRightAffixLayoutChange = (event: LayoutChangeEvent) => {\n    this.setState({\n      rightLayout: {\n        width: event.nativeEvent.layout.width,\n        height: event.nativeEvent.layout.height,\n      },\n    });\n  };\n\n  private handleFocus = (args: any) => {\n    if (this.props.disabled || !this.props.editable) {\n      return;\n    }\n\n    this.setState({ focused: true });\n\n    if (this.props.onFocus) {\n      this.props.onFocus(args);\n    }\n  };\n\n  private handleBlur = (args: Object) => {\n    if (!this.props.editable) {\n      return;\n    }\n\n    this.setState({ focused: false });\n\n    if (this.props.onBlur) {\n      this.props.onBlur(args);\n    }\n  };\n\n  private handleChangeText = (value: string) => {\n    if (!this.props.editable) {\n      return;\n    }\n\n    this.setState({ value });\n    this.props.onChangeText && this.props.onChangeText(value);\n  };\n\n  private handleLayoutAnimatedText = (e: LayoutChangeEvent) => {\n    this.setState({\n      labelLayout: {\n        width: e.nativeEvent.layout.width,\n        height: e.nativeEvent.layout.height,\n        measured: true,\n      },\n    });\n  };\n\n  forceFocus = () => {\n    return this.root?.focus();\n  };\n\n  /**\n   * @internal\n   */\n  setNativeProps(args: Object) {\n    return this.root && this.root.setNativeProps(args);\n  }\n\n  /**\n   * Returns `true` if the input is currently focused, `false` otherwise.\n   */\n  isFocused() {\n    return this.root && this.root.isFocused();\n  }\n\n  /**\n   * Removes all text from the TextInput.\n   */\n  clear() {\n    return this.root && this.root.clear();\n  }\n\n  /**\n   * Focuses the input.\n   */\n  focus() {\n    return this.root && this.root.focus();\n  }\n\n  /**\n   * Removes focus from the input.\n   */\n  blur() {\n    return this.root && this.root.blur();\n  }\n  render() {\n    const { mode, ...rest } = this.props as $Omit<TextInputProps, 'ref'>;\n\n    return mode === 'outlined' ? (\n      <TextInputOutlined\n        {...rest}\n        value={this.state.value}\n        parentState={this.state}\n        innerRef={(ref) => {\n          this.root = ref;\n        }}\n        onFocus={this.handleFocus}\n        forceFocus={this.forceFocus}\n        onBlur={this.handleBlur}\n        onChangeText={this.handleChangeText}\n        onLayoutAnimatedText={this.handleLayoutAnimatedText}\n        onLeftAffixLayoutChange={this.onLeftAffixLayoutChange}\n        onRightAffixLayoutChange={this.onRightAffixLayoutChange}\n      />\n    ) : (\n      <TextInputFlat\n        {...rest}\n        value={this.state.value}\n        parentState={this.state}\n        innerRef={(ref) => {\n          this.root = ref;\n        }}\n        onFocus={this.handleFocus}\n        forceFocus={this.forceFocus}\n        onBlur={this.handleBlur}\n        onChangeText={this.handleChangeText}\n        onLayoutAnimatedText={this.handleLayoutAnimatedText}\n        onLeftAffixLayoutChange={this.onLeftAffixLayoutChange}\n        onRightAffixLayoutChange={this.onRightAffixLayoutChange}\n      />\n    );\n  }\n}\n\nexport default withTheme(TextInput);\n"]}