{"version":3,"mappings":"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","names":["CALLBACK_TYPE","UNDEFINED","BEGAN","START","UPDATE","CHANGE","END","FINALIZE","TOUCHES_DOWN","TOUCHES_MOVE","TOUCHES_UP","TOUCHES_CANCELLED","Gesture","BaseGesture","args","_defineProperty","handlerTag","isWorklet","addDependency","key","gesture","value","config","Array","concat","withRef","ref","callback","__workletHash","undefined","onBegin","handlers","onStart","onEnd","onFinalize","onTouchesDown","needsPointerData","onTouchesMove","onTouchesUp","onTouchesCancelled","enabled","shouldCancelWhenOutside","hitSlop","runOnJS","simultaneousWithExternalGesture","gestures","requireExternalGestureToFail","withTestId","id","testId","initialize","current","toGestureArray","prepare","includes","ContinousBaseGesture","onUpdate","onChange","manualActivation"],"sources":["gesture.ts"],"sourcesContent":["import { FlingGestureHandlerEventPayload } from '../FlingGestureHandler';\nimport { ForceTouchGestureHandlerEventPayload } from '../ForceTouchGestureHandler';\nimport {\n  HitSlop,\n  CommonGestureConfig,\n  GestureTouchEvent,\n  GestureStateChangeEvent,\n  GestureUpdateEvent,\n} from '../gestureHandlerCommon';\nimport { getNextHandlerTag } from '../handlersRegistry';\nimport { GestureStateManagerType } from './gestureStateManager';\nimport { LongPressGestureHandlerEventPayload } from '../LongPressGestureHandler';\nimport { PanGestureHandlerEventPayload } from '../PanGestureHandler';\nimport { PinchGestureHandlerEventPayload } from '../PinchGestureHandler';\nimport { RotationGestureHandlerEventPayload } from '../RotationGestureHandler';\nimport { TapGestureHandlerEventPayload } from '../TapGestureHandler';\nimport { NativeViewGestureHandlerPayload } from '../NativeViewGestureHandler';\n\nexport type GestureType =\n  | BaseGesture<Record<string, unknown>>\n  | BaseGesture<Record<string, never>>\n  | BaseGesture<TapGestureHandlerEventPayload>\n  | BaseGesture<PanGestureHandlerEventPayload>\n  | BaseGesture<LongPressGestureHandlerEventPayload>\n  | BaseGesture<RotationGestureHandlerEventPayload>\n  | BaseGesture<PinchGestureHandlerEventPayload>\n  | BaseGesture<FlingGestureHandlerEventPayload>\n  | BaseGesture<ForceTouchGestureHandlerEventPayload>\n  | BaseGesture<NativeViewGestureHandlerPayload>;\n\nexport type GestureRef =\n  | number\n  | GestureType\n  | React.RefObject<GestureType | undefined>\n  | React.RefObject<React.ComponentType | undefined>; // allow adding a ref to a gesture handler\nexport interface BaseGestureConfig\n  extends CommonGestureConfig,\n    Record<string, unknown> {\n  ref?: React.MutableRefObject<GestureType | undefined>;\n  requireToFail?: GestureRef[];\n  simultaneousWith?: GestureRef[];\n  needsPointerData?: boolean;\n  manualActivation?: boolean;\n  runOnJS?: boolean;\n  testId?: string;\n}\n\ntype TouchEventHandlerType = (\n  event: GestureTouchEvent,\n  stateManager: GestureStateManagerType\n) => void;\n\nexport type HandlerCallbacks<EventPayloadT extends Record<string, unknown>> = {\n  handlerTag: number;\n  onBegin?: (event: GestureStateChangeEvent<EventPayloadT>) => void;\n  onStart?: (event: GestureStateChangeEvent<EventPayloadT>) => void;\n  onEnd?: (\n    event: GestureStateChangeEvent<EventPayloadT>,\n    success: boolean\n  ) => void;\n  onFinalize?: (\n    event: GestureStateChangeEvent<EventPayloadT>,\n    success: boolean\n  ) => void;\n  onUpdate?: (event: GestureUpdateEvent<EventPayloadT>) => void;\n  onChange?: (event: any) => void;\n  onTouchesDown?: TouchEventHandlerType;\n  onTouchesMove?: TouchEventHandlerType;\n  onTouchesUp?: TouchEventHandlerType;\n  onTouchesCancelled?: TouchEventHandlerType;\n  changeEventCalculator?: (\n    current: GestureUpdateEvent<Record<string, unknown>>,\n    previous?: GestureUpdateEvent<Record<string, unknown>>\n  ) => GestureUpdateEvent<Record<string, unknown>>;\n  isWorklet: boolean[];\n};\n\nexport const CALLBACK_TYPE = {\n  UNDEFINED: 0,\n  BEGAN: 1,\n  START: 2,\n  UPDATE: 3,\n  CHANGE: 4,\n  END: 5,\n  FINALIZE: 6,\n  TOUCHES_DOWN: 7,\n  TOUCHES_MOVE: 8,\n  TOUCHES_UP: 9,\n  TOUCHES_CANCELLED: 10,\n} as const;\n\n// Allow using CALLBACK_TYPE as object and type\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nexport type CALLBACK_TYPE = typeof CALLBACK_TYPE[keyof typeof CALLBACK_TYPE];\n\nexport abstract class Gesture {\n  /**\n   * Return array of gestures, providing the same interface for creating and updating\n   * handlers, no matter which object was used to create gesture instance.\n   */\n  abstract toGestureArray(): GestureType[];\n\n  /**\n   * Assign handlerTag to the gesture instance and set ref.current (if a ref is set)\n   */\n  abstract initialize(): void;\n\n  /**\n   * Make sure that values of properties defining relations are arrays. Do any necessary\n   * preprocessing required to configure relations between handlers. Called just before\n   * updating the handler on the native side.\n   */\n  abstract prepare(): void;\n}\n\nexport abstract class BaseGesture<\n  EventPayloadT extends Record<string, unknown>\n> extends Gesture {\n  public handlerTag = -1;\n  public handlerName = '';\n  public config: BaseGestureConfig = {};\n  public handlers: HandlerCallbacks<EventPayloadT> = {\n    handlerTag: -1,\n    isWorklet: [],\n  };\n\n  private addDependency(\n    key: 'simultaneousWith' | 'requireToFail',\n    gesture: Exclude<GestureRef, number>\n  ) {\n    const value = this.config[key];\n    this.config[key] = value\n      ? Array<GestureRef>().concat(value, gesture)\n      : [gesture];\n  }\n\n  withRef(ref: React.MutableRefObject<GestureType | undefined>) {\n    this.config.ref = ref;\n    return this;\n  }\n\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  protected isWorklet(callback: Function) {\n    //@ts-ignore if callback is a worklet, the property will be available, if not then the check will return false\n    return callback.__workletHash !== undefined;\n  }\n\n  onBegin(callback: (event: GestureStateChangeEvent<EventPayloadT>) => void) {\n    this.handlers.onBegin = callback;\n    this.handlers.isWorklet[CALLBACK_TYPE.BEGAN] = this.isWorklet(callback);\n    return this;\n  }\n\n  onStart(callback: (event: GestureStateChangeEvent<EventPayloadT>) => void) {\n    this.handlers.onStart = callback;\n    this.handlers.isWorklet[CALLBACK_TYPE.START] = this.isWorklet(callback);\n    return this;\n  }\n\n  onEnd(\n    callback: (\n      event: GestureStateChangeEvent<EventPayloadT>,\n      success: boolean\n    ) => void\n  ) {\n    this.handlers.onEnd = callback;\n    //@ts-ignore if callback is a worklet, the property will be available, if not then the check will return false\n    this.handlers.isWorklet[CALLBACK_TYPE.END] = this.isWorklet(callback);\n    return this;\n  }\n\n  onFinalize(\n    callback: (\n      event: GestureStateChangeEvent<EventPayloadT>,\n      success: boolean\n    ) => void\n  ) {\n    this.handlers.onFinalize = callback;\n    //@ts-ignore if callback is a worklet, the property will be available, if not then the check will return false\n    this.handlers.isWorklet[CALLBACK_TYPE.FINALIZE] = this.isWorklet(callback);\n    return this;\n  }\n\n  onTouchesDown(callback: TouchEventHandlerType) {\n    this.config.needsPointerData = true;\n    this.handlers.onTouchesDown = callback;\n    this.handlers.isWorklet[CALLBACK_TYPE.TOUCHES_DOWN] = this.isWorklet(\n      callback\n    );\n\n    return this;\n  }\n\n  onTouchesMove(callback: TouchEventHandlerType) {\n    this.config.needsPointerData = true;\n    this.handlers.onTouchesMove = callback;\n    this.handlers.isWorklet[CALLBACK_TYPE.TOUCHES_MOVE] = this.isWorklet(\n      callback\n    );\n\n    return this;\n  }\n\n  onTouchesUp(callback: TouchEventHandlerType) {\n    this.config.needsPointerData = true;\n    this.handlers.onTouchesUp = callback;\n    this.handlers.isWorklet[CALLBACK_TYPE.TOUCHES_UP] = this.isWorklet(\n      callback\n    );\n\n    return this;\n  }\n\n  onTouchesCancelled(callback: TouchEventHandlerType) {\n    this.config.needsPointerData = true;\n    this.handlers.onTouchesCancelled = callback;\n    this.handlers.isWorklet[CALLBACK_TYPE.TOUCHES_CANCELLED] = this.isWorklet(\n      callback\n    );\n\n    return this;\n  }\n\n  enabled(enabled: boolean) {\n    this.config.enabled = enabled;\n    return this;\n  }\n\n  shouldCancelWhenOutside(value: boolean) {\n    this.config.shouldCancelWhenOutside = value;\n    return this;\n  }\n\n  hitSlop(hitSlop: HitSlop) {\n    this.config.hitSlop = hitSlop;\n    return this;\n  }\n\n  runOnJS(runOnJS: boolean) {\n    this.config.runOnJS = runOnJS;\n    return this;\n  }\n\n  simultaneousWithExternalGesture(...gestures: Exclude<GestureRef, number>[]) {\n    for (const gesture of gestures) {\n      this.addDependency('simultaneousWith', gesture);\n    }\n    return this;\n  }\n\n  requireExternalGestureToFail(...gestures: Exclude<GestureRef, number>[]) {\n    for (const gesture of gestures) {\n      this.addDependency('requireToFail', gesture);\n    }\n    return this;\n  }\n\n  withTestId(id: string) {\n    this.config.testId = id;\n    return this;\n  }\n\n  initialize() {\n    this.handlerTag = getNextHandlerTag();\n\n    this.handlers = { ...this.handlers, handlerTag: this.handlerTag };\n\n    if (this.config.ref) {\n      this.config.ref.current = this as GestureType;\n    }\n  }\n\n  toGestureArray(): GestureType[] {\n    return [this as GestureType];\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  prepare() {}\n\n  get shouldUseReanimated(): boolean {\n    // use Reanimated when runOnJS isn't set explicitly and all defined callbacks are worklets\n    return (\n      this.config.runOnJS !== true && !this.handlers.isWorklet.includes(false)\n    );\n  }\n}\n\nexport abstract class ContinousBaseGesture<\n  EventPayloadT extends Record<string, unknown>,\n  EventChangePayloadT extends Record<string, unknown>\n> extends BaseGesture<EventPayloadT> {\n  onUpdate(callback: (event: GestureUpdateEvent<EventPayloadT>) => void) {\n    this.handlers.onUpdate = callback;\n    this.handlers.isWorklet[CALLBACK_TYPE.UPDATE] = this.isWorklet(callback);\n    return this;\n  }\n\n  onChange(\n    callback: (\n      event: GestureUpdateEvent<EventPayloadT & EventChangePayloadT>\n    ) => void\n  ) {\n    this.handlers.onChange = callback;\n    this.handlers.isWorklet[CALLBACK_TYPE.CHANGE] = this.isWorklet(callback);\n    return this;\n  }\n\n  manualActivation(manualActivation: boolean) {\n    this.config.manualActivation = manualActivation;\n    return this;\n  }\n}\n"]}