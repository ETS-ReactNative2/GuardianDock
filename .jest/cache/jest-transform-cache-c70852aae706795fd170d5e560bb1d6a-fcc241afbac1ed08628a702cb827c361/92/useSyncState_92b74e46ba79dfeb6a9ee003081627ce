fafdbbf2f72f03ba78d6904532effda6
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = useSyncState;

var React = _interopRequireWildcard(require("react"));

function _getRequireWildcardCache(nodeInterop) {
  if (typeof WeakMap !== "function") return null;
  var cacheBabelInterop = new WeakMap();
  var cacheNodeInterop = new WeakMap();
  return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {
    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
  })(nodeInterop);
}

function _interopRequireWildcard(obj, nodeInterop) {
  if (!nodeInterop && obj && obj.__esModule) {
    return obj;
  }

  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }

  var cache = _getRequireWildcardCache(nodeInterop);

  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }

  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

  for (var key in obj) {
    if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }

  newObj.default = obj;

  if (cache) {
    cache.set(obj, newObj);
  }

  return newObj;
}

var UNINTIALIZED_STATE = {};

function useSyncState(initialState) {
  var stateRef = React.useRef(UNINTIALIZED_STATE);
  var isSchedulingRef = React.useRef(false);
  var isMountedRef = React.useRef(true);
  React.useEffect(function () {
    isMountedRef.current = true;
    return function () {
      isMountedRef.current = false;
    };
  }, []);

  if (stateRef.current === UNINTIALIZED_STATE) {
    stateRef.current = typeof initialState === 'function' ? initialState() : initialState;
  }

  var _React$useState = React.useState(stateRef.current),
      _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 2),
      trackingState = _React$useState2[0],
      setTrackingState = _React$useState2[1];

  var getState = React.useCallback(function () {
    return stateRef.current;
  }, []);
  var setState = React.useCallback(function (state) {
    if (state === stateRef.current || !isMountedRef.current) {
      return;
    }

    stateRef.current = state;

    if (!isSchedulingRef.current) {
      setTrackingState(state);
    }
  }, []);
  var scheduleUpdate = React.useCallback(function (callback) {
    isSchedulingRef.current = true;

    try {
      callback();
    } finally {
      isSchedulingRef.current = false;
    }
  }, []);
  var flushUpdates = React.useCallback(function () {
    if (!isMountedRef.current) {
      return;
    }

    setTrackingState(stateRef.current);
  }, []);

  if (trackingState !== stateRef.current) {
    setTrackingState(stateRef.current);
  }

  var state = stateRef.current;
  React.useDebugValue(state);
  return [state, getState, setState, scheduleUpdate, flushUpdates];
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUVBLElBQU1BLGtCQUFrQixHQUFHLEVBQTNCOztBQUtlLFNBQVNDLFlBQVQsQ0FBeUJDLFlBQXpCLEVBQXVEO0FBQ3BFLE1BQU1DLFFBQVEsR0FBR0MsS0FBSyxDQUFDQyxNQUFORCxDQUFnQkosa0JBQWhCSSxDQUFqQjtBQUNBLE1BQU1FLGVBQWUsR0FBR0YsS0FBSyxDQUFDQyxNQUFORCxDQUFhLEtBQWJBLENBQXhCO0FBQ0EsTUFBTUcsWUFBWSxHQUFHSCxLQUFLLENBQUNDLE1BQU5ELENBQWEsSUFBYkEsQ0FBckI7QUFFQUEsT0FBSyxDQUFDSSxTQUFOSixDQUFnQixZQUFNO0FBQ3BCRyxnQkFBWSxDQUFDRSxPQUFiRixHQUF1QixJQUF2QkE7QUFFQSxXQUFPLFlBQU07QUFDWEEsa0JBQVksQ0FBQ0UsT0FBYkYsR0FBdUIsS0FBdkJBO0FBREY7QUFIRixLQU1HLEVBTkhIOztBQVFBLE1BQUlELFFBQVEsQ0FBQ00sT0FBVE4sS0FBcUJILGtCQUF6QixFQUE2QztBQUMzQ0csWUFBUSxDQUFDTSxPQUFUTixHQUVFLE9BQU9ELFlBQVAsS0FBd0IsVUFBeEIsR0FBcUNBLFlBQVksRUFBakQsR0FBc0RBLFlBRnhEQztBQUdEOztBQUVELHdCQUEwQ0MsS0FBSyxDQUFDTSxRQUFOTixDQUFlRCxRQUFRLENBQUNNLE9BQXhCTCxDQUExQztBQUFBO0FBQUEsTUFBT08sYUFBUDtBQUFBLE1BQXNCQyxnQkFBdEI7O0FBRUEsTUFBTUMsUUFBUSxHQUFHVCxLQUFLLENBQUNVLFdBQU5WLENBQWtCO0FBQUEsV0FBTUQsUUFBUSxDQUFDTSxPQUFmO0FBQUEsR0FBbEJMLEVBQTBDLEVBQTFDQSxDQUFqQjtBQUVBLE1BQU1XLFFBQVEsR0FBR1gsS0FBSyxDQUFDVSxXQUFOVixDQUFtQlksZUFBRCxFQUFjO0FBQy9DLFFBQUlBLEtBQUssS0FBS2IsUUFBUSxDQUFDTSxPQUFuQk8sSUFBOEIsQ0FBQ1QsWUFBWSxDQUFDRSxPQUFoRCxFQUF5RDtBQUN2RDtBQUNEOztBQUVETixZQUFRLENBQUNNLE9BQVROLEdBQW1CYSxLQUFuQmI7O0FBRUEsUUFBSSxDQUFDRyxlQUFlLENBQUNHLE9BQXJCLEVBQThCO0FBQzVCRyxzQkFBZ0IsQ0FBQ0ksS0FBRCxDQUFoQko7QUFDRDtBQVRjLEtBVWQsRUFWY1IsQ0FBakI7QUFZQSxNQUFNYSxjQUFjLEdBQUdiLEtBQUssQ0FBQ1UsV0FBTlYsQ0FBbUJjLGtCQUFELEVBQTBCO0FBQ2pFWixtQkFBZSxDQUFDRyxPQUFoQkgsR0FBMEIsSUFBMUJBOztBQUVBLFFBQUk7QUFDRlksY0FBUTtBQURWLGNBRVU7QUFDUloscUJBQWUsQ0FBQ0csT0FBaEJILEdBQTBCLEtBQTFCQTtBQUNEO0FBUG9CLEtBUXBCLEVBUm9CRixDQUF2QjtBQVVBLE1BQU1lLFlBQVksR0FBR2YsS0FBSyxDQUFDVSxXQUFOVixDQUFrQixZQUFNO0FBQzNDLFFBQUksQ0FBQ0csWUFBWSxDQUFDRSxPQUFsQixFQUEyQjtBQUN6QjtBQUZ5Qzs7QUFPM0NHLG9CQUFnQixDQUFDVCxRQUFRLENBQUNNLE9BQVYsQ0FBaEJHO0FBUG1CLEtBUWxCLEVBUmtCUixDQUFyQjs7QUFZQSxNQUFJTyxhQUFhLEtBQUtSLFFBQVEsQ0FBQ00sT0FBL0IsRUFBd0M7QUFDdENHLG9CQUFnQixDQUFDVCxRQUFRLENBQUNNLE9BQVYsQ0FBaEJHO0FBQ0Q7O0FBRUQsTUFBTUksS0FBSyxHQUFHYixRQUFRLENBQUNNLE9BQXZCO0FBRUFMLE9BQUssQ0FBQ2dCLGFBQU5oQixDQUFvQlksS0FBcEJaO0FBRUEsU0FBTyxDQUFDWSxLQUFELEVBQVFILFFBQVIsRUFBa0JFLFFBQWxCLEVBQTRCRSxjQUE1QixFQUE0Q0UsWUFBNUMsQ0FBUDtBQUNEIiwibmFtZXMiOlsiVU5JTlRJQUxJWkVEX1NUQVRFIiwidXNlU3luY1N0YXRlIiwiaW5pdGlhbFN0YXRlIiwic3RhdGVSZWYiLCJSZWFjdCIsInVzZVJlZiIsImlzU2NoZWR1bGluZ1JlZiIsImlzTW91bnRlZFJlZiIsInVzZUVmZmVjdCIsImN1cnJlbnQiLCJ1c2VTdGF0ZSIsInRyYWNraW5nU3RhdGUiLCJzZXRUcmFja2luZ1N0YXRlIiwiZ2V0U3RhdGUiLCJ1c2VDYWxsYmFjayIsInNldFN0YXRlIiwic3RhdGUiLCJzY2hlZHVsZVVwZGF0ZSIsImNhbGxiYWNrIiwiZmx1c2hVcGRhdGVzIiwidXNlRGVidWdWYWx1ZSJdLCJzb3VyY2VzIjpbInVzZVN5bmNTdGF0ZS50c3giXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuXG5jb25zdCBVTklOVElBTElaRURfU1RBVEUgPSB7fTtcblxuLyoqXG4gKiBUaGlzIGlzIGRlZmluaXRlbHkgbm90IGNvbXBhdGlibGUgd2l0aCBjb25jdXJyZW50IG1vZGUsIGJ1dCB3ZSBkb24ndCBoYXZlIGEgc29sdXRpb24gZm9yIHN5bmMgc3RhdGUgeWV0LlxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB1c2VTeW5jU3RhdGU8VD4oaW5pdGlhbFN0YXRlPzogKCgpID0+IFQpIHwgVCkge1xuICBjb25zdCBzdGF0ZVJlZiA9IFJlYWN0LnVzZVJlZjxUPihVTklOVElBTElaRURfU1RBVEUgYXMgYW55KTtcbiAgY29uc3QgaXNTY2hlZHVsaW5nUmVmID0gUmVhY3QudXNlUmVmKGZhbHNlKTtcbiAgY29uc3QgaXNNb3VudGVkUmVmID0gUmVhY3QudXNlUmVmKHRydWUpO1xuXG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaXNNb3VudGVkUmVmLmN1cnJlbnQgPSB0cnVlO1xuXG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIGlzTW91bnRlZFJlZi5jdXJyZW50ID0gZmFsc2U7XG4gICAgfTtcbiAgfSwgW10pO1xuXG4gIGlmIChzdGF0ZVJlZi5jdXJyZW50ID09PSBVTklOVElBTElaRURfU1RBVEUpIHtcbiAgICBzdGF0ZVJlZi5jdXJyZW50ID1cbiAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3I6IGluaXRpYWxTdGF0ZSBpcyBhIGZ1bmN0aW9uLCBidXQgVHlwZVNjcmlwdCBkb2Vzbid0IHRoaW5rIHNvXG4gICAgICB0eXBlb2YgaW5pdGlhbFN0YXRlID09PSAnZnVuY3Rpb24nID8gaW5pdGlhbFN0YXRlKCkgOiBpbml0aWFsU3RhdGU7XG4gIH1cblxuICBjb25zdCBbdHJhY2tpbmdTdGF0ZSwgc2V0VHJhY2tpbmdTdGF0ZV0gPSBSZWFjdC51c2VTdGF0ZShzdGF0ZVJlZi5jdXJyZW50KTtcblxuICBjb25zdCBnZXRTdGF0ZSA9IFJlYWN0LnVzZUNhbGxiYWNrKCgpID0+IHN0YXRlUmVmLmN1cnJlbnQsIFtdKTtcblxuICBjb25zdCBzZXRTdGF0ZSA9IFJlYWN0LnVzZUNhbGxiYWNrKChzdGF0ZTogVCkgPT4ge1xuICAgIGlmIChzdGF0ZSA9PT0gc3RhdGVSZWYuY3VycmVudCB8fCAhaXNNb3VudGVkUmVmLmN1cnJlbnQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBzdGF0ZVJlZi5jdXJyZW50ID0gc3RhdGU7XG5cbiAgICBpZiAoIWlzU2NoZWR1bGluZ1JlZi5jdXJyZW50KSB7XG4gICAgICBzZXRUcmFja2luZ1N0YXRlKHN0YXRlKTtcbiAgICB9XG4gIH0sIFtdKTtcblxuICBjb25zdCBzY2hlZHVsZVVwZGF0ZSA9IFJlYWN0LnVzZUNhbGxiYWNrKChjYWxsYmFjazogKCkgPT4gdm9pZCkgPT4ge1xuICAgIGlzU2NoZWR1bGluZ1JlZi5jdXJyZW50ID0gdHJ1ZTtcblxuICAgIHRyeSB7XG4gICAgICBjYWxsYmFjaygpO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBpc1NjaGVkdWxpbmdSZWYuY3VycmVudCA9IGZhbHNlO1xuICAgIH1cbiAgfSwgW10pO1xuXG4gIGNvbnN0IGZsdXNoVXBkYXRlcyA9IFJlYWN0LnVzZUNhbGxiYWNrKCgpID0+IHtcbiAgICBpZiAoIWlzTW91bnRlZFJlZi5jdXJyZW50KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gTWFrZSBzdXJlIHRoYXQgdGhlIHRyYWNraW5nIHN0YXRlIGlzIHVwLXRvLWRhdGUuXG4gICAgLy8gV2UgY2FsbCBpdCB1bmNvbmRpdGlvbmFsbHksIGJ1dCBSZWFjdCBzaG91bGQgc2tpcCB0aGUgdXBkYXRlIGlmIHN0YXRlIGlzIHVuY2hhbmdlZC5cbiAgICBzZXRUcmFja2luZ1N0YXRlKHN0YXRlUmVmLmN1cnJlbnQpO1xuICB9LCBbXSk7XG5cbiAgLy8gSWYgd2UncmUgcmVuZGVyaW5nIGFuZCB0aGUgdHJhY2tpbmcgc3RhdGUgaXMgb3V0IG9mIGRhdGUsIHVwZGF0ZSBpdCBpbW1lZGlhdGVseVxuICAvLyBUaGlzIHdpbGwgbWFrZSBzdXJlIHRoYXQgb3VyIHVwZGF0ZXMgYXJlIGFwcGxpZWQgYXMgZWFybHkgYXMgcG9zc2libGUuXG4gIGlmICh0cmFja2luZ1N0YXRlICE9PSBzdGF0ZVJlZi5jdXJyZW50KSB7XG4gICAgc2V0VHJhY2tpbmdTdGF0ZShzdGF0ZVJlZi5jdXJyZW50KTtcbiAgfVxuXG4gIGNvbnN0IHN0YXRlID0gc3RhdGVSZWYuY3VycmVudDtcblxuICBSZWFjdC51c2VEZWJ1Z1ZhbHVlKHN0YXRlKTtcblxuICByZXR1cm4gW3N0YXRlLCBnZXRTdGF0ZSwgc2V0U3RhdGUsIHNjaGVkdWxlVXBkYXRlLCBmbHVzaFVwZGF0ZXNdIGFzIGNvbnN0O1xufVxuIl19