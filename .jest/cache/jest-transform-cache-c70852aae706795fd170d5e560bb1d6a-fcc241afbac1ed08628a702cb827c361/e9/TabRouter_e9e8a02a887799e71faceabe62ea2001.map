{"version":3,"mappings":"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","names":["TYPE_ROUTE","TabActions","jumpTo","name","params","type","payload","getRouteHistory","routes","index","backBehavior","initialRouteName","history","key","initialRouteIndex","i","unshift","findIndex","route","changeIndex","state","currentKey","filter","it","concat","TabRouter","router","BaseRouter","getInitialState","routeNames","routeParamList","undefined","includes","indexOf","map","stale","getRehydratedState","partialState","find","r","Math","min","max","_state$routes","length","_state$history","getStateForRouteNamesChange","routeKeyChanges","getStateForRouteFocus","getStateForAction","action","merge","path","previousKey","slice","shouldActionChangeFocus","actionCreators"],"sources":["TabRouter.tsx"],"sourcesContent":["import { nanoid } from 'nanoid/non-secure';\n\nimport BaseRouter from './BaseRouter';\nimport type {\n  CommonNavigationAction,\n  DefaultRouterOptions,\n  NavigationState,\n  ParamListBase,\n  PartialState,\n  Route,\n  Router,\n} from './types';\n\nexport type TabActionType = {\n  type: 'JUMP_TO';\n  payload: { name: string; params?: object };\n  source?: string;\n  target?: string;\n};\n\nexport type BackBehavior =\n  | 'initialRoute'\n  | 'firstRoute'\n  | 'history'\n  | 'order'\n  | 'none';\n\nexport type TabRouterOptions = DefaultRouterOptions & {\n  backBehavior?: BackBehavior;\n};\n\nexport type TabNavigationState<ParamList extends ParamListBase> = Omit<\n  NavigationState<ParamList>,\n  'history'\n> & {\n  /**\n   * Type of the router, in this case, it's tab.\n   */\n  type: 'tab';\n  /**\n   * List of previously visited route keys.\n   */\n  history: { type: 'route'; key: string }[];\n};\n\nexport type TabActionHelpers<ParamList extends ParamListBase> = {\n  /**\n   * Jump to an existing tab.\n   *\n   * @param name Name of the route for the tab.\n   * @param [params] Params object for the route.\n   */\n  jumpTo<RouteName extends Extract<keyof ParamList, string>>(\n    ...args: undefined extends ParamList[RouteName]\n      ? [screen: RouteName] | [screen: RouteName, params: ParamList[RouteName]]\n      : [screen: RouteName, params: ParamList[RouteName]]\n  ): void;\n};\n\nconst TYPE_ROUTE = 'route' as const;\n\nexport const TabActions = {\n  jumpTo(name: string, params?: object): TabActionType {\n    return { type: 'JUMP_TO', payload: { name, params } };\n  },\n};\n\nconst getRouteHistory = (\n  routes: Route<string>[],\n  index: number,\n  backBehavior: BackBehavior,\n  initialRouteName: string | undefined\n) => {\n  const history = [{ type: TYPE_ROUTE, key: routes[index].key }];\n  let initialRouteIndex;\n\n  switch (backBehavior) {\n    case 'order':\n      for (let i = index; i > 0; i--) {\n        history.unshift({ type: TYPE_ROUTE, key: routes[i - 1].key });\n      }\n      break;\n    case 'firstRoute':\n      if (index !== 0) {\n        history.unshift({\n          type: TYPE_ROUTE,\n          key: routes[0].key,\n        });\n      }\n      break;\n    case 'initialRoute':\n      initialRouteIndex = routes.findIndex(\n        (route) => route.name === initialRouteName\n      );\n      initialRouteIndex = initialRouteIndex === -1 ? 0 : initialRouteIndex;\n\n      if (index !== initialRouteIndex) {\n        history.unshift({\n          type: TYPE_ROUTE,\n          key: routes[initialRouteIndex].key,\n        });\n      }\n      break;\n    case 'history':\n      // The history will fill up on navigation\n      break;\n  }\n\n  return history;\n};\n\nconst changeIndex = (\n  state: TabNavigationState<ParamListBase>,\n  index: number,\n  backBehavior: BackBehavior,\n  initialRouteName: string | undefined\n) => {\n  let history;\n\n  if (backBehavior === 'history') {\n    const currentKey = state.routes[index].key;\n\n    history = state.history\n      .filter((it) => (it.type === 'route' ? it.key !== currentKey : false))\n      .concat({ type: TYPE_ROUTE, key: currentKey });\n  } else {\n    history = getRouteHistory(\n      state.routes,\n      index,\n      backBehavior,\n      initialRouteName\n    );\n  }\n\n  return {\n    ...state,\n    index,\n    history,\n  };\n};\n\nexport default function TabRouter({\n  initialRouteName,\n  backBehavior = 'firstRoute',\n}: TabRouterOptions) {\n  const router: Router<\n    TabNavigationState<ParamListBase>,\n    TabActionType | CommonNavigationAction\n  > = {\n    ...BaseRouter,\n\n    type: 'tab',\n\n    getInitialState({ routeNames, routeParamList }) {\n      const index =\n        initialRouteName !== undefined && routeNames.includes(initialRouteName)\n          ? routeNames.indexOf(initialRouteName)\n          : 0;\n\n      const routes = routeNames.map((name) => ({\n        name,\n        key: `${name}-${nanoid()}`,\n        params: routeParamList[name],\n      }));\n\n      const history = getRouteHistory(\n        routes,\n        index,\n        backBehavior,\n        initialRouteName\n      );\n\n      return {\n        stale: false,\n        type: 'tab',\n        key: `tab-${nanoid()}`,\n        index,\n        routeNames,\n        history,\n        routes,\n      };\n    },\n\n    getRehydratedState(partialState, { routeNames, routeParamList }) {\n      let state = partialState;\n\n      if (state.stale === false) {\n        return state;\n      }\n\n      const routes = routeNames.map((name) => {\n        const route = (\n          state as PartialState<TabNavigationState<ParamListBase>>\n        ).routes.find((r) => r.name === name);\n\n        return {\n          ...route,\n          name,\n          key:\n            route && route.name === name && route.key\n              ? route.key\n              : `${name}-${nanoid()}`,\n          params:\n            routeParamList[name] !== undefined\n              ? {\n                  ...routeParamList[name],\n                  ...(route ? route.params : undefined),\n                }\n              : route\n              ? route.params\n              : undefined,\n        } as Route<string>;\n      });\n\n      const index = Math.min(\n        Math.max(routeNames.indexOf(state.routes[state?.index ?? 0]?.name), 0),\n        routes.length - 1\n      );\n\n      const history =\n        state.history?.filter((it) => routes.find((r) => r.key === it.key)) ??\n        [];\n\n      return changeIndex(\n        {\n          stale: false,\n          type: 'tab',\n          key: `tab-${nanoid()}`,\n          index,\n          routeNames,\n          history,\n          routes,\n        },\n        index,\n        backBehavior,\n        initialRouteName\n      );\n    },\n\n    getStateForRouteNamesChange(\n      state,\n      { routeNames, routeParamList, routeKeyChanges }\n    ) {\n      const routes = routeNames.map(\n        (name) =>\n          state.routes.find(\n            (r) => r.name === name && !routeKeyChanges.includes(r.name)\n          ) || {\n            name,\n            key: `${name}-${nanoid()}`,\n            params: routeParamList[name],\n          }\n      );\n\n      const index = Math.max(\n        0,\n        routeNames.indexOf(state.routes[state.index].name)\n      );\n\n      let history = state.history.filter(\n        // Type will always be 'route' for tabs, but could be different in a router extending this (e.g. drawer)\n        (it) => it.type !== 'route' || routes.find((r) => r.key === it.key)\n      );\n\n      if (!history.length) {\n        history = getRouteHistory(\n          routes,\n          index,\n          backBehavior,\n          initialRouteName\n        );\n      }\n\n      return {\n        ...state,\n        history,\n        routeNames,\n        routes,\n        index,\n      };\n    },\n\n    getStateForRouteFocus(state, key) {\n      const index = state.routes.findIndex((r) => r.key === key);\n\n      if (index === -1 || index === state.index) {\n        return state;\n      }\n\n      return changeIndex(state, index, backBehavior, initialRouteName);\n    },\n\n    getStateForAction(state, action, { routeParamList }) {\n      switch (action.type) {\n        case 'JUMP_TO':\n        case 'NAVIGATE': {\n          let index = -1;\n\n          if (action.type === 'NAVIGATE' && action.payload.key) {\n            index = state.routes.findIndex(\n              (route) => route.key === action.payload.key\n            );\n          } else {\n            index = state.routes.findIndex(\n              (route) => route.name === action.payload.name\n            );\n          }\n\n          if (index === -1) {\n            return null;\n          }\n\n          return changeIndex(\n            {\n              ...state,\n              routes: state.routes.map((route, i) => {\n                if (i !== index) {\n                  return route;\n                }\n\n                let params;\n\n                if (action.type === 'NAVIGATE' && action.payload.merge) {\n                  params =\n                    action.payload.params !== undefined ||\n                    routeParamList[route.name] !== undefined\n                      ? {\n                          ...routeParamList[route.name],\n                          ...route.params,\n                          ...action.payload.params,\n                        }\n                      : route.params;\n                } else {\n                  params =\n                    routeParamList[route.name] !== undefined\n                      ? {\n                          ...routeParamList[route.name],\n                          ...action.payload.params,\n                        }\n                      : action.payload.params;\n                }\n\n                const path =\n                  action.type === 'NAVIGATE' && action.payload.path != null\n                    ? action.payload.path\n                    : route.path;\n\n                return params !== route.params || path !== route.path\n                  ? { ...route, path, params }\n                  : route;\n              }),\n            },\n            index,\n            backBehavior,\n            initialRouteName\n          );\n        }\n\n        case 'GO_BACK': {\n          if (state.history.length === 1) {\n            return null;\n          }\n\n          const previousKey = state.history[state.history.length - 2].key;\n          const index = state.routes.findIndex(\n            (route) => route.key === previousKey\n          );\n\n          if (index === -1) {\n            return null;\n          }\n\n          return {\n            ...state,\n            history: state.history.slice(0, -1),\n            index,\n          };\n        }\n\n        default:\n          return BaseRouter.getStateForAction(state, action);\n      }\n    },\n\n    shouldActionChangeFocus(action) {\n      return action.type === 'NAVIGATE';\n    },\n\n    actionCreators: TabActions,\n  };\n\n  return router;\n}\n"]}