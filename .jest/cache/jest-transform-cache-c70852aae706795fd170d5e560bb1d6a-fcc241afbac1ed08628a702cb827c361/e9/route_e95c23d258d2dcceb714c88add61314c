cee744c230c0678c466eedeab9c73378
var conversions = require("./conversions");

function buildGraph() {
  var graph = {};
  var models = Object.keys(conversions);

  for (var len = models.length, i = 0; i < len; i++) {
    graph[models[i]] = {
      distance: -1,
      parent: null
    };
  }

  return graph;
}

function deriveBFS(fromModel) {
  var graph = buildGraph();
  var queue = [fromModel];
  graph[fromModel].distance = 0;

  while (queue.length) {
    var current = queue.pop();
    var adjacents = Object.keys(conversions[current]);

    for (var len = adjacents.length, i = 0; i < len; i++) {
      var adjacent = adjacents[i];
      var node = graph[adjacent];

      if (node.distance === -1) {
        node.distance = graph[current].distance + 1;
        node.parent = current;
        queue.unshift(adjacent);
      }
    }
  }

  return graph;
}

function link(from, to) {
  return function (args) {
    return to(from(args));
  };
}

function wrapConversion(toModel, graph) {
  var path = [graph[toModel].parent, toModel];
  var fn = conversions[graph[toModel].parent][toModel];
  var cur = graph[toModel].parent;

  while (graph[cur].parent) {
    path.unshift(graph[cur].parent);
    fn = link(conversions[graph[cur].parent][cur], fn);
    cur = graph[cur].parent;
  }

  fn.conversion = path;
  return fn;
}

module.exports = function (fromModel) {
  var graph = deriveBFS(fromModel);
  var conversion = {};
  var models = Object.keys(graph);

  for (var len = models.length, i = 0; i < len; i++) {
    var toModel = models[i];
    var node = graph[toModel];

    if (node.parent === null) {
      continue;
    }

    conversion[toModel] = wrapConversion(toModel, graph);
  }

  return conversion;
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInJvdXRlLmpzIl0sIm5hbWVzIjpbImNvbnZlcnNpb25zIiwicmVxdWlyZSIsImJ1aWxkR3JhcGgiLCJncmFwaCIsIm1vZGVscyIsIk9iamVjdCIsImtleXMiLCJsZW4iLCJsZW5ndGgiLCJpIiwiZGlzdGFuY2UiLCJwYXJlbnQiLCJkZXJpdmVCRlMiLCJmcm9tTW9kZWwiLCJxdWV1ZSIsImN1cnJlbnQiLCJwb3AiLCJhZGphY2VudHMiLCJhZGphY2VudCIsIm5vZGUiLCJ1bnNoaWZ0IiwibGluayIsImZyb20iLCJ0byIsImFyZ3MiLCJ3cmFwQ29udmVyc2lvbiIsInRvTW9kZWwiLCJwYXRoIiwiZm4iLCJjdXIiLCJjb252ZXJzaW9uIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUEsSUFBSUEsV0FBVyxHQUFHQyxPQUFPLGlCQUF6Qjs7QUFhQSxTQUFTQyxVQUFULEdBQXNCO0FBQ3JCLE1BQUlDLEtBQUssR0FBRyxFQUFaO0FBRUEsTUFBSUMsTUFBTSxHQUFHQyxNQUFNLENBQUNDLElBQVAsQ0FBWU4sV0FBWixDQUFiOztBQUVBLE9BQUssSUFBSU8sR0FBRyxHQUFHSCxNQUFNLENBQUNJLE1BQWpCLEVBQXlCQyxDQUFDLEdBQUcsQ0FBbEMsRUFBcUNBLENBQUMsR0FBR0YsR0FBekMsRUFBOENFLENBQUMsRUFBL0MsRUFBbUQ7QUFDbEROLElBQUFBLEtBQUssQ0FBQ0MsTUFBTSxDQUFDSyxDQUFELENBQVAsQ0FBTCxHQUFtQjtBQUdsQkMsTUFBQUEsUUFBUSxFQUFFLENBQUMsQ0FITztBQUlsQkMsTUFBQUEsTUFBTSxFQUFFO0FBSlUsS0FBbkI7QUFNQTs7QUFFRCxTQUFPUixLQUFQO0FBQ0E7O0FBR0QsU0FBU1MsU0FBVCxDQUFtQkMsU0FBbkIsRUFBOEI7QUFDN0IsTUFBSVYsS0FBSyxHQUFHRCxVQUFVLEVBQXRCO0FBQ0EsTUFBSVksS0FBSyxHQUFHLENBQUNELFNBQUQsQ0FBWjtBQUVBVixFQUFBQSxLQUFLLENBQUNVLFNBQUQsQ0FB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QUQsQ0FBaEI7O0FBRUEsUUFBSVAsSUFBSSxDQUFDUixNQUFMLEtBQWdCLElBQXBCLEVBQTBCO0FBRXpCO0FBQ0E7O0FBRURtQixJQUFBQSxVQUFVLENBQUNKLE9BQUQsQ0FBVixHQUFzQkQsY0FBYyxDQUFDQyxPQUFELEVBQVV2QixLQUFWLENBQXBDO0FBQ0E7O0FBRUQsU0FBTzJCLFVBQVA7QUFDQSxDQWxCRCIsInNvdXJjZXNDb250ZW50IjpbInZhciBjb252ZXJzaW9ucyA9IHJlcXVpcmUoJy4vY29udmVyc2lvbnMnKTtcblxuLypcblx0dGhpcyBmdW5jdGlvbiByb3V0ZXMgYSBtb2RlbCB0byBhbGwgb3RoZXIgbW9kZWxzLlxuXG5cdGFsbCBmdW5jdGlvbnMgdGhhdCBhcmUgcm91dGVkIGhhdmUgYSBwcm9wZXJ0eSBgLmNvbnZlcnNpb25gIGF0dGFjaGVkXG5cdHRvIHRoZSByZXR1cm5lZCBzeW50aGV0aWMgZnVuY3Rpb24uIFRoaXMgcHJvcGVydHkgaXMgYW4gYXJyYXlcblx0b2Ygc3RyaW5ncywgZWFjaCB3aXRoIHRoZSBzdGVwcyBpbiBiZXR3ZWVuIHRoZSAnZnJvbScgYW5kICd0bydcblx0Y29sb3IgbW9kZWxzIChpbmNsdXNpdmUpLlxuXG5cdGNvbnZlcnNpb25zIHRoYXQgYXJlIG5vdCBwb3NzaWJsZSBzaW1wbHkgYXJlIG5vdCBpbmNsdWRlZC5cbiovXG5cbmZ1bmN0aW9uIGJ1aWxkR3JhcGgoKSB7XG5cdHZhciBncmFwaCA9IHt9O1xuXHQvLyBodHRwczovL2pzcGVyZi5jb20vb2JqZWN0LWtleXMtdnMtZm9yLWluLXdpdGgtY2xvc3VyZS8zXG5cdHZhciBtb2RlbHMgPSBPYmplY3Qua2V5cyhjb252ZXJzaW9ucyk7XG5cblx0Zm9yICh2YXIgbGVuID0gbW9kZWxzLmxlbmd0aCwgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuXHRcdGdyYXBoW21vZGVsc1tpXV0gPSB7XG5cdFx0XHQvLyBodHRwOi8vanNwZXJmLmNvbS8xLXZzLWluZmluaXR5XG5cdFx0XHQvLyBtaWNyby1vcHQsIGJ1dCB0aGlzIGlzIHNpbXBsZS5cblx0XHRcdGRpc3RhbmNlOiAtMSxcblx0XHRcdHBhcmVudDogbnVsbFxuXHRcdH07XG5cdH1cblxuXHRyZXR1cm4gZ3JhcGg7XG59XG5cbi8vIGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0JyZWFkdGgtZmlyc3Rfc2VhcmNoXG5mdW5jdGlvbiBkZXJpdmVCRlMoZnJvbU1vZGVsKSB7XG5cdHZhciBncmFwaCA9IGJ1aWxkR3JhcGgoKTtcblx0dmFyIHF1ZXVlID0gW2Zyb21Nb2RlbF07IC8vIHVuc2hpZnQgLT4gcXVldWUgLT4gcG9wXG5cblx0Z3JhcGhbZnJvbU1vZGVsXS5kaXN0YW5jZSA9IDA7XG5cblx0d2hpbGUgKHF1ZXVlLmxlbmd0aCkge1xuXHRcdHZhciBjdXJyZW50ID0gcXVldWUucG9wKCk7XG5cdFx0dmFyIGFkamFjZW50cyA9IE9iamVjdC5rZXlzKGNvbnZlcnNpb25zW2N1cnJlbnRdKTtcblxuXHRcdGZvciAodmFyIGxlbiA9IGFkamFjZW50cy5sZW5ndGgsIGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcblx0XHRcdHZhciBhZGphY2VudCA9IGFkamFjZW50c1tpXTtcblx0XHRcdHZhciBub2RlID0gZ3JhcGhbYWRqYWNlbnRdO1xuXG5cdFx0XHRpZiAobm9kZS5kaXN0YW5jZSA9PT0gLTEpIHtcblx0XHRcdFx0bm9kZS5kaXN0YW5jZSA9IGdyYXBoW2N1cnJlbnRdLmRpc3RhbmNlICsgMTtcblx0XHRcdFx0bm9kZS5wYXJlbnQgPSBjdXJyZW50O1xuXHRcdFx0XHRxdWV1ZS51bnNoaWZ0KGFkamFjZW50KTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gZ3JhcGg7XG59XG5cbmZ1bmN0aW9uIGxpbmsoZnJvbSwgdG8pIHtcblx0cmV0dXJuIGZ1bmN0aW9uIChhcmdzKSB7XG5cdFx0cmV0dXJuIHRvKGZyb20oYXJncykpO1xuXHR9O1xufVxuXG5mdW5jdGlvbiB3cmFwQ29udmVyc2lvbih0b01vZGVsLCBncmFwaCkge1xuXHR2YXIgcGF0aCA9IFtncmFwaFt0b01vZGVsXS5wYXJlbnQsIHRvTW9kZWxdO1xuXHR2YXIgZm4gPSBjb252ZXJzaW9uc1tncmFwaFt0b01vZGVsXS5wYXJlbnRdW3RvTW9kZWxdO1xuXG5cdHZhciBjdXIgPSBncmFwaFt0b01vZGVsXS5wYXJlbnQ7XG5cdHdoaWxlIChncmFwaFtjdXJdLnBhcmVudCkge1xuXHRcdHBhdGgudW5zaGlmdChncmFwaFtjdXJdLnBhcmVudCk7XG5cdFx0Zm4gPSBsaW5rKGNvbnZlcnNpb25zW2dyYXBoW2N1cl0ucGFyZW50XVtjdXJdLCBmbik7XG5cdFx0Y3VyID0gZ3JhcGhbY3VyXS5wYXJlbnQ7XG5cdH1cblxuXHRmbi5jb252ZXJzaW9uID0gcGF0aDtcblx0cmV0dXJuIGZuO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChmcm9tTW9kZWwpIHtcblx0dmFyIGdyYXBoID0gZGVyaXZlQkZTKGZyb21Nb2RlbCk7XG5cdHZhciBjb252ZXJzaW9uID0ge307XG5cblx0dmFyIG1vZGVscyA9IE9iamVjdC5rZXlzKGdyYXBoKTtcblx0Zm9yICh2YXIgbGVuID0gbW9kZWxzLmxlbmd0aCwgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuXHRcdHZhciB0b01vZGVsID0gbW9kZWxzW2ldO1xuXHRcdHZhciBub2RlID0gZ3JhcGhbdG9Nb2RlbF07XG5cblx0XHRpZiAobm9kZS5wYXJlbnQgPT09IG51bGwpIHtcblx0XHRcdC8vIG5vIHBvc3NpYmxlIGNvbnZlcnNpb24sIG9yIHRoaXMgbm9kZSBpcyB0aGUgc291cmNlIG1vZGVsLlxuXHRcdFx0Y29udGludWU7XG5cdFx0fVxuXG5cdFx0Y29udmVyc2lvblt0b01vZGVsXSA9IHdyYXBDb252ZXJzaW9uKHRvTW9kZWwsIGdyYXBoKTtcblx0fVxuXG5cdHJldHVybiBjb252ZXJzaW9uO1xufTtcblxuIl19