0d61dc8a1179656df767c9f583924600
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _DeprecatedImagePropType = _interopRequireDefault(require("../DeprecatedPropTypes/DeprecatedImagePropType"));

var React = _interopRequireWildcard(require("react"));

var _StyleSheet = _interopRequireDefault(require("../StyleSheet/StyleSheet"));

var _ImageInjection = _interopRequireDefault(require("./ImageInjection"));

var _ImageAnalyticsTagContext = _interopRequireDefault(require("./ImageAnalyticsTagContext"));

var _flattenStyle = _interopRequireDefault(require("../StyleSheet/flattenStyle"));

var _resolveAssetSource = _interopRequireDefault(require("./resolveAssetSource"));

var _NativeImageLoaderIOS = _interopRequireDefault(require("./NativeImageLoaderIOS"));

var _ImageViewNativeComponent = _interopRequireDefault(require("./ImageViewNativeComponent"));

var _jsxRuntime = require("react/jsx-runtime");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function getSize(uri, success, failure) {
  _NativeImageLoaderIOS.default.getSize(uri).then(function (_ref) {
    var _ref2 = (0, _slicedToArray2.default)(_ref, 2),
        width = _ref2[0],
        height = _ref2[1];

    return success(width, height);
  }).catch(failure || function () {
    console.warn('Failed to get size for image ' + uri);
  });
}

function getSizeWithHeaders(uri, headers, success, failure) {
  return _NativeImageLoaderIOS.default.getSizeWithHeaders(uri, headers).then(function (sizes) {
    success(sizes.width, sizes.height);
  }).catch(failure || function () {
    console.warn('Failed to get size for image: ' + uri);
  });
}

function prefetchWithMetadata(url, queryRootName, rootTag) {
  if (_NativeImageLoaderIOS.default.prefetchImageWithMetadata) {
    return _NativeImageLoaderIOS.default.prefetchImageWithMetadata(url, queryRootName, rootTag ? rootTag : 0);
  } else {
    return _NativeImageLoaderIOS.default.prefetchImage(url);
  }
}

function prefetch(url) {
  return _NativeImageLoaderIOS.default.prefetchImage(url);
}

function queryCache(urls) {
  return _regenerator.default.async(function queryCache$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          _context.next = 2;
          return _regenerator.default.awrap(_NativeImageLoaderIOS.default.queryCache(urls));

        case 2:
          return _context.abrupt("return", _context.sent);

        case 3:
        case "end":
          return _context.stop();
      }
    }
  }, null, null, null, Promise);
}

var Image = function Image(props, forwardedRef) {
  var source = (0, _resolveAssetSource.default)(props.source) || {
    uri: undefined,
    width: undefined,
    height: undefined
  };
  var sources;
  var style;

  if (Array.isArray(source)) {
    style = (0, _flattenStyle.default)([styles.base, props.style]) || {};
    sources = source;
  } else {
    var _width = source.width,
        _height = source.height,
        uri = source.uri;
    style = (0, _flattenStyle.default)([{
      width: _width,
      height: _height
    }, styles.base, props.style]) || {};
    sources = [source];

    if (uri === '') {
      console.warn('source.uri should not be an empty string');
    }
  }

  var resizeMode = props.resizeMode || style.resizeMode || 'cover';
  var tintColor = style.tintColor;

  if (props.src != null) {
    console.warn('The <Image> component requires a `source` property rather than `src`.');
  }

  if (props.children != null) {
    throw new Error('The <Image> component cannot contain children. If you want to render content on top of the image, consider using the <ImageBackground> component or absolute positioning.');
  }

  return (0, _jsxRuntime.jsx)(_ImageAnalyticsTagContext.default.Consumer, {
    children: function children(analyticTag) {
      return (0, _jsxRuntime.jsx)(_ImageViewNativeComponent.default, (0, _extends2.default)({}, props, {
        ref: forwardedRef,
        style: style,
        resizeMode: resizeMode,
        tintColor: tintColor,
        source: sources,
        internal_analyticTag: analyticTag
      }));
    }
  });
};

Image = React.forwardRef(Image);

if (_ImageInjection.default.unstable_createImageComponent != null) {
  Image = _ImageInjection.default.unstable_createImageComponent(Image);
}

Image.displayName = 'Image';
Image.getSize = getSize;
Image.getSizeWithHeaders = getSizeWithHeaders;
Image.prefetch = prefetch;
Image.prefetchWithMetadata = prefetchWithMetadata;
Image.queryCache = queryCache;
Image.resolveAssetSource = _resolveAssetSource.default;
Image.propTypes = _DeprecatedImagePropType.default;

var styles = _StyleSheet.default.create({
  base: {
    overflow: 'hidden'
  }
});

module.exports = Image;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,