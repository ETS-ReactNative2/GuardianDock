6c7ede3b46527cf274cc95badb3f814f
"use strict";

var _interopRequireDefault2 = require("@babel/runtime/helpers/interopRequireDefault");

var _objectWithoutProperties2 = _interopRequireDefault2(require("@babel/runtime/helpers/objectWithoutProperties"));

var _excluded = ["numeric", "children", "onPress", "sortDirection", "theme", "style", "numberOfLines"];
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DataTableTitle = exports.default = void 0;

var React = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

var _color = _interopRequireDefault(require("color"));

var _MaterialCommunityIcon = _interopRequireDefault(require("../MaterialCommunityIcon"));

var _Text = _interopRequireDefault(require("../Typography/Text"));

var _theming = require("../../core/theming");

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

function _getRequireWildcardCache() {
  if (typeof WeakMap !== "function") return null;
  var cache = new WeakMap();

  _getRequireWildcardCache = function _getRequireWildcardCache() {
    return cache;
  };

  return cache;
}

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  }

  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }

  var cache = _getRequireWildcardCache();

  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }

  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }

  newObj.default = obj;

  if (cache) {
    cache.set(obj, newObj);
  }

  return newObj;
}

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

var DataTableTitle = function DataTableTitle(_ref) {
  var numeric = _ref.numeric,
      children = _ref.children,
      onPress = _ref.onPress,
      sortDirection = _ref.sortDirection,
      theme = _ref.theme,
      style = _ref.style,
      _ref$numberOfLines = _ref.numberOfLines,
      numberOfLines = _ref$numberOfLines === void 0 ? 1 : _ref$numberOfLines,
      rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);

  var _React$useRef = React.useRef(new _reactNative.Animated.Value(sortDirection === 'ascending' ? 0 : 1)),
      spinAnim = _React$useRef.current;

  React.useEffect(function () {
    _reactNative.Animated.timing(spinAnim, {
      toValue: sortDirection === 'ascending' ? 0 : 1,
      duration: 150,
      useNativeDriver: true
    }).start();
  }, [sortDirection, spinAnim]);
  var textColor = (0, _color.default)(theme.colors.text).alpha(0.6).rgb().string();
  var spin = spinAnim.interpolate({
    inputRange: [0, 1],
    outputRange: ['0deg', '180deg']
  });
  var icon = sortDirection ? React.createElement(_reactNative.Animated.View, {
    style: [styles.icon, {
      transform: [{
        rotate: spin
      }]
    }]
  }, React.createElement(_MaterialCommunityIcon.default, {
    name: "arrow-up",
    size: 16,
    color: theme.colors.text,
    direction: _reactNative.I18nManager.isRTL ? 'rtl' : 'ltr'
  })) : null;
  return React.createElement(_reactNative.TouchableWithoutFeedback, _extends({
    disabled: !onPress,
    onPress: onPress
  }, rest), React.createElement(_reactNative.View, {
    style: [styles.container, numeric && styles.right, style]
  }, icon, React.createElement(_Text.default, {
    style: [styles.cell, sortDirection ? styles.sorted : {
      color: textColor
    }],
    numberOfLines: numberOfLines
  }, children)));
};

exports.DataTableTitle = DataTableTitle;
DataTableTitle.displayName = 'DataTable.Title';

var styles = _reactNative.StyleSheet.create({
  container: {
    flex: 1,
    flexDirection: 'row',
    alignContent: 'center',
    paddingVertical: 12
  },
  right: {
    justifyContent: 'flex-end'
  },
  cell: {
    height: 24,
    lineHeight: 24,
    fontSize: 12,
    fontWeight: '500',
    alignItems: 'center'
  },
  sorted: {
    marginLeft: 8
  },
  icon: {
    height: 24,
    justifyContent: 'center'
  }
});

var _default = (0, _theming.withTheme)(DataTableTitle);

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,