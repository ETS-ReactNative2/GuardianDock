{"version":3,"sources":["Touchable.js"],"names":["extractSingleTouch","nativeEvent","touches","changedTouches","hasTouches","length","hasChangedTouches","States","NOT_RESPONDER","RESPONDER_INACTIVE_PRESS_IN","RESPONDER_INACTIVE_PRESS_OUT","RESPONDER_ACTIVE_PRESS_IN","RESPONDER_ACTIVE_PRESS_OUT","RESPONDER_ACTIVE_LONG_PRESS_IN","RESPONDER_ACTIVE_LONG_PRESS_OUT","ERROR","baseStatesConditions","IsActive","IsPressingIn","IsLongPressingIn","Signals","DELAY","RESPONDER_GRANT","RESPONDER_RELEASE","RESPONDER_TERMINATED","ENTER_PRESS_RECT","LEAVE_PRESS_RECT","LONG_PRESS_DETECTED","Transitions","error","HIGHLIGHT_DELAY_MS","PRESS_EXPAND_PX","LONG_PRESS_THRESHOLD","LONG_PRESS_DELAY_MS","LONG_PRESS_ALLOWED_MOVEMENT","TouchableMixin","componentDidMount","Platform","isTV","componentWillUnmount","touchableDelayTimeout","clearTimeout","longPressDelayTimeout","pressOutDelayTimeout","touchableGetInitialState","touchable","touchState","undefined","responderID","touchableHandleResponderTerminationRequest","props","rejectResponderTermination","touchableHandleStartShouldSetResponder","disabled","touchableLongPressCancelsPress","touchableHandleResponderGrant","e","dispatchID","currentTarget","persist","state","_receiveSignal","delayMS","touchableGetHighlightDelayMS","Math","max","isNaN","setTimeout","_handleDelay","bind","longDelayMS","touchableGetLongPressDelayMS","_handleLongDelay","touchableHandleResponderRelease","pressInLocation","touchableHandleResponderTerminate","touchableHandleResponderMove","positionOnActivate","dimensionsOnActivate","pressRectOffset","touchableGetPressRectOffset","left","right","top","bottom","pressExpandLeft","pressExpandTop","pressExpandRight","pressExpandBottom","hitSlop","touchableGetHitSlop","touch","pageX","pageY","movedDistance","_getDistanceBetweenPoints","_cancelLongPressDelayTimeout","isTouchWithinActive","width","height","prevState","curState","touchableHandleFocus","onFocus","touchableHandleBlur","onBlur","_remeasureMetricsOnActivation","UIManager","measure","_handleQueryLayout","l","t","w","h","globalX","globalY","Position","release","BoundingDimensions","getPooled","signal","nextState","Error","_performSideEffectsForTransition","_isHighlight","_savePressInLocation","locationX","locationY","aX","aY","bX","bY","deltaX","deltaY","sqrt","curIsHighlight","newIsHighlight","isFinalSignal","isInitialTransition","isActiveTransition","touchableHandleLongPress","_startHighlight","_endHighlight","hasLongPressHandler","onLongPress","pressIsLongButStillCallOnPress","shouldInvokePress","touchableHandlePress","OS","touchSoundDisabled","SoundManager","playTouchSound","touchableHandleActivePressIn","touchableHandleActivePressOut","touchableGetPressOutDelayMS","withoutDefaultFocusAndBlur","TouchableMixinWithoutDefaultFocusAndBlur","Touchable","Mixin","renderDebugView","color","__DEV__","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n * @format\n */\n\nimport * as React from 'react';\nimport BoundingDimensions from './BoundingDimensions';\nimport Platform from '../../Utilities/Platform';\nimport Position from './Position';\nimport UIManager from '../../ReactNative/UIManager';\nimport SoundManager from '../Sound/SoundManager';\n\nimport {PressabilityDebugView} from '../../Pressability/PressabilityDebug';\n\nimport type {ColorValue} from '../../StyleSheet/StyleSheet';\nimport type {EdgeInsetsProp} from '../../StyleSheet/EdgeInsetsPropType';\nimport type {PressEvent} from '../../Types/CoreEventTypes';\n\nconst extractSingleTouch = nativeEvent => {\n  const touches = nativeEvent.touches;\n  const changedTouches = nativeEvent.changedTouches;\n  const hasTouches = touches && touches.length > 0;\n  const hasChangedTouches = changedTouches && changedTouches.length > 0;\n\n  return !hasTouches && hasChangedTouches\n    ? changedTouches[0]\n    : hasTouches\n    ? touches[0]\n    : nativeEvent;\n};\n\n/**\n * `Touchable`: Taps done right.\n *\n * You hook your `ResponderEventPlugin` events into `Touchable`. `Touchable`\n * will measure time/geometry and tells you when to give feedback to the user.\n *\n * ====================== Touchable Tutorial ===============================\n * The `Touchable` mixin helps you handle the \"press\" interaction. It analyzes\n * the geometry of elements, and observes when another responder (scroll view\n * etc) has stolen the touch lock. It notifies your component when it should\n * give feedback to the user. (bouncing/highlighting/unhighlighting).\n *\n * - When a touch was activated (typically you highlight)\n * - When a touch was deactivated (typically you unhighlight)\n * - When a touch was \"pressed\" - a touch ended while still within the geometry\n *   of the element, and no other element (like scroller) has \"stolen\" touch\n *   lock (\"responder\") (Typically you bounce the element).\n *\n * A good tap interaction isn't as simple as you might think. There should be a\n * slight delay before showing a highlight when starting a touch. If a\n * subsequent touch move exceeds the boundary of the element, it should\n * unhighlight, but if that same touch is brought back within the boundary, it\n * should rehighlight again. A touch can move in and out of that boundary\n * several times, each time toggling highlighting, but a \"press\" is only\n * triggered if that touch ends while within the element's boundary and no\n * scroller (or anything else) has stolen the lock on touches.\n *\n * To create a new type of component that handles interaction using the\n * `Touchable` mixin, do the following:\n *\n * - Initialize the `Touchable` state.\n *\n *   getInitialState: function() {\n *     return merge(this.touchableGetInitialState(), yourComponentState);\n *   }\n *\n * - Choose the rendered component who's touches should start the interactive\n *   sequence. On that rendered node, forward all `Touchable` responder\n *   handlers. You can choose any rendered node you like. Choose a node whose\n *   hit target you'd like to instigate the interaction sequence:\n *\n *   // In render function:\n *   return (\n *     <View\n *       onStartShouldSetResponder={this.touchableHandleStartShouldSetResponder}\n *       onResponderTerminationRequest={this.touchableHandleResponderTerminationRequest}\n *       onResponderGrant={this.touchableHandleResponderGrant}\n *       onResponderMove={this.touchableHandleResponderMove}\n *       onResponderRelease={this.touchableHandleResponderRelease}\n *       onResponderTerminate={this.touchableHandleResponderTerminate}>\n *       <View>\n *         Even though the hit detection/interactions are triggered by the\n *         wrapping (typically larger) node, we usually end up implementing\n *         custom logic that highlights this inner one.\n *       </View>\n *     </View>\n *   );\n *\n * - You may set up your own handlers for each of these events, so long as you\n *   also invoke the `touchable*` handlers inside of your custom handler.\n *\n * - Implement the handlers on your component class in order to provide\n *   feedback to the user. See documentation for each of these class methods\n *   that you should implement.\n *\n *   touchableHandlePress: function() {\n *      this.performBounceAnimation();  // or whatever you want to do.\n *   },\n *   touchableHandleActivePressIn: function() {\n *     this.beginHighlighting(...);  // Whatever you like to convey activation\n *   },\n *   touchableHandleActivePressOut: function() {\n *     this.endHighlighting(...);  // Whatever you like to convey deactivation\n *   },\n *\n * - There are more advanced methods you can implement (see documentation below):\n *   touchableGetHighlightDelayMS: function() {\n *     return 20;\n *   }\n *   // In practice, *always* use a predeclared constant (conserve memory).\n *   touchableGetPressRectOffset: function() {\n *     return {top: 20, left: 20, right: 20, bottom: 100};\n *   }\n */\n\n/**\n * Touchable states.\n */\n\nconst States = {\n  NOT_RESPONDER: 'NOT_RESPONDER', // Not the responder\n  RESPONDER_INACTIVE_PRESS_IN: 'RESPONDER_INACTIVE_PRESS_IN', // Responder, inactive, in the `PressRect`\n  RESPONDER_INACTIVE_PRESS_OUT: 'RESPONDER_INACTIVE_PRESS_OUT', // Responder, inactive, out of `PressRect`\n  RESPONDER_ACTIVE_PRESS_IN: 'RESPONDER_ACTIVE_PRESS_IN', // Responder, active, in the `PressRect`\n  RESPONDER_ACTIVE_PRESS_OUT: 'RESPONDER_ACTIVE_PRESS_OUT', // Responder, active, out of `PressRect`\n  RESPONDER_ACTIVE_LONG_PRESS_IN: 'RESPONDER_ACTIVE_LONG_PRESS_IN', // Responder, active, in the `PressRect`, after long press threshold\n  RESPONDER_ACTIVE_LONG_PRESS_OUT: 'RESPONDER_ACTIVE_LONG_PRESS_OUT', // Responder, active, out of `PressRect`, after long press threshold\n  ERROR: 'ERROR',\n};\n\ntype State =\n  | typeof States.NOT_RESPONDER\n  | typeof States.RESPONDER_INACTIVE_PRESS_IN\n  | typeof States.RESPONDER_INACTIVE_PRESS_OUT\n  | typeof States.RESPONDER_ACTIVE_PRESS_IN\n  | typeof States.RESPONDER_ACTIVE_PRESS_OUT\n  | typeof States.RESPONDER_ACTIVE_LONG_PRESS_IN\n  | typeof States.RESPONDER_ACTIVE_LONG_PRESS_OUT\n  | typeof States.ERROR;\n\n/*\n * Quick lookup map for states that are considered to be \"active\"\n */\n\nconst baseStatesConditions = {\n  NOT_RESPONDER: false,\n  RESPONDER_INACTIVE_PRESS_IN: false,\n  RESPONDER_INACTIVE_PRESS_OUT: false,\n  RESPONDER_ACTIVE_PRESS_IN: false,\n  RESPONDER_ACTIVE_PRESS_OUT: false,\n  RESPONDER_ACTIVE_LONG_PRESS_IN: false,\n  RESPONDER_ACTIVE_LONG_PRESS_OUT: false,\n  ERROR: false,\n};\n\nconst IsActive = {\n  ...baseStatesConditions,\n  RESPONDER_ACTIVE_PRESS_OUT: true,\n  RESPONDER_ACTIVE_PRESS_IN: true,\n};\n\n/**\n * Quick lookup for states that are considered to be \"pressing\" and are\n * therefore eligible to result in a \"selection\" if the press stops.\n */\nconst IsPressingIn = {\n  ...baseStatesConditions,\n  RESPONDER_INACTIVE_PRESS_IN: true,\n  RESPONDER_ACTIVE_PRESS_IN: true,\n  RESPONDER_ACTIVE_LONG_PRESS_IN: true,\n};\n\nconst IsLongPressingIn = {\n  ...baseStatesConditions,\n  RESPONDER_ACTIVE_LONG_PRESS_IN: true,\n};\n\n/**\n * Inputs to the state machine.\n */\nconst Signals = {\n  DELAY: 'DELAY',\n  RESPONDER_GRANT: 'RESPONDER_GRANT',\n  RESPONDER_RELEASE: 'RESPONDER_RELEASE',\n  RESPONDER_TERMINATED: 'RESPONDER_TERMINATED',\n  ENTER_PRESS_RECT: 'ENTER_PRESS_RECT',\n  LEAVE_PRESS_RECT: 'LEAVE_PRESS_RECT',\n  LONG_PRESS_DETECTED: 'LONG_PRESS_DETECTED',\n};\n\ntype Signal =\n  | typeof Signals.DELAY\n  | typeof Signals.RESPONDER_GRANT\n  | typeof Signals.RESPONDER_RELEASE\n  | typeof Signals.RESPONDER_TERMINATED\n  | typeof Signals.ENTER_PRESS_RECT\n  | typeof Signals.LEAVE_PRESS_RECT\n  | typeof Signals.LONG_PRESS_DETECTED;\n\n/**\n * Mapping from States x Signals => States\n */\nconst Transitions = {\n  NOT_RESPONDER: {\n    DELAY: States.ERROR,\n    RESPONDER_GRANT: States.RESPONDER_INACTIVE_PRESS_IN,\n    RESPONDER_RELEASE: States.ERROR,\n    RESPONDER_TERMINATED: States.ERROR,\n    ENTER_PRESS_RECT: States.ERROR,\n    LEAVE_PRESS_RECT: States.ERROR,\n    LONG_PRESS_DETECTED: States.ERROR,\n  },\n  RESPONDER_INACTIVE_PRESS_IN: {\n    DELAY: States.RESPONDER_ACTIVE_PRESS_IN,\n    RESPONDER_GRANT: States.ERROR,\n    RESPONDER_RELEASE: States.NOT_RESPONDER,\n    RESPONDER_TERMINATED: States.NOT_RESPONDER,\n    ENTER_PRESS_RECT: States.RESPONDER_INACTIVE_PRESS_IN,\n    LEAVE_PRESS_RECT: States.RESPONDER_INACTIVE_PRESS_OUT,\n    LONG_PRESS_DETECTED: States.ERROR,\n  },\n  RESPONDER_INACTIVE_PRESS_OUT: {\n    DELAY: States.RESPONDER_ACTIVE_PRESS_OUT,\n    RESPONDER_GRANT: States.ERROR,\n    RESPONDER_RELEASE: States.NOT_RESPONDER,\n    RESPONDER_TERMINATED: States.NOT_RESPONDER,\n    ENTER_PRESS_RECT: States.RESPONDER_INACTIVE_PRESS_IN,\n    LEAVE_PRESS_RECT: States.RESPONDER_INACTIVE_PRESS_OUT,\n    LONG_PRESS_DETECTED: States.ERROR,\n  },\n  RESPONDER_ACTIVE_PRESS_IN: {\n    DELAY: States.ERROR,\n    RESPONDER_GRANT: States.ERROR,\n    RESPONDER_RELEASE: States.NOT_RESPONDER,\n    RESPONDER_TERMINATED: States.NOT_RESPONDER,\n    ENTER_PRESS_RECT: States.RESPONDER_ACTIVE_PRESS_IN,\n    LEAVE_PRESS_RECT: States.RESPONDER_ACTIVE_PRESS_OUT,\n    LONG_PRESS_DETECTED: States.RESPONDER_ACTIVE_LONG_PRESS_IN,\n  },\n  RESPONDER_ACTIVE_PRESS_OUT: {\n    DELAY: States.ERROR,\n    RESPONDER_GRANT: States.ERROR,\n    RESPONDER_RELEASE: States.NOT_RESPONDER,\n    RESPONDER_TERMINATED: States.NOT_RESPONDER,\n    ENTER_PRESS_RECT: States.RESPONDER_ACTIVE_PRESS_IN,\n    LEAVE_PRESS_RECT: States.RESPONDER_ACTIVE_PRESS_OUT,\n    LONG_PRESS_DETECTED: States.ERROR,\n  },\n  RESPONDER_ACTIVE_LONG_PRESS_IN: {\n    DELAY: States.ERROR,\n    RESPONDER_GRANT: States.ERROR,\n    RESPONDER_RELEASE: States.NOT_RESPONDER,\n    RESPONDER_TERMINATED: States.NOT_RESPONDER,\n    ENTER_PRESS_RECT: States.RESPONDER_ACTIVE_LONG_PRESS_IN,\n    LEAVE_PRESS_RECT: States.RESPONDER_ACTIVE_LONG_PRESS_OUT,\n    LONG_PRESS_DETECTED: States.RESPONDER_ACTIVE_LONG_PRESS_IN,\n  },\n  RESPONDER_ACTIVE_LONG_PRESS_OUT: {\n    DELAY: States.ERROR,\n    RESPONDER_GRANT: States.ERROR,\n    RESPONDER_RELEASE: States.NOT_RESPONDER,\n    RESPONDER_TERMINATED: States.NOT_RESPONDER,\n    ENTER_PRESS_RECT: States.RESPONDER_ACTIVE_LONG_PRESS_IN,\n    LEAVE_PRESS_RECT: States.RESPONDER_ACTIVE_LONG_PRESS_OUT,\n    LONG_PRESS_DETECTED: States.ERROR,\n  },\n  error: {\n    DELAY: States.NOT_RESPONDER,\n    RESPONDER_GRANT: States.RESPONDER_INACTIVE_PRESS_IN,\n    RESPONDER_RELEASE: States.NOT_RESPONDER,\n    RESPONDER_TERMINATED: States.NOT_RESPONDER,\n    ENTER_PRESS_RECT: States.NOT_RESPONDER,\n    LEAVE_PRESS_RECT: States.NOT_RESPONDER,\n    LONG_PRESS_DETECTED: States.NOT_RESPONDER,\n  },\n};\n\n// ==== Typical Constants for integrating into UI components ====\n// var HIT_EXPAND_PX = 20;\n// var HIT_VERT_OFFSET_PX = 10;\nconst HIGHLIGHT_DELAY_MS = 130;\n\nconst PRESS_EXPAND_PX = 20;\n\nconst LONG_PRESS_THRESHOLD = 500;\n\nconst LONG_PRESS_DELAY_MS = LONG_PRESS_THRESHOLD - HIGHLIGHT_DELAY_MS;\n\nconst LONG_PRESS_ALLOWED_MOVEMENT = 10;\n\n// Default amount \"active\" region protrudes beyond box\n\n/**\n * By convention, methods prefixed with underscores are meant to be @private,\n * and not @protected. Mixers shouldn't access them - not even to provide them\n * as callback handlers.\n *\n *\n * ========== Geometry =========\n * `Touchable` only assumes that there exists a `HitRect` node. The `PressRect`\n * is an abstract box that is extended beyond the `HitRect`.\n *\n *  +--------------------------+\n *  |                          | - \"Start\" events in `HitRect` cause `HitRect`\n *  |  +--------------------+  |   to become the responder.\n *  |  |  +--------------+  |  | - `HitRect` is typically expanded around\n *  |  |  |              |  |  |   the `VisualRect`, but shifted downward.\n *  |  |  |  VisualRect  |  |  | - After pressing down, after some delay,\n *  |  |  |              |  |  |   and before letting up, the Visual React\n *  |  |  +--------------+  |  |   will become \"active\". This makes it eligible\n *  |  |     HitRect        |  |   for being highlighted (so long as the\n *  |  +--------------------+  |   press remains in the `PressRect`).\n *  |        PressRect     o   |\n *  +----------------------|---+\n *           Out Region    |\n *                         +-----+ This gap between the `HitRect` and\n *                                 `PressRect` allows a touch to move far away\n *                                 from the original hit rect, and remain\n *                                 highlighted, and eligible for a \"Press\".\n *                                 Customize this via\n *                                 `touchableGetPressRectOffset()`.\n *\n *\n *\n * ======= State Machine =======\n *\n * +-------------+ <---+ RESPONDER_RELEASE\n * |NOT_RESPONDER|\n * +-------------+ <---+ RESPONDER_TERMINATED\n *     +\n *     | RESPONDER_GRANT (HitRect)\n *     v\n * +---------------------------+  DELAY   +-------------------------+  T + DELAY     +------------------------------+\n * |RESPONDER_INACTIVE_PRESS_IN|+-------->|RESPONDER_ACTIVE_PRESS_IN| +------------> |RESPONDER_ACTIVE_LONG_PRESS_IN|\n * +---------------------------+          +-------------------------+                +------------------------------+\n *     +            ^                         +           ^                                 +           ^\n *     |LEAVE_      |ENTER_                   |LEAVE_     |ENTER_                           |LEAVE_     |ENTER_\n *     |PRESS_RECT  |PRESS_RECT               |PRESS_RECT |PRESS_RECT                       |PRESS_RECT |PRESS_RECT\n *     |            |                         |           |                                 |           |\n *     v            +                         v           +                                 v           +\n * +----------------------------+  DELAY  +--------------------------+               +-------------------------------+\n * |RESPONDER_INACTIVE_PRESS_OUT|+------->|RESPONDER_ACTIVE_PRESS_OUT|               |RESPONDER_ACTIVE_LONG_PRESS_OUT|\n * +----------------------------+         +--------------------------+               +-------------------------------+\n *\n * T + DELAY => LONG_PRESS_DELAY_MS + DELAY\n *\n * Not drawn are the side effects of each transition. The most important side\n * effect is the `touchableHandlePress` abstract method invocation that occurs\n * when a responder is released while in either of the \"Press\" states.\n *\n * The other important side effects are the highlight abstract method\n * invocations (internal callbacks) to be implemented by the mixer.\n *\n *\n * @lends Touchable.prototype\n */\nconst TouchableMixin = {\n  componentDidMount: function() {\n    if (!Platform.isTV) {\n      return;\n    }\n  },\n\n  /**\n   * Clear all timeouts on unmount\n   */\n  componentWillUnmount: function() {\n    this.touchableDelayTimeout && clearTimeout(this.touchableDelayTimeout);\n    this.longPressDelayTimeout && clearTimeout(this.longPressDelayTimeout);\n    this.pressOutDelayTimeout && clearTimeout(this.pressOutDelayTimeout);\n  },\n\n  /**\n   * It's prefer that mixins determine state in this way, having the class\n   * explicitly mix the state in the one and only `getInitialState` method.\n   *\n   * @return {object} State object to be placed inside of\n   * `this.state.touchable`.\n   */\n  touchableGetInitialState: function(): $TEMPORARY$object<{|\n    touchable: $TEMPORARY$object<{|responderID: null, touchState: void|}>,\n  |}> {\n    return {\n      touchable: {touchState: undefined, responderID: null},\n    };\n  },\n\n  // ==== Hooks to Gesture Responder system ====\n  /**\n   * Must return true if embedded in a native platform scroll view.\n   */\n  touchableHandleResponderTerminationRequest: function(): any {\n    return !this.props.rejectResponderTermination;\n  },\n\n  /**\n   * Must return true to start the process of `Touchable`.\n   */\n  touchableHandleStartShouldSetResponder: function(): any {\n    return !this.props.disabled;\n  },\n\n  /**\n   * Return true to cancel press on long press.\n   */\n  touchableLongPressCancelsPress: function(): boolean {\n    return true;\n  },\n\n  /**\n   * Place as callback for a DOM element's `onResponderGrant` event.\n   * @param {SyntheticEvent} e Synthetic event from event system.\n   *\n   */\n  // $FlowFixMe[signature-verification-failure]\n  touchableHandleResponderGrant: function(e: PressEvent) {\n    const dispatchID = e.currentTarget;\n    // Since e is used in a callback invoked on another event loop\n    // (as in setTimeout etc), we need to call e.persist() on the\n    // event to make sure it doesn't get reused in the event object pool.\n    e.persist();\n\n    this.pressOutDelayTimeout && clearTimeout(this.pressOutDelayTimeout);\n    this.pressOutDelayTimeout = null;\n\n    this.state.touchable.touchState = States.NOT_RESPONDER;\n    this.state.touchable.responderID = dispatchID;\n    this._receiveSignal(Signals.RESPONDER_GRANT, e);\n    let delayMS =\n      this.touchableGetHighlightDelayMS !== undefined\n        ? Math.max(this.touchableGetHighlightDelayMS(), 0)\n        : HIGHLIGHT_DELAY_MS;\n    delayMS = isNaN(delayMS) ? HIGHLIGHT_DELAY_MS : delayMS;\n    if (delayMS !== 0) {\n      this.touchableDelayTimeout = setTimeout(\n        this._handleDelay.bind(this, e),\n        delayMS,\n      );\n    } else {\n      this._handleDelay(e);\n    }\n\n    let longDelayMS =\n      this.touchableGetLongPressDelayMS !== undefined\n        ? Math.max(this.touchableGetLongPressDelayMS(), 10)\n        : LONG_PRESS_DELAY_MS;\n    longDelayMS = isNaN(longDelayMS) ? LONG_PRESS_DELAY_MS : longDelayMS;\n    this.longPressDelayTimeout = setTimeout(\n      this._handleLongDelay.bind(this, e),\n      longDelayMS + delayMS,\n    );\n  },\n\n  /**\n   * Place as callback for a DOM element's `onResponderRelease` event.\n   */\n  // $FlowFixMe[signature-verification-failure]\n  touchableHandleResponderRelease: function(e: PressEvent) {\n    this.pressInLocation = null;\n    this._receiveSignal(Signals.RESPONDER_RELEASE, e);\n  },\n\n  /**\n   * Place as callback for a DOM element's `onResponderTerminate` event.\n   */\n  // $FlowFixMe[signature-verification-failure]\n  touchableHandleResponderTerminate: function(e: PressEvent) {\n    this.pressInLocation = null;\n    this._receiveSignal(Signals.RESPONDER_TERMINATED, e);\n  },\n\n  /**\n   * Place as callback for a DOM element's `onResponderMove` event.\n   */\n  // $FlowFixMe[signature-verification-failure]\n  touchableHandleResponderMove: function(e: PressEvent) {\n    // Measurement may not have returned yet.\n    if (!this.state.touchable.positionOnActivate) {\n      return;\n    }\n\n    const positionOnActivate = this.state.touchable.positionOnActivate;\n    const dimensionsOnActivate = this.state.touchable.dimensionsOnActivate;\n    const pressRectOffset = this.touchableGetPressRectOffset\n      ? this.touchableGetPressRectOffset()\n      : {\n          left: PRESS_EXPAND_PX,\n          right: PRESS_EXPAND_PX,\n          top: PRESS_EXPAND_PX,\n          bottom: PRESS_EXPAND_PX,\n        };\n\n    let pressExpandLeft = pressRectOffset.left;\n    let pressExpandTop = pressRectOffset.top;\n    let pressExpandRight = pressRectOffset.right;\n    let pressExpandBottom = pressRectOffset.bottom;\n\n    const hitSlop = this.touchableGetHitSlop\n      ? this.touchableGetHitSlop()\n      : null;\n\n    if (hitSlop) {\n      pressExpandLeft += hitSlop.left || 0;\n      pressExpandTop += hitSlop.top || 0;\n      pressExpandRight += hitSlop.right || 0;\n      pressExpandBottom += hitSlop.bottom || 0;\n    }\n\n    const touch = extractSingleTouch(e.nativeEvent);\n    const pageX = touch && touch.pageX;\n    const pageY = touch && touch.pageY;\n\n    if (this.pressInLocation) {\n      const movedDistance = this._getDistanceBetweenPoints(\n        pageX,\n        pageY,\n        this.pressInLocation.pageX,\n        this.pressInLocation.pageY,\n      );\n      if (movedDistance > LONG_PRESS_ALLOWED_MOVEMENT) {\n        this._cancelLongPressDelayTimeout();\n      }\n    }\n\n    const isTouchWithinActive =\n      pageX > positionOnActivate.left - pressExpandLeft &&\n      pageY > positionOnActivate.top - pressExpandTop &&\n      pageX <\n        positionOnActivate.left +\n          dimensionsOnActivate.width +\n          pressExpandRight &&\n      pageY <\n        positionOnActivate.top +\n          dimensionsOnActivate.height +\n          pressExpandBottom;\n    if (isTouchWithinActive) {\n      const prevState = this.state.touchable.touchState;\n      this._receiveSignal(Signals.ENTER_PRESS_RECT, e);\n      const curState = this.state.touchable.touchState;\n      if (\n        curState === States.RESPONDER_INACTIVE_PRESS_IN &&\n        prevState !== States.RESPONDER_INACTIVE_PRESS_IN\n      ) {\n        // fix for t7967420\n        this._cancelLongPressDelayTimeout();\n      }\n    } else {\n      this._cancelLongPressDelayTimeout();\n      this._receiveSignal(Signals.LEAVE_PRESS_RECT, e);\n    }\n  },\n\n  /**\n   * Invoked when the item receives focus. Mixers might override this to\n   * visually distinguish the `VisualRect` so that the user knows that it\n   * currently has the focus. Most platforms only support a single element being\n   * focused at a time, in which case there may have been a previously focused\n   * element that was blurred just prior to this. This can be overridden when\n   * using `Touchable.Mixin.withoutDefaultFocusAndBlur`.\n   */\n  // $FlowFixMe[signature-verification-failure]\n  touchableHandleFocus: function(e: Event) {\n    this.props.onFocus && this.props.onFocus(e);\n  },\n\n  /**\n   * Invoked when the item loses focus. Mixers might override this to\n   * visually distinguish the `VisualRect` so that the user knows that it\n   * no longer has focus. Most platforms only support a single element being\n   * focused at a time, in which case the focus may have moved to another.\n   * This can be overridden when using\n   * `Touchable.Mixin.withoutDefaultFocusAndBlur`.\n   */\n  // $FlowFixMe[signature-verification-failure]\n  touchableHandleBlur: function(e: Event) {\n    this.props.onBlur && this.props.onBlur(e);\n  },\n\n  // ==== Abstract Application Callbacks ====\n\n  /**\n   * Invoked when the item should be highlighted. Mixers should implement this\n   * to visually distinguish the `VisualRect` so that the user knows that\n   * releasing a touch will result in a \"selection\" (analog to click).\n   *\n   * @abstract\n   * touchableHandleActivePressIn: function,\n   */\n\n  /**\n   * Invoked when the item is \"active\" (in that it is still eligible to become\n   * a \"select\") but the touch has left the `PressRect`. Usually the mixer will\n   * want to unhighlight the `VisualRect`. If the user (while pressing) moves\n   * back into the `PressRect` `touchableHandleActivePressIn` will be invoked\n   * again and the mixer should probably highlight the `VisualRect` again. This\n   * event will not fire on an `touchEnd/mouseUp` event, only move events while\n   * the user is depressing the mouse/touch.\n   *\n   * @abstract\n   * touchableHandleActivePressOut: function\n   */\n\n  /**\n   * Invoked when the item is \"selected\" - meaning the interaction ended by\n   * letting up while the item was either in the state\n   * `RESPONDER_ACTIVE_PRESS_IN` or `RESPONDER_INACTIVE_PRESS_IN`.\n   *\n   * @abstract\n   * touchableHandlePress: function\n   */\n\n  /**\n   * Invoked when the item is long pressed - meaning the interaction ended by\n   * letting up while the item was in `RESPONDER_ACTIVE_LONG_PRESS_IN`. If\n   * `touchableHandleLongPress` is *not* provided, `touchableHandlePress` will\n   * be called as it normally is. If `touchableHandleLongPress` is provided, by\n   * default any `touchableHandlePress` callback will not be invoked. To\n   * override this default behavior, override `touchableLongPressCancelsPress`\n   * to return false. As a result, `touchableHandlePress` will be called when\n   * lifting up, even if `touchableHandleLongPress` has also been called.\n   *\n   * @abstract\n   * touchableHandleLongPress: function\n   */\n\n  /**\n   * Returns the number of millis to wait before triggering a highlight.\n   *\n   * @abstract\n   * touchableGetHighlightDelayMS: function\n   */\n\n  /**\n   * Returns the amount to extend the `HitRect` into the `PressRect`. Positive\n   * numbers mean the size expands outwards.\n   *\n   * @abstract\n   * touchableGetPressRectOffset: function\n   */\n\n  // ==== Internal Logic ====\n\n  /**\n   * Measures the `HitRect` node on activation. The Bounding rectangle is with\n   * respect to viewport - not page, so adding the `pageXOffset/pageYOffset`\n   * should result in points that are in the same coordinate system as an\n   * event's `globalX/globalY` data values.\n   *\n   * - Consider caching this for the lifetime of the component, or possibly\n   *   being able to share this cache between any `ScrollMap` view.\n   *\n   * @sideeffects\n   * @private\n   */\n  _remeasureMetricsOnActivation: function() {\n    const responderID = this.state.touchable.responderID;\n    if (responderID == null) {\n      return;\n    }\n\n    if (typeof responderID === 'number') {\n      UIManager.measure(responderID, this._handleQueryLayout);\n    } else {\n      responderID.measure(this._handleQueryLayout);\n    }\n  },\n\n  // $FlowFixMe[signature-verification-failure]\n  _handleQueryLayout: function(\n    l: number,\n    t: number,\n    w: number,\n    h: number,\n    globalX: number,\n    globalY: number,\n  ) {\n    //don't do anything UIManager failed to measure node\n    if (!l && !t && !w && !h && !globalX && !globalY) {\n      return;\n    }\n    this.state.touchable.positionOnActivate &&\n      Position.release(this.state.touchable.positionOnActivate);\n    this.state.touchable.dimensionsOnActivate &&\n      BoundingDimensions.release(this.state.touchable.dimensionsOnActivate);\n    this.state.touchable.positionOnActivate = Position.getPooled(\n      globalX,\n      globalY,\n    );\n    this.state.touchable.dimensionsOnActivate = BoundingDimensions.getPooled(\n      w,\n      h,\n    );\n  },\n\n  // $FlowFixMe[signature-verification-failure]\n  _handleDelay: function(e: PressEvent) {\n    this.touchableDelayTimeout = null;\n    this._receiveSignal(Signals.DELAY, e);\n  },\n\n  // $FlowFixMe[signature-verification-failure]\n  _handleLongDelay: function(e: PressEvent) {\n    this.longPressDelayTimeout = null;\n    const curState = this.state.touchable.touchState;\n    if (\n      curState === States.RESPONDER_ACTIVE_PRESS_IN ||\n      curState === States.RESPONDER_ACTIVE_LONG_PRESS_IN\n    ) {\n      this._receiveSignal(Signals.LONG_PRESS_DETECTED, e);\n    }\n  },\n\n  /**\n   * Receives a state machine signal, performs side effects of the transition\n   * and stores the new state. Validates the transition as well.\n   *\n   * @param {Signals} signal State machine signal.\n   * @throws Error if invalid state transition or unrecognized signal.\n   * @sideeffects\n   */\n  // $FlowFixMe[signature-verification-failure]\n  _receiveSignal: function(signal: Signal, e: PressEvent) {\n    const responderID = this.state.touchable.responderID;\n    const curState = this.state.touchable.touchState;\n    const nextState = Transitions[curState] && Transitions[curState][signal];\n    if (!responderID && signal === Signals.RESPONDER_RELEASE) {\n      return;\n    }\n    if (!nextState) {\n      throw new Error(\n        'Unrecognized signal `' +\n          signal +\n          '` or state `' +\n          curState +\n          '` for Touchable responder `' +\n          typeof this.state.touchable.responderID ===\n        'number'\n          ? this.state.touchable.responderID\n          : 'host component' + '`',\n      );\n    }\n    if (nextState === States.ERROR) {\n      throw new Error(\n        'Touchable cannot transition from `' +\n          curState +\n          '` to `' +\n          signal +\n          '` for responder `' +\n          typeof this.state.touchable.responderID ===\n        'number'\n          ? this.state.touchable.responderID\n          : '<<host component>>' + '`',\n      );\n    }\n    if (curState !== nextState) {\n      this._performSideEffectsForTransition(curState, nextState, signal, e);\n      this.state.touchable.touchState = nextState;\n    }\n  },\n\n  _cancelLongPressDelayTimeout: function() {\n    this.longPressDelayTimeout && clearTimeout(this.longPressDelayTimeout);\n    this.longPressDelayTimeout = null;\n  },\n\n  _isHighlight: function(state: State): boolean {\n    return (\n      state === States.RESPONDER_ACTIVE_PRESS_IN ||\n      state === States.RESPONDER_ACTIVE_LONG_PRESS_IN\n    );\n  },\n\n  // $FlowFixMe[signature-verification-failure]\n  _savePressInLocation: function(e: PressEvent) {\n    const touch = extractSingleTouch(e.nativeEvent);\n    const pageX = touch && touch.pageX;\n    const pageY = touch && touch.pageY;\n    const locationX = touch && touch.locationX;\n    const locationY = touch && touch.locationY;\n    this.pressInLocation = {pageX, pageY, locationX, locationY};\n  },\n\n  _getDistanceBetweenPoints: function(\n    aX: number,\n    aY: number,\n    bX: number,\n    bY: number,\n  ): number {\n    const deltaX = aX - bX;\n    const deltaY = aY - bY;\n    return Math.sqrt(deltaX * deltaX + deltaY * deltaY);\n  },\n\n  /**\n   * Will perform a transition between touchable states, and identify any\n   * highlighting or unhighlighting that must be performed for this particular\n   * transition.\n   *\n   * @param {States} curState Current Touchable state.\n   * @param {States} nextState Next Touchable state.\n   * @param {Signal} signal Signal that triggered the transition.\n   * @param {Event} e Native event.\n   * @sideeffects\n   */\n  // $FlowFixMe[signature-verification-failure]\n  _performSideEffectsForTransition: function(\n    curState: State,\n    nextState: State,\n    signal: Signal,\n    e: PressEvent,\n  ) {\n    const curIsHighlight = this._isHighlight(curState);\n    const newIsHighlight = this._isHighlight(nextState);\n\n    const isFinalSignal =\n      signal === Signals.RESPONDER_TERMINATED ||\n      signal === Signals.RESPONDER_RELEASE;\n\n    if (isFinalSignal) {\n      this._cancelLongPressDelayTimeout();\n    }\n\n    const isInitialTransition =\n      curState === States.NOT_RESPONDER &&\n      nextState === States.RESPONDER_INACTIVE_PRESS_IN;\n\n    const isActiveTransition = !IsActive[curState] && IsActive[nextState];\n    if (isInitialTransition || isActiveTransition) {\n      this._remeasureMetricsOnActivation();\n    }\n\n    if (IsPressingIn[curState] && signal === Signals.LONG_PRESS_DETECTED) {\n      this.touchableHandleLongPress && this.touchableHandleLongPress(e);\n    }\n\n    if (newIsHighlight && !curIsHighlight) {\n      this._startHighlight(e);\n    } else if (!newIsHighlight && curIsHighlight) {\n      this._endHighlight(e);\n    }\n\n    if (IsPressingIn[curState] && signal === Signals.RESPONDER_RELEASE) {\n      const hasLongPressHandler = !!this.props.onLongPress;\n      const pressIsLongButStillCallOnPress =\n        IsLongPressingIn[curState] && // We *are* long pressing.. // But either has no long handler\n        (!hasLongPressHandler || !this.touchableLongPressCancelsPress()); // or we're told to ignore it.\n\n      const shouldInvokePress =\n        !IsLongPressingIn[curState] || pressIsLongButStillCallOnPress;\n      if (shouldInvokePress && this.touchableHandlePress) {\n        if (!newIsHighlight && !curIsHighlight) {\n          // we never highlighted because of delay, but we should highlight now\n          this._startHighlight(e);\n          this._endHighlight(e);\n        }\n        if (Platform.OS === 'android' && !this.props.touchSoundDisabled) {\n          SoundManager.playTouchSound();\n        }\n        this.touchableHandlePress(e);\n      }\n    }\n\n    this.touchableDelayTimeout && clearTimeout(this.touchableDelayTimeout);\n    this.touchableDelayTimeout = null;\n  },\n\n  // $FlowFixMe[signature-verification-failure]\n  _startHighlight: function(e: PressEvent) {\n    this._savePressInLocation(e);\n    this.touchableHandleActivePressIn && this.touchableHandleActivePressIn(e);\n  },\n\n  // $FlowFixMe[signature-verification-failure]\n  _endHighlight: function(e: PressEvent) {\n    if (this.touchableHandleActivePressOut) {\n      if (\n        this.touchableGetPressOutDelayMS &&\n        this.touchableGetPressOutDelayMS()\n      ) {\n        this.pressOutDelayTimeout = setTimeout(() => {\n          this.touchableHandleActivePressOut(e);\n        }, this.touchableGetPressOutDelayMS());\n      } else {\n        this.touchableHandleActivePressOut(e);\n      }\n    }\n  },\n\n  withoutDefaultFocusAndBlur: ({}: $TEMPORARY$object<{||}>),\n};\n\n/**\n * Provide an optional version of the mixin where `touchableHandleFocus` and\n * `touchableHandleBlur` can be overridden. This allows appropriate defaults to\n * be set on TV platforms, without breaking existing implementations of\n * `Touchable`.\n */\nconst {\n  touchableHandleFocus,\n  touchableHandleBlur,\n  ...TouchableMixinWithoutDefaultFocusAndBlur\n} = TouchableMixin;\nTouchableMixin.withoutDefaultFocusAndBlur = TouchableMixinWithoutDefaultFocusAndBlur;\n\nconst Touchable = {\n  Mixin: TouchableMixin,\n  /**\n   * Renders a debugging overlay to visualize touch target with hitSlop (might not work on Android).\n   */\n  renderDebugView: ({\n    color,\n    hitSlop,\n  }: {\n    color: ColorValue,\n    hitSlop: EdgeInsetsProp,\n    ...\n  }): null | React.Node => {\n    if (__DEV__) {\n      return <PressabilityDebugView color={color} hitSlop={hitSlop} />;\n    }\n    return null;\n  },\n};\n\nmodule.exports = Touchable;\n"]}