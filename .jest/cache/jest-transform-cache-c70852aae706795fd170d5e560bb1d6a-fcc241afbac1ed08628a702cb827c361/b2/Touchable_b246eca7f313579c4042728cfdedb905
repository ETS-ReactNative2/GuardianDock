0603c72054481d6941781d3cfaf8a210
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var React = _interopRequireWildcard(require("react"));

var _BoundingDimensions = _interopRequireDefault(require("./BoundingDimensions"));

var _Platform = _interopRequireDefault(require("../../Utilities/Platform"));

var _Position = _interopRequireDefault(require("./Position"));

var _UIManager = _interopRequireDefault(require("../../ReactNative/UIManager"));

var _SoundManager = _interopRequireDefault(require("../Sound/SoundManager"));

var _PressabilityDebug = require("../../Pressability/PressabilityDebug");

var _jsxRuntime = require("react/jsx-runtime");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var extractSingleTouch = function extractSingleTouch(nativeEvent) {
  var touches = nativeEvent.touches;
  var changedTouches = nativeEvent.changedTouches;
  var hasTouches = touches && touches.length > 0;
  var hasChangedTouches = changedTouches && changedTouches.length > 0;
  return !hasTouches && hasChangedTouches ? changedTouches[0] : hasTouches ? touches[0] : nativeEvent;
};

var States = {
  NOT_RESPONDER: 'NOT_RESPONDER',
  RESPONDER_INACTIVE_PRESS_IN: 'RESPONDER_INACTIVE_PRESS_IN',
  RESPONDER_INACTIVE_PRESS_OUT: 'RESPONDER_INACTIVE_PRESS_OUT',
  RESPONDER_ACTIVE_PRESS_IN: 'RESPONDER_ACTIVE_PRESS_IN',
  RESPONDER_ACTIVE_PRESS_OUT: 'RESPONDER_ACTIVE_PRESS_OUT',
  RESPONDER_ACTIVE_LONG_PRESS_IN: 'RESPONDER_ACTIVE_LONG_PRESS_IN',
  RESPONDER_ACTIVE_LONG_PRESS_OUT: 'RESPONDER_ACTIVE_LONG_PRESS_OUT',
  ERROR: 'ERROR'
};
var baseStatesConditions = {
  NOT_RESPONDER: false,
  RESPONDER_INACTIVE_PRESS_IN: false,
  RESPONDER_INACTIVE_PRESS_OUT: false,
  RESPONDER_ACTIVE_PRESS_IN: false,
  RESPONDER_ACTIVE_PRESS_OUT: false,
  RESPONDER_ACTIVE_LONG_PRESS_IN: false,
  RESPONDER_ACTIVE_LONG_PRESS_OUT: false,
  ERROR: false
};
var IsActive = (0, _extends2.default)({}, baseStatesConditions, {
  RESPONDER_ACTIVE_PRESS_OUT: true,
  RESPONDER_ACTIVE_PRESS_IN: true
});
var IsPressingIn = (0, _extends2.default)({}, baseStatesConditions, {
  RESPONDER_INACTIVE_PRESS_IN: true,
  RESPONDER_ACTIVE_PRESS_IN: true,
  RESPONDER_ACTIVE_LONG_PRESS_IN: true
});
var IsLongPressingIn = (0, _extends2.default)({}, baseStatesConditions, {
  RESPONDER_ACTIVE_LONG_PRESS_IN: true
});
var Signals = {
  DELAY: 'DELAY',
  RESPONDER_GRANT: 'RESPONDER_GRANT',
  RESPONDER_RELEASE: 'RESPONDER_RELEASE',
  RESPONDER_TERMINATED: 'RESPONDER_TERMINATED',
  ENTER_PRESS_RECT: 'ENTER_PRESS_RECT',
  LEAVE_PRESS_RECT: 'LEAVE_PRESS_RECT',
  LONG_PRESS_DETECTED: 'LONG_PRESS_DETECTED'
};
var Transitions = {
  NOT_RESPONDER: {
    DELAY: States.ERROR,
    RESPONDER_GRANT: States.RESPONDER_INACTIVE_PRESS_IN,
    RESPONDER_RELEASE: States.ERROR,
    RESPONDER_TERMINATED: States.ERROR,
    ENTER_PRESS_RECT: States.ERROR,
    LEAVE_PRESS_RECT: States.ERROR,
    LONG_PRESS_DETECTED: States.ERROR
  },
  RESPONDER_INACTIVE_PRESS_IN: {
    DELAY: States.RESPONDER_ACTIVE_PRESS_IN,
    RESPONDER_GRANT: States.ERROR,
    RESPONDER_RELEASE: States.NOT_RESPONDER,
    RESPONDER_TERMINATED: States.NOT_RESPONDER,
    ENTER_PRESS_RECT: States.RESPONDER_INACTIVE_PRESS_IN,
    LEAVE_PRESS_RECT: States.RESPONDER_INACTIVE_PRESS_OUT,
    LONG_PRESS_DETECTED: States.ERROR
  },
  RESPONDER_INACTIVE_PRESS_OUT: {
    DELAY: States.RESPONDER_ACTIVE_PRESS_OUT,
    RESPONDER_GRANT: States.ERROR,
    RESPONDER_RELEASE: States.NOT_RESPONDER,
    RESPONDER_TERMINATED: States.NOT_RESPONDER,
    ENTER_PRESS_RECT: States.RESPONDER_INACTIVE_PRESS_IN,
    LEAVE_PRESS_RECT: States.RESPONDER_INACTIVE_PRESS_OUT,
    LONG_PRESS_DETECTED: States.ERROR
  },
  RESPONDER_ACTIVE_PRESS_IN: {
    DELAY: States.ERROR,
    RESPONDER_GRANT: States.ERROR,
    RESPONDER_RELEASE: States.NOT_RESPONDER,
    RESPONDER_TERMINATED: States.NOT_RESPONDER,
    ENTER_PRESS_RECT: States.RESPONDER_ACTIVE_PRESS_IN,
    LEAVE_PRESS_RECT: States.RESPONDER_ACTIVE_PRESS_OUT,
    LONG_PRESS_DETECTED: States.RESPONDER_ACTIVE_LONG_PRESS_IN
  },
  RESPONDER_ACTIVE_PRESS_OUT: {
    DELAY: States.ERROR,
    RESPONDER_GRANT: States.ERROR,
    RESPONDER_RELEASE: States.NOT_RESPONDER,
    RESPONDER_TERMINATED: States.NOT_RESPONDER,
    ENTER_PRESS_RECT: States.RESPONDER_ACTIVE_PRESS_IN,
    LEAVE_PRESS_RECT: States.RESPONDER_ACTIVE_PRESS_OUT,
    LONG_PRESS_DETECTED: States.ERROR
  },
  RESPONDER_ACTIVE_LONG_PRESS_IN: {
    DELAY: States.ERROR,
    RESPONDER_GRANT: States.ERROR,
    RESPONDER_RELEASE: States.NOT_RESPONDER,
    RESPONDER_TERMINATED: States.NOT_RESPONDER,
    ENTER_PRESS_RECT: States.RESPONDER_ACTIVE_LONG_PRESS_IN,
    LEAVE_PRESS_RECT: States.RESPONDER_ACTIVE_LONG_PRESS_OUT,
    LONG_PRESS_DETECTED: States.RESPONDER_ACTIVE_LONG_PRESS_IN
  },
  RESPONDER_ACTIVE_LONG_PRESS_OUT: {
    DELAY: States.ERROR,
    RESPONDER_GRANT: States.ERROR,
    RESPONDER_RELEASE: States.NOT_RESPONDER,
    RESPONDER_TERMINATED: States.NOT_RESPONDER,
    ENTER_PRESS_RECT: States.RESPONDER_ACTIVE_LONG_PRESS_IN,
    LEAVE_PRESS_RECT: States.RESPONDER_ACTIVE_LONG_PRESS_OUT,
    LONG_PRESS_DETECTED: States.ERROR
  },
  error: {
    DELAY: States.NOT_RESPONDER,
    RESPONDER_GRANT: States.RESPONDER_INACTIVE_PRESS_IN,
    RESPONDER_RELEASE: States.NOT_RESPONDER,
    RESPONDER_TERMINATED: States.NOT_RESPONDER,
    ENTER_PRESS_RECT: States.NOT_RESPONDER,
    LEAVE_PRESS_RECT: States.NOT_RESPONDER,
    LONG_PRESS_DETECTED: States.NOT_RESPONDER
  }
};
var HIGHLIGHT_DELAY_MS = 130;
var PRESS_EXPAND_PX = 20;
var LONG_PRESS_THRESHOLD = 500;
var LONG_PRESS_DELAY_MS = LONG_PRESS_THRESHOLD - HIGHLIGHT_DELAY_MS;
var LONG_PRESS_ALLOWED_MOVEMENT = 10;
var TouchableMixin = {
  componentDidMount: function componentDidMount() {
    if (!_Platform.default.isTV) {
      return;
    }
  },
  componentWillUnmount: function componentWillUnmount() {
    this.touchableDelayTimeout && clearTimeout(this.touchableDelayTimeout);
    this.longPressDelayTimeout && clearTimeout(this.longPressDelayTimeout);
    this.pressOutDelayTimeout && clearTimeout(this.pressOutDelayTimeout);
  },
  touchableGetInitialState: function touchableGetInitialState() {
    return {
      touchable: {
        touchState: undefined,
        responderID: null
      }
    };
  },
  touchableHandleResponderTerminationRequest: function touchableHandleResponderTerminationRequest() {
    return !this.props.rejectResponderTermination;
  },
  touchableHandleStartShouldSetResponder: function touchableHandleStartShouldSetResponder() {
    return !this.props.disabled;
  },
  touchableLongPressCancelsPress: function touchableLongPressCancelsPress() {
    return true;
  },
  touchableHandleResponderGrant: function touchableHandleResponderGrant(e) {
    var dispatchID = e.currentTarget;
    e.persist();
    this.pressOutDelayTimeout && clearTimeout(this.pressOutDelayTimeout);
    this.pressOutDelayTimeout = null;
    this.state.touchable.touchState = States.NOT_RESPONDER;
    this.state.touchable.responderID = dispatchID;

    this._receiveSignal(Signals.RESPONDER_GRANT, e);

    var delayMS = this.touchableGetHighlightDelayMS !== undefined ? Math.max(this.touchableGetHighlightDelayMS(), 0) : HIGHLIGHT_DELAY_MS;
    delayMS = isNaN(delayMS) ? HIGHLIGHT_DELAY_MS : delayMS;

    if (delayMS !== 0) {
      this.touchableDelayTimeout = setTimeout(this._handleDelay.bind(this, e), delayMS);
    } else {
      this._handleDelay(e);
    }

    var longDelayMS = this.touchableGetLongPressDelayMS !== undefined ? Math.max(this.touchableGetLongPressDelayMS(), 10) : LONG_PRESS_DELAY_MS;
    longDelayMS = isNaN(longDelayMS) ? LONG_PRESS_DELAY_MS : longDelayMS;
    this.longPressDelayTimeout = setTimeout(this._handleLongDelay.bind(this, e), longDelayMS + delayMS);
  },
  touchableHandleResponderRelease: function touchableHandleResponderRelease(e) {
    this.pressInLocation = null;

    this._receiveSignal(Signals.RESPONDER_RELEASE, e);
  },
  touchableHandleResponderTerminate: function touchableHandleResponderTerminate(e) {
    this.pressInLocation = null;

    this._receiveSignal(Signals.RESPONDER_TERMINATED, e);
  },
  touchableHandleResponderMove: function touchableHandleResponderMove(e) {
    if (!this.state.touchable.positionOnActivate) {
      return;
    }

    var positionOnActivate = this.state.touchable.positionOnActivate;
    var dimensionsOnActivate = this.state.touchable.dimensionsOnActivate;
    var pressRectOffset = this.touchableGetPressRectOffset ? this.touchableGetPressRectOffset() : {
      left: PRESS_EXPAND_PX,
      right: PRESS_EXPAND_PX,
      top: PRESS_EXPAND_PX,
      bottom: PRESS_EXPAND_PX
    };
    var pressExpandLeft = pressRectOffset.left;
    var pressExpandTop = pressRectOffset.top;
    var pressExpandRight = pressRectOffset.right;
    var pressExpandBottom = pressRectOffset.bottom;
    var hitSlop = this.touchableGetHitSlop ? this.touchableGetHitSlop() : null;

    if (hitSlop) {
      pressExpandLeft += hitSlop.left || 0;
      pressExpandTop += hitSlop.top || 0;
      pressExpandRight += hitSlop.right || 0;
      pressExpandBottom += hitSlop.bottom || 0;
    }

    var touch = extractSingleTouch(e.nativeEvent);
    var pageX = touch && touch.pageX;
    var pageY = touch && touch.pageY;

    if (this.pressInLocation) {
      var movedDistance = this._getDistanceBetweenPoints(pageX, pageY, this.pressInLocation.pageX, this.pressInLocation.pageY);

      if (movedDistance > LONG_PRESS_ALLOWED_MOVEMENT) {
        this._cancelLongPressDelayTimeout();
      }
    }

    var isTouchWithinActive = pageX > positionOnActivate.left - pressExpandLeft && pageY > positionOnActivate.top - pressExpandTop && pageX < positionOnActivate.left + dimensionsOnActivate.width + pressExpandRight && pageY < positionOnActivate.top + dimensionsOnActivate.height + pressExpandBottom;

    if (isTouchWithinActive) {
      var prevState = this.state.touchable.touchState;

      this._receiveSignal(Signals.ENTER_PRESS_RECT, e);

      var curState = this.state.touchable.touchState;

      if (curState === States.RESPONDER_INACTIVE_PRESS_IN && prevState !== States.RESPONDER_INACTIVE_PRESS_IN) {
        this._cancelLongPressDelayTimeout();
      }
    } else {
      this._cancelLongPressDelayTimeout();

      this._receiveSignal(Signals.LEAVE_PRESS_RECT, e);
    }
  },
  touchableHandleFocus: function touchableHandleFocus(e) {
    this.props.onFocus && this.props.onFocus(e);
  },
  touchableHandleBlur: function touchableHandleBlur(e) {
    this.props.onBlur && this.props.onBlur(e);
  },
  _remeasureMetricsOnActivation: function _remeasureMetricsOnActivation() {
    var responderID = this.state.touchable.responderID;

    if (responderID == null) {
      return;
    }

    if (typeof responderID === 'number') {
      _UIManager.default.measure(responderID, this._handleQueryLayout);
    } else {
      responderID.measure(this._handleQueryLayout);
    }
  },
  _handleQueryLayout: function _handleQueryLayout(l, t, w, h, globalX, globalY) {
    if (!l && !t && !w && !h && !globalX && !globalY) {
      return;
    }

    this.state.touchable.positionOnActivate && _Position.default.release(this.state.touchable.positionOnActivate);
    this.state.touchable.dimensionsOnActivate && _BoundingDimensions.default.release(this.state.touchable.dimensionsOnActivate);
    this.state.touchable.positionOnActivate = _Position.default.getPooled(globalX, globalY);
    this.state.touchable.dimensionsOnActivate = _BoundingDimensions.default.getPooled(w, h);
  },
  _handleDelay: function _handleDelay(e) {
    this.touchableDelayTimeout = null;

    this._receiveSignal(Signals.DELAY, e);
  },
  _handleLongDelay: function _handleLongDelay(e) {
    this.longPressDelayTimeout = null;
    var curState = this.state.touchable.touchState;

    if (curState === States.RESPONDER_ACTIVE_PRESS_IN || curState === States.RESPONDER_ACTIVE_LONG_PRESS_IN) {
      this._receiveSignal(Signals.LONG_PRESS_DETECTED, e);
    }
  },
  _receiveSignal: function _receiveSignal(signal, e) {
    var responderID = this.state.touchable.responderID;
    var curState = this.state.touchable.touchState;
    var nextState = Transitions[curState] && Transitions[curState][signal];

    if (!responderID && signal === Signals.RESPONDER_RELEASE) {
      return;
    }

    if (!nextState) {
      throw new Error('Unrecognized signal `' + signal + '` or state `' + curState + '` for Touchable responder `' + typeof this.state.touchable.responderID === 'number' ? this.state.touchable.responderID : 'host component' + '`');
    }

    if (nextState === States.ERROR) {
      throw new Error('Touchable cannot transition from `' + curState + '` to `' + signal + '` for responder `' + typeof this.state.touchable.responderID === 'number' ? this.state.touchable.responderID : '<<host component>>' + '`');
    }

    if (curState !== nextState) {
      this._performSideEffectsForTransition(curState, nextState, signal, e);

      this.state.touchable.touchState = nextState;
    }
  },
  _cancelLongPressDelayTimeout: function _cancelLongPressDelayTimeout() {
    this.longPressDelayTimeout && clearTimeout(this.longPressDelayTimeout);
    this.longPressDelayTimeout = null;
  },
  _isHighlight: function _isHighlight(state) {
    return state === States.RESPONDER_ACTIVE_PRESS_IN || state === States.RESPONDER_ACTIVE_LONG_PRESS_IN;
  },
  _savePressInLocation: function _savePressInLocation(e) {
    var touch = extractSingleTouch(e.nativeEvent);
    var pageX = touch && touch.pageX;
    var pageY = touch && touch.pageY;
    var locationX = touch && touch.locationX;
    var locationY = touch && touch.locationY;
    this.pressInLocation = {
      pageX: pageX,
      pageY: pageY,
      locationX: locationX,
      locationY: locationY
    };
  },
  _getDistanceBetweenPoints: function _getDistanceBetweenPoints(aX, aY, bX, bY) {
    var deltaX = aX - bX;
    var deltaY = aY - bY;
    return Math.sqrt(deltaX * deltaX + deltaY * deltaY);
  },
  _performSideEffectsForTransition: function _performSideEffectsForTransition(curState, nextState, signal, e) {
    var curIsHighlight = this._isHighlight(curState);

    var newIsHighlight = this._isHighlight(nextState);

    var isFinalSignal = signal === Signals.RESPONDER_TERMINATED || signal === Signals.RESPONDER_RELEASE;

    if (isFinalSignal) {
      this._cancelLongPressDelayTimeout();
    }

    var isInitialTransition = curState === States.NOT_RESPONDER && nextState === States.RESPONDER_INACTIVE_PRESS_IN;
    var isActiveTransition = !IsActive[curState] && IsActive[nextState];

    if (isInitialTransition || isActiveTransition) {
      this._remeasureMetricsOnActivation();
    }

    if (IsPressingIn[curState] && signal === Signals.LONG_PRESS_DETECTED) {
      this.touchableHandleLongPress && this.touchableHandleLongPress(e);
    }

    if (newIsHighlight && !curIsHighlight) {
      this._startHighlight(e);
    } else if (!newIsHighlight && curIsHighlight) {
      this._endHighlight(e);
    }

    if (IsPressingIn[curState] && signal === Signals.RESPONDER_RELEASE) {
      var hasLongPressHandler = !!this.props.onLongPress;
      var pressIsLongButStillCallOnPress = IsLongPressingIn[curState] && (!hasLongPressHandler || !this.touchableLongPressCancelsPress());
      var shouldInvokePress = !IsLongPressingIn[curState] || pressIsLongButStillCallOnPress;

      if (shouldInvokePress && this.touchableHandlePress) {
        if (!newIsHighlight && !curIsHighlight) {
          this._startHighlight(e);

          this._endHighlight(e);
        }

        if (_Platform.default.OS === 'android' && !this.props.touchSoundDisabled) {
          _SoundManager.default.playTouchSound();
        }

        this.touchableHandlePress(e);
      }
    }

    this.touchableDelayTimeout && clearTimeout(this.touchableDelayTimeout);
    this.touchableDelayTimeout = null;
  },
  _startHighlight: function _startHighlight(e) {
    this._savePressInLocation(e);

    this.touchableHandleActivePressIn && this.touchableHandleActivePressIn(e);
  },
  _endHighlight: function _endHighlight(e) {
    var _this = this;

    if (this.touchableHandleActivePressOut) {
      if (this.touchableGetPressOutDelayMS && this.touchableGetPressOutDelayMS()) {
        this.pressOutDelayTimeout = setTimeout(function () {
          _this.touchableHandleActivePressOut(e);
        }, this.touchableGetPressOutDelayMS());
      } else {
        this.touchableHandleActivePressOut(e);
      }
    }
  },
  withoutDefaultFocusAndBlur: {}
};
var touchableHandleFocus = TouchableMixin.touchableHandleFocus,
    touchableHandleBlur = TouchableMixin.touchableHandleBlur,
    TouchableMixinWithoutDefaultFocusAndBlur = (0, _objectWithoutProperties2.default)(TouchableMixin, ["touchableHandleFocus", "touchableHandleBlur"]);
TouchableMixin.withoutDefaultFocusAndBlur = TouchableMixinWithoutDefaultFocusAndBlur;
var Touchable = {
  Mixin: TouchableMixin,
  renderDebugView: function renderDebugView(_ref) {
    var color = _ref.color,
        hitSlop = _ref.hitSlop;

    if (__DEV__) {
      return (0, _jsxRuntime.jsx)(_PressabilityDebug.PressabilityDebugView, {
        color: color,
        hitSlop: hitSlop
      });
    }

    return null;
  }
};
module.exports = Touchable;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlRvdWNoYWJsZS5qcyJdLCJuYW1lcyI6WyJleHRyYWN0U2luZ2xlVG91Y2giLCJuYXRpdmVFdmVudCIsInRvdWNoZXMiLCJjaGFuZ2VkVG91Y2hlcyIsImhhc1RvdWNoZXMiLCJsZW5ndGgiLCJoYXNDaGFuZ2VkVG91Y2hlcyIsIlN0YXRlcyIsIk5PVF9SRVNQT05ERVIiLCJSRVNQT05ERVJfSU5BQ1RJVkVfUFJFU1NfSU4iLCJSRVNQT05ERVJfSU5BQ1RJVkVfUFJFU1NfT1VUIiwiUkVTUE9OREVSX0FDVElWRV9QUkVTU19JTiIsIlJFU1BPTkRFUl9BQ1RJVkVfUFJFU1NfT1VUIiwiUkVTUE9OREVSX0FDVElWRV9MT05HX1BSRVNTX0lOIiwiUkVTUE9OREVSX0FDVElWRV9MT05HX1BSRVNTX09VVCIsIkVSUk9SIiwiYmFzZVN0YXRlc0NvbmRpdGlvbnMiLCJJc0FjdGl2ZSIsIklzUHJlc3NpbmdJbiIsIklzTG9uZ1ByZXNzaW5nSW4iLCJTaWduYWxzIiwiREVMQVkiLCJSRVNQT05ERVJfR1JBTlQiLCJSRVNQT05ERVJfUkVMRUFTRSIsIlJFU1BPTkRFUl9URVJNSU5BVEVEIiwiRU5URVJfUFJFU1NfUkVDVCIsIkxFQVZFX1BSRVNTX1JFQ1QiLCJMT05HX1BSRVNTX0RFVEVDVEVEIiwiVHJhbnNpdGlvbnMiLCJlcnJvciIsIkhJR0hMSUdIVF9ERUxBWV9NUyIsIlBSRVNTX0VYUEFORF9QWCIsIkxPTkdfUFJFU1NfVEhSRVNIT0xEIiwiTE9OR19QUkVTU19ERUxBWV9NUyIsIkxPTkdfUFJFU1NfQUxMT1dFRF9NT1ZFTUVOVCIsIlRvdWNoYWJsZU1peGluIiwiY29tcG9uZW50RGlkTW91bnQiLCJQbGF0Zm9ybSIsImlzVFYiLCJjb21wb25lbnRXaWxsVW5tb3VudCIsInRvdWNoYWJsZURlbGF5VGltZW91dCIsImNsZWFyVGltZW91dCIsImxvbmdQcmVzc0RlbGF5VGltZW91dCIsInByZXNzT3V0RGVsYXlUaW1lb3V0IiwidG91Y2hhYmxlR2V0SW5pdGlhbFN0YXRlIiwidG91Y2hhYmxlIiwidG91Y2hTdGF0ZSIsInVuZGVmaW5lZCIsInJlc3BvbmRlcklEIiwidG91Y2hhYmxlSGFuZGxlUmVzcG9uZGVyVGVybWluYXRpb25SZXF1ZXN0IiwicHJvcHMiLCJyZWplY3RSZXNwb25kZXJUZXJtaW5hdGlvbiIsInRvdWNoYWJsZUhhbmRsZVN0YXJ0U2hvdWxkU2V0UmVzcG9uZGVyIiwiZGlzYWJsZWQiLCJ0b3VjaGFibGVMb25nUHJlc3NDYW5jZWxzUHJlc3MiLCJ0b3VjaGFibGVIYW5kbGVSZXNwb25kZXJHcmFudCIsImUiLCJkaXNwYXRjaElEIiwiY3VycmVudFRhcmdldCIsInBlcnNpc3QiLCJzdGF0ZSIsIl9yZWNlaXZlU2lnbmFsIiwiZGVsYXlNUyIsInRvdWNoYWJsZUdldEhpZ2hsaWdodERlbGF5TVMiLCJNYXRoIiwibWF4IiwiaXNOYU4iLCJzZXRUaW1lb3V0IiwiX2hhbmRsZURlbGF5IiwiYmluZCIsImxvbmdEZWxheU1TIiwidG91Y2hhYmxlR2V0TG9uZ1ByZXNzRGVsYXlNUyIsIl9oYW5kbGVMb25nRGVsYXkiLCJ0b3VjaGFibGVIYW5kbGVSZXNwb25kZXJSZWxlYXNlIiwicHJlc3NJbkxvY2F0aW9uIiwidG91Y2hhYmxlSGFuZGxlUmVzcG9uZGVyVGVybWluYXRlIiwidG91Y2hhYmxlSGFuZGxlUmVzcG9uZGVyTW92ZSIsInBvc2l0aW9uT25BY3RpdmF0ZSIsImRpbWVuc2lvbnNPbkFjdGl2YXRlIiwicHJlc3NSZWN0T2Zmc2V0IiwidG91Y2hhYmxlR2V0UHJlc3NSZWN0T2Zmc2V0IiwibGVmdCIsInJpZ2h0IiwidG9wIiwiYm90dG9tIiwicHJlc3NFeHBhbmRMZWZ0IiwicHJlc3NFeHBhbmRUb3AiLCJwcmVzc0V4cGFuZFJpZ2h0IiwicHJlc3NFeHBhbmRCb3R0b20iLCJoaXRTbG9wIiwidG91Y2hhYmxlR2V0SGl0U2xvcCIsInRvdWNoIiwicGFnZVgiLCJwYWdlWSIsIm1vdmVkRGlzdGFuY2UiLCJfZ2V0RGlzdGFuY2VCZXR3ZWVuUG9pbnRzIiwiX2NhbmNlbExvbmdQcmVzc0RlbGF5VGltZW91dCIsImlzVG91Y2hXaXRoaW5BY3RpdmUiLCJ3aWR0aCIsImhlaWdodCIsInByZXZTdGF0ZSIsImN1clN0YXRlIiwidG91Y2hhYmxlSGFuZGxlRm9jdXMiLCJvbkZvY3VzIiwidG91Y2hhYmxlSGFuZGxlQmx1ciIsIm9uQmx1ciIsIl9yZW1lYXN1cmVNZXRyaWNzT25BY3RpdmF0aW9uIiwiVUlNYW5hZ2VyIiwibWVhc3VyZSIsIl9oYW5kbGVRdWVyeUxheW91dCIsImwiLCJ0IiwidyIsImgiLCJnbG9iYWxYIiwiZ2xvYmFsWSIsIlBvc2l0aW9uIiwicmVsZWFzZSIsIkJvdW5kaW5nRGltZW5zaW9ucyIsImdldFBvb2xlZCIsInNpZ25hbCIsIm5leHRTdGF0ZSIsIkVycm9yIiwiX3BlcmZvcm1TaWRlRWZmZWN0c0ZvclRyYW5zaXRpb24iLCJfaXNIaWdobGlnaHQiLCJfc2F2ZVByZXNzSW5Mb2NhdGlvbiIsImxvY2F0aW9uWCIsImxvY2F0aW9uWSIsImFYIiwiYVkiLCJiWCIsImJZIiwiZGVsdGFYIiwiZGVsdGFZIiwic3FydCIsImN1cklzSGlnaGxpZ2h0IiwibmV3SXNIaWdobGlnaHQiLCJpc0ZpbmFsU2lnbmFsIiwiaXNJbml0aWFsVHJhbnNpdGlvbiIsImlzQWN0aXZlVHJhbnNpdGlvbiIsInRvdWNoYWJsZUhhbmRsZUxvbmdQcmVzcyIsIl9zdGFydEhpZ2hsaWdodCIsIl9lbmRIaWdobGlnaHQiLCJoYXNMb25nUHJlc3NIYW5kbGVyIiwib25Mb25nUHJlc3MiLCJwcmVzc0lzTG9uZ0J1dFN0aWxsQ2FsbE9uUHJlc3MiLCJzaG91bGRJbnZva2VQcmVzcyIsInRvdWNoYWJsZUhhbmRsZVByZXNzIiwiT1MiLCJ0b3VjaFNvdW5kRGlzYWJsZWQiLCJTb3VuZE1hbmFnZXIiLCJwbGF5VG91Y2hTb3VuZCIsInRvdWNoYWJsZUhhbmRsZUFjdGl2ZVByZXNzSW4iLCJ0b3VjaGFibGVIYW5kbGVBY3RpdmVQcmVzc091dCIsInRvdWNoYWJsZUdldFByZXNzT3V0RGVsYXlNUyIsIndpdGhvdXREZWZhdWx0Rm9jdXNBbmRCbHVyIiwiVG91Y2hhYmxlTWl4aW5XaXRob3V0RGVmYXVsdEZvY3VzQW5kQmx1ciIsIlRvdWNoYWJsZSIsIk1peGluIiwicmVuZGVyRGVidWdWaWV3IiwiY29sb3IiLCJfX0RFVl9fIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBVUE7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBRUE7Ozs7Ozs7O0FBTUEsSUFBTUEsa0JBQWtCLEdBQUcsU0FBckJBLGtCQUFxQixDQUFBQyxXQUFXLEVBQUk7QUFDeEMsTUFBTUMsT0FBTyxHQUFHRCxXQUFXLENBQUNDLE9BQTVCO0FBQ0EsTUFBTUMsY0FBYyxHQUFHRixXQUFXLENBQUNFLGNBQW5DO0FBQ0EsTUFBTUMsVUFBVSxHQUFHRixPQUFPLElBQUlBLE9BQU8sQ0FBQ0csTUFBUixHQUFpQixDQUEvQztBQUNBLE1BQU1DLGlCQUFpQixHQUFHSCxjQUFjLElBQUlBLGNBQWMsQ0FBQ0UsTUFBZixHQUF3QixDQUFwRTtBQUVBLFNBQU8sQ0FBQ0QsVUFBRCxJQUFlRSxpQkFBZixHQUNISCxjQUFjLENBQUMsQ0FBRCxDQURYLEdBRUhDLFVBQVUsR0FDVkYsT0FBTyxDQUFDLENBQUQsQ0FERyxHQUVWRCxXQUpKO0FBS0QsQ0FYRDs7QUFzR0EsSUFBTU0sTUFBTSxHQUFHO0FBQ2JDLEVBQUFBLGFBQWEsRUFBRSxlQURGO0FBRWJDLEVBQUFBLDJCQUEyQixFQUFFLDZCQUZoQjtBQUdiQyxFQUFBQSw0QkFBNEIsRUFBRSw4QkFIakI7QUFJYkMsRUFBQUEseUJBQXlCLEVBQUUsMkJBSmQ7QUFLYkMsRUFBQUEsMEJBQTBCLEVBQUUsNEJBTGY7QUFNYkMsRUFBQUEsOEJBQThCLEVBQUUsZ0NBTm5CO0FBT2JDLEVBQUFBLCtCQUErQixFQUFFLGlDQVBwQjtBQVFiQyxFQUFBQSxLQUFLLEVBQUU7QUFSTSxDQUFmO0FBeUJBLElBQU1DLG9CQUFvQixHQUFHO0FBQzNCUixFQUFBQSxh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YyxDQUFDd0gsMEJBQWYsR0FBNENDLHdDQUE1QztBQUVBLElBQU1DLFNBQVMsR0FBRztBQUNoQkMsRUFBQUEsS0FBSyxFQUFFM0gsY0FEUztBQUtoQjRILEVBQUFBLGVBQWUsRUFBRSwrQkFPUTtBQUFBLFFBTnZCQyxLQU11QixRQU52QkEsS0FNdUI7QUFBQSxRQUx2QnZFLE9BS3VCLFFBTHZCQSxPQUt1Qjs7QUFDdkIsUUFBSXdFLE9BQUosRUFBYTtBQUNYLGFBQU8scUJBQUMsd0NBQUQ7QUFBdUIsUUFBQSxLQUFLLEVBQUVELEtBQTlCO0FBQXFDLFFBQUEsT0FBTyxFQUFFdkU7QUFBOUMsUUFBUDtBQUNEOztBQUNELFdBQU8sSUFBUDtBQUNEO0FBakJlLENBQWxCO0FBb0JBeUUsTUFBTSxDQUFDQyxPQUFQLEdBQWlCTixTQUFqQiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZsb3dcbiAqIEBmb3JtYXRcbiAqL1xuXG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgQm91bmRpbmdEaW1lbnNpb25zIGZyb20gJy4vQm91bmRpbmdEaW1lbnNpb25zJztcbmltcG9ydCBQbGF0Zm9ybSBmcm9tICcuLi8uLi9VdGlsaXRpZXMvUGxhdGZvcm0nO1xuaW1wb3J0IFBvc2l0aW9uIGZyb20gJy4vUG9zaXRpb24nO1xuaW1wb3J0IFVJTWFuYWdlciBmcm9tICcuLi8uLi9SZWFjdE5hdGl2ZS9VSU1hbmFnZXInO1xuaW1wb3J0IFNvdW5kTWFuYWdlciBmcm9tICcuLi9Tb3VuZC9Tb3VuZE1hbmFnZXInO1xuXG5pbXBvcnQge1ByZXNzYWJpbGl0eURlYnVnVmlld30gZnJvbSAnLi4vLi4vUHJlc3NhYmlsaXR5L1ByZXNzYWJpbGl0eURlYnVnJztcblxuaW1wb3J0IHR5cGUge0NvbG9yVmFsdWV9IGZyb20gJy4uLy4uL1N0eWxlU2hlZXQvU3R5bGVTaGVldCc7XG5pbXBvcnQgdHlwZSB7RWRnZUluc2V0c1Byb3B9IGZyb20gJy4uLy4uL1N0eWxlU2hlZXQvRWRnZUluc2V0c1Byb3BUeXBlJztcbmltcG9ydCB0eXBlIHtQcmVzc0V2ZW50fSBmcm9tICcuLi8uLi9UeXBlcy9Db3JlRXZlbnRUeXBlcyc7XG5cbmNvbnN0IGV4dHJhY3RTaW5nbGVUb3VjaCA9IG5hdGl2ZUV2ZW50ID0+IHtcbiAgY29uc3QgdG91Y2hlcyA9IG5hdGl2ZUV2ZW50LnRvdWNoZXM7XG4gIGNvbnN0IGNoYW5nZWRUb3VjaGVzID0gbmF0aXZlRXZlbnQuY2hhbmdlZFRvdWNoZXM7XG4gIGNvbnN0IGhhc1RvdWNoZXMgPSB0b3VjaGVzICYmIHRvdWNoZXMubGVuZ3RoID4gMDtcbiAgY29uc3QgaGFzQ2hhbmdlZFRvdWNoZXMgPSBjaGFuZ2VkVG91Y2hlcyAmJiBjaGFuZ2VkVG91Y2hlcy5sZW5ndGggPiAwO1xuXG4gIHJldHVybiAhaGFzVG91Y2hlcyAmJiBoYXNDaGFuZ2VkVG91Y2hlc1xuICAgID8gY2hhbmdlZFRvdWNoZXNbMF1cbiAgICA6IGhhc1RvdWNoZXNcbiAgICA/IHRvdWNoZXNbMF1cbiAgICA6IG5hdGl2ZUV2ZW50O1xufTtcblxuLyoqXG4gKiBgVG91Y2hhYmxlYDogVGFwcyBkb25lIHJpZ2h0LlxuICpcbiAqIFlvdSBob29rIHlvdXIgYFJlc3BvbmRlckV2ZW50UGx1Z2luYCBldmVudHMgaW50byBgVG91Y2hhYmxlYC4gYFRvdWNoYWJsZWBcbiAqIHdpbGwgbWVhc3VyZSB0aW1lL2dlb21ldHJ5IGFuZCB0ZWxscyB5b3Ugd2hlbiB0byBnaXZlIGZlZWRiYWNrIHRvIHRoZSB1c2VyLlxuICpcbiAqID09PT09PT09PT09PT09PT09PT09PT0gVG91Y2hhYmxlIFR1dG9yaWFsID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIFRoZSBgVG91Y2hhYmxlYCBtaXhpbiBoZWxwcyB5b3UgaGFuZGxlIHRoZSBcInByZXNzXCIgaW50ZXJhY3Rpb24uIEl0IGFuYWx5emVzXG4gKiB0aGUgZ2VvbWV0cnkgb2YgZWxlbWVudHMsIGFuZCBvYnNlcnZlcyB3aGVuIGFub3RoZXIgcmVzcG9uZGVyIChzY3JvbGwgdmlld1xuICogZXRjKSBoYXMgc3RvbGVuIHRoZSB0b3VjaCBsb2NrLiBJdCBub3RpZmllcyB5b3VyIGNvbXBvbmVudCB3aGVuIGl0IHNob3VsZFxuICogZ2l2ZSBmZWVkYmFjayB0byB0aGUgdXNlci4gKGJvdW5jaW5nL2hpZ2hsaWdodGluZy91bmhpZ2hsaWdodGluZykuXG4gKlxuICogLSBXaGVuIGEgdG91Y2ggd2FzIGFjdGl2YXRlZCAodHlwaWNhbGx5IHlvdSBoaWdobGlnaHQpXG4gKiAtIFdoZW4gYSB0b3VjaCB3YXMgZGVhY3RpdmF0ZWQgKHR5cGljYWxseSB5b3UgdW5oaWdobGlnaHQpXG4gKiAtIFdoZW4gYSB0b3VjaCB3YXMgXCJwcmVzc2VkXCIgLSBhIHRvdWNoIGVuZGVkIHdoaWxlIHN0aWxsIHdpdGhpbiB0aGUgZ2VvbWV0cnlcbiAqICAgb2YgdGhlIGVsZW1lbnQsIGFuZCBubyBvdGhlciBlbGVtZW50IChsaWtlIHNjcm9sbGVyKSBoYXMgXCJzdG9sZW5cIiB0b3VjaFxuICogICBsb2NrIChcInJlc3BvbmRlclwiKSAoVHlwaWNhbGx5IHlvdSBib3VuY2UgdGhlIGVsZW1lbnQpLlxuICpcbiAqIEEgZ29vZCB0YXAgaW50ZXJhY3Rpb24gaXNuJ3QgYXMgc2ltcGxlIGFzIHlvdSBtaWdodCB0aGluay4gVGhlcmUgc2hvdWxkIGJlIGFcbiAqIHNsaWdodCBkZWxheSBiZWZvcmUgc2hvd2luZyBhIGhpZ2hsaWdodCB3aGVuIHN0YXJ0aW5nIGEgdG91Y2guIElmIGFcbiAqIHN1YnNlcXVlbnQgdG91Y2ggbW92ZSBleGNlZWRzIHRoZSBib3VuZGFyeSBvZiB0aGUgZWxlbWVudCwgaXQgc2hvdWxkXG4gKiB1bmhpZ2hsaWdodCwgYnV0IGlmIHRoYXQgc2FtZSB0b3VjaCBpcyBicm91Z2h0IGJhY2sgd2l0aGluIHRoZSBib3VuZGFyeSwgaXRcbiAqIHNob3VsZCByZWhpZ2hsaWdodCBhZ2Fpbi4gQSB0b3VjaCBjYW4gbW92ZSBpbiBhbmQgb3V0IG9mIHRoYXQgYm91bmRhcnlcbiAqIHNldmVyYWwgdGltZXMsIGVhY2ggdGltZSB0b2dnbGluZyBoaWdobGlnaHRpbmcsIGJ1dCBhIFwicHJlc3NcIiBpcyBvbmx5XG4gKiB0cmlnZ2VyZWQgaWYgdGhhdCB0b3VjaCBlbmRzIHdoaWxlIHdpdGhpbiB0aGUgZWxlbWVudCdzIGJvdW5kYXJ5IGFuZCBub1xuICogc2Nyb2xsZXIgKG9yIGFueXRoaW5nIGVsc2UpIGhhcyBzdG9sZW4gdGhlIGxvY2sgb24gdG91Y2hlcy5cbiAqXG4gKiBUbyBjcmVhdGUgYSBuZXcgdHlwZSBvZiBjb21wb25lbnQgdGhhdCBoYW5kbGVzIGludGVyYWN0aW9uIHVzaW5nIHRoZVxuICogYFRvdWNoYWJsZWAgbWl4aW4sIGRvIHRoZSBmb2xsb3dpbmc6XG4gKlxuICogLSBJbml0aWFsaXplIHRoZSBgVG91Y2hhYmxlYCBzdGF0ZS5cbiAqXG4gKiAgIGdldEluaXRpYWxTdGF0ZTogZnVuY3Rpb24oKSB7XG4gKiAgICAgcmV0dXJuIG1lcmdlKHRoaXMudG91Y2hhYmxlR2V0SW5pdGlhbFN0YXRlKCksIHlvdXJDb21wb25lbnRTdGF0ZSk7XG4gKiAgIH1cbiAqXG4gKiAtIENob29zZSB0aGUgcmVuZGVyZWQgY29tcG9uZW50IHdobydzIHRvdWNoZXMgc2hvdWxkIHN0YXJ0IHRoZSBpbnRlcmFjdGl2ZVxuICogICBzZXF1ZW5jZS4gT24gdGhhdCByZW5kZXJlZCBub2RlLCBmb3J3YXJkIGFsbCBgVG91Y2hhYmxlYCByZXNwb25kZXJcbiAqICAgaGFuZGxlcnMuIFlvdSBjYW4gY2hvb3NlIGFueSByZW5kZXJlZCBub2RlIHlvdSBsaWtlLiBDaG9vc2UgYSBub2RlIHdob3NlXG4gKiAgIGhpdCB0YXJnZXQgeW91J2QgbGlrZSB0byBpbnN0aWdhdGUgdGhlIGludGVyYWN0aW9uIHNlcXVlbmNlOlxuICpcbiAqICAgLy8gSW4gcmVuZGVyIGZ1bmN0aW9uOlxuICogICByZXR1cm4gKFxuICogICAgIDxWaWV3XG4gKiAgICAgICBvblN0YXJ0U2hvdWxkU2V0UmVzcG9uZGVyPXt0aGlzLnRvdWNoYWJsZUhhbmRsZVN0YXJ0U2hvdWxkU2V0UmVzcG9uZGVyfVxuICogICAgICAgb25SZXNwb25kZXJUZXJtaW5hdGlvblJlcXVlc3Q9e3RoaXMudG91Y2hhYmxlSGFuZGxlUmVzcG9uZGVyVGVybWluYXRpb25SZXF1ZXN0fVxuICogICAgICAgb25SZXNwb25kZXJHcmFudD17dGhpcy50b3VjaGFibGVIYW5kbGVSZXNwb25kZXJHcmFudH1cbiAqICAgICAgIG9uUmVzcG9uZGVyTW92ZT17dGhpcy50b3VjaGFibGVIYW5kbGVSZXNwb25kZXJNb3ZlfVxuICogICAgICAgb25SZXNwb25kZXJSZWxlYXNlPXt0aGlzLnRvdWNoYWJsZUhhbmRsZVJlc3BvbmRlclJlbGVhc2V9XG4gKiAgICAgICBvblJlc3BvbmRlclRlcm1pbmF0ZT17dGhpcy50b3VjaGFibGVIYW5kbGVSZXNwb25kZXJUZXJtaW5hdGV9PlxuICogICAgICAgPFZpZXc+XG4gKiAgICAgICAgIEV2ZW4gdGhvdWdoIHRoZSBoaXQgZGV0ZWN0aW9uL2ludGVyYWN0aW9ucyBhcmUgdHJpZ2dlcmVkIGJ5IHRoZVxuICogICAgICAgICB3cmFwcGluZyAodHlwaWNhbGx5IGxhcmdlcikgbm9kZSwgd2UgdXN1YWxseSBlbmQgdXAgaW1wbGVtZW50aW5nXG4gKiAgICAgICAgIGN1c3RvbSBsb2dpYyB0aGF0IGhpZ2hsaWdodHMgdGhpcyBpbm5lciBvbmUuXG4gKiAgICAgICA8L1ZpZXc+XG4gKiAgICAgPC9WaWV3PlxuICogICApO1xuICpcbiAqIC0gWW91IG1heSBzZXQgdXAgeW91ciBvd24gaGFuZGxlcnMgZm9yIGVhY2ggb2YgdGhlc2UgZXZlbnRzLCBzbyBsb25nIGFzIHlvdVxuICogICBhbHNvIGludm9rZSB0aGUgYHRvdWNoYWJsZSpgIGhhbmRsZXJzIGluc2lkZSBvZiB5b3VyIGN1c3RvbSBoYW5kbGVyLlxuICpcbiAqIC0gSW1wbGVtZW50IHRoZSBoYW5kbGVycyBvbiB5b3VyIGNvbXBvbmVudCBjbGFzcyBpbiBvcmRlciB0byBwcm92aWRlXG4gKiAgIGZlZWRiYWNrIHRvIHRoZSB1c2VyLiBTZWUgZG9jdW1lbnRhdGlvbiBmb3IgZWFjaCBvZiB0aGVzZSBjbGFzcyBtZXRob2RzXG4gKiAgIHRoYXQgeW91IHNob3VsZCBpbXBsZW1lbnQuXG4gKlxuICogICB0b3VjaGFibGVIYW5kbGVQcmVzczogZnVuY3Rpb24oKSB7XG4gKiAgICAgIHRoaXMucGVyZm9ybUJvdW5jZUFuaW1hdGlvbigpOyAgLy8gb3Igd2hhdGV2ZXIgeW91IHdhbnQgdG8gZG8uXG4gKiAgIH0sXG4gKiAgIHRvdWNoYWJsZUhhbmRsZUFjdGl2ZVByZXNzSW46IGZ1bmN0aW9uKCkge1xuICogICAgIHRoaXMuYmVnaW5IaWdobGlnaHRpbmcoLi4uKTsgIC8vIFdoYXRldmVyIHlvdSBsaWtlIHRvIGNvbnZleSBhY3RpdmF0aW9uXG4gKiAgIH0sXG4gKiAgIHRvdWNoYWJsZUhhbmRsZUFjdGl2ZVByZXNzT3V0OiBmdW5jdGlvbigpIHtcbiAqICAgICB0aGlzLmVuZEhpZ2hsaWdodGluZyguLi4pOyAgLy8gV2hhdGV2ZXIgeW91IGxpa2UgdG8gY29udmV5IGRlYWN0aXZhdGlvblxuICogICB9LFxuICpcbiAqIC0gVGhlcmUgYXJlIG1vcmUgYWR2YW5jZWQgbWV0aG9kcyB5b3UgY2FuIGltcGxlbWVudCAoc2VlIGRvY3VtZW50YXRpb24gYmVsb3cpOlxuICogICB0b3VjaGFibGVHZXRIaWdobGlnaHREZWxheU1TOiBmdW5jdGlvbigpIHtcbiAqICAgICByZXR1cm4gMjA7XG4gKiAgIH1cbiAqICAgLy8gSW4gcHJhY3RpY2UsICphbHdheXMqIHVzZSBhIHByZWRlY2xhcmVkIGNvbnN0YW50IChjb25zZXJ2ZSBtZW1vcnkpLlxuICogICB0b3VjaGFibGVHZXRQcmVzc1JlY3RPZmZzZXQ6IGZ1bmN0aW9uKCkge1xuICogICAgIHJldHVybiB7dG9wOiAyMCwgbGVmdDogMjAsIHJpZ2h0OiAyMCwgYm90dG9tOiAxMDB9O1xuICogICB9XG4gKi9cblxuLyoqXG4gKiBUb3VjaGFibGUgc3RhdGVzLlxuICovXG5cbmNvbnN0IFN0YXRlcyA9IHtcbiAgTk9UX1JFU1BPTkRFUjogJ05PVF9SRVNQT05ERVInLCAvLyBOb3QgdGhlIHJlc3BvbmRlclxuICBSRVNQT05ERVJfSU5BQ1RJVkVfUFJFU1NfSU46ICdSRVNQT05ERVJfSU5BQ1RJVkVfUFJFU1NfSU4nLCAvLyBSZXNwb25kZXIsIGluYWN0aXZlLCBpbiB0aGUgYFByZXNzUmVjdGBcbiAgUkVTUE9OREVSX0lOQUNUSVZFX1BSRVNTX09VVDogJ1JFU1BPTkRFUl9JTkFDVElWRV9QUkVTU19PVVQnLCAvLyBSZXNwb25kZXIsIGluYWN0aXZlLCBvdXQgb2YgYFByZXNzUmVjdGBcbiAgUkVTUE9OREVSX0FDVElWRV9QUkVTU19JTjogJ1JFU1BPTkRFUl9BQ1RJVkVfUFJFU1NfSU4nLCAvLyBSZXNwb25kZXIsIGFjdGl2ZSwgaW4gdGhlIGBQcmVzc1JlY3RgXG4gIFJFU1BPTkRFUl9BQ1RJVkVfUFJFU1NfT1VUOiAnUkVTUE9OREVSX0FDVElWRV9QUkVTU19PVVQnLCAvLyBSZXNwb25kZXIsIGFjdGl2ZSwgb3V0IG9mIGBQcmVzc1JlY3RgXG4gIFJFU1BPTkRFUl9BQ1RJVkVfTE9OR19QUkVTU19JTjogJ1JFU1BPTkRFUl9BQ1RJVkVfTE9OR19QUkVTU19JTicsIC8vIFJlc3BvbmRlciwgYWN0aXZlLCBpbiB0aGUgYFByZXNzUmVjdGAsIGFmdGVyIGxvbmcgcHJlc3MgdGhyZXNob2xkXG4gIFJFU1BPTkRFUl9BQ1RJVkVfTE9OR19QUkVTU19PVVQ6ICdSRVNQT05ERVJfQUNUSVZFX0xPTkdfUFJFU1NfT1VUJywgLy8gUmVzcG9uZGVyLCBhY3RpdmUsIG91dCBvZiBgUHJlc3NSZWN0YCwgYWZ0ZXIgbG9uZyBwcmVzcyB0aHJlc2hvbGRcbiAgRVJST1I6ICdFUlJPUicsXG59O1xuXG50eXBlIFN0YXRlID1cbiAgfCB0eXBlb2YgU3RhdGVzLk5PVF9SRVNQT05ERVJcbiAgfCB0eXBlb2YgU3RhdGVzLlJFU1BPTkRFUl9JTkFDVElWRV9QUkVTU19JTlxuICB8IHR5cGVvZiBTdGF0ZXMuUkVTUE9OREVSX0lOQUNUSVZFX1BSRVNTX09VVFxuICB8IHR5cGVvZiBTdGF0ZXMuUkVTUE9OREVSX0FDVElWRV9QUkVTU19JTlxuICB8IHR5cGVvZiBTdGF0ZXMuUkVTUE9OREVSX0FDVElWRV9QUkVTU19PVVRcbiAgfCB0eXBlb2YgU3RhdGVzLlJFU1BPTkRFUl9BQ1RJVkVfTE9OR19QUkVTU19JTlxuICB8IHR5cGVvZiBTdGF0ZXMuUkVTUE9OREVSX0FDVElWRV9MT05HX1BSRVNTX09VVFxuICB8IHR5cGVvZiBTdGF0ZXMuRVJST1I7XG5cbi8qXG4gKiBRdWljayBsb29rdXAgbWFwIGZvciBzdGF0ZXMgdGhhdCBhcmUgY29uc2lkZXJlZCB0byBiZSBcImFjdGl2ZVwiXG4gKi9cblxuY29uc3QgYmFzZVN0YXRlc0NvbmRpdGlvbnMgPSB7XG4gIE5PVF9SRVNQT05ERVI6IGZhbHNlLFxuICBSRVNQT05ERVJfSU5BQ1RJVkVfUFJFU1NfSU46IGZhbHNlLFxuICBSRVNQT05ERVJfSU5BQ1RJVkVfUFJFU1NfT1VUOiBmYWxzZSxcbiAgUkVTUE9OREVSX0FDVElWRV9QUkVTU19JTjogZmFsc2UsXG4gIFJFU1BPTkRFUl9BQ1RJVkVfUFJFU1NfT1VUOiBmYWxzZSxcbiAgUkVTUE9OREVSX0FDVElWRV9MT05HX1BSRVNTX0lOOiBmYWxzZSxcbiAgUkVTUE9OREVSX0FDVElWRV9MT05HX1BSRVNTX09VVDogZmFsc2UsXG4gIEVSUk9SOiBmYWxzZSxcbn07XG5cbmNvbnN0IElzQWN0aXZlID0ge1xuICAuLi5iYXNlU3RhdGVzQ29uZGl0aW9ucyxcbiAgUkVTUE9OREVSX0FDVElWRV9QUkVTU19PVVQ6IHRydWUsXG4gIFJFU1BPTkRFUl9BQ1RJVkVfUFJFU1NfSU46IHRydWUsXG59O1xuXG4vKipcbiAqIFF1aWNrIGxvb2t1cCBmb3Igc3RhdGVzIHRoYXQgYXJlIGNvbnNpZGVyZWQgdG8gYmUgXCJwcmVzc2luZ1wiIGFuZCBhcmVcbiAqIHRoZXJlZm9yZSBlbGlnaWJsZSB0byByZXN1bHQgaW4gYSBcInNlbGVjdGlvblwiIGlmIHRoZSBwcmVzcyBzdG9wcy5cbiAqL1xuY29uc3QgSXNQcmVzc2luZ0luID0ge1xuICAuLi5iYXNlU3RhdGVzQ29uZGl0aW9ucyxcbiAgUkVTUE9OREVSX0lOQUNUSVZFX1BSRVNTX0lOOiB0cnVlLFxuICBSRVNQT05ERVJfQUNUSVZFX1BSRVNTX0lOOiB0cnVlLFxuICBSRVNQT05ERVJfQUNUSVZFX0xPTkdfUFJFU1NfSU46IHRydWUsXG59O1xuXG5jb25zdCBJc0xvbmdQcmVzc2luZ0luID0ge1xuICAuLi5iYXNlU3RhdGVzQ29uZGl0aW9ucyxcbiAgUkVTUE9OREVSX0FDVElWRV9MT05HX1BSRVNTX0lOOiB0cnVlLFxufTtcblxuLyoqXG4gKiBJbnB1dHMgdG8gdGhlIHN0YXRlIG1hY2hpbmUuXG4gKi9cbmNvbnN0IFNpZ25hbHMgPSB7XG4gIERFTEFZOiAnREVMQVknLFxuICBSRVNQT05ERVJfR1JBTlQ6ICdSRVNQT05ERVJfR1JBTlQnLFxuICBSRVNQT05ERVJfUkVMRUFTRTogJ1JFU1BPTkRFUl9SRUxFQVNFJyxcbiAgUkVTUE9OREVSX1RFUk1JTkFURUQ6ICdSRVNQT05ERVJfVEVSTUlOQVRFRCcsXG4gIEVOVEVSX1BSRVNTX1JFQ1Q6ICdFTlRFUl9QUkVTU19SRUNUJyxcbiAgTEVBVkVfUFJFU1NfUkVDVDogJ0xFQVZFX1BSRVNTX1JFQ1QnLFxuICBMT05HX1BSRVNTX0RFVEVDVEVEOiAnTE9OR19QUkVTU19ERVRFQ1RFRCcsXG59O1xuXG50eXBlIFNpZ25hbCA9XG4gIHwgdHlwZW9mIFNpZ25hbHMuREVMQVlcbiAgfCB0eXBlb2YgU2lnbmFscy5SRVNQT05ERVJfR1JBTlRcbiAgfCB0eXBlb2YgU2lnbmFscy5SRVNQT05ERVJfUkVMRUFTRVxuICB8IHR5cGVvZiBTaWduYWxzLlJFU1BPTkRFUl9URVJNSU5BVEVEXG4gIHwgdHlwZW9mIFNpZ25hbHMuRU5URVJfUFJFU1NfUkVDVFxuICB8IHR5cGVvZiBTaWduYWxzLkxFQVZFX1BSRVNTX1JFQ1RcbiAgfCB0eXBlb2YgU2lnbmFscy5MT05HX1BSRVNTX0RFVEVDVEVEO1xuXG4vKipcbiAqIE1hcHBpbmcgZnJvbSBTdGF0ZXMgeCBTaWduYWxzID0+IFN0YXRlc1xuICovXG5jb25zdCBUcmFuc2l0aW9ucyA9IHtcbiAgTk9UX1JFU1BPTkRFUjoge1xuICAgIERFTEFZOiBTdGF0ZXMuRVJST1IsXG4gICAgUkVTUE9OREVSX0dSQU5UOiBTdGF0ZXMuUkVTUE9OREVSX0lOQUNUSVZFX1BSRVNTX0lOLFxuICAgIFJFU1BPTkRFUl9SRUxFQVNFOiBTdGF0ZXMuRVJST1IsXG4gICAgUkVTUE9OREVSX1RFUk1JTkFURUQ6IFN0YXRlcy5FUlJPUixcbiAgICBFTlRFUl9QUkVTU19SRUNUOiBTdGF0ZXMuRVJST1IsXG4gICAgTEVBVkVfUFJFU1NfUkVDVDogU3RhdGVzLkVSUk9SLFxuICAgIExPTkdfUFJFU1NfREVURUNURUQ6IFN0YXRlcy5FUlJPUixcbiAgfSxcbiAgUkVTUE9OREVSX0lOQUNUSVZFX1BSRVNTX0lOOiB7XG4gICAgREVMQVk6IFN0YXRlcy5SRVNQT05ERVJfQUNUSVZFX1BSRVNTX0lOLFxuICAgIFJFU1BPTkRFUl9HUkFOVDogU3RhdGVzLkVSUk9SLFxuICAgIFJFU1BPTkRFUl9SRUxFQVNFOiBTdGF0ZXMuTk9UX1JFU1BPTkRFUixcbiAgICBSRVNQT05ERVJfVEVSTUlOQVRFRDogU3RhdGVzLk5PVF9SRVNQT05ERVIsXG4gICAgRU5URVJfUFJFU1NfUkVDVDogU3RhdGVzLlJFU1BPTkRFUl9JTkFDVElWRV9QUkVTU19JTixcbiAgICBMRUFWRV9QUkVTU19SRUNUOiBTdGF0ZXMuUkVTUE9OREVSX0lOQUNUSVZFX1BSRVNTX09VVCxcbiAgICBMT05HX1BSRVNTX0RFVEVDVEVEOiBTdGF0ZXMuRVJST1IsXG4gIH0sXG4gIFJFU1BPTkRFUl9JTkFDVElWRV9QUkVTU19PVVQ6IHtcbiAgICBERUxBWTogU3RhdGVzLlJFU1BPTkRFUl9BQ1RJVkVfUFJFU1NfT1VULFxuICAgIFJFU1BPTkRFUl9HUkFOVDogU3RhdGVzLkVSUk9SLFxuICAgIFJFU1BPTkRFUl9SRUxFQVNFOiBTdGF0ZXMuTk9UX1JFU1BPTkRFUixcbiAgICBSRVNQT05ERVJfVEVSTUlOQVRFRDogU3RhdGVzLk5PVF9SRVNQT05ERVIsXG4gICAgRU5URVJfUFJFU1NfUkVDVDogU3RhdGVzLlJFU1BPTkRFUl9JTkFDVElWRV9QUkVTU19JTixcbiAgICBMRUFWRV9QUkVTU19SRUNUOiBTdGF0ZXMuUkVTUE9OREVSX0lOQUNUSVZFX1BSRVNTX09VVCxcbiAgICBMT05HX1BSRVNTX0RFVEVDVEVEOiBTdGF0ZXMuRVJST1IsXG4gIH0sXG4gIFJFU1BPTkRFUl9BQ1RJVkVfUFJFU1NfSU46IHtcbiAgICBERUxBWTogU3RhdGVzLkVSUk9SLFxuICAgIFJFU1BPTkRFUl9HUkFOVDogU3RhdGVzLkVSUk9SLFxuICAgIFJFU1BPTkRFUl9SRUxFQVNFOiBTdGF0ZXMuTk9UX1JFU1BPTkRFUixcbiAgICBSRVNQT05ERVJfVEVSTUlOQVRFRDogU3RhdGVzLk5PVF9SRVNQT05ERVIsXG4gICAgRU5URVJfUFJFU1NfUkVDVDogU3RhdGVzLlJFU1BPTkRFUl9BQ1RJVkVfUFJFU1NfSU4sXG4gICAgTEVBVkVfUFJFU1NfUkVDVDogU3RhdGVzLlJFU1BPTkRFUl9BQ1RJVkVfUFJFU1NfT1VULFxuICAgIExPTkdfUFJFU1NfREVURUNURUQ6IFN0YXRlcy5SRVNQT05ERVJfQUNUSVZFX0xPTkdfUFJFU1NfSU4sXG4gIH0sXG4gIFJFU1BPTkRFUl9BQ1RJVkVfUFJFU1NfT1VUOiB7XG4gICAgREVMQVk6IFN0YXRlcy5FUlJPUixcbiAgICBSRVNQT05ERVJfR1JBTlQ6IFN0YXRlcy5FUlJPUixcbiAgICBSRVNQT05ERVJfUkVMRUFTRTogU3RhdGVzLk5PVF9SRVNQT05ERVIsXG4gICAgUkVTUE9OREVSX1RFUk1JTkFURUQ6IFN0YXRlcy5OT1RfUkVTUE9OREVSLFxuICAgIEVOVEVSX1BSRVNTX1JFQ1Q6IFN0YXRlcy5SRVNQT05ERVJfQUNUSVZFX1BSRVNTX0lOLFxuICAgIExFQVZFX1BSRVNTX1JFQ1Q6IFN0YXRlcy5SRVNQT05ERVJfQUNUSVZFX1BSRVNTX09VVCxcbiAgICBMT05HX1BSRVNTX0RFVEVDVEVEOiBTdGF0ZXMuRVJST1IsXG4gIH0sXG4gIFJFU1BPTkRFUl9BQ1RJVkVfTE9OR19QUkVTU19JTjoge1xuICAgIERFTEFZOiBTdGF0ZXMuRVJST1IsXG4gICAgUkVTUE9OREVSX0dSQU5UOiBTdGF0ZXMuRVJST1IsXG4gICAgUkVTUE9OREVSX1JFTEVBU0U6IFN0YXRlcy5OT1RfUkVTUE9OREVSLFxuICAgIFJFU1BPTkRFUl9URVJNSU5BVEVEOiBTdGF0ZXMuTk9UX1JFU1BPTkRFUixcbiAgICBFTlRFUl9QUkVTU19SRUNUOiBTdGF0ZXMuUkVTUE9OREVSX0FDVElWRV9MT05HX1BSRVNTX0lOLFxuICAgIExFQVZFX1BSRVNTX1JFQ1Q6IFN0YXRlcy5SRVNQT05ERVJfQUNUSVZFX0xPTkdfUFJFU1NfT1VULFxuICAgIExPTkdfUFJFU1NfREVURUNURUQ6IFN0YXRlcy5SRVNQT05ERVJfQUNUSVZFX0xPTkdfUFJFU1NfSU4sXG4gIH0sXG4gIFJFU1BPTkRFUl9BQ1RJVkVfTE9OR19QUkVTU19PVVQ6IHtcbiAgICBERUxBWTogU3RhdGVzLkVSUk9SLFxuICAgIFJFU1BPTkRFUl9HUkFOVDogU3RhdGVzLkVSUk9SLFxuICAgIFJFU1BPTkRFUl9SRUxFQVNFOiBTdGF0ZXMuTk9UX1JFU1BPTkRFUixcbiAgICBSRVNQT05ERVJfVEVSTUlOQVRFRDogU3RhdGVzLk5PVF9SRVNQT05ERVIsXG4gICAgRU5URVJfUFJFU1NfUkVDVDogU3RhdGVzLlJFU1BPTkRFUl9BQ1RJVkVfTE9OR19QUkVTU19JTixcbiAgICBMRUFWRV9QUkVTU19SRUNUOiBTdGF0ZXMuUkVTUE9OREVSX0FDVElWRV9MT05HX1BSRVNTX09VVCxcbiAgICBMT05HX1BSRVNTX0RFVEVDVEVEOiBTdGF0ZXMuRVJST1IsXG4gIH0sXG4gIGVycm9yOiB7XG4gICAgREVMQVk6IFN0YXRlcy5OT1RfUkVTUE9OREVSLFxuICAgIFJFU1BPTkRFUl9HUkFOVDogU3RhdGVzLlJFU1BPTkRFUl9JTkFDVElWRV9QUkVTU19JTixcbiAgICBSRVNQT05ERVJfUkVMRUFTRTogU3RhdGVzLk5PVF9SRVNQT05ERVIsXG4gICAgUkVTUE9OREVSX1RFUk1JTkFURUQ6IFN0YXRlcy5OT1RfUkVTUE9OREVSLFxuICAgIEVOVEVSX1BSRVNTX1JFQ1Q6IFN0YXRlcy5OT1RfUkVTUE9OREVSLFxuICAgIExFQVZFX1BSRVNTX1JFQ1Q6IFN0YXRlcy5OT1RfUkVTUE9OREVSLFxuICAgIExPTkdfUFJFU1NfREVURUNURUQ6IFN0YXRlcy5OT1RfUkVTUE9OREVSLFxuICB9LFxufTtcblxuLy8gPT09PSBUeXBpY2FsIENvbnN0YW50cyBmb3IgaW50ZWdyYXRpbmcgaW50byBVSSBjb21wb25lbnRzID09PT1cbi8vIHZhciBISVRfRVhQQU5EX1BYID0gMjA7XG4vLyB2YXIgSElUX1ZFUlRfT0ZGU0VUX1BYID0gMTA7XG5jb25zdCBISUdITElHSFRfREVMQVlfTVMgPSAxMzA7XG5cbmNvbnN0IFBSRVNTX0VYUEFORF9QWCA9IDIwO1xuXG5jb25zdCBMT05HX1BSRVNTX1RIUkVTSE9MRCA9IDUwMDtcblxuY29uc3QgTE9OR19QUkVTU19ERUxBWV9NUyA9IExPTkdfUFJFU1NfVEhSRVNIT0xEIC0gSElHSExJR0hUX0RFTEFZX01TO1xuXG5jb25zdCBMT05HX1BSRVNTX0FMTE9XRURfTU9WRU1FTlQgPSAxMDtcblxuLy8gRGVmYXVsdCBhbW91bnQgXCJhY3RpdmVcIiByZWdpb24gcHJvdHJ1ZGVzIGJleW9uZCBib3hcblxuLyoqXG4gKiBCeSBjb252ZW50aW9uLCBtZXRob2RzIHByZWZpeGVkIHdpdGggdW5kZXJzY29yZXMgYXJlIG1lYW50IHRvIGJlIEBwcml2YXRlLFxuICogYW5kIG5vdCBAcHJvdGVjdGVkLiBNaXhlcnMgc2hvdWxkbid0IGFjY2VzcyB0aGVtIC0gbm90IGV2ZW4gdG8gcHJvdmlkZSB0aGVtXG4gKiBhcyBjYWxsYmFjayBoYW5kbGVycy5cbiAqXG4gKlxuICogPT09PT09PT09PSBHZW9tZXRyeSA9PT09PT09PT1cbiAqIGBUb3VjaGFibGVgIG9ubHkgYXNzdW1lcyB0aGF0IHRoZXJlIGV4aXN0cyBhIGBIaXRSZWN0YCBub2RlLiBUaGUgYFByZXNzUmVjdGBcbiAqIGlzIGFuIGFic3RyYWN0IGJveCB0aGF0IGlzIGV4dGVuZGVkIGJleW9uZCB0aGUgYEhpdFJlY3RgLlxuICpcbiAqICArLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0rXG4gKiAgfCAgICAgICAgICAgICAgICAgICAgICAgICAgfCAtIFwiU3RhcnRcIiBldmVudHMgaW4gYEhpdFJlY3RgIGNhdXNlIGBIaXRSZWN0YFxuICogIHwgICstLS0tLS0tLS0tLS0tLS0tLS0tLSsgIHwgICB0byBiZWNvbWUgdGhlIHJlc3BvbmRlci5cbiAqICB8ICB8ICArLS0tLS0tLS0tLS0tLS0rICB8ICB8IC0gYEhpdFJlY3RgIGlzIHR5cGljYWxseSBleHBhbmRlZCBhcm91bmRcbiAqICB8ICB8ICB8ICAgICAgICAgICAgICB8ICB8ICB8ICAgdGhlIGBWaXN1YWxSZWN0YCwgYnV0IHNoaWZ0ZWQgZG93bndhcmQuXG4gKiAgfCAgfCAgfCAgVmlzdWFsUmVjdCAgfCAgfCAgfCAtIEFmdGVyIHByZXNzaW5nIGRvd24sIGFmdGVyIHNvbWUgZGVsYXksXG4gKiAgfCAgfCAgfCAgICAgICAgICAgICAgfCAgfCAgfCAgIGFuZCBiZWZvcmUgbGV0dGluZyB1cCwgdGhlIFZpc3VhbCBSZWFjdFxuICogIHwgIHwgICstLS0tLS0tLS0tLS0tLSsgIHwgIHwgICB3aWxsIGJlY29tZSBcImFjdGl2ZVwiLiBUaGlzIG1ha2VzIGl0IGVsaWdpYmxlXG4gKiAgfCAgfCAgICAgSGl0UmVjdCAgICAgICAgfCAgfCAgIGZvciBiZWluZyBoaWdobGlnaHRlZCAoc28gbG9uZyBhcyB0aGVcbiAqICB8ICArLS0tLS0tLS0tLS0tLS0tLS0tLS0rICB8ICAgcHJlc3MgcmVtYWlucyBpbiB0aGUgYFByZXNzUmVjdGApLlxuICogIHwgICAgICAgIFByZXNzUmVjdCAgICAgbyAgIHxcbiAqICArLS0tLS0tLS0tLS0tLS0tLS0tLS0tLXwtLS0rXG4gKiAgICAgICAgICAgT3V0IFJlZ2lvbiAgICB8XG4gKiAgICAgICAgICAgICAgICAgICAgICAgICArLS0tLS0rIFRoaXMgZ2FwIGJldHdlZW4gdGhlIGBIaXRSZWN0YCBhbmRcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYFByZXNzUmVjdGAgYWxsb3dzIGEgdG91Y2ggdG8gbW92ZSBmYXIgYXdheVxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmcm9tIHRoZSBvcmlnaW5hbCBoaXQgcmVjdCwgYW5kIHJlbWFpblxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoaWdobGlnaHRlZCwgYW5kIGVsaWdpYmxlIGZvciBhIFwiUHJlc3NcIi5cbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQ3VzdG9taXplIHRoaXMgdmlhXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGB0b3VjaGFibGVHZXRQcmVzc1JlY3RPZmZzZXQoKWAuXG4gKlxuICpcbiAqXG4gKiA9PT09PT09IFN0YXRlIE1hY2hpbmUgPT09PT09PVxuICpcbiAqICstLS0tLS0tLS0tLS0tKyA8LS0tKyBSRVNQT05ERVJfUkVMRUFTRVxuICogfE5PVF9SRVNQT05ERVJ8XG4gKiArLS0tLS0tLS0tLS0tLSsgPC0tLSsgUkVTUE9OREVSX1RFUk1JTkFURURcbiAqICAgICArXG4gKiAgICAgfCBSRVNQT05ERVJfR1JBTlQgKEhpdFJlY3QpXG4gKiAgICAgdlxuICogKy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSsgIERFTEFZICAgKy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0rICBUICsgREVMQVkgICAgICstLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0rXG4gKiB8UkVTUE9OREVSX0lOQUNUSVZFX1BSRVNTX0lOfCstLS0tLS0tLT58UkVTUE9OREVSX0FDVElWRV9QUkVTU19JTnwgKy0tLS0tLS0tLS0tLT4gfFJFU1BPTkRFUl9BQ1RJVkVfTE9OR19QUkVTU19JTnxcbiAqICstLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0rICAgICAgICAgICstLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKyAgICAgICAgICAgICAgICArLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tK1xuICogICAgICsgICAgICAgICAgICBeICAgICAgICAgICAgICAgICAgICAgICAgICsgICAgICAgICAgIF4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICArICAgICAgICAgICBeXG4gKiAgICAgfExFQVZFXyAgICAgIHxFTlRFUl8gICAgICAgICAgICAgICAgICAgfExFQVZFXyAgICAgfEVOVEVSXyAgICAgICAgICAgICAgICAgICAgICAgICAgIHxMRUFWRV8gICAgIHxFTlRFUl9cbiAqICAgICB8UFJFU1NfUkVDVCAgfFBSRVNTX1JFQ1QgICAgICAgICAgICAgICB8UFJFU1NfUkVDVCB8UFJFU1NfUkVDVCAgICAgICAgICAgICAgICAgICAgICAgfFBSRVNTX1JFQ1QgfFBSRVNTX1JFQ1RcbiAqICAgICB8ICAgICAgICAgICAgfCAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICAgICAgICB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgICAgICAgfFxuICogICAgIHYgICAgICAgICAgICArICAgICAgICAgICAgICAgICAgICAgICAgIHYgICAgICAgICAgICsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2ICAgICAgICAgICArXG4gKiArLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSsgIERFTEFZICArLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0rICAgICAgICAgICAgICAgKy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0rXG4gKiB8UkVTUE9OREVSX0lOQUNUSVZFX1BSRVNTX09VVHwrLS0tLS0tLT58UkVTUE9OREVSX0FDVElWRV9QUkVTU19PVVR8ICAgICAgICAgICAgICAgfFJFU1BPTkRFUl9BQ1RJVkVfTE9OR19QUkVTU19PVVR8XG4gKiArLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSsgICAgICAgICArLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0rICAgICAgICAgICAgICAgKy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0rXG4gKlxuICogVCArIERFTEFZID0+IExPTkdfUFJFU1NfREVMQVlfTVMgKyBERUxBWVxuICpcbiAqIE5vdCBkcmF3biBhcmUgdGhlIHNpZGUgZWZmZWN0cyBvZiBlYWNoIHRyYW5zaXRpb24uIFRoZSBtb3N0IGltcG9ydGFudCBzaWRlXG4gKiBlZmZlY3QgaXMgdGhlIGB0b3VjaGFibGVIYW5kbGVQcmVzc2AgYWJzdHJhY3QgbWV0aG9kIGludm9jYXRpb24gdGhhdCBvY2N1cnNcbiAqIHdoZW4gYSByZXNwb25kZXIgaXMgcmVsZWFzZWQgd2hpbGUgaW4gZWl0aGVyIG9mIHRoZSBcIlByZXNzXCIgc3RhdGVzLlxuICpcbiAqIFRoZSBvdGhlciBpbXBvcnRhbnQgc2lkZSBlZmZlY3RzIGFyZSB0aGUgaGlnaGxpZ2h0IGFic3RyYWN0IG1ldGhvZFxuICogaW52b2NhdGlvbnMgKGludGVybmFsIGNhbGxiYWNrcykgdG8gYmUgaW1wbGVtZW50ZWQgYnkgdGhlIG1peGVyLlxuICpcbiAqXG4gKiBAbGVuZHMgVG91Y2hhYmxlLnByb3RvdHlwZVxuICovXG5jb25zdCBUb3VjaGFibGVNaXhpbiA9IHtcbiAgY29tcG9uZW50RGlkTW91bnQ6IGZ1bmN0aW9uKCkge1xuICAgIGlmICghUGxhdGZvcm0uaXNUVikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgfSxcblxuICAvKipcbiAgICogQ2xlYXIgYWxsIHRpbWVvdXRzIG9uIHVubW91bnRcbiAgICovXG4gIGNvbXBvbmVudFdpbGxVbm1vdW50OiBmdW5jdGlvbigpIHtcbiAgICB0aGlzLnRvdWNoYWJsZURlbGF5VGltZW91dCAmJiBjbGVhclRpbWVvdXQodGhpcy50b3VjaGFibGVEZWxheVRpbWVvdXQpO1xuICAgIHRoaXMubG9uZ1ByZXNzRGVsYXlUaW1lb3V0ICYmIGNsZWFyVGltZW91dCh0aGlzLmxvbmdQcmVzc0RlbGF5VGltZW91dCk7XG4gICAgdGhpcy5wcmVzc091dERlbGF5VGltZW91dCAmJiBjbGVhclRpbWVvdXQodGhpcy5wcmVzc091dERlbGF5VGltZW91dCk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEl0J3MgcHJlZmVyIHRoYXQgbWl4aW5zIGRldGVybWluZSBzdGF0ZSBpbiB0aGlzIHdheSwgaGF2aW5nIHRoZSBjbGFzc1xuICAgKiBleHBsaWNpdGx5IG1peCB0aGUgc3RhdGUgaW4gdGhlIG9uZSBhbmQgb25seSBgZ2V0SW5pdGlhbFN0YXRlYCBtZXRob2QuXG4gICAqXG4gICAqIEByZXR1cm4ge29iamVjdH0gU3RhdGUgb2JqZWN0IHRvIGJlIHBsYWNlZCBpbnNpZGUgb2ZcbiAgICogYHRoaXMuc3RhdGUudG91Y2hhYmxlYC5cbiAgICovXG4gIHRvdWNoYWJsZUdldEluaXRpYWxTdGF0ZTogZnVuY3Rpb24oKTogJFRFTVBPUkFSWSRvYmplY3Q8e3xcbiAgICB0b3VjaGFibGU6ICRURU1QT1JBUlkkb2JqZWN0PHt8cmVzcG9uZGVySUQ6IG51bGwsIHRvdWNoU3RhdGU6IHZvaWR8fT4sXG4gIHx9PiB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHRvdWNoYWJsZToge3RvdWNoU3RhdGU6IHVuZGVmaW5lZCwgcmVzcG9uZGVySUQ6IG51bGx9LFxuICAgIH07XG4gIH0sXG5cbiAgLy8gPT09PSBIb29rcyB0byBHZXN0dXJlIFJlc3BvbmRlciBzeXN0ZW0gPT09PVxuICAvKipcbiAgICogTXVzdCByZXR1cm4gdHJ1ZSBpZiBlbWJlZGRlZCBpbiBhIG5hdGl2ZSBwbGF0Zm9ybSBzY3JvbGwgdmlldy5cbiAgICovXG4gIHRvdWNoYWJsZUhhbmRsZVJlc3BvbmRlclRlcm1pbmF0aW9uUmVxdWVzdDogZnVuY3Rpb24oKTogYW55IHtcbiAgICByZXR1cm4gIXRoaXMucHJvcHMucmVqZWN0UmVzcG9uZGVyVGVybWluYXRpb247XG4gIH0sXG5cbiAgLyoqXG4gICAqIE11c3QgcmV0dXJuIHRydWUgdG8gc3RhcnQgdGhlIHByb2Nlc3Mgb2YgYFRvdWNoYWJsZWAuXG4gICAqL1xuICB0b3VjaGFibGVIYW5kbGVTdGFydFNob3VsZFNldFJlc3BvbmRlcjogZnVuY3Rpb24oKTogYW55IHtcbiAgICByZXR1cm4gIXRoaXMucHJvcHMuZGlzYWJsZWQ7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFJldHVybiB0cnVlIHRvIGNhbmNlbCBwcmVzcyBvbiBsb25nIHByZXNzLlxuICAgKi9cbiAgdG91Y2hhYmxlTG9uZ1ByZXNzQ2FuY2Vsc1ByZXNzOiBmdW5jdGlvbigpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSxcblxuICAvKipcbiAgICogUGxhY2UgYXMgY2FsbGJhY2sgZm9yIGEgRE9NIGVsZW1lbnQncyBgb25SZXNwb25kZXJHcmFudGAgZXZlbnQuXG4gICAqIEBwYXJhbSB7U3ludGhldGljRXZlbnR9IGUgU3ludGhldGljIGV2ZW50IGZyb20gZXZlbnQgc3lzdGVtLlxuICAgKlxuICAgKi9cbiAgLy8gJEZsb3dGaXhNZVtzaWduYXR1cmUtdmVyaWZpY2F0aW9uLWZhaWx1cmVdXG4gIHRvdWNoYWJsZUhhbmRsZVJlc3BvbmRlckdyYW50OiBmdW5jdGlvbihlOiBQcmVzc0V2ZW50KSB7XG4gICAgY29uc3QgZGlzcGF0Y2hJRCA9IGUuY3VycmVudFRhcmdldDtcbiAgICAvLyBTaW5jZSBlIGlzIHVzZWQgaW4gYSBjYWxsYmFjayBpbnZva2VkIG9uIGFub3RoZXIgZXZlbnQgbG9vcFxuICAgIC8vIChhcyBpbiBzZXRUaW1lb3V0IGV0YyksIHdlIG5lZWQgdG8gY2FsbCBlLnBlcnNpc3QoKSBvbiB0aGVcbiAgICAvLyBldmVudCB0byBtYWtlIHN1cmUgaXQgZG9lc24ndCBnZXQgcmV1c2VkIGluIHRoZSBldmVudCBvYmplY3QgcG9vbC5cbiAgICBlLnBlcnNpc3QoKTtcblxuICAgIHRoaXMucHJlc3NPdXREZWxheVRpbWVvdXQgJiYgY2xlYXJUaW1lb3V0KHRoaXMucHJlc3NPdXREZWxheVRpbWVvdXQpO1xuICAgIHRoaXMucHJlc3NPdXREZWxheVRpbWVvdXQgPSBudWxsO1xuXG4gICAgdGhpcy5zdGF0ZS50b3VjaGFibGUudG91Y2hTdGF0ZSA9IFN0YXRlcy5OT1RfUkVTUE9OREVSO1xuICAgIHRoaXMuc3RhdGUudG91Y2hhYmxlLnJlc3BvbmRlcklEID0gZGlzcGF0Y2hJRDtcbiAgICB0aGlzLl9yZWNlaXZlU2lnbmFsKFNpZ25hbHMuUkVTUE9OREVSX0dSQU5ULCBlKTtcbiAgICBsZXQgZGVsYXlNUyA9XG4gICAgICB0aGlzLnRvdWNoYWJsZUdldEhpZ2hsaWdodERlbGF5TVMgIT09IHVuZGVmaW5lZFxuICAgICAgICA/IE1hdGgubWF4KHRoaXMudG91Y2hhYmxlR2V0SGlnaGxpZ2h0RGVsYXlNUygpLCAwKVxuICAgICAgICA6IEhJR0hMSUdIVF9ERUxBWV9NUztcbiAgICBkZWxheU1TID0gaXNOYU4oZGVsYXlNUykgPyBISUdITElHSFRfREVMQVlfTVMgOiBkZWxheU1TO1xuICAgIGlmIChkZWxheU1TICE9PSAwKSB7XG4gICAgICB0aGlzLnRvdWNoYWJsZURlbGF5VGltZW91dCA9IHNldFRpbWVvdXQoXG4gICAgICAgIHRoaXMuX2hhbmRsZURlbGF5LmJpbmQodGhpcywgZSksXG4gICAgICAgIGRlbGF5TVMsXG4gICAgICApO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9oYW5kbGVEZWxheShlKTtcbiAgICB9XG5cbiAgICBsZXQgbG9uZ0RlbGF5TVMgPVxuICAgICAgdGhpcy50b3VjaGFibGVHZXRMb25nUHJlc3NEZWxheU1TICE9PSB1bmRlZmluZWRcbiAgICAgICAgPyBNYXRoLm1heCh0aGlzLnRvdWNoYWJsZUdldExvbmdQcmVzc0RlbGF5TVMoKSwgMTApXG4gICAgICAgIDogTE9OR19QUkVTU19ERUxBWV9NUztcbiAgICBsb25nRGVsYXlNUyA9IGlzTmFOKGxvbmdEZWxheU1TKSA/IExPTkdfUFJFU1NfREVMQVlfTVMgOiBsb25nRGVsYXlNUztcbiAgICB0aGlzLmxvbmdQcmVzc0RlbGF5VGltZW91dCA9IHNldFRpbWVvdXQoXG4gICAgICB0aGlzLl9oYW5kbGVMb25nRGVsYXkuYmluZCh0aGlzLCBlKSxcbiAgICAgIGxvbmdEZWxheU1TICsgZGVsYXlNUyxcbiAgICApO1xuICB9LFxuXG4gIC8qKlxuICAgKiBQbGFjZSBhcyBjYWxsYmFjayBmb3IgYSBET00gZWxlbWVudCdzIGBvblJlc3BvbmRlclJlbGVhc2VgIGV2ZW50LlxuICAgKi9cbiAgLy8gJEZsb3dGaXhNZVtzaWduYXR1cmUtdmVyaWZpY2F0aW9uLWZhaWx1cmVdXG4gIHRvdWNoYWJsZUhhbmRsZVJlc3BvbmRlclJlbGVhc2U6IGZ1bmN0aW9uKGU6IFByZXNzRXZlbnQpIHtcbiAgICB0aGlzLnByZXNzSW5Mb2NhdGlvbiA9IG51bGw7XG4gICAgdGhpcy5fcmVjZWl2ZVNpZ25hbChTaWduYWxzLlJFU1BPTkRFUl9SRUxFQVNFLCBlKTtcbiAgfSxcblxuICAvKipcbiAgICogUGxhY2UgYXMgY2FsbGJhY2sgZm9yIGEgRE9NIGVsZW1lbnQncyBgb25SZXNwb25kZXJUZXJtaW5hdGVgIGV2ZW50LlxuICAgKi9cbiAgLy8gJEZsb3dGaXhNZVtzaWduYXR1cmUtdmVyaWZpY2F0aW9uLWZhaWx1cmVdXG4gIHRvdWNoYWJsZUhhbmRsZVJlc3BvbmRlclRlcm1pbmF0ZTogZnVuY3Rpb24oZTogUHJlc3NFdmVudCkge1xuICAgIHRoaXMucHJlc3NJbkxvY2F0aW9uID0gbnVsbDtcbiAgICB0aGlzLl9yZWNlaXZlU2lnbmFsKFNpZ25hbHMuUkVTUE9OREVSX1RFUk1JTkFURUQsIGUpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBQbGFjZSBhcyBjYWxsYmFjayBmb3IgYSBET00gZWxlbWVudCdzIGBvblJlc3BvbmRlck1vdmVgIGV2ZW50LlxuICAgKi9cbiAgLy8gJEZsb3dGaXhNZVtzaWduYXR1cmUtdmVyaWZpY2F0aW9uLWZhaWx1cmVdXG4gIHRvdWNoYWJsZUhhbmRsZVJlc3BvbmRlck1vdmU6IGZ1bmN0aW9uKGU6IFByZXNzRXZlbnQpIHtcbiAgICAvLyBNZWFzdXJlbWVudCBtYXkgbm90IGhhdmUgcmV0dXJuZWQgeWV0LlxuICAgIGlmICghdGhpcy5zdGF0ZS50b3VjaGFibGUucG9zaXRpb25PbkFjdGl2YXRlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgcG9zaXRpb25PbkFjdGl2YXRlID0gdGhpcy5zdGF0ZS50b3VjaGFibGUucG9zaXRpb25PbkFjdGl2YXRlO1xuICAgIGNvbnN0IGRpbWVuc2lvbnNPbkFjdGl2YXRlID0gdGhpcy5zdGF0ZS50b3VjaGFibGUuZGltZW5zaW9uc09uQWN0aXZhdGU7XG4gICAgY29uc3QgcHJlc3NSZWN0T2Zmc2V0ID0gdGhpcy50b3VjaGFibGVHZXRQcmVzc1JlY3RPZmZzZXRcbiAgICAgID8gdGhpcy50b3VjaGFibGVHZXRQcmVzc1JlY3RPZmZzZXQoKVxuICAgICAgOiB7XG4gICAgICAgICAgbGVmdDogUFJFU1NfRVhQQU5EX1BYLFxuICAgICAgICAgIHJpZ2h0OiBQUkVTU19FWFBBTkRfUFgsXG4gICAgICAgICAgdG9wOiBQUkVTU19FWFBBTkRfUFgsXG4gICAgICAgICAgYm90dG9tOiBQUkVTU19FWFBBTkRfUFgsXG4gICAgICAgIH07XG5cbiAgICBsZXQgcHJlc3NFeHBhbmRMZWZ0ID0gcHJlc3NSZWN0T2Zmc2V0LmxlZnQ7XG4gICAgbGV0IHByZXNzRXhwYW5kVG9wID0gcHJlc3NSZWN0T2Zmc2V0LnRvcDtcbiAgICBsZXQgcHJlc3NFeHBhbmRSaWdodCA9IHByZXNzUmVjdE9mZnNldC5yaWdodDtcbiAgICBsZXQgcHJlc3NFeHBhbmRCb3R0b20gPSBwcmVzc1JlY3RPZmZzZXQuYm90dG9tO1xuXG4gICAgY29uc3QgaGl0U2xvcCA9IHRoaXMudG91Y2hhYmxlR2V0SGl0U2xvcFxuICAgICAgPyB0aGlzLnRvdWNoYWJsZUdldEhpdFNsb3AoKVxuICAgICAgOiBudWxsO1xuXG4gICAgaWYgKGhpdFNsb3ApIHtcbiAgICAgIHByZXNzRXhwYW5kTGVmdCArPSBoaXRTbG9wLmxlZnQgfHwgMDtcbiAgICAgIHByZXNzRXhwYW5kVG9wICs9IGhpdFNsb3AudG9wIHx8IDA7XG4gICAgICBwcmVzc0V4cGFuZFJpZ2h0ICs9IGhpdFNsb3AucmlnaHQgfHwgMDtcbiAgICAgIHByZXNzRXhwYW5kQm90dG9tICs9IGhpdFNsb3AuYm90dG9tIHx8IDA7XG4gICAgfVxuXG4gICAgY29uc3QgdG91Y2ggPSBleHRyYWN0U2luZ2xlVG91Y2goZS5uYXRpdmVFdmVudCk7XG4gICAgY29uc3QgcGFnZVggPSB0b3VjaCAmJiB0b3VjaC5wYWdlWDtcbiAgICBjb25zdCBwYWdlWSA9IHRvdWNoICYmIHRvdWNoLnBhZ2VZO1xuXG4gICAgaWYgKHRoaXMucHJlc3NJbkxvY2F0aW9uKSB7XG4gICAgICBjb25zdCBtb3ZlZERpc3RhbmNlID0gdGhpcy5fZ2V0RGlzdGFuY2VCZXR3ZWVuUG9pbnRzKFxuICAgICAgICBwYWdlWCxcbiAgICAgICAgcGFnZVksXG4gICAgICAgIHRoaXMucHJlc3NJbkxvY2F0aW9uLnBhZ2VYLFxuICAgICAgICB0aGlzLnByZXNzSW5Mb2NhdGlvbi5wYWdlWSxcbiAgICAgICk7XG4gICAgICBpZiAobW92ZWREaXN0YW5jZSA+IExPTkdfUFJFU1NfQUxMT1dFRF9NT1ZFTUVOVCkge1xuICAgICAgICB0aGlzLl9jYW5jZWxMb25nUHJlc3NEZWxheVRpbWVvdXQoKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdCBpc1RvdWNoV2l0aGluQWN0aXZlID1cbiAgICAgIHBhZ2VYID4gcG9zaXRpb25PbkFjdGl2YXRlLmxlZnQgLSBwcmVzc0V4cGFuZExlZnQgJiZcbiAgICAgIHBhZ2VZID4gcG9zaXRpb25PbkFjdGl2YXRlLnRvcCAtIHByZXNzRXhwYW5kVG9wICYmXG4gICAgICBwYWdlWCA8XG4gICAgICAgIHBvc2l0aW9uT25BY3RpdmF0ZS5sZWZ0ICtcbiAgICAgICAgICBkaW1lbnNpb25zT25BY3RpdmF0ZS53aWR0aCArXG4gICAgICAgICAgcHJlc3NFeHBhbmRSaWdodCAmJlxuICAgICAgcGFnZVkgPFxuICAgICAgICBwb3NpdGlvbk9uQWN0aXZhdGUudG9wICtcbiAgICAgICAgICBkaW1lbnNpb25zT25BY3RpdmF0ZS5oZWlnaHQgK1xuICAgICAgICAgIHByZXNzRXhwYW5kQm90dG9tO1xuICAgIGlmIChpc1RvdWNoV2l0aGluQWN0aXZlKSB7XG4gICAgICBjb25zdCBwcmV2U3RhdGUgPSB0aGlzLnN0YXRlLnRvdWNoYWJsZS50b3VjaFN0YXRlO1xuICAgICAgdGhpcy5fcmVjZWl2ZVNpZ25hbChTaWduYWxzLkVOVEVSX1BSRVNTX1JFQ1QsIGUpO1xuICAgICAgY29uc3QgY3VyU3RhdGUgPSB0aGlzLnN0YXRlLnRvdWNoYWJsZS50b3VjaFN0YXRlO1xuICAgICAgaWYgKFxuICAgICAgICBjdXJTdGF0ZSA9PT0gU3RhdGVzLlJFU1BPTkRFUl9JTkFDVElWRV9QUkVTU19JTiAmJlxuICAgICAgICBwcmV2U3RhdGUgIT09IFN0YXRlcy5SRVNQT05ERVJfSU5BQ1RJVkVfUFJFU1NfSU5cbiAgICAgICkge1xuICAgICAgICAvLyBmaXggZm9yIHQ3OTY3NDIwXG4gICAgICAgIHRoaXMuX2NhbmNlbExvbmdQcmVzc0RlbGF5VGltZW91dCgpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9jYW5jZWxMb25nUHJlc3NEZWxheVRpbWVvdXQoKTtcbiAgICAgIHRoaXMuX3JlY2VpdmVTaWduYWwoU2lnbmFscy5MRUFWRV9QUkVTU19SRUNULCBlKTtcbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIEludm9rZWQgd2hlbiB0aGUgaXRlbSByZWNlaXZlcyBmb2N1cy4gTWl4ZXJzIG1pZ2h0IG92ZXJyaWRlIHRoaXMgdG9cbiAgICogdmlzdWFsbHkgZGlzdGluZ3Vpc2ggdGhlIGBWaXN1YWxSZWN0YCBzbyB0aGF0IHRoZSB1c2VyIGtub3dzIHRoYXQgaXRcbiAgICogY3VycmVudGx5IGhhcyB0aGUgZm9jdXMuIE1vc3QgcGxhdGZvcm1zIG9ubHkgc3VwcG9ydCBhIHNpbmdsZSBlbGVtZW50IGJlaW5nXG4gICAqIGZvY3VzZWQgYXQgYSB0aW1lLCBpbiB3aGljaCBjYXNlIHRoZXJlIG1heSBoYXZlIGJlZW4gYSBwcmV2aW91c2x5IGZvY3VzZWRcbiAgICogZWxlbWVudCB0aGF0IHdhcyBibHVycmVkIGp1c3QgcHJpb3IgdG8gdGhpcy4gVGhpcyBjYW4gYmUgb3ZlcnJpZGRlbiB3aGVuXG4gICAqIHVzaW5nIGBUb3VjaGFibGUuTWl4aW4ud2l0aG91dERlZmF1bHRGb2N1c0FuZEJsdXJgLlxuICAgKi9cbiAgLy8gJEZsb3dGaXhNZVtzaWduYXR1cmUtdmVyaWZpY2F0aW9uLWZhaWx1cmVdXG4gIHRvdWNoYWJsZUhhbmRsZUZvY3VzOiBmdW5jdGlvbihlOiBFdmVudCkge1xuICAgIHRoaXMucHJvcHMub25Gb2N1cyAmJiB0aGlzLnByb3BzLm9uRm9jdXMoZSk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEludm9rZWQgd2hlbiB0aGUgaXRlbSBsb3NlcyBmb2N1cy4gTWl4ZXJzIG1pZ2h0IG92ZXJyaWRlIHRoaXMgdG9cbiAgICogdmlzdWFsbHkgZGlzdGluZ3Vpc2ggdGhlIGBWaXN1YWxSZWN0YCBzbyB0aGF0IHRoZSB1c2VyIGtub3dzIHRoYXQgaXRcbiAgICogbm8gbG9uZ2VyIGhhcyBmb2N1cy4gTW9zdCBwbGF0Zm9ybXMgb25seSBzdXBwb3J0IGEgc2luZ2xlIGVsZW1lbnQgYmVpbmdcbiAgICogZm9jdXNlZCBhdCBhIHRpbWUsIGluIHdoaWNoIGNhc2UgdGhlIGZvY3VzIG1heSBoYXZlIG1vdmVkIHRvIGFub3RoZXIuXG4gICAqIFRoaXMgY2FuIGJlIG92ZXJyaWRkZW4gd2hlbiB1c2luZ1xuICAgKiBgVG91Y2hhYmxlLk1peGluLndpdGhvdXREZWZhdWx0Rm9jdXNBbmRCbHVyYC5cbiAgICovXG4gIC8vICRGbG93Rml4TWVbc2lnbmF0dXJlLXZlcmlmaWNhdGlvbi1mYWlsdXJlXVxuICB0b3VjaGFibGVIYW5kbGVCbHVyOiBmdW5jdGlvbihlOiBFdmVudCkge1xuICAgIHRoaXMucHJvcHMub25CbHVyICYmIHRoaXMucHJvcHMub25CbHVyKGUpO1xuICB9LFxuXG4gIC8vID09PT0gQWJzdHJhY3QgQXBwbGljYXRpb24gQ2FsbGJhY2tzID09PT1cblxuICAvKipcbiAgICogSW52b2tlZCB3aGVuIHRoZSBpdGVtIHNob3VsZCBiZSBoaWdobGlnaHRlZC4gTWl4ZXJzIHNob3VsZCBpbXBsZW1lbnQgdGhpc1xuICAgKiB0byB2aXN1YWxseSBkaXN0aW5ndWlzaCB0aGUgYFZpc3VhbFJlY3RgIHNvIHRoYXQgdGhlIHVzZXIga25vd3MgdGhhdFxuICAgKiByZWxlYXNpbmcgYSB0b3VjaCB3aWxsIHJlc3VsdCBpbiBhIFwic2VsZWN0aW9uXCIgKGFuYWxvZyB0byBjbGljaykuXG4gICAqXG4gICAqIEBhYnN0cmFjdFxuICAgKiB0b3VjaGFibGVIYW5kbGVBY3RpdmVQcmVzc0luOiBmdW5jdGlvbixcbiAgICovXG5cbiAgLyoqXG4gICAqIEludm9rZWQgd2hlbiB0aGUgaXRlbSBpcyBcImFjdGl2ZVwiIChpbiB0aGF0IGl0IGlzIHN0aWxsIGVsaWdpYmxlIHRvIGJlY29tZVxuICAgKiBhIFwic2VsZWN0XCIpIGJ1dCB0aGUgdG91Y2ggaGFzIGxlZnQgdGhlIGBQcmVzc1JlY3RgLiBVc3VhbGx5IHRoZSBtaXhlciB3aWxsXG4gICAqIHdhbnQgdG8gdW5oaWdobGlnaHQgdGhlIGBWaXN1YWxSZWN0YC4gSWYgdGhlIHVzZXIgKHdoaWxlIHByZXNzaW5nKSBtb3Zlc1xuICAgKiBiYWNrIGludG8gdGhlIGBQcmVzc1JlY3RgIGB0b3VjaGFibGVIYW5kbGVBY3RpdmVQcmVzc0luYCB3aWxsIGJlIGludm9rZWRcbiAgICogYWdhaW4gYW5kIHRoZSBtaXhlciBzaG91bGQgcHJvYmFibHkgaGlnaGxpZ2h0IHRoZSBgVmlzdWFsUmVjdGAgYWdhaW4uIFRoaXNcbiAgICogZXZlbnQgd2lsbCBub3QgZmlyZSBvbiBhbiBgdG91Y2hFbmQvbW91c2VVcGAgZXZlbnQsIG9ubHkgbW92ZSBldmVudHMgd2hpbGVcbiAgICogdGhlIHVzZXIgaXMgZGVwcmVzc2luZyB0aGUgbW91c2UvdG91Y2guXG4gICAqXG4gICAqIEBhYnN0cmFjdFxuICAgKiB0b3VjaGFibGVIYW5kbGVBY3RpdmVQcmVzc091dDogZnVuY3Rpb25cbiAgICovXG5cbiAgLyoqXG4gICAqIEludm9rZWQgd2hlbiB0aGUgaXRlbSBpcyBcInNlbGVjdGVkXCIgLSBtZWFuaW5nIHRoZSBpbnRlcmFjdGlvbiBlbmRlZCBieVxuICAgKiBsZXR0aW5nIHVwIHdoaWxlIHRoZSBpdGVtIHdhcyBlaXRoZXIgaW4gdGhlIHN0YXRlXG4gICAqIGBSRVNQT05ERVJfQUNUSVZFX1BSRVNTX0lOYCBvciBgUkVTUE9OREVSX0lOQUNUSVZFX1BSRVNTX0lOYC5cbiAgICpcbiAgICogQGFic3RyYWN0XG4gICAqIHRvdWNoYWJsZUhhbmRsZVByZXNzOiBmdW5jdGlvblxuICAgKi9cblxuICAvKipcbiAgICogSW52b2tlZCB3aGVuIHRoZSBpdGVtIGlzIGxvbmcgcHJlc3NlZCAtIG1lYW5pbmcgdGhlIGludGVyYWN0aW9uIGVuZGVkIGJ5XG4gICAqIGxldHRpbmcgdXAgd2hpbGUgdGhlIGl0ZW0gd2FzIGluIGBSRVNQT05ERVJfQUNUSVZFX0xPTkdfUFJFU1NfSU5gLiBJZlxuICAgKiBgdG91Y2hhYmxlSGFuZGxlTG9uZ1ByZXNzYCBpcyAqbm90KiBwcm92aWRlZCwgYHRvdWNoYWJsZUhhbmRsZVByZXNzYCB3aWxsXG4gICAqIGJlIGNhbGxlZCBhcyBpdCBub3JtYWxseSBpcy4gSWYgYHRvdWNoYWJsZUhhbmRsZUxvbmdQcmVzc2AgaXMgcHJvdmlkZWQsIGJ5XG4gICAqIGRlZmF1bHQgYW55IGB0b3VjaGFibGVIYW5kbGVQcmVzc2AgY2FsbGJhY2sgd2lsbCBub3QgYmUgaW52b2tlZC4gVG9cbiAgICogb3ZlcnJpZGUgdGhpcyBkZWZhdWx0IGJlaGF2aW9yLCBvdmVycmlkZSBgdG91Y2hhYmxlTG9uZ1ByZXNzQ2FuY2Vsc1ByZXNzYFxuICAgKiB0byByZXR1cm4gZmFsc2UuIEFzIGEgcmVzdWx0LCBgdG91Y2hhYmxlSGFuZGxlUHJlc3NgIHdpbGwgYmUgY2FsbGVkIHdoZW5cbiAgICogbGlmdGluZyB1cCwgZXZlbiBpZiBgdG91Y2hhYmxlSGFuZGxlTG9uZ1ByZXNzYCBoYXMgYWxzbyBiZWVuIGNhbGxlZC5cbiAgICpcbiAgICogQGFic3RyYWN0XG4gICAqIHRvdWNoYWJsZUhhbmRsZUxvbmdQcmVzczogZnVuY3Rpb25cbiAgICovXG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIG51bWJlciBvZiBtaWxsaXMgdG8gd2FpdCBiZWZvcmUgdHJpZ2dlcmluZyBhIGhpZ2hsaWdodC5cbiAgICpcbiAgICogQGFic3RyYWN0XG4gICAqIHRvdWNoYWJsZUdldEhpZ2hsaWdodERlbGF5TVM6IGZ1bmN0aW9uXG4gICAqL1xuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBhbW91bnQgdG8gZXh0ZW5kIHRoZSBgSGl0UmVjdGAgaW50byB0aGUgYFByZXNzUmVjdGAuIFBvc2l0aXZlXG4gICAqIG51bWJlcnMgbWVhbiB0aGUgc2l6ZSBleHBhbmRzIG91dHdhcmRzLlxuICAgKlxuICAgKiBAYWJzdHJhY3RcbiAgICogdG91Y2hhYmxlR2V0UHJlc3NSZWN0T2Zmc2V0OiBmdW5jdGlvblxuICAgKi9cblxuICAvLyA9PT09IEludGVybmFsIExvZ2ljID09PT1cblxuICAvKipcbiAgICogTWVhc3VyZXMgdGhlIGBIaXRSZWN0YCBub2RlIG9uIGFjdGl2YXRpb24uIFRoZSBCb3VuZGluZyByZWN0YW5nbGUgaXMgd2l0aFxuICAgKiByZXNwZWN0IHRvIHZpZXdwb3J0IC0gbm90IHBhZ2UsIHNvIGFkZGluZyB0aGUgYHBhZ2VYT2Zmc2V0L3BhZ2VZT2Zmc2V0YFxuICAgKiBzaG91bGQgcmVzdWx0IGluIHBvaW50cyB0aGF0IGFyZSBpbiB0aGUgc2FtZSBjb29yZGluYXRlIHN5c3RlbSBhcyBhblxuICAgKiBldmVudCdzIGBnbG9iYWxYL2dsb2JhbFlgIGRhdGEgdmFsdWVzLlxuICAgKlxuICAgKiAtIENvbnNpZGVyIGNhY2hpbmcgdGhpcyBmb3IgdGhlIGxpZmV0aW1lIG9mIHRoZSBjb21wb25lbnQsIG9yIHBvc3NpYmx5XG4gICAqICAgYmVpbmcgYWJsZSB0byBzaGFyZSB0aGlzIGNhY2hlIGJldHdlZW4gYW55IGBTY3JvbGxNYXBgIHZpZXcuXG4gICAqXG4gICAqIEBzaWRlZWZmZWN0c1xuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX3JlbWVhc3VyZU1ldHJpY3NPbkFjdGl2YXRpb246IGZ1bmN0aW9uKCkge1xuICAgIGNvbnN0IHJlc3BvbmRlcklEID0gdGhpcy5zdGF0ZS50b3VjaGFibGUucmVzcG9uZGVySUQ7XG4gICAgaWYgKHJlc3BvbmRlcklEID09IG51bGwpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIHJlc3BvbmRlcklEID09PSAnbnVtYmVyJykge1xuICAgICAgVUlNYW5hZ2VyLm1lYXN1cmUocmVzcG9uZGVySUQsIHRoaXMuX2hhbmRsZVF1ZXJ5TGF5b3V0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzcG9uZGVySUQubWVhc3VyZSh0aGlzLl9oYW5kbGVRdWVyeUxheW91dCk7XG4gICAgfVxuICB9LFxuXG4gIC8vICRGbG93Rml4TWVbc2lnbmF0dXJlLXZlcmlmaWNhdGlvbi1mYWlsdXJlXVxuICBfaGFuZGxlUXVlcnlMYXlvdXQ6IGZ1bmN0aW9uKFxuICAgIGw6IG51bWJlcixcbiAgICB0OiBudW1iZXIsXG4gICAgdzogbnVtYmVyLFxuICAgIGg6IG51bWJlcixcbiAgICBnbG9iYWxYOiBudW1iZXIsXG4gICAgZ2xvYmFsWTogbnVtYmVyLFxuICApIHtcbiAgICAvL2Rvbid0IGRvIGFueXRoaW5nIFVJTWFuYWdlciBmYWlsZWQgdG8gbWVhc3VyZSBub2RlXG4gICAgaWYgKCFsICYmICF0ICYmICF3ICYmICFoICYmICFnbG9iYWxYICYmICFnbG9iYWxZKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMuc3RhdGUudG91Y2hhYmxlLnBvc2l0aW9uT25BY3RpdmF0ZSAmJlxuICAgICAgUG9zaXRpb24ucmVsZWFzZSh0aGlzLnN0YXRlLnRvdWNoYWJsZS5wb3NpdGlvbk9uQWN0aXZhdGUpO1xuICAgIHRoaXMuc3RhdGUudG91Y2hhYmxlLmRpbWVuc2lvbnNPbkFjdGl2YXRlICYmXG4gICAgICBCb3VuZGluZ0RpbWVuc2lvbnMucmVsZWFzZSh0aGlzLnN0YXRlLnRvdWNoYWJsZS5kaW1lbnNpb25zT25BY3RpdmF0ZSk7XG4gICAgdGhpcy5zdGF0ZS50b3VjaGFibGUucG9zaXRpb25PbkFjdGl2YXRlID0gUG9zaXRpb24uZ2V0UG9vbGVkKFxuICAgICAgZ2xvYmFsWCxcbiAgICAgIGdsb2JhbFksXG4gICAgKTtcbiAgICB0aGlzLnN0YXRlLnRvdWNoYWJsZS5kaW1lbnNpb25zT25BY3RpdmF0ZSA9IEJvdW5kaW5nRGltZW5zaW9ucy5nZXRQb29sZWQoXG4gICAgICB3LFxuICAgICAgaCxcbiAgICApO1xuICB9LFxuXG4gIC8vICRGbG93Rml4TWVbc2lnbmF0dXJlLXZlcmlmaWNhdGlvbi1mYWlsdXJlXVxuICBfaGFuZGxlRGVsYXk6IGZ1bmN0aW9uKGU6IFByZXNzRXZlbnQpIHtcbiAgICB0aGlzLnRvdWNoYWJsZURlbGF5VGltZW91dCA9IG51bGw7XG4gICAgdGhpcy5fcmVjZWl2ZVNpZ25hbChTaWduYWxzLkRFTEFZLCBlKTtcbiAgfSxcblxuICAvLyAkRmxvd0ZpeE1lW3NpZ25hdHVyZS12ZXJpZmljYXRpb24tZmFpbHVyZV1cbiAgX2hhbmRsZUxvbmdEZWxheTogZnVuY3Rpb24oZTogUHJlc3NFdmVudCkge1xuICAgIHRoaXMubG9uZ1ByZXNzRGVsYXlUaW1lb3V0ID0gbnVsbDtcbiAgICBjb25zdCBjdXJTdGF0ZSA9IHRoaXMuc3RhdGUudG91Y2hhYmxlLnRvdWNoU3RhdGU7XG4gICAgaWYgKFxuICAgICAgY3VyU3RhdGUgPT09IFN0YXRlcy5SRVNQT05ERVJfQUNUSVZFX1BSRVNTX0lOIHx8XG4gICAgICBjdXJTdGF0ZSA9PT0gU3RhdGVzLlJFU1BPTkRFUl9BQ1RJVkVfTE9OR19QUkVTU19JTlxuICAgICkge1xuICAgICAgdGhpcy5fcmVjZWl2ZVNpZ25hbChTaWduYWxzLkxPTkdfUFJFU1NfREVURUNURUQsIGUpO1xuICAgIH1cbiAgfSxcblxuICAvKipcbiAgICogUmVjZWl2ZXMgYSBzdGF0ZSBtYWNoaW5lIHNpZ25hbCwgcGVyZm9ybXMgc2lkZSBlZmZlY3RzIG9mIHRoZSB0cmFuc2l0aW9uXG4gICAqIGFuZCBzdG9yZXMgdGhlIG5ldyBzdGF0ZS4gVmFsaWRhdGVzIHRoZSB0cmFuc2l0aW9uIGFzIHdlbGwuXG4gICAqXG4gICAqIEBwYXJhbSB7U2lnbmFsc30gc2lnbmFsIFN0YXRlIG1hY2hpbmUgc2lnbmFsLlxuICAgKiBAdGhyb3dzIEVycm9yIGlmIGludmFsaWQgc3RhdGUgdHJhbnNpdGlvbiBvciB1bnJlY29nbml6ZWQgc2lnbmFsLlxuICAgKiBAc2lkZWVmZmVjdHNcbiAgICovXG4gIC8vICRGbG93Rml4TWVbc2lnbmF0dXJlLXZlcmlmaWNhdGlvbi1mYWlsdXJlXVxuICBfcmVjZWl2ZVNpZ25hbDogZnVuY3Rpb24oc2lnbmFsOiBTaWduYWwsIGU6IFByZXNzRXZlbnQpIHtcbiAgICBjb25zdCByZXNwb25kZXJJRCA9IHRoaXMuc3RhdGUudG91Y2hhYmxlLnJlc3BvbmRlcklEO1xuICAgIGNvbnN0IGN1clN0YXRlID0gdGhpcy5zdGF0ZS50b3VjaGFibGUudG91Y2hTdGF0ZTtcbiAgICBjb25zdCBuZXh0U3RhdGUgPSBUcmFuc2l0aW9uc1tjdXJTdGF0ZV0gJiYgVHJhbnNpdGlvbnNbY3VyU3RhdGVdW3NpZ25hbF07XG4gICAgaWYgKCFyZXNwb25kZXJJRCAmJiBzaWduYWwgPT09IFNpZ25hbHMuUkVTUE9OREVSX1JFTEVBU0UpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKCFuZXh0U3RhdGUpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgJ1VucmVjb2duaXplZCBzaWduYWwgYCcgK1xuICAgICAgICAgIHNpZ25hbCArXG4gICAgICAgICAgJ2Agb3Igc3RhdGUgYCcgK1xuICAgICAgICAgIGN1clN0YXRlICtcbiAgICAgICAgICAnYCBmb3IgVG91Y2hhYmxlIHJlc3BvbmRlciBgJyArXG4gICAgICAgICAgdHlwZW9mIHRoaXMuc3RhdGUudG91Y2hhYmxlLnJlc3BvbmRlcklEID09PVxuICAgICAgICAnbnVtYmVyJ1xuICAgICAgICAgID8gdGhpcy5zdGF0ZS50b3VjaGFibGUucmVzcG9uZGVySURcbiAgICAgICAgICA6ICdob3N0IGNvbXBvbmVudCcgKyAnYCcsXG4gICAgICApO1xuICAgIH1cbiAgICBpZiAobmV4dFN0YXRlID09PSBTdGF0ZXMuRVJST1IpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgJ1RvdWNoYWJsZSBjYW5ub3QgdHJhbnNpdGlvbiBmcm9tIGAnICtcbiAgICAgICAgICBjdXJTdGF0ZSArXG4gICAgICAgICAgJ2AgdG8gYCcgK1xuICAgICAgICAgIHNpZ25hbCArXG4gICAgICAgICAgJ2AgZm9yIHJlc3BvbmRlciBgJyArXG4gICAgICAgICAgdHlwZW9mIHRoaXMuc3RhdGUudG91Y2hhYmxlLnJlc3BvbmRlcklEID09PVxuICAgICAgICAnbnVtYmVyJ1xuICAgICAgICAgID8gdGhpcy5zdGF0ZS50b3VjaGFibGUucmVzcG9uZGVySURcbiAgICAgICAgICA6ICc8PGhvc3QgY29tcG9uZW50Pj4nICsgJ2AnLFxuICAgICAgKTtcbiAgICB9XG4gICAgaWYgKGN1clN0YXRlICE9PSBuZXh0U3RhdGUpIHtcbiAgICAgIHRoaXMuX3BlcmZvcm1TaWRlRWZmZWN0c0ZvclRyYW5zaXRpb24oY3VyU3RhdGUsIG5leHRTdGF0ZSwgc2lnbmFsLCBlKTtcbiAgICAgIHRoaXMuc3RhdGUudG91Y2hhYmxlLnRvdWNoU3RhdGUgPSBuZXh0U3RhdGU7XG4gICAgfVxuICB9LFxuXG4gIF9jYW5jZWxMb25nUHJlc3NEZWxheVRpbWVvdXQ6IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMubG9uZ1ByZXNzRGVsYXlUaW1lb3V0ICYmIGNsZWFyVGltZW91dCh0aGlzLmxvbmdQcmVzc0RlbGF5VGltZW91dCk7XG4gICAgdGhpcy5sb25nUHJlc3NEZWxheVRpbWVvdXQgPSBudWxsO1xuICB9LFxuXG4gIF9pc0hpZ2hsaWdodDogZnVuY3Rpb24oc3RhdGU6IFN0YXRlKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIChcbiAgICAgIHN0YXRlID09PSBTdGF0ZXMuUkVTUE9OREVSX0FDVElWRV9QUkVTU19JTiB8fFxuICAgICAgc3RhdGUgPT09IFN0YXRlcy5SRVNQT05ERVJfQUNUSVZFX0xPTkdfUFJFU1NfSU5cbiAgICApO1xuICB9LFxuXG4gIC8vICRGbG93Rml4TWVbc2lnbmF0dXJlLXZlcmlmaWNhdGlvbi1mYWlsdXJlXVxuICBfc2F2ZVByZXNzSW5Mb2NhdGlvbjogZnVuY3Rpb24oZTogUHJlc3NFdmVudCkge1xuICAgIGNvbnN0IHRvdWNoID0gZXh0cmFjdFNpbmdsZVRvdWNoKGUubmF0aXZlRXZlbnQpO1xuICAgIGNvbnN0IHBhZ2VYID0gdG91Y2ggJiYgdG91Y2gucGFnZVg7XG4gICAgY29uc3QgcGFnZVkgPSB0b3VjaCAmJiB0b3VjaC5wYWdlWTtcbiAgICBjb25zdCBsb2NhdGlvblggPSB0b3VjaCAmJiB0b3VjaC5sb2NhdGlvblg7XG4gICAgY29uc3QgbG9jYXRpb25ZID0gdG91Y2ggJiYgdG91Y2gubG9jYXRpb25ZO1xuICAgIHRoaXMucHJlc3NJbkxvY2F0aW9uID0ge3BhZ2VYLCBwYWdlWSwgbG9jYXRpb25YLCBsb2NhdGlvbll9O1xuICB9LFxuXG4gIF9nZXREaXN0YW5jZUJldHdlZW5Qb2ludHM6IGZ1bmN0aW9uKFxuICAgIGFYOiBudW1iZXIsXG4gICAgYVk6IG51bWJlcixcbiAgICBiWDogbnVtYmVyLFxuICAgIGJZOiBudW1iZXIsXG4gICk6IG51bWJlciB7XG4gICAgY29uc3QgZGVsdGFYID0gYVggLSBiWDtcbiAgICBjb25zdCBkZWx0YVkgPSBhWSAtIGJZO1xuICAgIHJldHVybiBNYXRoLnNxcnQoZGVsdGFYICogZGVsdGFYICsgZGVsdGFZICogZGVsdGFZKTtcbiAgfSxcblxuICAvKipcbiAgICogV2lsbCBwZXJmb3JtIGEgdHJhbnNpdGlvbiBiZXR3ZWVuIHRvdWNoYWJsZSBzdGF0ZXMsIGFuZCBpZGVudGlmeSBhbnlcbiAgICogaGlnaGxpZ2h0aW5nIG9yIHVuaGlnaGxpZ2h0aW5nIHRoYXQgbXVzdCBiZSBwZXJmb3JtZWQgZm9yIHRoaXMgcGFydGljdWxhclxuICAgKiB0cmFuc2l0aW9uLlxuICAgKlxuICAgKiBAcGFyYW0ge1N0YXRlc30gY3VyU3RhdGUgQ3VycmVudCBUb3VjaGFibGUgc3RhdGUuXG4gICAqIEBwYXJhbSB7U3RhdGVzfSBuZXh0U3RhdGUgTmV4dCBUb3VjaGFibGUgc3RhdGUuXG4gICAqIEBwYXJhbSB7U2lnbmFsfSBzaWduYWwgU2lnbmFsIHRoYXQgdHJpZ2dlcmVkIHRoZSB0cmFuc2l0aW9uLlxuICAgKiBAcGFyYW0ge0V2ZW50fSBlIE5hdGl2ZSBldmVudC5cbiAgICogQHNpZGVlZmZlY3RzXG4gICAqL1xuICAvLyAkRmxvd0ZpeE1lW3NpZ25hdHVyZS12ZXJpZmljYXRpb24tZmFpbHVyZV1cbiAgX3BlcmZvcm1TaWRlRWZmZWN0c0ZvclRyYW5zaXRpb246IGZ1bmN0aW9uKFxuICAgIGN1clN0YXRlOiBTdGF0ZSxcbiAgICBuZXh0U3RhdGU6IFN0YXRlLFxuICAgIHNpZ25hbDogU2lnbmFsLFxuICAgIGU6IFByZXNzRXZlbnQsXG4gICkge1xuICAgIGNvbnN0IGN1cklzSGlnaGxpZ2h0ID0gdGhpcy5faXNIaWdobGlnaHQoY3VyU3RhdGUpO1xuICAgIGNvbnN0IG5ld0lzSGlnaGxpZ2h0ID0gdGhpcy5faXNIaWdobGlnaHQobmV4dFN0YXRlKTtcblxuICAgIGNvbnN0IGlzRmluYWxTaWduYWwgPVxuICAgICAgc2lnbmFsID09PSBTaWduYWxzLlJFU1BPTkRFUl9URVJNSU5BVEVEIHx8XG4gICAgICBzaWduYWwgPT09IFNpZ25hbHMuUkVTUE9OREVSX1JFTEVBU0U7XG5cbiAgICBpZiAoaXNGaW5hbFNpZ25hbCkge1xuICAgICAgdGhpcy5fY2FuY2VsTG9uZ1ByZXNzRGVsYXlUaW1lb3V0KCk7XG4gICAgfVxuXG4gICAgY29uc3QgaXNJbml0aWFsVHJhbnNpdGlvbiA9XG4gICAgICBjdXJTdGF0ZSA9PT0gU3RhdGVzLk5PVF9SRVNQT05ERVIgJiZcbiAgICAgIG5leHRTdGF0ZSA9PT0gU3RhdGVzLlJFU1BPTkRFUl9JTkFDVElWRV9QUkVTU19JTjtcblxuICAgIGNvbnN0IGlzQWN0aXZlVHJhbnNpdGlvbiA9ICFJc0FjdGl2ZVtjdXJTdGF0ZV0gJiYgSXNBY3RpdmVbbmV4dFN0YXRlXTtcbiAgICBpZiAoaXNJbml0aWFsVHJhbnNpdGlvbiB8fCBpc0FjdGl2ZVRyYW5zaXRpb24pIHtcbiAgICAgIHRoaXMuX3JlbWVhc3VyZU1ldHJpY3NPbkFjdGl2YXRpb24oKTtcbiAgICB9XG5cbiAgICBpZiAoSXNQcmVzc2luZ0luW2N1clN0YXRlXSAmJiBzaWduYWwgPT09IFNpZ25hbHMuTE9OR19QUkVTU19ERVRFQ1RFRCkge1xuICAgICAgdGhpcy50b3VjaGFibGVIYW5kbGVMb25nUHJlc3MgJiYgdGhpcy50b3VjaGFibGVIYW5kbGVMb25nUHJlc3MoZSk7XG4gICAgfVxuXG4gICAgaWYgKG5ld0lzSGlnaGxpZ2h0ICYmICFjdXJJc0hpZ2hsaWdodCkge1xuICAgICAgdGhpcy5fc3RhcnRIaWdobGlnaHQoZSk7XG4gICAgfSBlbHNlIGlmICghbmV3SXNIaWdobGlnaHQgJiYgY3VySXNIaWdobGlnaHQpIHtcbiAgICAgIHRoaXMuX2VuZEhpZ2hsaWdodChlKTtcbiAgICB9XG5cbiAgICBpZiAoSXNQcmVzc2luZ0luW2N1clN0YXRlXSAmJiBzaWduYWwgPT09IFNpZ25hbHMuUkVTUE9OREVSX1JFTEVBU0UpIHtcbiAgICAgIGNvbnN0IGhhc0xvbmdQcmVzc0hhbmRsZXIgPSAhIXRoaXMucHJvcHMub25Mb25nUHJlc3M7XG4gICAgICBjb25zdCBwcmVzc0lzTG9uZ0J1dFN0aWxsQ2FsbE9uUHJlc3MgPVxuICAgICAgICBJc0xvbmdQcmVzc2luZ0luW2N1clN0YXRlXSAmJiAvLyBXZSAqYXJlKiBsb25nIHByZXNzaW5nLi4gLy8gQnV0IGVpdGhlciBoYXMgbm8gbG9uZyBoYW5kbGVyXG4gICAgICAgICghaGFzTG9uZ1ByZXNzSGFuZGxlciB8fCAhdGhpcy50b3VjaGFibGVMb25nUHJlc3NDYW5jZWxzUHJlc3MoKSk7IC8vIG9yIHdlJ3JlIHRvbGQgdG8gaWdub3JlIGl0LlxuXG4gICAgICBjb25zdCBzaG91bGRJbnZva2VQcmVzcyA9XG4gICAgICAgICFJc0xvbmdQcmVzc2luZ0luW2N1clN0YXRlXSB8fCBwcmVzc0lzTG9uZ0J1dFN0aWxsQ2FsbE9uUHJlc3M7XG4gICAgICBpZiAoc2hvdWxkSW52b2tlUHJlc3MgJiYgdGhpcy50b3VjaGFibGVIYW5kbGVQcmVzcykge1xuICAgICAgICBpZiAoIW5ld0lzSGlnaGxpZ2h0ICYmICFjdXJJc0hpZ2hsaWdodCkge1xuICAgICAgICAgIC8vIHdlIG5ldmVyIGhpZ2hsaWdodGVkIGJlY2F1c2Ugb2YgZGVsYXksIGJ1dCB3ZSBzaG91bGQgaGlnaGxpZ2h0IG5vd1xuICAgICAgICAgIHRoaXMuX3N0YXJ0SGlnaGxpZ2h0KGUpO1xuICAgICAgICAgIHRoaXMuX2VuZEhpZ2hsaWdodChlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoUGxhdGZvcm0uT1MgPT09ICdhbmRyb2lkJyAmJiAhdGhpcy5wcm9wcy50b3VjaFNvdW5kRGlzYWJsZWQpIHtcbiAgICAgICAgICBTb3VuZE1hbmFnZXIucGxheVRvdWNoU291bmQoKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnRvdWNoYWJsZUhhbmRsZVByZXNzKGUpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMudG91Y2hhYmxlRGVsYXlUaW1lb3V0ICYmIGNsZWFyVGltZW91dCh0aGlzLnRvdWNoYWJsZURlbGF5VGltZW91dCk7XG4gICAgdGhpcy50b3VjaGFibGVEZWxheVRpbWVvdXQgPSBudWxsO1xuICB9LFxuXG4gIC8vICRGbG93Rml4TWVbc2lnbmF0dXJlLXZlcmlmaWNhdGlvbi1mYWlsdXJlXVxuICBfc3RhcnRIaWdobGlnaHQ6IGZ1bmN0aW9uKGU6IFByZXNzRXZlbnQpIHtcbiAgICB0aGlzLl9zYXZlUHJlc3NJbkxvY2F0aW9uKGUpO1xuICAgIHRoaXMudG91Y2hhYmxlSGFuZGxlQWN0aXZlUHJlc3NJbiAmJiB0aGlzLnRvdWNoYWJsZUhhbmRsZUFjdGl2ZVByZXNzSW4oZSk7XG4gIH0sXG5cbiAgLy8gJEZsb3dGaXhNZVtzaWduYXR1cmUtdmVyaWZpY2F0aW9uLWZhaWx1cmVdXG4gIF9lbmRIaWdobGlnaHQ6IGZ1bmN0aW9uKGU6IFByZXNzRXZlbnQpIHtcbiAgICBpZiAodGhpcy50b3VjaGFibGVIYW5kbGVBY3RpdmVQcmVzc091dCkge1xuICAgICAgaWYgKFxuICAgICAgICB0aGlzLnRvdWNoYWJsZUdldFByZXNzT3V0RGVsYXlNUyAmJlxuICAgICAgICB0aGlzLnRvdWNoYWJsZUdldFByZXNzT3V0RGVsYXlNUygpXG4gICAgICApIHtcbiAgICAgICAgdGhpcy5wcmVzc091dERlbGF5VGltZW91dCA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgIHRoaXMudG91Y2hhYmxlSGFuZGxlQWN0aXZlUHJlc3NPdXQoZSk7XG4gICAgICAgIH0sIHRoaXMudG91Y2hhYmxlR2V0UHJlc3NPdXREZWxheU1TKCkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy50b3VjaGFibGVIYW5kbGVBY3RpdmVQcmVzc091dChlKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sXG5cbiAgd2l0aG91dERlZmF1bHRGb2N1c0FuZEJsdXI6ICh7fTogJFRFTVBPUkFSWSRvYmplY3Q8e3x8fT4pLFxufTtcblxuLyoqXG4gKiBQcm92aWRlIGFuIG9wdGlvbmFsIHZlcnNpb24gb2YgdGhlIG1peGluIHdoZXJlIGB0b3VjaGFibGVIYW5kbGVGb2N1c2AgYW5kXG4gKiBgdG91Y2hhYmxlSGFuZGxlQmx1cmAgY2FuIGJlIG92ZXJyaWRkZW4uIFRoaXMgYWxsb3dzIGFwcHJvcHJpYXRlIGRlZmF1bHRzIHRvXG4gKiBiZSBzZXQgb24gVFYgcGxhdGZvcm1zLCB3aXRob3V0IGJyZWFraW5nIGV4aXN0aW5nIGltcGxlbWVudGF0aW9ucyBvZlxuICogYFRvdWNoYWJsZWAuXG4gKi9cbmNvbnN0IHtcbiAgdG91Y2hhYmxlSGFuZGxlRm9jdXMsXG4gIHRvdWNoYWJsZUhhbmRsZUJsdXIsXG4gIC4uLlRvdWNoYWJsZU1peGluV2l0aG91dERlZmF1bHRGb2N1c0FuZEJsdXJcbn0gPSBUb3VjaGFibGVNaXhpbjtcblRvdWNoYWJsZU1peGluLndpdGhvdXREZWZhdWx0Rm9jdXNBbmRCbHVyID0gVG91Y2hhYmxlTWl4aW5XaXRob3V0RGVmYXVsdEZvY3VzQW5kQmx1cjtcblxuY29uc3QgVG91Y2hhYmxlID0ge1xuICBNaXhpbjogVG91Y2hhYmxlTWl4aW4sXG4gIC8qKlxuICAgKiBSZW5kZXJzIGEgZGVidWdnaW5nIG92ZXJsYXkgdG8gdmlzdWFsaXplIHRvdWNoIHRhcmdldCB3aXRoIGhpdFNsb3AgKG1pZ2h0IG5vdCB3b3JrIG9uIEFuZHJvaWQpLlxuICAgKi9cbiAgcmVuZGVyRGVidWdWaWV3OiAoe1xuICAgIGNvbG9yLFxuICAgIGhpdFNsb3AsXG4gIH06IHtcbiAgICBjb2xvcjogQ29sb3JWYWx1ZSxcbiAgICBoaXRTbG9wOiBFZGdlSW5zZXRzUHJvcCxcbiAgICAuLi5cbiAgfSk6IG51bGwgfCBSZWFjdC5Ob2RlID0+IHtcbiAgICBpZiAoX19ERVZfXykge1xuICAgICAgcmV0dXJuIDxQcmVzc2FiaWxpdHlEZWJ1Z1ZpZXcgY29sb3I9e2NvbG9yfSBoaXRTbG9wPXtoaXRTbG9wfSAvPjtcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH0sXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFRvdWNoYWJsZTtcbiJdfQ==