a5b97e5810830d818e58987e0ccee6ad
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.NativeVirtualText = exports.NativeText = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _ReactNativeViewAttributes = _interopRequireDefault(require("../Components/View/ReactNativeViewAttributes"));

var _UIManager = _interopRequireDefault(require("../ReactNative/UIManager"));

var _createReactNativeComponentClass = _interopRequireDefault(require("../Renderer/shims/createReactNativeComponentClass"));

var NativeText = (0, _createReactNativeComponentClass.default)('RCTText', function () {
  return {
    validAttributes: (0, _extends2.default)({}, _ReactNativeViewAttributes.default.UIView, {
      isHighlighted: true,
      numberOfLines: true,
      ellipsizeMode: true,
      allowFontScaling: true,
      maxFontSizeMultiplier: true,
      disabled: true,
      selectable: true,
      selectionColor: true,
      adjustsFontSizeToFit: true,
      minimumFontScale: true,
      textBreakStrategy: true,
      onTextLayout: true,
      onInlineViewLayout: true,
      dataDetectorType: true,
      android_hyphenationFrequency: true
    }),
    directEventTypes: {
      topTextLayout: {
        registrationName: 'onTextLayout'
      },
      topInlineViewLayout: {
        registrationName: 'onInlineViewLayout'
      }
    },
    uiViewClassName: 'RCTText'
  };
});
exports.NativeText = NativeText;
var NativeVirtualText = !global.RN$Bridgeless && !_UIManager.default.hasViewManagerConfig('RCTVirtualText') ? NativeText : (0, _createReactNativeComponentClass.default)('RCTVirtualText', function () {
  return {
    validAttributes: (0, _extends2.default)({}, _ReactNativeViewAttributes.default.UIView, {
      isHighlighted: true,
      maxFontSizeMultiplier: true
    }),
    uiViewClassName: 'RCTVirtualText'
  };
});
exports.NativeVirtualText = NativeVirtualText;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlRleHROYXRpdmVDb21wb25lbnQuanMiXSwibmFtZXMiOlsiTmF0aXZlVGV4dCIsInZhbGlkQXR0cmlidXRlcyIsIlJlYWN0TmF0aXZlVmlld0F0dHJpYnV0ZXMiLCJVSVZpZXciLCJpc0hpZ2hsaWdodGVkIiwibnVtYmVyT2ZMaW5lcyIsImVsbGlwc2l6ZU1vZGUiLCJhbGxvd0ZvbnRTY2FsaW5nIiwibWF4Rm9udFNpemVNdWx0aXBsaWVyIiwiZGlzYWJsZWQiLCJzZWxlY3RhYmxlIiwic2VsZWN0aW9uQ29sb3IiLCJhZGp1c3RzRm9udFNpemVUb0ZpdCIsIm1pbmltdW1Gb250U2NhbGUiLCJ0ZXh0QnJlYWtTdHJhdGVneSIsIm9uVGV4dExheW91dCIsIm9uSW5saW5lVmlld0xheW91dCIsImRhdGFEZXRlY3RvclR5cGUiLCJhbmRyb2lkX2h5cGhlbmF0aW9uRnJlcXVlbmN5IiwiZGlyZWN0RXZlbnRUeXBlcyIsInRvcFRleHRMYXlvdXQiLCJyZWdpc3RyYXRpb25OYW1lIiwidG9wSW5saW5lVmlld0xheW91dCIsInVpVmlld0NsYXNzTmFtZSIsIk5hdGl2ZVZpcnR1YWxUZXh0IiwiZ2xvYmFsIiwiUk4kQnJpZGdlbGVzcyIsIlVJTWFuYWdlciIsImhhc1ZpZXdNYW5hZ2VyQ29uZmlnIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFVQTs7QUFDQTs7QUFFQTs7QUFVTyxJQUFNQSxVQUEwQyxHQUFJLDhDQUN6RCxTQUR5RCxFQUV6RDtBQUFBLFNBQU87QUFFTEMsSUFBQUEsZUFBZSw2QkFDVkMsbUNBQTBCQyxNQURoQjtBQUViQyxNQUFBQSxhQUFhLEVBQUUsSUFGRjtBQUdiQyxNQUFBQSxhQUFhLEVBQUUsSUFIRjtBQUliQyxNQUFBQSxhQUFhLEVBQUUsSUFKRjtBQUtiQyxNQUFBQSxnQkFBZ0IsRUFBRSxJQUxMO0FBTWJDLE1BQUFBLHFCQUFxQixFQUFFLElBTlY7QUFPYkMsTUFBQUEsUUFBUSxFQUFFLElBUEc7QUFRYkMsTUFBQUEsVUFBVSxFQUFFLElBUkM7QUFTYkMsTUFBQUEsY0FBYyxFQUFFLElBVEg7QUFVYkMsTUFBQUEsb0JBQW9CLEVBQUUsSUFWVDtBQVdiQyxNQUFBQSxnQkFBZ0IsRUFBRSxJQVhMO0FBWWJDLE1BQUFBLGlCQUFpQixFQUFFLElBWk47QUFhYkMsTUFBQUEsWUFBWSxFQUFFLElBYkQ7QUFjYkMsTUFBQUEsa0JBQWtCLEVBQUUsSUFkUDtBQWViQyxNQUFBQSxnQkFBZ0IsRUFBRSxJQWZMO0FBZ0JiQyxNQUFBQSw0QkFBNEIsRUFBRTtBQWhCakIsTUFGVjtBQW9CTEMsSUFBQUEsZ0JBQWdCLEVBQUU7QUFDaEJDLE1BQUFBLGFBQWEsRUFBRTtBQUNiQyxRQUFBQSxnQkFBZ0IsRUFBRTtBQURMLE9BREM7QUFJaEJDLE1BQUFBLG1CQUFtQixFQUFFO0FBQ25CRCxRQUFBQSxnQkFBZ0IsRUFBRTtBQURDO0FBSkwsS0FwQmI7QUE0QkxFLElBQUFBLGVBQWUsRUFBRTtBQTVCWixHQUFQO0FBQUEsQ0FGeUQsQ0FBcEQ7O0FBa0NBLElBQU1DLGlCQUFpRCxHQUM1RCxDQUFDQyxNQUFNLENBQUNDLGFBQVIsSUFBeUIsQ0FBQ0MsbUJBQVVDLG9CQUFWLENBQStCLGdCQUEvQixDQUExQixHQUNJNUIsVUFESixHQUVLLDhDQUFnQyxnQkFBaEMsRUFBa0Q7QUFBQSxTQUFPO0FBRXhEQyxJQUFBQSxlQUFlLDZCQUNWQyxtQ0FBMEJDLE1BRGhCO0FBRWJDLE1BQUFBLGFBQWEsRUFBRSxJQUZGO0FBR2JJLE1BQUFBLHFCQUFxQixFQUFFO0FBSFYsTUFGeUM7QUFPeERlLElBQUFBLGVBQWUsRUFBRTtBQVB1QyxHQUFQO0FBQUEsQ0FBbEQsQ0FIQSIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZsb3dcbiAqIEBmb3JtYXRcbiAqL1xuXG5pbXBvcnQgUmVhY3ROYXRpdmVWaWV3QXR0cmlidXRlcyBmcm9tICcuLi9Db21wb25lbnRzL1ZpZXcvUmVhY3ROYXRpdmVWaWV3QXR0cmlidXRlcyc7XG5pbXBvcnQgVUlNYW5hZ2VyIGZyb20gJy4uL1JlYWN0TmF0aXZlL1VJTWFuYWdlcic7XG5pbXBvcnQge3R5cGUgSG9zdENvbXBvbmVudH0gZnJvbSAnLi4vUmVuZGVyZXIvc2hpbXMvUmVhY3ROYXRpdmVUeXBlcyc7XG5pbXBvcnQgY3JlYXRlUmVhY3ROYXRpdmVDb21wb25lbnRDbGFzcyBmcm9tICcuLi9SZW5kZXJlci9zaGltcy9jcmVhdGVSZWFjdE5hdGl2ZUNvbXBvbmVudENsYXNzJztcbmltcG9ydCB7dHlwZSBQcm9jZXNzZWRDb2xvclZhbHVlfSBmcm9tICcuLi9TdHlsZVNoZWV0L3Byb2Nlc3NDb2xvcic7XG5pbXBvcnQge3R5cGUgVGV4dFByb3BzfSBmcm9tICcuL1RleHRQcm9wcyc7XG5cbnR5cGUgTmF0aXZlVGV4dFByb3BzID0gJFJlYWRPbmx5PHtcbiAgLi4uVGV4dFByb3BzLFxuICBpc0hpZ2hsaWdodGVkPzogP2Jvb2xlYW4sXG4gIHNlbGVjdGlvbkNvbG9yPzogP1Byb2Nlc3NlZENvbG9yVmFsdWUsXG59PjtcblxuZXhwb3J0IGNvbnN0IE5hdGl2ZVRleHQ6IEhvc3RDb21wb25lbnQ8TmF0aXZlVGV4dFByb3BzPiA9IChjcmVhdGVSZWFjdE5hdGl2ZUNvbXBvbmVudENsYXNzKFxuICAnUkNUVGV4dCcsXG4gICgpID0+ICh7XG4gICAgLy8gJEZsb3dGaXhNZVtpbmNvbXBhdGlibGUtY2FsbF1cbiAgICB2YWxpZEF0dHJpYnV0ZXM6IHtcbiAgICAgIC4uLlJlYWN0TmF0aXZlVmlld0F0dHJpYnV0ZXMuVUlWaWV3LFxuICAgICAgaXNIaWdobGlnaHRlZDogdHJ1ZSxcbiAgICAgIG51bWJlck9mTGluZXM6IHRydWUsXG4gICAgICBlbGxpcHNpemVNb2RlOiB0cnVlLFxuICAgICAgYWxsb3dGb250U2NhbGluZzogdHJ1ZSxcbiAgICAgIG1heEZvbnRTaXplTXVsdGlwbGllcjogdHJ1ZSxcbiAgICAgIGRpc2FibGVkOiB0cnVlLFxuICAgICAgc2VsZWN0YWJsZTogdHJ1ZSxcbiAgICAgIHNlbGVjdGlvbkNvbG9yOiB0cnVlLFxuICAgICAgYWRqdXN0c0ZvbnRTaXplVG9GaXQ6IHRydWUsXG4gICAgICBtaW5pbXVtRm9udFNjYWxlOiB0cnVlLFxuICAgICAgdGV4dEJyZWFrU3RyYXRlZ3k6IHRydWUsXG4gICAgICBvblRleHRMYXlvdXQ6IHRydWUsXG4gICAgICBvbklubGluZVZpZXdMYXlvdXQ6IHRydWUsXG4gICAgICBkYXRhRGV0ZWN0b3JUeXBlOiB0cnVlLFxuICAgICAgYW5kcm9pZF9oeXBoZW5hdGlvbkZyZXF1ZW5jeTogdHJ1ZSxcbiAgICB9LFxuICAgIGRpcmVjdEV2ZW50VHlwZXM6IHtcbiAgICAgIHRvcFRleHRMYXlvdXQ6IHtcbiAgICAgICAgcmVnaXN0cmF0aW9uTmFtZTogJ29uVGV4dExheW91dCcsXG4gICAgICB9LFxuICAgICAgdG9wSW5saW5lVmlld0xheW91dDoge1xuICAgICAgICByZWdpc3RyYXRpb25OYW1lOiAnb25JbmxpbmVWaWV3TGF5b3V0JyxcbiAgICAgIH0sXG4gICAgfSxcbiAgICB1aVZpZXdDbGFzc05hbWU6ICdSQ1RUZXh0JyxcbiAgfSksXG4pOiBhbnkpO1xuXG5leHBvcnQgY29uc3QgTmF0aXZlVmlydHVhbFRleHQ6IEhvc3RDb21wb25lbnQ8TmF0aXZlVGV4dFByb3BzPiA9XG4gICFnbG9iYWwuUk4kQnJpZGdlbGVzcyAmJiAhVUlNYW5hZ2VyLmhhc1ZpZXdNYW5hZ2VyQ29uZmlnKCdSQ1RWaXJ0dWFsVGV4dCcpXG4gICAgPyBOYXRpdmVUZXh0XG4gICAgOiAoY3JlYXRlUmVhY3ROYXRpdmVDb21wb25lbnRDbGFzcygnUkNUVmlydHVhbFRleHQnLCAoKSA9PiAoe1xuICAgICAgICAvLyAkRmxvd0ZpeE1lW2luY29tcGF0aWJsZS1jYWxsXVxuICAgICAgICB2YWxpZEF0dHJpYnV0ZXM6IHtcbiAgICAgICAgICAuLi5SZWFjdE5hdGl2ZVZpZXdBdHRyaWJ1dGVzLlVJVmlldyxcbiAgICAgICAgICBpc0hpZ2hsaWdodGVkOiB0cnVlLFxuICAgICAgICAgIG1heEZvbnRTaXplTXVsdGlwbGllcjogdHJ1ZSxcbiAgICAgICAgfSxcbiAgICAgICAgdWlWaWV3Q2xhc3NOYW1lOiAnUkNUVmlydHVhbFRleHQnLFxuICAgICAgfSkpOiBhbnkpO1xuIl19