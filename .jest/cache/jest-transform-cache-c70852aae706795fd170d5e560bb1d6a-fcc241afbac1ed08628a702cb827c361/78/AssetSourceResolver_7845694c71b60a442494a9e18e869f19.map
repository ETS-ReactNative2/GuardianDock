{"version":3,"sources":["AssetSourceResolver.js"],"names":["PixelRatio","require","pickScale","Platform","invariant","getAndroidResourceFolderName","getAndroidResourceIdentifier","getBasePath","getScaledAssetPath","asset","scale","scales","get","scaleSuffix","assetDir","name","type","getAssetPathInDrawableFolder","drawbleFolder","fileName","AssetSourceResolver","serverUrl","jsbundleUrl","startsWith","isLoadedFromServer","assetServerURL","OS","isLoadedFromFileSystem","drawableFolderInBundle","resourceIdentifierWithoutScale","scaledAssetURLNearBundle","fromSource","hash","path","replace","source","__packager_asset","width","height","uri","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n * @format\n */\n\n'use strict';\n\nexport type ResolvedAssetSource = {|\n  +__packager_asset: boolean,\n  +width: ?number,\n  +height: ?number,\n  +uri: string,\n  +scale: number,\n|};\n\nimport type {PackagerAsset} from '@react-native/assets/registry';\n\nconst PixelRatio = require('../Utilities/PixelRatio');\nconst {pickScale} = require('./AssetUtils');\nconst Platform = require('../Utilities/Platform');\n\nconst invariant = require('invariant');\n\nconst {\n  getAndroidResourceFolderName,\n  getAndroidResourceIdentifier,\n  getBasePath,\n} = require('@react-native/assets/path-support');\n\n/**\n * Returns a path like 'assets/AwesomeModule/icon@2x.png'\n */\nfunction getScaledAssetPath(asset): string {\n  const scale = pickScale(asset.scales, PixelRatio.get());\n  const scaleSuffix = scale === 1 ? '' : '@' + scale + 'x';\n  const assetDir = getBasePath(asset);\n  return assetDir + '/' + asset.name + scaleSuffix + '.' + asset.type;\n}\n\n/**\n * Returns a path like 'drawable-mdpi/icon.png'\n */\nfunction getAssetPathInDrawableFolder(asset): string {\n  const scale = pickScale(asset.scales, PixelRatio.get());\n  const drawbleFolder = getAndroidResourceFolderName(asset, scale);\n  const fileName = getAndroidResourceIdentifier(asset);\n  return drawbleFolder + '/' + fileName + '.' + asset.type;\n}\n\nclass AssetSourceResolver {\n  serverUrl: ?string;\n  // where the jsbundle is being run from\n  jsbundleUrl: ?string;\n  // the asset to resolve\n  asset: PackagerAsset;\n\n  constructor(serverUrl: ?string, jsbundleUrl: ?string, asset: PackagerAsset) {\n    this.serverUrl = serverUrl;\n    this.jsbundleUrl = jsbundleUrl;\n    this.asset = asset;\n  }\n\n  isLoadedFromServer(): boolean {\n    return !!this.serverUrl;\n  }\n\n  isLoadedFromFileSystem(): boolean {\n    return !!(this.jsbundleUrl && this.jsbundleUrl.startsWith('file://'));\n  }\n\n  defaultAsset(): ResolvedAssetSource {\n    if (this.isLoadedFromServer()) {\n      return this.assetServerURL();\n    }\n\n    if (Platform.OS === 'android') {\n      return this.isLoadedFromFileSystem()\n        ? this.drawableFolderInBundle()\n        : this.resourceIdentifierWithoutScale();\n    } else {\n      return this.scaledAssetURLNearBundle();\n    }\n  }\n\n  /**\n   * Returns an absolute URL which can be used to fetch the asset\n   * from the devserver\n   */\n  assetServerURL(): ResolvedAssetSource {\n    invariant(!!this.serverUrl, 'need server to load from');\n    return this.fromSource(\n      this.serverUrl +\n        getScaledAssetPath(this.asset) +\n        '?platform=' +\n        Platform.OS +\n        '&hash=' +\n        this.asset.hash,\n    );\n  }\n\n  /**\n   * Resolves to just the scaled asset filename\n   * E.g. 'assets/AwesomeModule/icon@2x.png'\n   */\n  scaledAssetPath(): ResolvedAssetSource {\n    return this.fromSource(getScaledAssetPath(this.asset));\n  }\n\n  /**\n   * Resolves to where the bundle is running from, with a scaled asset filename\n   * E.g. 'file:///sdcard/bundle/assets/AwesomeModule/icon@2x.png'\n   */\n  scaledAssetURLNearBundle(): ResolvedAssetSource {\n    const path = this.jsbundleUrl || 'file://';\n    return this.fromSource(\n      // Assets can have relative paths outside of the project root.\n      // When bundling them we replace `../` with `_` to make sure they\n      // don't end up outside of the expected assets directory.\n      path + getScaledAssetPath(this.asset).replace(/\\.\\.\\//g, '_'),\n    );\n  }\n\n  /**\n   * The default location of assets bundled with the app, located by\n   * resource identifier\n   * The Android resource system picks the correct scale.\n   * E.g. 'assets_awesomemodule_icon'\n   */\n  resourceIdentifierWithoutScale(): ResolvedAssetSource {\n    invariant(\n      Platform.OS === 'android',\n      'resource identifiers work on Android',\n    );\n    return this.fromSource(getAndroidResourceIdentifier(this.asset));\n  }\n\n  /**\n   * If the jsbundle is running from a sideload location, this resolves assets\n   * relative to its location\n   * E.g. 'file:///sdcard/AwesomeModule/drawable-mdpi/icon.png'\n   */\n  drawableFolderInBundle(): ResolvedAssetSource {\n    const path = this.jsbundleUrl || 'file://';\n    return this.fromSource(path + getAssetPathInDrawableFolder(this.asset));\n  }\n\n  fromSource(source: string): ResolvedAssetSource {\n    return {\n      __packager_asset: true,\n      width: this.asset.width,\n      height: this.asset.height,\n      uri: source,\n      scale: pickScale(this.asset.scales, PixelRatio.get()),\n    };\n  }\n\n  static pickScale: (\n    scales: Array<number>,\n    deviceScale?: number,\n  ) => number = pickScale;\n}\n\nmodule.exports = AssetSourceResolver;\n"]}