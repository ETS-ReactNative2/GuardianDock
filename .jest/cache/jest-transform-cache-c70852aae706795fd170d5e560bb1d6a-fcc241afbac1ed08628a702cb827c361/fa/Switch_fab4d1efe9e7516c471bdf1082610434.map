{"version":3,"sources":["Switch.js"],"names":["returnsFalse","returnsTrue","SwitchWithForwardedRef","React","forwardRef","Switch","props","forwardedRef","disabled","ios_backgroundColor","onChange","onValueChange","style","thumbColor","trackColor","value","restProps","trackColorForFalse","false","trackColorForTrue","true","nativeSwitchRef","useRef","ref","useState","native","setNative","handleChange","event","nativeEvent","useLayoutEffect","jsValue","shouldUpdateNativeSwitch","current","setNativeProps","Platform","OS","AndroidSwitchCommands","setNativeValue","SwitchCommands","setValue","platformProps","enabled","on","thumbTintColor","trackTintColor","accessibilityRole","onTintColor","StyleSheet","compose","height","width","backgroundColor","borderRadius","tintColor"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n * @generate-docs\n */\n\nimport Platform from '../../Utilities/Platform';\nimport * as React from 'react';\nimport StyleSheet from '../../StyleSheet/StyleSheet';\nimport useMergeRefs from '../../Utilities/useMergeRefs';\n\nimport AndroidSwitchNativeComponent, {\n  Commands as AndroidSwitchCommands,\n} from './AndroidSwitchNativeComponent';\nimport SwitchNativeComponent, {\n  Commands as SwitchCommands,\n} from './SwitchNativeComponent';\n\nimport type {ColorValue} from '../../StyleSheet/StyleSheet';\nimport type {SyntheticEvent} from '../../Types/CoreEventTypes';\nimport type {ViewProps} from '../View/ViewPropTypes';\n\ntype SwitchChangeEvent = SyntheticEvent<\n  $ReadOnly<{|\n    value: boolean,\n  |}>,\n>;\n\nexport type Props = $ReadOnly<{|\n  ...ViewProps,\n\n  /**\n    If true the user won't be able to toggle the switch.\n\n    @default false\n   */\n  disabled?: ?boolean,\n\n  /**\n    The value of the switch. If true the switch will be turned on.\n\n    @default false\n   */\n  value?: ?boolean,\n\n  /**\n    Color of the foreground switch grip. If this is set on iOS, the switch grip will lose its drop shadow.\n   */\n  thumbColor?: ?ColorValue,\n\n  /**\n    Custom colors for the switch track.\n\n    _iOS_: When the switch value is false, the track shrinks into the border. If you want to change the\n    color of the background exposed by the shrunken track, use\n     [`ios_backgroundColor`](https://reactnative.dev/docs/switch#ios_backgroundColor).\n   */\n  trackColor?: ?$ReadOnly<{|\n    false?: ?ColorValue,\n    true?: ?ColorValue,\n  |}>,\n\n  /**\n    On iOS, custom color for the background. This background color can be\n    seen either when the switch value is false or when the switch is\n    disabled (and the switch is translucent).\n   */\n  ios_backgroundColor?: ?ColorValue,\n\n  /**\n    Invoked when the user tries to change the value of the switch. Receives\n    the change event as an argument. If you want to only receive the new\n    value, use `onValueChange` instead.\n   */\n  onChange?: ?(event: SwitchChangeEvent) => Promise<void> | void,\n\n  /**\n    Invoked when the user tries to change the value of the switch. Receives\n    the new value as an argument. If you want to instead receive an event,\n    use `onChange`.\n   */\n  onValueChange?: ?(value: boolean) => Promise<void> | void,\n|}>;\nconst returnsFalse = () => false;\nconst returnsTrue = () => true;\n\n/**\n  Renders a boolean input.\n\n  This is a controlled component that requires an `onValueChange`\n  callback that updates the `value` prop in order for the component to\n  reflect user actions. If the `value` prop is not updated, the\n  component will continue to render the supplied `value` prop instead of\n  the expected result of any user actions.\n\n  ```SnackPlayer name=Switch\n  import React, { useState } from \"react\";\n  import { View, Switch, StyleSheet } from \"react-native\";\n\n  const App = () => {\n    const [isEnabled, setIsEnabled] = useState(false);\n    const toggleSwitch = () => setIsEnabled(previousState => !previousState);\n\n    return (\n      <View style={styles.container}>\n        <Switch\n          trackColor={{ false: \"#767577\", true: \"#81b0ff\" }}\n          thumbColor={isEnabled ? \"#f5dd4b\" : \"#f4f3f4\"}\n          ios_backgroundColor=\"#3e3e3e\"\n          onValueChange={toggleSwitch}\n          value={isEnabled}\n        />\n      </View>\n    );\n  }\n\n  const styles = StyleSheet.create({\n    container: {\n      flex: 1,\n      alignItems: \"center\",\n      justifyContent: \"center\"\n    }\n  });\n\n  export default App;\n  ```\n */\n\nconst SwitchWithForwardedRef: React.AbstractComponent<\n  Props,\n  React.ElementRef<\n    typeof SwitchNativeComponent | typeof AndroidSwitchNativeComponent,\n  >,\n> = React.forwardRef(function Switch(props, forwardedRef): React.Node {\n  const {\n    disabled,\n    ios_backgroundColor,\n    onChange,\n    onValueChange,\n    style,\n    thumbColor,\n    trackColor,\n    value,\n    ...restProps\n  } = props;\n  const trackColorForFalse = trackColor?.false;\n  const trackColorForTrue = trackColor?.true;\n\n  const nativeSwitchRef = React.useRef<React.ElementRef<\n    typeof SwitchNativeComponent | typeof AndroidSwitchNativeComponent,\n  > | null>(null);\n\n  const ref = useMergeRefs(nativeSwitchRef, forwardedRef);\n\n  const [native, setNative] = React.useState({value: null});\n\n  const handleChange = (event: SwitchChangeEvent) => {\n    onChange?.(event);\n    onValueChange?.(event.nativeEvent.value);\n    setNative({value: event.nativeEvent.value});\n  };\n\n  React.useLayoutEffect(() => {\n    // This is necessary in case native updates the switch and JS decides\n    // that the update should be ignored and we should stick with the value\n    // that we have in JS.\n    const jsValue = value === true;\n    const shouldUpdateNativeSwitch =\n      native.value != null && native.value !== jsValue;\n    if (\n      shouldUpdateNativeSwitch &&\n      nativeSwitchRef.current?.setNativeProps != null\n    ) {\n      if (Platform.OS === 'android') {\n        AndroidSwitchCommands.setNativeValue(nativeSwitchRef.current, jsValue);\n      } else {\n        SwitchCommands.setValue(nativeSwitchRef.current, jsValue);\n      }\n    }\n  }, [value, native]);\n\n  if (Platform.OS === 'android') {\n    const platformProps = {\n      enabled: disabled !== true,\n      on: value === true,\n      style,\n      thumbTintColor: thumbColor,\n      trackColorForFalse: trackColorForFalse,\n      trackColorForTrue: trackColorForTrue,\n      trackTintColor: value === true ? trackColorForTrue : trackColorForFalse,\n    };\n\n    return (\n      <AndroidSwitchNativeComponent\n        {...restProps}\n        {...platformProps}\n        accessibilityRole={props.accessibilityRole ?? 'switch'}\n        onChange={handleChange}\n        onResponderTerminationRequest={returnsFalse}\n        onStartShouldSetResponder={returnsTrue}\n        ref={ref}\n      />\n    );\n  } else {\n    const platformProps = {\n      disabled,\n      onTintColor: trackColorForTrue,\n      style: StyleSheet.compose(\n        {height: 31, width: 51},\n        StyleSheet.compose(\n          style,\n          ios_backgroundColor == null\n            ? null\n            : {\n                backgroundColor: ios_backgroundColor,\n                borderRadius: 16,\n              },\n        ),\n      ),\n      thumbTintColor: thumbColor,\n      tintColor: trackColorForFalse,\n      value: value === true,\n    };\n\n    return (\n      <SwitchNativeComponent\n        {...restProps}\n        {...platformProps}\n        accessibilityRole={props.accessibilityRole ?? 'switch'}\n        onChange={handleChange}\n        onResponderTerminationRequest={returnsFalse}\n        onStartShouldSetResponder={returnsTrue}\n        ref={ref}\n      />\n    );\n  }\n});\n\nexport default SwitchWithForwardedRef;\n"]}