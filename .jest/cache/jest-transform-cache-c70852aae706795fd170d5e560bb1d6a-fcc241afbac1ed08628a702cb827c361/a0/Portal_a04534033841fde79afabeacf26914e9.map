{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAgCMA,M;;;;;;;;;;;;WAIJC,kBAAS;AACP,wBAA4B,KAAKC,KAAjC;AAAA,UAAQC,QAAR,eAAQA,QAAR;AAAA,UAAkBC,KAAlB,eAAkBA,KAAlB;AAEA,aACEC,oBAACC,kBAAD,QACIC,kBAAD;AAAA,eACCF,oBAACG,0BAAcC,QAAf,QACIC,iBAAD;AAAA,iBACCL,oBAACM,uBAAD;AAAgBD,mBAAO,EAAEA;AAAzB,aACEL,oBAACC,kBAAD;AAAkBM,iBAAK,EAAEL;AAAzB,aACEF,oBAACQ,sBAAD;AAAeT,iBAAK,EAAEA;AAAtB,aAA8BD,QAA9B,CADF,CADF,CADD;AAAA,SADH,CADD;AAAA,OADH,CADF;AAeD;;;EAtBkBE,KAAK,CAACS,S;;gBAArBd,Q,QAEUe;;eAuBD,wBAAUf,MAAV","names":["Portal","render","props","children","theme","React","_settings","settings","_PortalHost","Consumer","manager","_PortalConsumer","value","_theming","Component","PortalHost"],"sources":["Portal.tsx"],"sourcesContent":["import * as React from 'react';\nimport PortalConsumer from './PortalConsumer';\nimport PortalHost, { PortalContext, PortalMethods } from './PortalHost';\nimport {\n  Provider as SettingsProvider,\n  Consumer as SettingsConsumer,\n} from '../../core/settings';\nimport { ThemeProvider, withTheme } from '../../core/theming';\n\ntype Props = {\n  /**\n   * Content of the `Portal`.\n   */\n  children: React.ReactNode;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n};\n\n/**\n * Portal allows to render a component at a different place in the parent tree.\n * You can use it to render content which should appear above other elements, similar to `Modal`.\n * It requires a [`Portal.Host`](portal-host.html) component to be rendered somewhere in the parent tree.\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Portal, Text } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <Portal>\n *     <Text>This is rendered at a different place</Text>\n *   </Portal>\n * );\n *\n * export default MyComponent;\n * ```\n */\nclass Portal extends React.Component<Props> {\n  // @component ./PortalHost.tsx\n  static Host = PortalHost;\n\n  render() {\n    const { children, theme } = this.props;\n\n    return (\n      <SettingsConsumer>\n        {(settings) => (\n          <PortalContext.Consumer>\n            {(manager) => (\n              <PortalConsumer manager={manager as PortalMethods}>\n                <SettingsProvider value={settings}>\n                  <ThemeProvider theme={theme}>{children}</ThemeProvider>\n                </SettingsProvider>\n              </PortalConsumer>\n            )}\n          </PortalContext.Consumer>\n        )}\n      </SettingsConsumer>\n    );\n  }\n}\n\nexport default withTheme(Portal);\n"]}