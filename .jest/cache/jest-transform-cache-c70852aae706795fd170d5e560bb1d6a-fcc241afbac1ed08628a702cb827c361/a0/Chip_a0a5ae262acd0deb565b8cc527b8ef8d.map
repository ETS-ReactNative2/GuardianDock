{"version":3,"mappings":"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","names":["Chip","mode","children","icon","avatar","selected","disabled","accessibilityLabel","closeIconAccessibilityLabel","onPress","onLongPress","onClose","closeIcon","textStyle","style","theme","testID","selectedColor","ellipsizeMode","rest","React","useRef","Animated","Value","elevation","current","handlePressIn","scale","animation","timing","toValue","duration","useNativeDriver","start","handlePressOut","dark","colors","defaultBackgroundColor","surface","StyleSheet","flatten","backgroundColor","borderRadius","borderColor","undefined","white","black","alpha","rgb","string","textColor","text","iconColor","backgroundColorString","selectedBackgroundColor","lighten","darken","underlayColor","fade","accessibilityTraits","accessibilityState","push","_Surface","styles","container","Platform","OS","_TouchableRipple","borderless","delayPressIn","touchable","onPressIn","onPressOut","accessibilityComponentType","accessibilityRole","_reactNative","content","paddingRight","avatarWrapper","opacity","isValidElement","cloneElement","props","avatarSelected","_Icon","source","color","size","_MaterialCommunityIcon","name","direction","_Text","selectable","numberOfLines","fonts","regular","marginRight","marginLeft","closeButtonStyle","create","borderWidth","hairlineWidth","borderStyle","flexDirection","select","default","web","alignItems","paddingLeft","position","flexGrow","padding","alignSelf","minHeight","lineHeight","textAlignVertical","marginVertical","width","height","top","left","right","justifyContent"],"sources":["Chip.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  AccessibilityState,\n  Animated,\n  Platform,\n  StyleProp,\n  StyleSheet,\n  TextStyle,\n  TouchableWithoutFeedback,\n  View,\n  ViewStyle,\n} from 'react-native';\nimport color from 'color';\nimport type { IconSource } from './Icon';\nimport Icon from './Icon';\nimport MaterialCommunityIcon from './MaterialCommunityIcon';\nimport Surface from './Surface';\nimport Text from './Typography/Text';\nimport TouchableRipple from './TouchableRipple/TouchableRipple';\nimport { withTheme } from '../core/theming';\nimport { black, white } from '../styles/colors';\nimport type { EllipsizeProp } from '../types';\n\ntype Props = React.ComponentProps<typeof Surface> & {\n  /**\n   * Mode of the chip.\n   * - `flat` - flat chip without outline.\n   * - `outlined` - chip with an outline.\n   */\n  mode?: 'flat' | 'outlined';\n  /**\n   * Text content of the `Chip`.\n   */\n  children: React.ReactNode;\n  /**\n   * Icon to display for the `Chip`. Both icon and avatar cannot be specified.\n   */\n  icon?: IconSource;\n  /**\n   * Avatar to display for the `Chip`. Both icon and avatar cannot be specified.\n   */\n  avatar?: React.ReactNode;\n  /**\n   * Icon to display as the close button for the `Chip`. The icon appears only when the onClose prop is specified.\n   */\n  closeIcon?: IconSource;\n  /**\n   * Whether chip is selected.\n   */\n  selected?: boolean;\n  /**\n   * Whether to style the chip color as selected.\n   */\n  selectedColor?: string;\n  /**\n   * Whether the chip is disabled. A disabled chip is greyed out and `onPress` is not called on touch.\n   */\n  disabled?: boolean;\n  /**\n   * Accessibility label for the chip. This is read by the screen reader when the user taps the chip.\n   */\n  accessibilityLabel?: string;\n  /**\n   * Accessibility label for the close icon. This is read by the screen reader when the user taps the close icon.\n   */\n  closeIconAccessibilityLabel?: string;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Function to execute on long press.\n   */\n  onLongPress?: () => void;\n  /**\n   * Function to execute on close button press. The close button appears only when this prop is specified.\n   */\n  onClose?: () => void;\n  /**\n   * Style of chip's text\n   */\n  textStyle?: StyleProp<TextStyle>;\n  style?: StyleProp<ViewStyle>;\n\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n  /**\n   * Pass down testID from chip props to touchable for Detox tests.\n   */\n  testID?: string;\n  /**\n   * Ellipsize Mode for the children text\n   */\n  ellipsizeMode?: EllipsizeProp;\n};\n\n/**\n * Chips can be used to display entities in small blocks.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/chip-1.png\" />\n *     <figcaption>Flat chip</figcaption>\n *   </figure>\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/chip-2.png\" />\n *     <figcaption>Outlined chip</figcaption>\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Chip } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <Chip icon=\"information\" onPress={() => console.log('Pressed')}>Example Chip</Chip>\n * );\n *\n * export default MyComponent;\n * ```\n */\nconst Chip = ({\n  mode = 'flat',\n  children,\n  icon,\n  avatar,\n  selected = false,\n  disabled = false,\n  accessibilityLabel,\n  closeIconAccessibilityLabel = 'Close',\n  onPress,\n  onLongPress,\n  onClose,\n  closeIcon,\n  textStyle,\n  style,\n  theme,\n  testID,\n  selectedColor,\n  ellipsizeMode,\n  ...rest\n}: Props) => {\n  const { current: elevation } = React.useRef<Animated.Value>(\n    new Animated.Value(0)\n  );\n\n  const handlePressIn = () => {\n    const { scale } = theme.animation;\n    Animated.timing(elevation, {\n      toValue: 4,\n      duration: 200 * scale,\n      useNativeDriver: true,\n    }).start();\n  };\n\n  const handlePressOut = () => {\n    const { scale } = theme.animation;\n    Animated.timing(elevation, {\n      toValue: 0,\n      duration: 150 * scale,\n      useNativeDriver: true,\n    }).start();\n  };\n\n  const { dark, colors } = theme;\n  const defaultBackgroundColor =\n    mode === 'outlined' ? colors.surface : dark ? '#383838' : '#ebebeb';\n\n  const {\n    backgroundColor = defaultBackgroundColor,\n    borderRadius = 16,\n  } = (StyleSheet.flatten(style) || {}) as ViewStyle;\n\n  const borderColor =\n    mode === 'outlined'\n      ? color(\n          selectedColor !== undefined\n            ? selectedColor\n            : color(dark ? white : black)\n        )\n          .alpha(0.29)\n          .rgb()\n          .string()\n      : backgroundColor;\n  const textColor = disabled\n    ? colors.disabled\n    : color(selectedColor !== undefined ? selectedColor : colors.text)\n        .alpha(0.87)\n        .rgb()\n        .string();\n  const iconColor = disabled\n    ? colors.disabled\n    : color(selectedColor !== undefined ? selectedColor : colors.text)\n        .alpha(0.54)\n        .rgb()\n        .string();\n\n  const backgroundColorString =\n    typeof backgroundColor === 'string'\n      ? backgroundColor\n      : defaultBackgroundColor;\n  const selectedBackgroundColor = (dark\n    ? color(backgroundColorString).lighten(mode === 'outlined' ? 0.2 : 0.4)\n    : color(backgroundColorString).darken(mode === 'outlined' ? 0.08 : 0.2)\n  )\n    .rgb()\n    .string();\n\n  const underlayColor = selectedColor\n    ? color(selectedColor).fade(0.5).rgb().string()\n    : selectedBackgroundColor;\n\n  const accessibilityTraits = ['button'];\n  const accessibilityState: AccessibilityState = {\n    selected,\n    disabled,\n  };\n\n  if (selected) {\n    accessibilityTraits.push('selected');\n  }\n\n  if (disabled) {\n    accessibilityTraits.push('disabled');\n  }\n\n  return (\n    <Surface\n      style={\n        [\n          styles.container,\n          {\n            elevation: Platform.OS === 'android' ? elevation : 0,\n            backgroundColor: selected\n              ? selectedBackgroundColor\n              : backgroundColor,\n            borderColor,\n            borderRadius,\n          },\n          style,\n        ] as StyleProp<ViewStyle>\n      }\n      {...rest}\n    >\n      <TouchableRipple\n        borderless\n        delayPressIn={0}\n        style={[{ borderRadius }, styles.touchable]}\n        onPress={onPress}\n        onLongPress={onLongPress}\n        onPressIn={handlePressIn}\n        onPressOut={handlePressOut}\n        underlayColor={underlayColor}\n        disabled={disabled}\n        accessibilityLabel={accessibilityLabel}\n        // @ts-expect-error We keep old a11y props for backwards compat with old RN versions\n        accessibilityTraits={accessibilityTraits}\n        accessibilityComponentType=\"button\"\n        accessibilityRole=\"button\"\n        accessibilityState={accessibilityState}\n        testID={testID}\n      >\n        <View style={[styles.content, { paddingRight: onClose ? 32 : 4 }]}>\n          {avatar && !icon ? (\n            <View style={[styles.avatarWrapper, disabled && { opacity: 0.26 }]}>\n              {React.isValidElement(avatar)\n                ? React.cloneElement(avatar, {\n                    style: [styles.avatar, avatar.props.style],\n                  })\n                : avatar}\n            </View>\n          ) : null}\n          {icon || selected ? (\n            <View\n              style={[\n                styles.icon,\n                avatar ? [styles.avatar, styles.avatarSelected] : null,\n              ]}\n            >\n              {icon ? (\n                <Icon\n                  source={icon}\n                  color={avatar ? white : iconColor}\n                  size={18}\n                />\n              ) : (\n                <MaterialCommunityIcon\n                  name=\"check\"\n                  color={avatar ? white : iconColor}\n                  size={18}\n                  direction=\"ltr\"\n                />\n              )}\n            </View>\n          ) : null}\n          <Text\n            selectable={false}\n            numberOfLines={1}\n            style={[\n              styles.text,\n              {\n                ...theme.fonts.regular,\n                color: textColor,\n                marginRight: onClose ? 0 : 8,\n                marginLeft: avatar || icon || selected ? 4 : 8,\n              },\n              textStyle,\n            ]}\n            ellipsizeMode={ellipsizeMode}\n          >\n            {children}\n          </Text>\n        </View>\n      </TouchableRipple>\n      {onClose ? (\n        <View style={styles.closeButtonStyle}>\n          <TouchableWithoutFeedback\n            onPress={onClose}\n            // @ts-expect-error We keep old a11y props for backwards compat with old RN versions\n            accessibilityTraits=\"button\"\n            accessibilityComponentType=\"button\"\n            accessibilityRole=\"button\"\n            accessibilityLabel={closeIconAccessibilityLabel}\n          >\n            <View style={[styles.icon, styles.closeIcon]}>\n              {closeIcon ? (\n                <Icon source={closeIcon} color={iconColor} size={16} />\n              ) : (\n                <MaterialCommunityIcon\n                  name=\"close-circle\"\n                  size={16}\n                  color={iconColor}\n                  direction=\"ltr\"\n                />\n              )}\n            </View>\n          </TouchableWithoutFeedback>\n        </View>\n      ) : null}\n    </Surface>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    borderWidth: StyleSheet.hairlineWidth,\n    borderStyle: 'solid',\n    flexDirection: Platform.select({ default: 'column', web: 'row' }),\n  },\n  content: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    paddingLeft: 4,\n    position: 'relative',\n    flexGrow: 1,\n  },\n  icon: {\n    padding: 4,\n    alignSelf: 'center',\n  },\n  closeIcon: {\n    marginRight: 4,\n  },\n  text: {\n    minHeight: 24,\n    lineHeight: 24,\n    textAlignVertical: 'center',\n    marginVertical: 4,\n  },\n  avatar: {\n    width: 24,\n    height: 24,\n    borderRadius: 12,\n  },\n  avatarWrapper: {\n    marginRight: 4,\n  },\n  avatarSelected: {\n    position: 'absolute',\n    top: 4,\n    left: 4,\n    backgroundColor: 'rgba(0, 0, 0, .29)',\n  },\n  closeButtonStyle: {\n    position: 'absolute',\n    right: 0,\n    height: '100%',\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n  touchable: {\n    flexGrow: 1,\n  },\n});\n\nexport default withTheme(Chip);\n"]}