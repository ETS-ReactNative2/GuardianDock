{"version":3,"mappings":";;;;;;;;;;;AAAA;;AAOA;;AAaA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAKO,IAAMA,UAAU,GAAG,kCAExBC,uBAFwB,EAEV;AACdC,sBAAoB,EAAE,IADR;AAEdC,yBAAuB,EAAE;AAFX,CAFU,CAAnB;;AAWA,IAAMC,MAAM,GAAG,kCAAmCC,mBAAnC,EAA6C;AACjEF,yBAAuB,EAAE,KADwC;AAEjEG,uBAAqB,EAAE,IAF0C;AAGjEJ,sBAAoB,EAAE;AAH2C,CAA7C,CAAf;;AAQA,IAAMK,SAAS,GAAG,kCAAsCC,sBAAtC,CAAlB;;AAIA,IAAMC,mBAAmB,GAAG,kCAEjCC,gCAFiC,EAEV;AAAER,sBAAoB,EAAE;AAAxB,CAFU,CAA5B;;AAOA,IAAMS,QAAQ,GAAGC,KAAK,CAACC,UAAND,CAAiB,UAACE,KAAD,EAAQC,GAAR,EAAgB;AACvD,MAAMC,aAAa,GAAG,EAAtB;AACA,MAAMC,eAAe,GAAG,EAAxB;;AACA,qCAAgCC,MAAM,CAACC,OAAPD,CAAeJ,KAAfI,CAAhC,qCAAuD;AAAA;;AAAA;;AAAA,QAA3CE,QAA2C;AAAA,QAAjCC,KAAiC;;AAErD,QAAKC,0CAAsCC,QAAtCD,CAA+CF,QAA/CE,CAAL,EAA+D;AAG7DL,qBAAe,CAACG,QAAD,CAAfH,GAA4BI,KAA5BJ;AAHF,WAIO;AAGLD,mBAAa,CAACI,QAAD,CAAbJ,GAA0BK,KAA1BL;AACD;AACF;;AACD,SAEEJ,oBAACY,qBAAD;AACET,OAAG,EAAEA;AADP,KAEMC,aAFN;AAGES,yBAAqB,EAAGC,0CAAD;AAAA,aACrBd,oBAACZ,UAAD,eAAqB0B,WAArB,EAAqCT,eAArC,EADqB;AAAA;AAHzB,KAFF;AAfsB,EAAjB","names":["ScrollView","RNScrollView","disallowInterruption","shouldCancelWhenOutside","Switch","RNSwitch","shouldActivateOnStart","TextInput","RNTextInput","DrawerLayoutAndroid","RNDrawerLayoutAndroid","FlatList","React","forwardRef","props","ref","flatListProps","scrollViewProps","Object","entries","propName","value","nativeViewProps","includes","_reactNative","renderScrollComponent","scrollProps"],"sources":["GestureComponents.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  PropsWithChildren,\n  ForwardedRef,\n  RefAttributes,\n  ReactElement,\n} from 'react';\nimport {\n  ScrollView as RNScrollView,\n  ScrollViewProps as RNScrollViewProps,\n  Switch as RNSwitch,\n  SwitchProps as RNSwitchProps,\n  TextInput as RNTextInput,\n  TextInputProps as RNTextInputProps,\n  DrawerLayoutAndroid as RNDrawerLayoutAndroid,\n  DrawerLayoutAndroidProps as RNDrawerLayoutAndroidProps,\n  FlatList as RNFlatList,\n  FlatListProps as RNFlatListProps,\n} from 'react-native';\n\nimport createNativeWrapper from '../handlers/createNativeWrapper';\n\nimport {\n  NativeViewGestureHandlerProps,\n  nativeViewProps,\n} from '../handlers/NativeViewGestureHandler';\n\nexport const ScrollView = createNativeWrapper<\n  PropsWithChildren<RNScrollViewProps>\n>(RNScrollView, {\n  disallowInterruption: true,\n  shouldCancelWhenOutside: false,\n});\n// backward type compatibility with https://github.com/software-mansion/react-native-gesture-handler/blob/db78d3ca7d48e8ba57482d3fe9b0a15aa79d9932/react-native-gesture-handler.d.ts#L440-L457\n// include methods of wrapped components by creating an intersection type with the RN component instead of duplicating them.\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nexport type ScrollView = typeof ScrollView & RNScrollView;\n\nexport const Switch = createNativeWrapper<RNSwitchProps>(RNSwitch, {\n  shouldCancelWhenOutside: false,\n  shouldActivateOnStart: true,\n  disallowInterruption: true,\n});\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nexport type Switch = typeof Switch & RNSwitch;\n\nexport const TextInput = createNativeWrapper<RNTextInputProps>(RNTextInput);\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nexport type TextInput = typeof TextInput & RNTextInput;\n\nexport const DrawerLayoutAndroid = createNativeWrapper<\n  PropsWithChildren<RNDrawerLayoutAndroidProps>\n>(RNDrawerLayoutAndroid, { disallowInterruption: true });\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nexport type DrawerLayoutAndroid = typeof DrawerLayoutAndroid &\n  RNDrawerLayoutAndroid;\n\nexport const FlatList = React.forwardRef((props, ref) => {\n  const flatListProps = {};\n  const scrollViewProps = {};\n  for (const [propName, value] of Object.entries(props)) {\n    // https://github.com/microsoft/TypeScript/issues/26255\n    if ((nativeViewProps as readonly string[]).includes(propName)) {\n      // @ts-ignore - this function cannot have generic type so we have to ignore this error\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n      scrollViewProps[propName] = value;\n    } else {\n      // @ts-ignore - this function cannot have generic type so we have to ignore this error\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n      flatListProps[propName] = value;\n    }\n  }\n  return (\n    // @ts-ignore - this function cannot have generic type so we have to ignore this error\n    <RNFlatList\n      ref={ref}\n      {...flatListProps}\n      renderScrollComponent={(scrollProps) => (\n        <ScrollView {...{ ...scrollProps, ...scrollViewProps }} />\n      )}\n    />\n  );\n}) as <ItemT = any>(\n  props: PropsWithChildren<\n    RNFlatListProps<ItemT> &\n      RefAttributes<FlatList<ItemT>> &\n      NativeViewGestureHandlerProps\n  >,\n  ref: ForwardedRef<FlatList<ItemT>>\n) => ReactElement | null;\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nexport type FlatList<ItemT = any> = typeof FlatList & RNFlatList<ItemT>;\n"]}