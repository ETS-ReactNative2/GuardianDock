{"version":3,"mappings":"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","names":["useNavigationCache","state","getState","navigation","setOptions","router","emitter","React","useContext","NavigationBuilderContext","stackRef","cache","useMemo","current","actions","actionCreators","CommonActions","routes","reduce","acc","route","previous","key","emit","rest","dispatch","thunk","action","source","withStack","callback","isStackSet","process","env","NODE_ENV","Error","stack","undefined","helpers","Object","keys","name","args","arguments","create","options","o","isFocused","index"],"sources":["useNavigationCache.tsx"],"sourcesContent":["import {\n  CommonActions,\n  NavigationAction,\n  NavigationState,\n  ParamListBase,\n  Router,\n} from '@react-navigation/routers';\nimport * as React from 'react';\n\nimport NavigationBuilderContext from './NavigationBuilderContext';\nimport type { NavigationHelpers, NavigationProp } from './types';\nimport type { NavigationEventEmitter } from './useEventEmitter';\n\ntype Options<\n  State extends NavigationState,\n  EventMap extends Record<string, any>\n> = {\n  state: State;\n  getState: () => State;\n  navigation: NavigationHelpers<ParamListBase> &\n    Partial<NavigationProp<ParamListBase, string, any, any, any>>;\n  setOptions: (\n    cb: (options: Record<string, object>) => Record<string, object>\n  ) => void;\n  router: Router<State, NavigationAction>;\n  emitter: NavigationEventEmitter<EventMap>;\n};\n\ntype NavigationCache<\n  State extends NavigationState,\n  ScreenOptions extends {},\n  EventMap extends Record<string, any>\n> = Record<\n  string,\n  NavigationProp<ParamListBase, string, State, ScreenOptions, EventMap>\n>;\n\n/**\n * Hook to cache navigation objects for each screen in the navigator.\n * It's important to cache them to make sure navigation objects don't change between renders.\n * This lets us apply optimizations like `React.memo` to minimize re-rendering screens.\n */\nexport default function useNavigationCache<\n  State extends NavigationState,\n  ScreenOptions extends {},\n  EventMap extends Record<string, any>\n>({\n  state,\n  getState,\n  navigation,\n  setOptions,\n  router,\n  emitter,\n}: Options<State, EventMap>) {\n  const { stackRef } = React.useContext(NavigationBuilderContext);\n\n  // Cache object which holds navigation objects for each screen\n  // We use `React.useMemo` instead of `React.useRef` coz we want to invalidate it when deps change\n  // In reality, these deps will rarely change, if ever\n  const cache = React.useMemo(\n    () => ({ current: {} as NavigationCache<State, ScreenOptions, EventMap> }),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [getState, navigation, setOptions, router, emitter]\n  );\n\n  const actions = {\n    ...router.actionCreators,\n    ...CommonActions,\n  };\n\n  cache.current = state.routes.reduce<\n    NavigationCache<State, ScreenOptions, EventMap>\n  >((acc, route) => {\n    const previous = cache.current[route.key];\n\n    type Thunk =\n      | NavigationAction\n      | ((state: State) => NavigationAction | null | undefined);\n\n    if (previous) {\n      // If a cached navigation object already exists, reuse it\n      acc[route.key] = previous;\n    } else {\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      const { emit, ...rest } = navigation;\n\n      const dispatch = (thunk: Thunk) => {\n        const action = typeof thunk === 'function' ? thunk(getState()) : thunk;\n\n        if (action != null) {\n          navigation.dispatch({ source: route.key, ...action });\n        }\n      };\n\n      const withStack = (callback: () => void) => {\n        let isStackSet = false;\n\n        try {\n          if (\n            process.env.NODE_ENV !== 'production' &&\n            stackRef &&\n            !stackRef.current\n          ) {\n            // Capture the stack trace for devtools\n            stackRef.current = new Error().stack;\n            isStackSet = true;\n          }\n\n          callback();\n        } finally {\n          if (isStackSet && stackRef) {\n            stackRef.current = undefined;\n          }\n        }\n      };\n\n      const helpers = Object.keys(actions).reduce<Record<string, () => void>>(\n        (acc, name) => {\n          acc[name] = (...args: any) =>\n            withStack(() =>\n              // @ts-expect-error: name is a valid key, but TypeScript is dumb\n              dispatch(actions[name](...args))\n            );\n\n          return acc;\n        },\n        {}\n      );\n\n      acc[route.key] = {\n        ...rest,\n        ...helpers,\n        // FIXME: too much work to fix the types for now\n        ...(emitter.create(route.key) as any),\n        dispatch: (thunk: Thunk) => withStack(() => dispatch(thunk)),\n        setOptions: (options: object) =>\n          setOptions((o) => ({\n            ...o,\n            [route.key]: { ...o[route.key], ...options },\n          })),\n        isFocused: () => {\n          const state = getState();\n\n          if (state.routes[state.index].key !== route.key) {\n            return false;\n          }\n\n          // If the current screen is focused, we also need to check if parent navigator is focused\n          // This makes sure that we return the focus state in the whole tree, not just this navigator\n          return navigation ? navigation.isFocused() : true;\n        },\n      };\n    }\n\n    return acc;\n  }, {});\n\n  return cache.current;\n}\n"]}