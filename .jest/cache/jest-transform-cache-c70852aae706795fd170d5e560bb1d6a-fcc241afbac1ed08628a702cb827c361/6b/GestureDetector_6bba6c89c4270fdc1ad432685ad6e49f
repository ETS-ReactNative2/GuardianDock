e55cb586fe62aec481224bda7fa5f6fc
"use strict";

var _interopRequireDefault2 = require("@babel/runtime/helpers/interopRequireDefault");

var _classCallCheck2 = _interopRequireDefault2(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault2(require("@babel/runtime/helpers/createClass"));

var _inherits2 = _interopRequireDefault2(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault2(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault2(require("@babel/runtime/helpers/getPrototypeOf"));

var _toConsumableArray2 = _interopRequireDefault2(require("@babel/runtime/helpers/toConsumableArray"));

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.GestureDetector = void 0;

var _react = _interopRequireWildcard(require("react"));

var _gesture = require("./gesture");

var _reanimatedWrapper = require("./reanimatedWrapper");

var _handlersRegistry = require("../handlersRegistry");

var _RNGestureHandlerModule = _interopRequireDefault(require("../../RNGestureHandlerModule"));

var _gestureHandlerCommon = require("../gestureHandlerCommon");

var _gestureStateManager = require("./gestureStateManager");

var _FlingGestureHandler = require("../FlingGestureHandler");

var _ForceTouchGestureHandler = require("../ForceTouchGestureHandler");

var _LongPressGestureHandler = require("../LongPressGestureHandler");

var _PanGestureHandler = require("../PanGestureHandler");

var _TapGestureHandler = require("../TapGestureHandler");

var _State = require("../../State");

var _EventType = require("../../EventType");

var _ActionType = require("../../ActionType");

var _utils = require("../../utils");

var _getShadowNodeFromRef = require("../../getShadowNodeFromRef");

var _Reanimated$default$c, _Reanimated$default;

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

function _getRequireWildcardCache() {
  if (typeof WeakMap !== "function") return null;
  var cache = new WeakMap();

  _getRequireWildcardCache = function _getRequireWildcardCache() {
    return cache;
  };

  return cache;
}

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  }

  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }

  var cache = _getRequireWildcardCache();

  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }

  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }

  newObj.default = obj;

  if (cache) {
    cache.set(obj, newObj);
  }

  return newObj;
}

var ALLOWED_PROPS = [].concat((0, _toConsumableArray2.default)(_gestureHandlerCommon.baseGestureHandlerWithMonitorProps), (0, _toConsumableArray2.default)(_TapGestureHandler.tapGestureHandlerProps), (0, _toConsumableArray2.default)(_PanGestureHandler.panGestureHandlerProps), (0, _toConsumableArray2.default)(_PanGestureHandler.panGestureHandlerCustomNativeProps), (0, _toConsumableArray2.default)(_LongPressGestureHandler.longPressGestureHandlerProps), (0, _toConsumableArray2.default)(_ForceTouchGestureHandler.forceTouchGestureHandlerProps), (0, _toConsumableArray2.default)(_FlingGestureHandler.flingGestureHandlerProps));

function convertToHandlerTag(ref) {
  if (typeof ref === 'number') {
    return ref;
  } else if (ref instanceof _gesture.BaseGesture) {
    return ref.handlerTag;
  } else {
    var _ref$current$handlerT, _ref$current;

    return (_ref$current$handlerT = (_ref$current = ref.current) === null || _ref$current === void 0 ? void 0 : _ref$current.handlerTag) !== null && _ref$current$handlerT !== void 0 ? _ref$current$handlerT : -1;
  }
}

function extractValidHandlerTags(interactionGroup) {
  var _interactionGroup$map, _interactionGroup$map2;

  return (_interactionGroup$map = interactionGroup === null || interactionGroup === void 0 ? void 0 : (_interactionGroup$map2 = interactionGroup.map(convertToHandlerTag)) === null || _interactionGroup$map2 === void 0 ? void 0 : _interactionGroup$map2.filter(function (tag) {
    return tag > 0;
  })) !== null && _interactionGroup$map !== void 0 ? _interactionGroup$map : [];
}

function dropHandlers(preparedGesture) {
  for (var _iterator = _createForOfIteratorHelperLoose(preparedGesture.config), _step; !(_step = _iterator()).done;) {
    var handler = _step.value;

    _RNGestureHandlerModule.default.dropGestureHandler(handler.handlerTag);

    (0, _handlersRegistry.unregisterHandler)(handler.handlerTag, handler.config.testId);
  }
}

function checkGestureCallbacksForWorklets(gesture) {
  if (gesture.config.runOnJS) {
    return;
  }

  var areSomeNotWorklets = gesture.handlers.isWorklet.includes(false);
  var areSomeWorklets = gesture.handlers.isWorklet.includes(true);

  if (areSomeNotWorklets && areSomeWorklets) {
    console.error((0, _utils.tagMessage)("Some of the callbacks in the gesture are worklets and some are not. Either make sure that all calbacks are marked as 'worklet' if you wish to run them on the UI thread or use '.runOnJS(true)' modifier on the gesture explicitly to run all callbacks on the JS thread."));
  }
}

function attachHandlers(_ref) {
  var preparedGesture = _ref.preparedGesture,
      gestureConfig = _ref.gestureConfig,
      gesture = _ref.gesture,
      viewTag = _ref.viewTag;

  if (!preparedGesture.firstExecution) {
    gestureConfig === null || gestureConfig === void 0 ? void 0 : gestureConfig.initialize();
  } else {
    preparedGesture.firstExecution = false;
  }

  setImmediate(function () {
    gestureConfig === null || gestureConfig === void 0 ? void 0 : gestureConfig.prepare();
  });

  var _loop = function _loop(handler) {
    checkGestureCallbacksForWorklets(handler);

    _RNGestureHandlerModule.default.createGestureHandler(handler.handlerName, handler.handlerTag, (0, _gestureHandlerCommon.filterConfig)(handler.config, ALLOWED_PROPS));

    (0, _handlersRegistry.registerHandler)(handler.handlerTag, handler, handler.config.testId);
    setImmediate(function () {
      var requireToFail = [];

      if (handler.config.requireToFail) {
        requireToFail = extractValidHandlerTags(handler.config.requireToFail);
      }

      var simultaneousWith = [];

      if (handler.config.simultaneousWith) {
        simultaneousWith = extractValidHandlerTags(handler.config.simultaneousWith);
      }

      _RNGestureHandlerModule.default.updateGestureHandler(handler.handlerTag, (0, _gestureHandlerCommon.filterConfig)(handler.config, ALLOWED_PROPS, {
        simultaneousHandlers: simultaneousWith,
        waitFor: requireToFail
      }));
    });
  };

  for (var _iterator2 = _createForOfIteratorHelperLoose(gesture), _step2; !(_step2 = _iterator2()).done;) {
    var handler = _step2.value;

    _loop(handler);
  }

  preparedGesture.config = gesture;

  for (var _iterator3 = _createForOfIteratorHelperLoose(preparedGesture.config), _step3; !(_step3 = _iterator3()).done;) {
    var _gesture2 = _step3.value;
    var actionType = _gesture2.shouldUseReanimated ? _ActionType.ActionType.REANIMATED_WORKLET : _ActionType.ActionType.JS_FUNCTION_NEW_API;

    _RNGestureHandlerModule.default.attachGestureHandler(_gesture2.handlerTag, viewTag, actionType);
  }

  if (preparedGesture.animatedHandlers) {
    var isAnimatedGesture = function isAnimatedGesture(g) {
      return g.shouldUseReanimated;
    };

    preparedGesture.animatedHandlers.value = gesture.filter(isAnimatedGesture).map(function (g) {
      return g.handlers;
    });
  }
}

function updateHandlers(preparedGesture, gestureConfig, gesture) {
  gestureConfig === null || gestureConfig === void 0 ? void 0 : gestureConfig.prepare();

  for (var i = 0; i < gesture.length; i++) {
    var handler = preparedGesture.config[i];
    checkGestureCallbacksForWorklets(handler);

    if (gesture[i].handlerTag !== handler.handlerTag) {
      gesture[i].handlerTag = handler.handlerTag;
      gesture[i].handlers.handlerTag = handler.handlerTag;
    }
  }

  setImmediate(function () {
    for (var _i = 0; _i < gesture.length; _i++) {
      var _handler = preparedGesture.config[_i];
      _handler.config = gesture[_i].config;
      _handler.handlers = gesture[_i].handlers;
      var requireToFail = extractValidHandlerTags(_handler.config.requireToFail);
      var simultaneousWith = extractValidHandlerTags(_handler.config.simultaneousWith);

      _RNGestureHandlerModule.default.updateGestureHandler(_handler.handlerTag, (0, _gestureHandlerCommon.filterConfig)(_handler.config, ALLOWED_PROPS, {
        simultaneousHandlers: simultaneousWith,
        waitFor: requireToFail
      }));

      (0, _handlersRegistry.registerHandler)(_handler.handlerTag, _handler, _handler.config.testId);
    }

    if (preparedGesture.animatedHandlers) {
      preparedGesture.animatedHandlers.value = preparedGesture.config.filter(function (g) {
        return g.shouldUseReanimated;
      }).map(function (g) {
        return g.handlers;
      });
    }
  });
}

function needsToReattach(preparedGesture, gesture) {
  if (gesture.length !== preparedGesture.config.length) {
    return true;
  }

  for (var i = 0; i < gesture.length; i++) {
    if (gesture[i].handlerName !== preparedGesture.config[i].handlerName || gesture[i].shouldUseReanimated !== preparedGesture.config[i].shouldUseReanimated) {
      return true;
    }
  }

  return false;
}

function useAnimatedGesture(preparedGesture, needsRebuild) {
  if (!_reanimatedWrapper.Reanimated) {
    return;
  }

  var isStateChangeEvent = function () {
    var _f = function _f(event) {
      return event.oldState != null;
    };

    _f._closure = {};
    _f.asString = "function isStateChangeEvent(event){return event.oldState!=null;}";
    _f.__workletHash = 13883357260557;
    _f.__location = "/home/nom4d/delivery/GuardianDock/node_modules/react-native-gesture-handler/lib/commonjs/handlers/gestures/GestureDetector.js (216:2)";

    global.__reanimatedWorkletInit(_f);

    return _f;
  }();

  var isTouchEvent = function () {
    var _f = function _f(event) {
      return event.eventType != null;
    };

    _f._closure = {};
    _f.asString = "function isTouchEvent(event){return event.eventType!=null;}";
    _f.__workletHash = 15872269086045;
    _f.__location = "/home/nom4d/delivery/GuardianDock/node_modules/react-native-gesture-handler/lib/commonjs/handlers/gestures/GestureDetector.js (222:2)";

    global.__reanimatedWorkletInit(_f);

    return _f;
  }();

  var getHandler = function () {
    var _f = function _f(type, gesture) {
      switch (type) {
        case _gesture.CALLBACK_TYPE.BEGAN:
          return gesture.onBegin;

        case _gesture.CALLBACK_TYPE.START:
          return gesture.onStart;

        case _gesture.CALLBACK_TYPE.UPDATE:
          return gesture.onUpdate;

        case _gesture.CALLBACK_TYPE.CHANGE:
          return gesture.onChange;

        case _gesture.CALLBACK_TYPE.END:
          return gesture.onEnd;

        case _gesture.CALLBACK_TYPE.FINALIZE:
          return gesture.onFinalize;

        case _gesture.CALLBACK_TYPE.TOUCHES_DOWN:
          return gesture.onTouchesDown;

        case _gesture.CALLBACK_TYPE.TOUCHES_MOVE:
          return gesture.onTouchesMove;

        case _gesture.CALLBACK_TYPE.TOUCHES_UP:
          return gesture.onTouchesUp;

        case _gesture.CALLBACK_TYPE.TOUCHES_CANCELLED:
          return gesture.onTouchesCancelled;
      }
    };

    _f._closure = {
      _gesture: {
        CALLBACK_TYPE: {
          BEGAN: _gesture.CALLBACK_TYPE.BEGAN,
          START: _gesture.CALLBACK_TYPE.START,
          UPDATE: _gesture.CALLBACK_TYPE.UPDATE,
          CHANGE: _gesture.CALLBACK_TYPE.CHANGE,
          END: _gesture.CALLBACK_TYPE.END,
          FINALIZE: _gesture.CALLBACK_TYPE.FINALIZE,
          TOUCHES_DOWN: _gesture.CALLBACK_TYPE.TOUCHES_DOWN,
          TOUCHES_MOVE: _gesture.CALLBACK_TYPE.TOUCHES_MOVE,
          TOUCHES_UP: _gesture.CALLBACK_TYPE.TOUCHES_UP,
          TOUCHES_CANCELLED: _gesture.CALLBACK_TYPE.TOUCHES_CANCELLED
        }
      }
    };
    _f.asString = "function getHandler(type,gesture){const{_gesture}=jsThis._closure;{switch(type){case _gesture.CALLBACK_TYPE.BEGAN:return gesture.onBegin;case _gesture.CALLBACK_TYPE.START:return gesture.onStart;case _gesture.CALLBACK_TYPE.UPDATE:return gesture.onUpdate;case _gesture.CALLBACK_TYPE.CHANGE:return gesture.onChange;case _gesture.CALLBACK_TYPE.END:return gesture.onEnd;case _gesture.CALLBACK_TYPE.FINALIZE:return gesture.onFinalize;case _gesture.CALLBACK_TYPE.TOUCHES_DOWN:return gesture.onTouchesDown;case _gesture.CALLBACK_TYPE.TOUCHES_MOVE:return gesture.onTouchesMove;case _gesture.CALLBACK_TYPE.TOUCHES_UP:return gesture.onTouchesUp;case _gesture.CALLBACK_TYPE.TOUCHES_CANCELLED:return gesture.onTouchesCancelled;}}}";
    _f.__workletHash = 10244107023838;
    _f.__location = "/home/nom4d/delivery/GuardianDock/node_modules/react-native-gesture-handler/lib/commonjs/handlers/gestures/GestureDetector.js (228:2)";

    global.__reanimatedWorkletInit(_f);

    return _f;
  }();

  var touchEventTypeToCallbackType = function () {
    var _f = function _f(eventType) {
      switch (eventType) {
        case _EventType.EventType.TOUCHES_DOWN:
          return _gesture.CALLBACK_TYPE.TOUCHES_DOWN;

        case _EventType.EventType.TOUCHES_MOVE:
          return _gesture.CALLBACK_TYPE.TOUCHES_MOVE;

        case _EventType.EventType.TOUCHES_UP:
          return _gesture.CALLBACK_TYPE.TOUCHES_UP;

        case _EventType.EventType.TOUCHES_CANCELLED:
          return _gesture.CALLBACK_TYPE.TOUCHES_CANCELLED;
      }

      return _gesture.CALLBACK_TYPE.UNDEFINED;
    };

    _f._closure = {
      _EventType: {
        EventType: {
          TOUCHES_DOWN: _EventType.EventType.TOUCHES_DOWN,
          TOUCHES_MOVE: _EventType.EventType.TOUCHES_MOVE,
          TOUCHES_UP: _EventType.EventType.TOUCHES_UP,
          TOUCHES_CANCELLED: _EventType.EventType.TOUCHES_CANCELLED
        }
      },
      _gesture: {
        CALLBACK_TYPE: {
          TOUCHES_DOWN: _gesture.CALLBACK_TYPE.TOUCHES_DOWN,
          TOUCHES_MOVE: _gesture.CALLBACK_TYPE.TOUCHES_MOVE,
          TOUCHES_UP: _gesture.CALLBACK_TYPE.TOUCHES_UP,
          TOUCHES_CANCELLED: _gesture.CALLBACK_TYPE.TOUCHES_CANCELLED,
          UNDEFINED: _gesture.CALLBACK_TYPE.UNDEFINED
        }
      }
    };
    _f.asString = "function touchEventTypeToCallbackType(eventType){const{_EventType,_gesture}=jsThis._closure;{switch(eventType){case _EventType.EventType.TOUCHES_DOWN:return _gesture.CALLBACK_TYPE.TOUCHES_DOWN;case _EventType.EventType.TOUCHES_MOVE:return _gesture.CALLBACK_TYPE.TOUCHES_MOVE;case _EventType.EventType.TOUCHES_UP:return _gesture.CALLBACK_TYPE.TOUCHES_UP;case _EventType.EventType.TOUCHES_CANCELLED:return _gesture.CALLBACK_TYPE.TOUCHES_CANCELLED;}return _gesture.CALLBACK_TYPE.UNDEFINED;}}";
    _f.__workletHash = 11890356655602;
    _f.__location = "/home/nom4d/delivery/GuardianDock/node_modules/react-native-gesture-handler/lib/commonjs/handlers/gestures/GestureDetector.js (264:2)";

    global.__reanimatedWorkletInit(_f);

    return _f;
  }();

  var runWorklet = function () {
    var _f = function _f(type, gesture, event) {
      var handler = getHandler(type, gesture);

      if (gesture.isWorklet[type]) {
        for (var _len = arguments.length, args = new Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {
          args[_key - 3] = arguments[_key];
        }

        handler === null || handler === void 0 ? void 0 : handler.apply(void 0, [event].concat(args));
      } else if (handler) {
        console.warn((0, _utils.tagMessage)('Animated gesture callback must be a worklet'));
      }
    };

    _f._closure = {
      getHandler: getHandler,
      _utils: {
        tagMessage: _utils.tagMessage
      }
    };
    _f.asString = "function runWorklet(type,gesture,event,...args){const{getHandler,_utils}=jsThis._closure;{const handler=getHandler(type,gesture);if(gesture.isWorklet[type]){handler===null||handler===void 0?void 0:handler(event,...args);}else if(handler){console.warn((0,_utils.tagMessage)('Animated gesture callback must be a worklet'));}}}";
    _f.__workletHash = 1985407898573;
    _f.__location = "/home/nom4d/delivery/GuardianDock/node_modules/react-native-gesture-handler/lib/commonjs/handlers/gestures/GestureDetector.js (284:2)";

    global.__reanimatedWorkletInit(_f);

    return _f;
  }();

  var sharedHandlersCallbacks = _reanimatedWrapper.Reanimated.useSharedValue(null);

  var lastUpdateEvent = _reanimatedWrapper.Reanimated.useSharedValue([]);

  var stateControllers = [];

  var callback = function () {
    var _f = function _f(event) {
      var currentCallback = sharedHandlersCallbacks.value;

      if (!currentCallback) {
        return;
      }

      for (var i = 0; i < currentCallback.length; i++) {
        var gesture = currentCallback[i];

        if (event.handlerTag === gesture.handlerTag) {
          if (isStateChangeEvent(event)) {
            if (event.oldState === _State.State.UNDETERMINED && event.state === _State.State.BEGAN) {
              runWorklet(_gesture.CALLBACK_TYPE.BEGAN, gesture, event);
            } else if ((event.oldState === _State.State.BEGAN || event.oldState === _State.State.UNDETERMINED) && event.state === _State.State.ACTIVE) {
              runWorklet(_gesture.CALLBACK_TYPE.START, gesture, event);
              lastUpdateEvent.value[gesture.handlerTag] = undefined;
            } else if (event.oldState !== event.state && event.state === _State.State.END) {
              if (event.oldState === _State.State.ACTIVE) {
                runWorklet(_gesture.CALLBACK_TYPE.END, gesture, event, true);
              }

              runWorklet(_gesture.CALLBACK_TYPE.FINALIZE, gesture, event, true);
            } else if ((event.state === _State.State.FAILED || event.state === _State.State.CANCELLED) && event.state !== event.oldState) {
              if (event.oldState === _State.State.ACTIVE) {
                runWorklet(_gesture.CALLBACK_TYPE.END, gesture, event, false);
              }

              runWorklet(_gesture.CALLBACK_TYPE.FINALIZE, gesture, event, false);
            }
          } else if (isTouchEvent(event)) {
            if (!stateControllers[i]) {
              stateControllers[i] = _gestureStateManager.GestureStateManager.create(event.handlerTag);
            }

            if (event.eventType !== _EventType.EventType.UNDETERMINED) {
              runWorklet(touchEventTypeToCallbackType(event.eventType), gesture, event, stateControllers[i]);
            }
          } else {
            runWorklet(_gesture.CALLBACK_TYPE.UPDATE, gesture, event);

            if (gesture.onChange && gesture.changeEventCalculator) {
              var _gesture$changeEventC;

              runWorklet(_gesture.CALLBACK_TYPE.CHANGE, gesture, (_gesture$changeEventC = gesture.changeEventCalculator) === null || _gesture$changeEventC === void 0 ? void 0 : _gesture$changeEventC.call(gesture, event, lastUpdateEvent.value[gesture.handlerTag]));
              lastUpdateEvent.value[gesture.handlerTag] = event;
            }
          }
        }
      }
    };

    _f._closure = {
      sharedHandlersCallbacks: sharedHandlersCallbacks,
      isStateChangeEvent: isStateChangeEvent,
      _State: {
        State: {
          UNDETERMINED: _State.State.UNDETERMINED,
          BEGAN: _State.State.BEGAN,
          ACTIVE: _State.State.ACTIVE,
          END: _State.State.END,
          FAILED: _State.State.FAILED,
          CANCELLED: _State.State.CANCELLED
        }
      },
      runWorklet: runWorklet,
      _gesture: {
        CALLBACK_TYPE: {
          BEGAN: _gesture.CALLBACK_TYPE.BEGAN,
          START: _gesture.CALLBACK_TYPE.START,
          END: _gesture.CALLBACK_TYPE.END,
          FINALIZE: _gesture.CALLBACK_TYPE.FINALIZE,
          UPDATE: _gesture.CALLBACK_TYPE.UPDATE,
          CHANGE: _gesture.CALLBACK_TYPE.CHANGE
        }
      },
      lastUpdateEvent: lastUpdateEvent,
      isTouchEvent: isTouchEvent,
      stateControllers: stateControllers,
      _gestureStateManager: {
        GestureStateManager: {
          create: _gestureStateManager.GestureStateManager.create
        }
      },
      _EventType: {
        EventType: {
          UNDETERMINED: _EventType.EventType.UNDETERMINED
        }
      },
      touchEventTypeToCallbackType: touchEventTypeToCallbackType
    };
    _f.asString = "function _f(event){const{sharedHandlersCallbacks,isStateChangeEvent,_State,runWorklet,_gesture,lastUpdateEvent,isTouchEvent,stateControllers,_gestureStateManager,_EventType,touchEventTypeToCallbackType}=jsThis._closure;{const currentCallback=sharedHandlersCallbacks.value;if(!currentCallback){return;}for(let i=0;i<currentCallback.length;i++){const gesture=currentCallback[i];if(event.handlerTag===gesture.handlerTag){if(isStateChangeEvent(event)){if(event.oldState===_State.State.UNDETERMINED&&event.state===_State.State.BEGAN){runWorklet(_gesture.CALLBACK_TYPE.BEGAN,gesture,event);}else if((event.oldState===_State.State.BEGAN||event.oldState===_State.State.UNDETERMINED)&&event.state===_State.State.ACTIVE){runWorklet(_gesture.CALLBACK_TYPE.START,gesture,event);lastUpdateEvent.value[gesture.handlerTag]=undefined;}else if(event.oldState!==event.state&&event.state===_State.State.END){if(event.oldState===_State.State.ACTIVE){runWorklet(_gesture.CALLBACK_TYPE.END,gesture,event,true);}runWorklet(_gesture.CALLBACK_TYPE.FINALIZE,gesture,event,true);}else if((event.state===_State.State.FAILED||event.state===_State.State.CANCELLED)&&event.state!==event.oldState){if(event.oldState===_State.State.ACTIVE){runWorklet(_gesture.CALLBACK_TYPE.END,gesture,event,false);}runWorklet(_gesture.CALLBACK_TYPE.FINALIZE,gesture,event,false);}}else if(isTouchEvent(event)){if(!stateControllers[i]){stateControllers[i]=_gestureStateManager.GestureStateManager.create(event.handlerTag);}if(event.eventType!==_EventType.EventType.UNDETERMINED){runWorklet(touchEventTypeToCallbackType(event.eventType),gesture,event,stateControllers[i]);}}else{runWorklet(_gesture.CALLBACK_TYPE.UPDATE,gesture,event);if(gesture.onChange&&gesture.changeEventCalculator){var _gesture$changeEventC;runWorklet(_gesture.CALLBACK_TYPE.CHANGE,gesture,(_gesture$changeEventC=gesture.changeEventCalculator)===null||_gesture$changeEventC===void 0?void 0:_gesture$changeEventC.call(gesture,event,lastUpdateEvent.value[gesture.handlerTag]));lastUpdateEvent.value[gesture.handlerTag]=event;}}}}}}";
    _f.__workletHash = 1576047656941;
    _f.__location = "/home/nom4d/delivery/GuardianDock/node_modules/react-native-gesture-handler/lib/commonjs/handlers/gestures/GestureDetector.js (309:19)";

    global.__reanimatedWorkletInit(_f);

    return _f;
  }();

  var event = _reanimatedWrapper.Reanimated.useEvent(callback, ['onGestureHandlerStateChange', 'onGestureHandlerEvent'], needsRebuild);

  preparedGesture.animatedEventHandler = event;
  preparedGesture.animatedHandlers = sharedHandlersCallbacks;
}

var GestureDetector = function GestureDetector(props) {
  var _gestureConfig$toGest, _gestureConfig$toGest2;

  var gestureConfig = props.gesture;
  var gesture = (_gestureConfig$toGest = gestureConfig === null || gestureConfig === void 0 ? void 0 : (_gestureConfig$toGest2 = gestureConfig.toGestureArray) === null || _gestureConfig$toGest2 === void 0 ? void 0 : _gestureConfig$toGest2.call(gestureConfig)) !== null && _gestureConfig$toGest !== void 0 ? _gestureConfig$toGest : [];
  var useReanimatedHook = gesture.some(function (g) {
    return g.shouldUseReanimated;
  });
  var viewRef = (0, _react.useRef)(null);
  var firstRenderRef = (0, _react.useRef)(true);

  var preparedGesture = _react.default.useRef({
    config: gesture,
    animatedEventHandler: null,
    animatedHandlers: null,
    firstExecution: true,
    useReanimatedHook: useReanimatedHook
  }).current;

  if (useReanimatedHook !== preparedGesture.useReanimatedHook) {
    throw new Error((0, _utils.tagMessage)('You cannot change the thread the callbacks are ran on while the app is running'));
  }

  var needsToRebuildReanimatedEvent = preparedGesture.firstExecution || needsToReattach(preparedGesture, gesture);

  if (preparedGesture.firstExecution) {
    var _gestureConfig$initia;

    gestureConfig === null || gestureConfig === void 0 ? void 0 : (_gestureConfig$initia = gestureConfig.initialize) === null || _gestureConfig$initia === void 0 ? void 0 : _gestureConfig$initia.call(gestureConfig);
  }

  if (useReanimatedHook) {
    useAnimatedGesture(preparedGesture, needsToRebuildReanimatedEvent);
  }

  (0, _react.useEffect)(function () {
    firstRenderRef.current = true;
    var viewTag = (0, _gestureHandlerCommon.findNodeHandle)(viewRef.current);
    attachHandlers({
      preparedGesture: preparedGesture,
      gestureConfig: gestureConfig,
      gesture: gesture,
      viewTag: viewTag
    });
    return function () {
      dropHandlers(preparedGesture);
    };
  }, []);
  (0, _react.useEffect)(function () {
    if (!firstRenderRef.current) {
      var viewTag = (0, _gestureHandlerCommon.findNodeHandle)(viewRef.current);

      if (needsToReattach(preparedGesture, gesture)) {
        dropHandlers(preparedGesture);
        attachHandlers({
          preparedGesture: preparedGesture,
          gestureConfig: gestureConfig,
          gesture: gesture,
          viewTag: viewTag
        });
      } else {
        updateHandlers(preparedGesture, gestureConfig, gesture);
      }
    } else {
      firstRenderRef.current = false;
    }
  }, [props]);

  var refFunction = function refFunction(ref) {
    if (ref !== null) {
      viewRef.current = ref;

      if ((0, _utils.isFabric)()) {
        var node = (0, _getShadowNodeFromRef.getShadowNodeFromRef)(ref);

        if (global.isFormsStackingContext(node) === false) {
          setImmediate(function () {
            console.error((0, _utils.tagMessage)('GestureDetector has received a child that may get view-flattened. ' + '\nTo prevent it from misbehaving you need to wrap the child with a `<View collapsable={false}>`.'));
          });
        }
      }
    }
  };

  if (useReanimatedHook) {
    return _react.default.createElement(AnimatedWrap, {
      ref: refFunction,
      onGestureHandlerEvent: preparedGesture.animatedEventHandler
    }, props.children);
  } else {
    return _react.default.createElement(Wrap, {
      ref: refFunction
    }, props.children);
  }
};

exports.GestureDetector = GestureDetector;

var Wrap = function (_react$default$Compon) {
  (0, _inherits2.default)(Wrap, _react$default$Compon);

  var _super = _createSuper(Wrap);

  function Wrap() {
    (0, _classCallCheck2.default)(this, Wrap);
    return _super.apply(this, arguments);
  }

  (0, _createClass2.default)(Wrap, [{
    key: "render",
    value: function render() {
      var child = _react.default.Children.only(this.props.children);

      return _react.default.cloneElement(child, {
        collapsable: false
      }, child.props.children);
    }
  }]);
  return Wrap;
}(_react.default.Component);

var AnimatedWrap = (_Reanimated$default$c = _reanimatedWrapper.Reanimated === null || _reanimatedWrapper.Reanimated === void 0 ? void 0 : (_Reanimated$default = _reanimatedWrapper.Reanimated.default) === null || _Reanimated$default === void 0 ? void 0 : _Reanimated$default.createAnimatedComponent(Wrap)) !== null && _Reanimated$default$c !== void 0 ? _Reanimated$default$c : Wrap;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,