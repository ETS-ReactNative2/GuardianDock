{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;IAQSA,qB;uBACPC,O,EACAC,Q,EACA;AAEA,QAAIC,aAAJ;;AACA,QAAID,QAAQ,KAAKE,SAAjB,EAA4B;AAC1BD,mBAAa,GAAG;AACdE,mBAAW,EAAEJ,OAAO,CAACK;AADP,OAAhBH;AADF,WAIO;AACLA,mBAAa,GAAG;AACdE,mBAAW,EAAEJ,OAAO,CAACK,KAARL,GAAgBC,QAAQ,CAACI;AADxB,OAAhBH;AAGD;;AAED,sCAAYF,OAAZ,EAAwBE,aAAxB;AACD,G;;;;;;;;;;;;IAEYI,Y;;;;;AAIXC,0BAAc;AAAA;;AAAA;AACZ;AAEA,UAAKC,WAAL,GAAmB,qBAAnB;AAHY;AAIb;;;;WAEDC,kBACEC,QADFD,EAME;AAEA,WAAKE,QAAL,CAAcZ,qBAAd,GAAsCA,qBAAtC;AACA,oHAAsBW,QAAtB;AACD;;;EApB+BE,6B","names":["changeEventCalculator","current","previous","changePayload","undefined","scaleChange","scale","PinchGesture","constructor","handlerName","onChange","callback","handlers","ContinousBaseGesture"],"sources":["pinchGesture.ts"],"sourcesContent":["import { ContinousBaseGesture } from './gesture';\nimport { PinchGestureHandlerEventPayload } from '../PinchGestureHandler';\nimport { GestureUpdateEvent } from '../gestureHandlerCommon';\n\nexport type PinchGestureChangeEventPayload = {\n  scaleChange: number;\n};\n\nfunction changeEventCalculator(\n  current: GestureUpdateEvent<PinchGestureHandlerEventPayload>,\n  previous?: GestureUpdateEvent<PinchGestureHandlerEventPayload>\n) {\n  'worklet';\n  let changePayload: PinchGestureChangeEventPayload;\n  if (previous === undefined) {\n    changePayload = {\n      scaleChange: current.scale,\n    };\n  } else {\n    changePayload = {\n      scaleChange: current.scale / previous.scale,\n    };\n  }\n\n  return { ...current, ...changePayload };\n}\n\nexport class PinchGesture extends ContinousBaseGesture<\n  PinchGestureHandlerEventPayload,\n  PinchGestureChangeEventPayload\n> {\n  constructor() {\n    super();\n\n    this.handlerName = 'PinchGestureHandler';\n  }\n\n  onChange(\n    callback: (\n      event: GestureUpdateEvent<\n        PinchGestureHandlerEventPayload & PinchGestureChangeEventPayload\n      >\n    ) => void\n  ) {\n    // @ts-ignore TS being overprotective, PinchGestureHandlerEventPayload is Record\n    this.handlers.changeEventCalculator = changeEventCalculator;\n    return super.onChange(callback);\n  }\n}\n\nexport type PinchGestureType = InstanceType<typeof PinchGesture>;\n"]}