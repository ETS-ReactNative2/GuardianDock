{"version":3,"mappings":"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","names":["getStateFromParams","params","state","screen","routes","name","undefined","useLinkProps","to","action","root","React","useContext","NavigationContainerRefContext","navigation","NavigationHelpersContext","LinkingContext","options","linkTo","onPress","e","shouldHandle","Platform","OS","defaultPrevented","metaKey","altKey","ctrlKey","shiftKey","button","includes","currentTarget","_e$currentTarget","target","preventDefault","dispatch","Error","getPathFromStateHelper","getPathFromState","href","config","accessibilityRole"],"sources":["useLinkProps.tsx"],"sourcesContent":["import {\n  getPathFromState,\n  NavigationAction,\n  NavigationContainerRefContext,\n  NavigationHelpersContext,\n  NavigatorScreenParams,\n  ParamListBase,\n} from '@react-navigation/core';\nimport type { NavigationState, PartialState } from '@react-navigation/routers';\nimport * as React from 'react';\nimport { GestureResponderEvent, Platform } from 'react-native';\n\nimport LinkingContext from './LinkingContext';\nimport useLinkTo, { To } from './useLinkTo';\n\ntype Props<ParamList extends ReactNavigation.RootParamList> = {\n  to: To<ParamList>;\n  action?: NavigationAction;\n};\n\nconst getStateFromParams = (\n  params: NavigatorScreenParams<ParamListBase, NavigationState> | undefined\n): PartialState<NavigationState> | NavigationState | undefined => {\n  if (params?.state) {\n    return params.state;\n  }\n\n  if (params?.screen) {\n    return {\n      routes: [\n        {\n          name: params.screen,\n          params: params.params,\n          // @ts-expect-error\n          state: params.screen\n            ? getStateFromParams(\n                params.params as\n                  | NavigatorScreenParams<ParamListBase, NavigationState>\n                  | undefined\n              )\n            : undefined,\n        },\n      ],\n    };\n  }\n\n  return undefined;\n};\n\n/**\n * Hook to get props for an anchor tag so it can work with in page navigation.\n *\n * @param props.to Absolute path to screen (e.g. `/feeds/hot`).\n * @param props.action Optional action to use for in-page navigation. By default, the path is parsed to an action based on linking config.\n */\nexport default function useLinkProps<\n  ParamList extends ReactNavigation.RootParamList\n>({ to, action }: Props<ParamList>) {\n  const root = React.useContext(NavigationContainerRefContext);\n  const navigation = React.useContext(NavigationHelpersContext);\n  const { options } = React.useContext(LinkingContext);\n  const linkTo = useLinkTo<ParamList>();\n\n  const onPress = (\n    e?: React.MouseEvent<HTMLAnchorElement, MouseEvent> | GestureResponderEvent\n  ) => {\n    let shouldHandle = false;\n\n    if (Platform.OS !== 'web' || !e) {\n      shouldHandle = e ? !e.defaultPrevented : true;\n    } else if (\n      !e.defaultPrevented && // onPress prevented default\n      // @ts-expect-error: these properties exist on web, but not in React Native\n      !(e.metaKey || e.altKey || e.ctrlKey || e.shiftKey) && // ignore clicks with modifier keys\n      // @ts-expect-error: these properties exist on web, but not in React Native\n      (e.button == null || e.button === 0) && // ignore everything but left clicks\n      // @ts-expect-error: these properties exist on web, but not in React Native\n      [undefined, null, '', 'self'].includes(e.currentTarget?.target) // let browser handle \"target=_blank\" etc.\n    ) {\n      e.preventDefault();\n      shouldHandle = true;\n    }\n\n    if (shouldHandle) {\n      if (action) {\n        if (navigation) {\n          navigation.dispatch(action);\n        } else if (root) {\n          root.dispatch(action);\n        } else {\n          throw new Error(\n            \"Couldn't find a navigation object. Is your component inside NavigationContainer?\"\n          );\n        }\n      } else {\n        linkTo(to);\n      }\n    }\n  };\n\n  const getPathFromStateHelper = options?.getPathFromState ?? getPathFromState;\n\n  const href =\n    typeof to === 'string'\n      ? to\n      : getPathFromStateHelper(\n          {\n            routes: [\n              {\n                name: to.screen,\n                // @ts-expect-error\n                params: to.params,\n                // @ts-expect-error\n                state: getStateFromParams(to.params),\n              },\n            ],\n          },\n          options?.config\n        );\n\n  return {\n    href,\n    accessibilityRole: 'link' as const,\n    onPress,\n  };\n}\n"]}