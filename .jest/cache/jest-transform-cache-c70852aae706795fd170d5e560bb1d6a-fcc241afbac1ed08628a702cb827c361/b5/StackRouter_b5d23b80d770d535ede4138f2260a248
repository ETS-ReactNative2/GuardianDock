dfb95cc1901efe296152386ac42d0531
"use strict";

var _interopRequireDefault2 = require("@babel/runtime/helpers/interopRequireDefault");

var _toConsumableArray2 = _interopRequireDefault2(require("@babel/runtime/helpers/toConsumableArray"));

var _extends2 = _interopRequireDefault2(require("@babel/runtime/helpers/extends"));

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = StackRouter;
exports.StackActions = void 0;

var _nonSecure = require("nanoid/non-secure");

var _BaseRouter = _interopRequireDefault(require("./BaseRouter"));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

var StackActions = {
  replace: function replace(name, params) {
    return {
      type: 'REPLACE',
      payload: {
        name: name,
        params: params
      }
    };
  },
  push: function push(name, params) {
    return {
      type: 'PUSH',
      payload: {
        name: name,
        params: params
      }
    };
  },
  pop: function pop() {
    var count = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
    return {
      type: 'POP',
      payload: {
        count: count
      }
    };
  },
  popToTop: function popToTop() {
    return {
      type: 'POP_TO_TOP'
    };
  }
};
exports.StackActions = StackActions;

function StackRouter(options) {
  var router = (0, _extends2.default)({}, _BaseRouter.default, {
    type: 'stack',
    getInitialState: function getInitialState(_ref) {
      var routeNames = _ref.routeNames,
          routeParamList = _ref.routeParamList;
      var initialRouteName = options.initialRouteName !== undefined && routeNames.includes(options.initialRouteName) ? options.initialRouteName : routeNames[0];
      return {
        stale: false,
        type: 'stack',
        key: "stack-" + (0, _nonSecure.nanoid)(),
        index: 0,
        routeNames: routeNames,
        routes: [{
          key: initialRouteName + "-" + (0, _nonSecure.nanoid)(),
          name: initialRouteName,
          params: routeParamList[initialRouteName]
        }]
      };
    },
    getRehydratedState: function getRehydratedState(partialState, _ref2) {
      var routeNames = _ref2.routeNames,
          routeParamList = _ref2.routeParamList;
      var state = partialState;

      if (state.stale === false) {
        return state;
      }

      var routes = state.routes.filter(function (route) {
        return routeNames.includes(route.name);
      }).map(function (route) {
        return (0, _extends2.default)({}, route, {
          key: route.key || route.name + "-" + (0, _nonSecure.nanoid)(),
          params: routeParamList[route.name] !== undefined ? (0, _extends2.default)({}, routeParamList[route.name], route.params) : route.params
        });
      });

      if (routes.length === 0) {
        var initialRouteName = options.initialRouteName !== undefined ? options.initialRouteName : routeNames[0];
        routes.push({
          key: initialRouteName + "-" + (0, _nonSecure.nanoid)(),
          name: initialRouteName,
          params: routeParamList[initialRouteName]
        });
      }

      return {
        stale: false,
        type: 'stack',
        key: "stack-" + (0, _nonSecure.nanoid)(),
        index: routes.length - 1,
        routeNames: routeNames,
        routes: routes
      };
    },
    getStateForRouteNamesChange: function getStateForRouteNamesChange(state, _ref3) {
      var routeNames = _ref3.routeNames,
          routeParamList = _ref3.routeParamList,
          routeKeyChanges = _ref3.routeKeyChanges;
      var routes = state.routes.filter(function (route) {
        return routeNames.includes(route.name) && !routeKeyChanges.includes(route.name);
      });

      if (routes.length === 0) {
        var initialRouteName = options.initialRouteName !== undefined && routeNames.includes(options.initialRouteName) ? options.initialRouteName : routeNames[0];
        routes.push({
          key: initialRouteName + "-" + (0, _nonSecure.nanoid)(),
          name: initialRouteName,
          params: routeParamList[initialRouteName]
        });
      }

      return (0, _extends2.default)({}, state, {
        routeNames: routeNames,
        routes: routes,
        index: Math.min(state.index, routes.length - 1)
      });
    },
    getStateForRouteFocus: function getStateForRouteFocus(state, key) {
      var index = state.routes.findIndex(function (r) {
        return r.key === key;
      });

      if (index === -1 || index === state.index) {
        return state;
      }

      return (0, _extends2.default)({}, state, {
        index: index,
        routes: state.routes.slice(0, index + 1)
      });
    },
    getStateForAction: function getStateForAction(state, action, options) {
      var routeParamList = options.routeParamList;

      switch (action.type) {
        case 'REPLACE':
          {
            var index = action.target === state.key && action.source ? state.routes.findIndex(function (r) {
              return r.key === action.source;
            }) : state.index;

            if (index === -1) {
              return null;
            }

            var _action$payload = action.payload,
                name = _action$payload.name,
                key = _action$payload.key,
                params = _action$payload.params;

            if (!state.routeNames.includes(name)) {
              return null;
            }

            return (0, _extends2.default)({}, state, {
              routes: state.routes.map(function (route, i) {
                return i === index ? {
                  key: key !== undefined ? key : name + "-" + (0, _nonSecure.nanoid)(),
                  name: name,
                  params: routeParamList[name] !== undefined ? (0, _extends2.default)({}, routeParamList[name], params) : params
                } : route;
              })
            });
          }

        case 'PUSH':
          if (state.routeNames.includes(action.payload.name)) {
            var getId = options.routeGetIdList[action.payload.name];
            var id = getId === null || getId === void 0 ? void 0 : getId({
              params: action.payload.params
            });
            var route = id ? state.routes.find(function (route) {
              return route.name === action.payload.name && id === (getId === null || getId === void 0 ? void 0 : getId({
                params: route.params
              }));
            }) : undefined;
            var routes;

            if (route) {
              routes = state.routes.filter(function (r) {
                return r.key !== route.key;
              });
              routes.push((0, _extends2.default)({}, route, {
                params: routeParamList[action.payload.name] !== undefined ? (0, _extends2.default)({}, routeParamList[action.payload.name], action.payload.params) : action.payload.params
              }));
            } else {
              routes = [].concat((0, _toConsumableArray2.default)(state.routes), [{
                key: action.payload.name + "-" + (0, _nonSecure.nanoid)(),
                name: action.payload.name,
                params: routeParamList[action.payload.name] !== undefined ? (0, _extends2.default)({}, routeParamList[action.payload.name], action.payload.params) : action.payload.params
              }]);
            }

            return (0, _extends2.default)({}, state, {
              index: routes.length - 1,
              routes: routes
            });
          }

          return null;

        case 'POP':
          {
            var _index = action.target === state.key && action.source ? state.routes.findIndex(function (r) {
              return r.key === action.source;
            }) : state.index;

            if (_index > 0) {
              var count = Math.max(_index - action.payload.count + 1, 1);

              var _routes = state.routes.slice(0, count).concat(state.routes.slice(_index + 1));

              return (0, _extends2.default)({}, state, {
                index: _routes.length - 1,
                routes: _routes
              });
            }

            return null;
          }

        case 'POP_TO_TOP':
          return router.getStateForAction(state, {
            type: 'POP',
            payload: {
              count: state.routes.length - 1
            }
          }, options);

        case 'NAVIGATE':
          if (action.payload.name !== undefined && !state.routeNames.includes(action.payload.name)) {
            return null;
          }

          if (action.payload.key || action.payload.name) {
            var _action$payload$path;

            var _index2 = -1;

            var _getId = action.payload.key === undefined && action.payload.name !== undefined ? options.routeGetIdList[action.payload.name] : undefined;

            var _id = _getId === null || _getId === void 0 ? void 0 : _getId({
              params: action.payload.params
            });

            if (_id) {
              _index2 = state.routes.findIndex(function (route) {
                return route.name === action.payload.name && _id === (_getId === null || _getId === void 0 ? void 0 : _getId({
                  params: route.params
                }));
              });
            } else if (state.routes[state.index].name === action.payload.name && action.payload.key === undefined || state.routes[state.index].key === action.payload.key) {
              _index2 = state.index;
            } else {
              for (var i = state.routes.length - 1; i >= 0; i--) {
                if (state.routes[i].name === action.payload.name && action.payload.key === undefined || state.routes[i].key === action.payload.key) {
                  _index2 = i;
                  break;
                }
              }
            }

            if (_index2 === -1 && action.payload.key && action.payload.name === undefined) {
              return null;
            }

            if (_index2 === -1 && action.payload.name !== undefined) {
              var _action$payload$key;

              var _routes2 = [].concat((0, _toConsumableArray2.default)(state.routes), [{
                key: (_action$payload$key = action.payload.key) !== null && _action$payload$key !== void 0 ? _action$payload$key : action.payload.name + "-" + (0, _nonSecure.nanoid)(),
                name: action.payload.name,
                path: action.payload.path,
                params: routeParamList[action.payload.name] !== undefined ? (0, _extends2.default)({}, routeParamList[action.payload.name], action.payload.params) : action.payload.params
              }]);

              return (0, _extends2.default)({}, state, {
                routes: _routes2,
                index: _routes2.length - 1
              });
            }

            var _route = state.routes[_index2];

            var _params;

            if (action.payload.merge) {
              _params = action.payload.params !== undefined || routeParamList[_route.name] !== undefined ? (0, _extends2.default)({}, routeParamList[_route.name], _route.params, action.payload.params) : _route.params;
            } else {
              _params = routeParamList[_route.name] !== undefined ? (0, _extends2.default)({}, routeParamList[_route.name], action.payload.params) : action.payload.params;
            }

            return (0, _extends2.default)({}, state, {
              index: _index2,
              routes: [].concat((0, _toConsumableArray2.default)(state.routes.slice(0, _index2)), [_params !== _route.params || action.payload.path && action.payload.path !== _route.path ? (0, _extends2.default)({}, _route, {
                path: (_action$payload$path = action.payload.path) !== null && _action$payload$path !== void 0 ? _action$payload$path : _route.path,
                params: _params
              }) : state.routes[_index2]])
            });
          }

          return null;

        case 'GO_BACK':
          if (state.index > 0) {
            return router.getStateForAction(state, {
              type: 'POP',
              payload: {
                count: 1
              },
              target: action.target,
              source: action.source
            }, options);
          }

          return null;

        default:
          return _BaseRouter.default.getStateForAction(state, action);
      }
    },
    actionCreators: StackActions
  });
  return router;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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UktDLENBQVA7QUFVRDs7QUFFRCxpQkFBTyxJQUFQOztBQUVGO0FBQ0UsaUJBQU9DLG9CQUFXMEIsaUJBQVgxQixDQUE2QmEsS0FBN0JiLEVBQW9DMkIsTUFBcEMzQixDQUFQO0FBcFFKO0FBNUhBLEtBQUg7QUFvWUN1QyxrQkFBYyxFQUFFcEQ7QUFwWWpCLElBSEQ7QUEwWUEsU0FBT1ksTUFBUDtBQUNEIiwibmFtZXMiOlsiU3RhY2tBY3Rpb25zIiwicmVwbGFjZSIsIm5hbWUiLCJwYXJhbXMiLCJ0eXBlIiwicGF5bG9hZCIsInB1c2giLCJwb3AiLCJjb3VudCIsInBvcFRvVG9wIiwiU3RhY2tSb3V0ZXIiLCJvcHRpb25zIiwicm91dGVyIiwiQmFzZVJvdXRlciIsImdldEluaXRpYWxTdGF0ZSIsInJvdXRlTmFtZXMiLCJyb3V0ZVBhcmFtTGlzdCIsImluaXRpYWxSb3V0ZU5hbWUiLCJ1bmRlZmluZWQiLCJpbmNsdWRlcyIsInN0YWxlIiwia2V5IiwiaW5kZXgiLCJyb3V0ZXMiLCJnZXRSZWh5ZHJhdGVkU3RhdGUiLCJwYXJ0aWFsU3RhdGUiLCJzdGF0ZSIsImZpbHRlciIsInJvdXRlIiwibWFwIiwibGVuZ3RoIiwiZ2V0U3RhdGVGb3JSb3V0ZU5hbWVzQ2hhbmdlIiwicm91dGVLZXlDaGFuZ2VzIiwiTWF0aCIsIm1pbiIsImdldFN0YXRlRm9yUm91dGVGb2N1cyIsImZpbmRJbmRleCIsInIiLCJzbGljZSIsImdldFN0YXRlRm9yQWN0aW9uIiwiYWN0aW9uIiwidGFyZ2V0Iiwic291cmNlIiwiaSIsImdldElkIiwicm91dGVHZXRJZExpc3QiLCJpZCIsImZpbmQiLCJtYXgiLCJjb25jYXQiLCJwYXRoIiwibWVyZ2UiLCJhY3Rpb25DcmVhdG9ycyJdLCJzb3VyY2VzIjpbIlN0YWNrUm91dGVyLnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBuYW5vaWQgfSBmcm9tICduYW5vaWQvbm9uLXNlY3VyZSc7XG5cbmltcG9ydCBCYXNlUm91dGVyIGZyb20gJy4vQmFzZVJvdXRlcic7XG5pbXBvcnQgdHlwZSB7XG4gIENvbW1vbk5hdmlnYXRpb25BY3Rpb24sXG4gIERlZmF1bHRSb3V0ZXJPcHRpb25zLFxuICBOYXZpZ2F0aW9uU3RhdGUsXG4gIFBhcmFtTGlzdEJhc2UsXG4gIFJvdXRlLFxuICBSb3V0ZXIsXG59IGZyb20gJy4vdHlwZXMnO1xuXG5leHBvcnQgdHlwZSBTdGFja0FjdGlvblR5cGUgPVxuICB8IHtcbiAgICAgIHR5cGU6ICdSRVBMQUNFJztcbiAgICAgIHBheWxvYWQ6IHsgbmFtZTogc3RyaW5nOyBrZXk/OiBzdHJpbmcgfCB1bmRlZmluZWQ7IHBhcmFtcz86IG9iamVjdCB9O1xuICAgICAgc291cmNlPzogc3RyaW5nO1xuICAgICAgdGFyZ2V0Pzogc3RyaW5nO1xuICAgIH1cbiAgfCB7XG4gICAgICB0eXBlOiAnUFVTSCc7XG4gICAgICBwYXlsb2FkOiB7IG5hbWU6IHN0cmluZzsgcGFyYW1zPzogb2JqZWN0IH07XG4gICAgICBzb3VyY2U/OiBzdHJpbmc7XG4gICAgICB0YXJnZXQ/OiBzdHJpbmc7XG4gICAgfVxuICB8IHtcbiAgICAgIHR5cGU6ICdQT1AnO1xuICAgICAgcGF5bG9hZDogeyBjb3VudDogbnVtYmVyIH07XG4gICAgICBzb3VyY2U/OiBzdHJpbmc7XG4gICAgICB0YXJnZXQ/OiBzdHJpbmc7XG4gICAgfVxuICB8IHtcbiAgICAgIHR5cGU6ICdQT1BfVE9fVE9QJztcbiAgICAgIHNvdXJjZT86IHN0cmluZztcbiAgICAgIHRhcmdldD86IHN0cmluZztcbiAgICB9O1xuXG5leHBvcnQgdHlwZSBTdGFja1JvdXRlck9wdGlvbnMgPSBEZWZhdWx0Um91dGVyT3B0aW9ucztcblxuZXhwb3J0IHR5cGUgU3RhY2tOYXZpZ2F0aW9uU3RhdGU8UGFyYW1MaXN0IGV4dGVuZHMgUGFyYW1MaXN0QmFzZT4gPVxuICBOYXZpZ2F0aW9uU3RhdGU8UGFyYW1MaXN0PiAmIHtcbiAgICAvKipcbiAgICAgKiBUeXBlIG9mIHRoZSByb3V0ZXIsIGluIHRoaXMgY2FzZSwgaXQncyBzdGFjay5cbiAgICAgKi9cbiAgICB0eXBlOiAnc3RhY2snO1xuICB9O1xuXG5leHBvcnQgdHlwZSBTdGFja0FjdGlvbkhlbHBlcnM8UGFyYW1MaXN0IGV4dGVuZHMgUGFyYW1MaXN0QmFzZT4gPSB7XG4gIC8qKlxuICAgKiBSZXBsYWNlIHRoZSBjdXJyZW50IHJvdXRlIHdpdGggYSBuZXcgb25lLlxuICAgKlxuICAgKiBAcGFyYW0gbmFtZSBSb3V0ZSBuYW1lIG9mIHRoZSBuZXcgcm91dGUuXG4gICAqIEBwYXJhbSBbcGFyYW1zXSBQYXJhbXMgb2JqZWN0IGZvciB0aGUgbmV3IHJvdXRlLlxuICAgKi9cbiAgcmVwbGFjZTxSb3V0ZU5hbWUgZXh0ZW5kcyBrZXlvZiBQYXJhbUxpc3Q+KFxuICAgIC4uLmFyZ3M6IHVuZGVmaW5lZCBleHRlbmRzIFBhcmFtTGlzdFtSb3V0ZU5hbWVdXG4gICAgICA/IFtzY3JlZW46IFJvdXRlTmFtZV0gfCBbc2NyZWVuOiBSb3V0ZU5hbWUsIHBhcmFtczogUGFyYW1MaXN0W1JvdXRlTmFtZV1dXG4gICAgICA6IFtzY3JlZW46IFJvdXRlTmFtZSwgcGFyYW1zOiBQYXJhbUxpc3RbUm91dGVOYW1lXV1cbiAgKTogdm9pZDtcblxuICAvKipcbiAgICogUHVzaCBhIG5ldyBzY3JlZW4gb250byB0aGUgc3RhY2suXG4gICAqXG4gICAqIEBwYXJhbSBuYW1lIE5hbWUgb2YgdGhlIHJvdXRlIGZvciB0aGUgdGFiLlxuICAgKiBAcGFyYW0gW3BhcmFtc10gUGFyYW1zIG9iamVjdCBmb3IgdGhlIHJvdXRlLlxuICAgKi9cbiAgcHVzaDxSb3V0ZU5hbWUgZXh0ZW5kcyBrZXlvZiBQYXJhbUxpc3Q+KFxuICAgIC4uLmFyZ3M6IHVuZGVmaW5lZCBleHRlbmRzIFBhcmFtTGlzdFtSb3V0ZU5hbWVdXG4gICAgICA/IFtzY3JlZW46IFJvdXRlTmFtZV0gfCBbc2NyZWVuOiBSb3V0ZU5hbWUsIHBhcmFtczogUGFyYW1MaXN0W1JvdXRlTmFtZV1dXG4gICAgICA6IFtzY3JlZW46IFJvdXRlTmFtZSwgcGFyYW1zOiBQYXJhbUxpc3RbUm91dGVOYW1lXV1cbiAgKTogdm9pZDtcblxuICAvKipcbiAgICogUG9wIGEgc2NyZWVuIGZyb20gdGhlIHN0YWNrLlxuICAgKi9cbiAgcG9wKGNvdW50PzogbnVtYmVyKTogdm9pZDtcblxuICAvKipcbiAgICogUG9wIHRvIHRoZSBmaXJzdCByb3V0ZSBpbiB0aGUgc3RhY2ssIGRpc21pc3NpbmcgYWxsIG90aGVyIHNjcmVlbnMuXG4gICAqL1xuICBwb3BUb1RvcCgpOiB2b2lkO1xufTtcblxuZXhwb3J0IGNvbnN0IFN0YWNrQWN0aW9ucyA9IHtcbiAgcmVwbGFjZShuYW1lOiBzdHJpbmcsIHBhcmFtcz86IG9iamVjdCk6IFN0YWNrQWN0aW9uVHlwZSB7XG4gICAgcmV0dXJuIHsgdHlwZTogJ1JFUExBQ0UnLCBwYXlsb2FkOiB7IG5hbWUsIHBhcmFtcyB9IH07XG4gIH0sXG4gIHB1c2gobmFtZTogc3RyaW5nLCBwYXJhbXM/OiBvYmplY3QpOiBTdGFja0FjdGlvblR5cGUge1xuICAgIHJldHVybiB7IHR5cGU6ICdQVVNIJywgcGF5bG9hZDogeyBuYW1lLCBwYXJhbXMgfSB9O1xuICB9LFxuICBwb3AoY291bnQ6IG51bWJlciA9IDEpOiBTdGFja0FjdGlvblR5cGUge1xuICAgIHJldHVybiB7IHR5cGU6ICdQT1AnLCBwYXlsb2FkOiB7IGNvdW50IH0gfTtcbiAgfSxcbiAgcG9wVG9Ub3AoKTogU3RhY2tBY3Rpb25UeXBlIHtcbiAgICByZXR1cm4geyB0eXBlOiAnUE9QX1RPX1RPUCcgfTtcbiAgfSxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIFN0YWNrUm91dGVyKG9wdGlvbnM6IFN0YWNrUm91dGVyT3B0aW9ucykge1xuICBjb25zdCByb3V0ZXI6IFJvdXRlcjxcbiAgICBTdGFja05hdmlnYXRpb25TdGF0ZTxQYXJhbUxpc3RCYXNlPixcbiAgICBDb21tb25OYXZpZ2F0aW9uQWN0aW9uIHwgU3RhY2tBY3Rpb25UeXBlXG4gID4gPSB7XG4gICAgLi4uQmFzZVJvdXRlcixcblxuICAgIHR5cGU6ICdzdGFjaycsXG5cbiAgICBnZXRJbml0aWFsU3RhdGUoeyByb3V0ZU5hbWVzLCByb3V0ZVBhcmFtTGlzdCB9KSB7XG4gICAgICBjb25zdCBpbml0aWFsUm91dGVOYW1lID1cbiAgICAgICAgb3B0aW9ucy5pbml0aWFsUm91dGVOYW1lICE9PSB1bmRlZmluZWQgJiZcbiAgICAgICAgcm91dGVOYW1lcy5pbmNsdWRlcyhvcHRpb25zLmluaXRpYWxSb3V0ZU5hbWUpXG4gICAgICAgICAgPyBvcHRpb25zLmluaXRpYWxSb3V0ZU5hbWVcbiAgICAgICAgICA6IHJvdXRlTmFtZXNbMF07XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIHN0YWxlOiBmYWxzZSxcbiAgICAgICAgdHlwZTogJ3N0YWNrJyxcbiAgICAgICAga2V5OiBgc3RhY2stJHtuYW5vaWQoKX1gLFxuICAgICAgICBpbmRleDogMCxcbiAgICAgICAgcm91dGVOYW1lcyxcbiAgICAgICAgcm91dGVzOiBbXG4gICAgICAgICAge1xuICAgICAgICAgICAga2V5OiBgJHtpbml0aWFsUm91dGVOYW1lfS0ke25hbm9pZCgpfWAsXG4gICAgICAgICAgICBuYW1lOiBpbml0aWFsUm91dGVOYW1lLFxuICAgICAgICAgICAgcGFyYW1zOiByb3V0ZVBhcmFtTGlzdFtpbml0aWFsUm91dGVOYW1lXSxcbiAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgfTtcbiAgICB9LFxuXG4gICAgZ2V0UmVoeWRyYXRlZFN0YXRlKHBhcnRpYWxTdGF0ZSwgeyByb3V0ZU5hbWVzLCByb3V0ZVBhcmFtTGlzdCB9KSB7XG4gICAgICBsZXQgc3RhdGUgPSBwYXJ0aWFsU3RhdGU7XG5cbiAgICAgIGlmIChzdGF0ZS5zdGFsZSA9PT0gZmFsc2UpIHtcbiAgICAgICAgcmV0dXJuIHN0YXRlO1xuICAgICAgfVxuXG4gICAgICBjb25zdCByb3V0ZXMgPSBzdGF0ZS5yb3V0ZXNcbiAgICAgICAgLmZpbHRlcigocm91dGUpID0+IHJvdXRlTmFtZXMuaW5jbHVkZXMocm91dGUubmFtZSkpXG4gICAgICAgIC5tYXAoXG4gICAgICAgICAgKHJvdXRlKSA9PlxuICAgICAgICAgICAgKHtcbiAgICAgICAgICAgICAgLi4ucm91dGUsXG4gICAgICAgICAgICAgIGtleTogcm91dGUua2V5IHx8IGAke3JvdXRlLm5hbWV9LSR7bmFub2lkKCl9YCxcbiAgICAgICAgICAgICAgcGFyYW1zOlxuICAgICAgICAgICAgICAgIHJvdXRlUGFyYW1MaXN0W3JvdXRlLm5hbWVdICE9PSB1bmRlZmluZWRcbiAgICAgICAgICAgICAgICAgID8ge1xuICAgICAgICAgICAgICAgICAgICAgIC4uLnJvdXRlUGFyYW1MaXN0W3JvdXRlLm5hbWVdLFxuICAgICAgICAgICAgICAgICAgICAgIC4uLnJvdXRlLnBhcmFtcyxcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgOiByb3V0ZS5wYXJhbXMsXG4gICAgICAgICAgICB9IGFzIFJvdXRlPHN0cmluZz4pXG4gICAgICAgICk7XG5cbiAgICAgIGlmIChyb3V0ZXMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIGNvbnN0IGluaXRpYWxSb3V0ZU5hbWUgPVxuICAgICAgICAgIG9wdGlvbnMuaW5pdGlhbFJvdXRlTmFtZSAhPT0gdW5kZWZpbmVkXG4gICAgICAgICAgICA/IG9wdGlvbnMuaW5pdGlhbFJvdXRlTmFtZVxuICAgICAgICAgICAgOiByb3V0ZU5hbWVzWzBdO1xuXG4gICAgICAgIHJvdXRlcy5wdXNoKHtcbiAgICAgICAgICBrZXk6IGAke2luaXRpYWxSb3V0ZU5hbWV9LSR7bmFub2lkKCl9YCxcbiAgICAgICAgICBuYW1lOiBpbml0aWFsUm91dGVOYW1lLFxuICAgICAgICAgIHBhcmFtczogcm91dGVQYXJhbUxpc3RbaW5pdGlhbFJvdXRlTmFtZV0sXG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4ge1xuICAgICAgICBzdGFsZTogZmFsc2UsXG4gICAgICAgIHR5cGU6ICdzdGFjaycsXG4gICAgICAgIGtleTogYHN0YWNrLSR7bmFub2lkKCl9YCxcbiAgICAgICAgaW5kZXg6IHJvdXRlcy5sZW5ndGggLSAxLFxuICAgICAgICByb3V0ZU5hbWVzLFxuICAgICAgICByb3V0ZXMsXG4gICAgICB9O1xuICAgIH0sXG5cbiAgICBnZXRTdGF0ZUZvclJvdXRlTmFtZXNDaGFuZ2UoXG4gICAgICBzdGF0ZSxcbiAgICAgIHsgcm91dGVOYW1lcywgcm91dGVQYXJhbUxpc3QsIHJvdXRlS2V5Q2hhbmdlcyB9XG4gICAgKSB7XG4gICAgICBjb25zdCByb3V0ZXMgPSBzdGF0ZS5yb3V0ZXMuZmlsdGVyKFxuICAgICAgICAocm91dGUpID0+XG4gICAgICAgICAgcm91dGVOYW1lcy5pbmNsdWRlcyhyb3V0ZS5uYW1lKSAmJlxuICAgICAgICAgICFyb3V0ZUtleUNoYW5nZXMuaW5jbHVkZXMocm91dGUubmFtZSlcbiAgICAgICk7XG5cbiAgICAgIGlmIChyb3V0ZXMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIGNvbnN0IGluaXRpYWxSb3V0ZU5hbWUgPVxuICAgICAgICAgIG9wdGlvbnMuaW5pdGlhbFJvdXRlTmFtZSAhPT0gdW5kZWZpbmVkICYmXG4gICAgICAgICAgcm91dGVOYW1lcy5pbmNsdWRlcyhvcHRpb25zLmluaXRpYWxSb3V0ZU5hbWUpXG4gICAgICAgICAgICA/IG9wdGlvbnMuaW5pdGlhbFJvdXRlTmFtZVxuICAgICAgICAgICAgOiByb3V0ZU5hbWVzWzBdO1xuXG4gICAgICAgIHJvdXRlcy5wdXNoKHtcbiAgICAgICAgICBrZXk6IGAke2luaXRpYWxSb3V0ZU5hbWV9LSR7bmFub2lkKCl9YCxcbiAgICAgICAgICBuYW1lOiBpbml0aWFsUm91dGVOYW1lLFxuICAgICAgICAgIHBhcmFtczogcm91dGVQYXJhbUxpc3RbaW5pdGlhbFJvdXRlTmFtZV0sXG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4ge1xuICAgICAgICAuLi5zdGF0ZSxcbiAgICAgICAgcm91dGVOYW1lcyxcbiAgICAgICAgcm91dGVzLFxuICAgICAgICBpbmRleDogTWF0aC5taW4oc3RhdGUuaW5kZXgsIHJvdXRlcy5sZW5ndGggLSAxKSxcbiAgICAgIH07XG4gICAgfSxcblxuICAgIGdldFN0YXRlRm9yUm91dGVGb2N1cyhzdGF0ZSwga2V5KSB7XG4gICAgICBjb25zdCBpbmRleCA9IHN0YXRlLnJvdXRlcy5maW5kSW5kZXgoKHIpID0+IHIua2V5ID09PSBrZXkpO1xuXG4gICAgICBpZiAoaW5kZXggPT09IC0xIHx8IGluZGV4ID09PSBzdGF0ZS5pbmRleCkge1xuICAgICAgICByZXR1cm4gc3RhdGU7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIC4uLnN0YXRlLFxuICAgICAgICBpbmRleCxcbiAgICAgICAgcm91dGVzOiBzdGF0ZS5yb3V0ZXMuc2xpY2UoMCwgaW5kZXggKyAxKSxcbiAgICAgIH07XG4gICAgfSxcblxuICAgIGdldFN0YXRlRm9yQWN0aW9uKHN0YXRlLCBhY3Rpb24sIG9wdGlvbnMpIHtcbiAgICAgIGNvbnN0IHsgcm91dGVQYXJhbUxpc3QgfSA9IG9wdGlvbnM7XG5cbiAgICAgIHN3aXRjaCAoYWN0aW9uLnR5cGUpIHtcbiAgICAgICAgY2FzZSAnUkVQTEFDRSc6IHtcbiAgICAgICAgICBjb25zdCBpbmRleCA9XG4gICAgICAgICAgICBhY3Rpb24udGFyZ2V0ID09PSBzdGF0ZS5rZXkgJiYgYWN0aW9uLnNvdXJjZVxuICAgICAgICAgICAgICA/IHN0YXRlLnJvdXRlcy5maW5kSW5kZXgoKHIpID0+IHIua2V5ID09PSBhY3Rpb24uc291cmNlKVxuICAgICAgICAgICAgICA6IHN0YXRlLmluZGV4O1xuXG4gICAgICAgICAgaWYgKGluZGV4ID09PSAtMSkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY29uc3QgeyBuYW1lLCBrZXksIHBhcmFtcyB9ID0gYWN0aW9uLnBheWxvYWQ7XG5cbiAgICAgICAgICBpZiAoIXN0YXRlLnJvdXRlTmFtZXMuaW5jbHVkZXMobmFtZSkpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAuLi5zdGF0ZSxcbiAgICAgICAgICAgIHJvdXRlczogc3RhdGUucm91dGVzLm1hcCgocm91dGUsIGkpID0+XG4gICAgICAgICAgICAgIGkgPT09IGluZGV4XG4gICAgICAgICAgICAgICAgPyB7XG4gICAgICAgICAgICAgICAgICAgIGtleToga2V5ICE9PSB1bmRlZmluZWQgPyBrZXkgOiBgJHtuYW1lfS0ke25hbm9pZCgpfWAsXG4gICAgICAgICAgICAgICAgICAgIG5hbWUsXG4gICAgICAgICAgICAgICAgICAgIHBhcmFtczpcbiAgICAgICAgICAgICAgICAgICAgICByb3V0ZVBhcmFtTGlzdFtuYW1lXSAhPT0gdW5kZWZpbmVkXG4gICAgICAgICAgICAgICAgICAgICAgICA/IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuLi5yb3V0ZVBhcmFtTGlzdFtuYW1lXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuLi5wYXJhbXMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIDogcGFyYW1zLFxuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIDogcm91dGVcbiAgICAgICAgICAgICksXG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNhc2UgJ1BVU0gnOlxuICAgICAgICAgIGlmIChzdGF0ZS5yb3V0ZU5hbWVzLmluY2x1ZGVzKGFjdGlvbi5wYXlsb2FkLm5hbWUpKSB7XG4gICAgICAgICAgICBjb25zdCBnZXRJZCA9IG9wdGlvbnMucm91dGVHZXRJZExpc3RbYWN0aW9uLnBheWxvYWQubmFtZV07XG4gICAgICAgICAgICBjb25zdCBpZCA9IGdldElkPy4oeyBwYXJhbXM6IGFjdGlvbi5wYXlsb2FkLnBhcmFtcyB9KTtcblxuICAgICAgICAgICAgY29uc3Qgcm91dGUgPSBpZFxuICAgICAgICAgICAgICA/IHN0YXRlLnJvdXRlcy5maW5kKFxuICAgICAgICAgICAgICAgICAgKHJvdXRlKSA9PlxuICAgICAgICAgICAgICAgICAgICByb3V0ZS5uYW1lID09PSBhY3Rpb24ucGF5bG9hZC5uYW1lICYmXG4gICAgICAgICAgICAgICAgICAgIGlkID09PSBnZXRJZD8uKHsgcGFyYW1zOiByb3V0ZS5wYXJhbXMgfSlcbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgIDogdW5kZWZpbmVkO1xuXG4gICAgICAgICAgICBsZXQgcm91dGVzOiBSb3V0ZTxzdHJpbmc+W107XG5cbiAgICAgICAgICAgIGlmIChyb3V0ZSkge1xuICAgICAgICAgICAgICByb3V0ZXMgPSBzdGF0ZS5yb3V0ZXMuZmlsdGVyKChyKSA9PiByLmtleSAhPT0gcm91dGUua2V5KTtcbiAgICAgICAgICAgICAgcm91dGVzLnB1c2goe1xuICAgICAgICAgICAgICAgIC4uLnJvdXRlLFxuICAgICAgICAgICAgICAgIHBhcmFtczpcbiAgICAgICAgICAgICAgICAgIHJvdXRlUGFyYW1MaXN0W2FjdGlvbi5wYXlsb2FkLm5hbWVdICE9PSB1bmRlZmluZWRcbiAgICAgICAgICAgICAgICAgICAgPyB7XG4gICAgICAgICAgICAgICAgICAgICAgICAuLi5yb3V0ZVBhcmFtTGlzdFthY3Rpb24ucGF5bG9hZC5uYW1lXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIC4uLmFjdGlvbi5wYXlsb2FkLnBhcmFtcyxcbiAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIDogYWN0aW9uLnBheWxvYWQucGFyYW1zLFxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHJvdXRlcyA9IFtcbiAgICAgICAgICAgICAgICAuLi5zdGF0ZS5yb3V0ZXMsXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAga2V5OiBgJHthY3Rpb24ucGF5bG9hZC5uYW1lfS0ke25hbm9pZCgpfWAsXG4gICAgICAgICAgICAgICAgICBuYW1lOiBhY3Rpb24ucGF5bG9hZC5uYW1lLFxuICAgICAgICAgICAgICAgICAgcGFyYW1zOlxuICAgICAgICAgICAgICAgICAgICByb3V0ZVBhcmFtTGlzdFthY3Rpb24ucGF5bG9hZC5uYW1lXSAhPT0gdW5kZWZpbmVkXG4gICAgICAgICAgICAgICAgICAgICAgPyB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIC4uLnJvdXRlUGFyYW1MaXN0W2FjdGlvbi5wYXlsb2FkLm5hbWVdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAuLi5hY3Rpb24ucGF5bG9hZC5wYXJhbXMsXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgOiBhY3Rpb24ucGF5bG9hZC5wYXJhbXMsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgXTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgLi4uc3RhdGUsXG4gICAgICAgICAgICAgIGluZGV4OiByb3V0ZXMubGVuZ3RoIC0gMSxcbiAgICAgICAgICAgICAgcm91dGVzLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gbnVsbDtcblxuICAgICAgICBjYXNlICdQT1AnOiB7XG4gICAgICAgICAgY29uc3QgaW5kZXggPVxuICAgICAgICAgICAgYWN0aW9uLnRhcmdldCA9PT0gc3RhdGUua2V5ICYmIGFjdGlvbi5zb3VyY2VcbiAgICAgICAgICAgICAgPyBzdGF0ZS5yb3V0ZXMuZmluZEluZGV4KChyKSA9PiByLmtleSA9PT0gYWN0aW9uLnNvdXJjZSlcbiAgICAgICAgICAgICAgOiBzdGF0ZS5pbmRleDtcblxuICAgICAgICAgIGlmIChpbmRleCA+IDApIHtcbiAgICAgICAgICAgIGNvbnN0IGNvdW50ID0gTWF0aC5tYXgoaW5kZXggLSBhY3Rpb24ucGF5bG9hZC5jb3VudCArIDEsIDEpO1xuICAgICAgICAgICAgY29uc3Qgcm91dGVzID0gc3RhdGUucm91dGVzXG4gICAgICAgICAgICAgIC5zbGljZSgwLCBjb3VudClcbiAgICAgICAgICAgICAgLmNvbmNhdChzdGF0ZS5yb3V0ZXMuc2xpY2UoaW5kZXggKyAxKSk7XG5cbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgIC4uLnN0YXRlLFxuICAgICAgICAgICAgICBpbmRleDogcm91dGVzLmxlbmd0aCAtIDEsXG4gICAgICAgICAgICAgIHJvdXRlcyxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICBjYXNlICdQT1BfVE9fVE9QJzpcbiAgICAgICAgICByZXR1cm4gcm91dGVyLmdldFN0YXRlRm9yQWN0aW9uKFxuICAgICAgICAgICAgc3RhdGUsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIHR5cGU6ICdQT1AnLFxuICAgICAgICAgICAgICBwYXlsb2FkOiB7IGNvdW50OiBzdGF0ZS5yb3V0ZXMubGVuZ3RoIC0gMSB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG9wdGlvbnNcbiAgICAgICAgICApO1xuXG4gICAgICAgIGNhc2UgJ05BVklHQVRFJzpcbiAgICAgICAgICBpZiAoXG4gICAgICAgICAgICBhY3Rpb24ucGF5bG9hZC5uYW1lICE9PSB1bmRlZmluZWQgJiZcbiAgICAgICAgICAgICFzdGF0ZS5yb3V0ZU5hbWVzLmluY2x1ZGVzKGFjdGlvbi5wYXlsb2FkLm5hbWUpXG4gICAgICAgICAgKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoYWN0aW9uLnBheWxvYWQua2V5IHx8IGFjdGlvbi5wYXlsb2FkLm5hbWUpIHtcbiAgICAgICAgICAgIC8vIElmIHRoZSByb3V0ZSBhbHJlYWR5IGV4aXN0cywgbmF2aWdhdGUgdG8gdGhhdFxuICAgICAgICAgICAgbGV0IGluZGV4ID0gLTE7XG5cbiAgICAgICAgICAgIGNvbnN0IGdldElkID1cbiAgICAgICAgICAgICAgLy8gYGdldElkYCBhbmQgYGtleWAgY2FuJ3QgYmUgdXNlZCB0b2dldGhlclxuICAgICAgICAgICAgICBhY3Rpb24ucGF5bG9hZC5rZXkgPT09IHVuZGVmaW5lZCAmJlxuICAgICAgICAgICAgICBhY3Rpb24ucGF5bG9hZC5uYW1lICE9PSB1bmRlZmluZWRcbiAgICAgICAgICAgICAgICA/IG9wdGlvbnMucm91dGVHZXRJZExpc3RbYWN0aW9uLnBheWxvYWQubmFtZV1cbiAgICAgICAgICAgICAgICA6IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIGNvbnN0IGlkID0gZ2V0SWQ/Lih7IHBhcmFtczogYWN0aW9uLnBheWxvYWQucGFyYW1zIH0pO1xuXG4gICAgICAgICAgICBpZiAoaWQpIHtcbiAgICAgICAgICAgICAgaW5kZXggPSBzdGF0ZS5yb3V0ZXMuZmluZEluZGV4KFxuICAgICAgICAgICAgICAgIChyb3V0ZSkgPT5cbiAgICAgICAgICAgICAgICAgIHJvdXRlLm5hbWUgPT09IGFjdGlvbi5wYXlsb2FkLm5hbWUgJiZcbiAgICAgICAgICAgICAgICAgIGlkID09PSBnZXRJZD8uKHsgcGFyYW1zOiByb3V0ZS5wYXJhbXMgfSlcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoXG4gICAgICAgICAgICAgIChzdGF0ZS5yb3V0ZXNbc3RhdGUuaW5kZXhdLm5hbWUgPT09IGFjdGlvbi5wYXlsb2FkLm5hbWUgJiZcbiAgICAgICAgICAgICAgICBhY3Rpb24ucGF5bG9hZC5rZXkgPT09IHVuZGVmaW5lZCkgfHxcbiAgICAgICAgICAgICAgc3RhdGUucm91dGVzW3N0YXRlLmluZGV4XS5rZXkgPT09IGFjdGlvbi5wYXlsb2FkLmtleVxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgIGluZGV4ID0gc3RhdGUuaW5kZXg7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBmb3IgKGxldCBpID0gc3RhdGUucm91dGVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgICAgKHN0YXRlLnJvdXRlc1tpXS5uYW1lID09PSBhY3Rpb24ucGF5bG9hZC5uYW1lICYmXG4gICAgICAgICAgICAgICAgICAgIGFjdGlvbi5wYXlsb2FkLmtleSA9PT0gdW5kZWZpbmVkKSB8fFxuICAgICAgICAgICAgICAgICAgc3RhdGUucm91dGVzW2ldLmtleSA9PT0gYWN0aW9uLnBheWxvYWQua2V5XG4gICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgICBpbmRleCA9IGk7XG4gICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICBpbmRleCA9PT0gLTEgJiZcbiAgICAgICAgICAgICAgYWN0aW9uLnBheWxvYWQua2V5ICYmXG4gICAgICAgICAgICAgIGFjdGlvbi5wYXlsb2FkLm5hbWUgPT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoaW5kZXggPT09IC0xICYmIGFjdGlvbi5wYXlsb2FkLm5hbWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICBjb25zdCByb3V0ZXMgPSBbXG4gICAgICAgICAgICAgICAgLi4uc3RhdGUucm91dGVzLFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgIGtleTpcbiAgICAgICAgICAgICAgICAgICAgYWN0aW9uLnBheWxvYWQua2V5ID8/IGAke2FjdGlvbi5wYXlsb2FkLm5hbWV9LSR7bmFub2lkKCl9YCxcbiAgICAgICAgICAgICAgICAgIG5hbWU6IGFjdGlvbi5wYXlsb2FkLm5hbWUsXG4gICAgICAgICAgICAgICAgICBwYXRoOiBhY3Rpb24ucGF5bG9hZC5wYXRoLFxuICAgICAgICAgICAgICAgICAgcGFyYW1zOlxuICAgICAgICAgICAgICAgICAgICByb3V0ZVBhcmFtTGlzdFthY3Rpb24ucGF5bG9hZC5uYW1lXSAhPT0gdW5kZWZpbmVkXG4gICAgICAgICAgICAgICAgICAgICAgPyB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIC4uLnJvdXRlUGFyYW1MaXN0W2FjdGlvbi5wYXlsb2FkLm5hbWVdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAuLi5hY3Rpb24ucGF5bG9hZC5wYXJhbXMsXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgOiBhY3Rpb24ucGF5bG9hZC5wYXJhbXMsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgXTtcblxuICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIC4uLnN0YXRlLFxuICAgICAgICAgICAgICAgIHJvdXRlcyxcbiAgICAgICAgICAgICAgICBpbmRleDogcm91dGVzLmxlbmd0aCAtIDEsXG4gICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbnN0IHJvdXRlID0gc3RhdGUucm91dGVzW2luZGV4XTtcblxuICAgICAgICAgICAgbGV0IHBhcmFtcztcblxuICAgICAgICAgICAgaWYgKGFjdGlvbi5wYXlsb2FkLm1lcmdlKSB7XG4gICAgICAgICAgICAgIHBhcmFtcyA9XG4gICAgICAgICAgICAgICAgYWN0aW9uLnBheWxvYWQucGFyYW1zICE9PSB1bmRlZmluZWQgfHxcbiAgICAgICAgICAgICAgICByb3V0ZVBhcmFtTGlzdFtyb3V0ZS5uYW1lXSAhPT0gdW5kZWZpbmVkXG4gICAgICAgICAgICAgICAgICA/IHtcbiAgICAgICAgICAgICAgICAgICAgICAuLi5yb3V0ZVBhcmFtTGlzdFtyb3V0ZS5uYW1lXSxcbiAgICAgICAgICAgICAgICAgICAgICAuLi5yb3V0ZS5wYXJhbXMsXG4gICAgICAgICAgICAgICAgICAgICAgLi4uYWN0aW9uLnBheWxvYWQucGFyYW1zLFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICA6IHJvdXRlLnBhcmFtcztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHBhcmFtcyA9XG4gICAgICAgICAgICAgICAgcm91dGVQYXJhbUxpc3Rbcm91dGUubmFtZV0gIT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgICAgICAgPyB7XG4gICAgICAgICAgICAgICAgICAgICAgLi4ucm91dGVQYXJhbUxpc3Rbcm91dGUubmFtZV0sXG4gICAgICAgICAgICAgICAgICAgICAgLi4uYWN0aW9uLnBheWxvYWQucGFyYW1zLFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICA6IGFjdGlvbi5wYXlsb2FkLnBhcmFtcztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgLi4uc3RhdGUsXG4gICAgICAgICAgICAgIGluZGV4LFxuICAgICAgICAgICAgICByb3V0ZXM6IFtcbiAgICAgICAgICAgICAgICAuLi5zdGF0ZS5yb3V0ZXMuc2xpY2UoMCwgaW5kZXgpLFxuICAgICAgICAgICAgICAgIHBhcmFtcyAhPT0gcm91dGUucGFyYW1zIHx8XG4gICAgICAgICAgICAgICAgKGFjdGlvbi5wYXlsb2FkLnBhdGggJiYgYWN0aW9uLnBheWxvYWQucGF0aCAhPT0gcm91dGUucGF0aClcbiAgICAgICAgICAgICAgICAgID8ge1xuICAgICAgICAgICAgICAgICAgICAgIC4uLnJvdXRlLFxuICAgICAgICAgICAgICAgICAgICAgIHBhdGg6IGFjdGlvbi5wYXlsb2FkLnBhdGggPz8gcm91dGUucGF0aCxcbiAgICAgICAgICAgICAgICAgICAgICBwYXJhbXMsXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIDogc3RhdGUucm91dGVzW2luZGV4XSxcbiAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIG51bGw7XG5cbiAgICAgICAgY2FzZSAnR09fQkFDSyc6XG4gICAgICAgICAgaWYgKHN0YXRlLmluZGV4ID4gMCkge1xuICAgICAgICAgICAgcmV0dXJuIHJvdXRlci5nZXRTdGF0ZUZvckFjdGlvbihcbiAgICAgICAgICAgICAgc3RhdGUsXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB0eXBlOiAnUE9QJyxcbiAgICAgICAgICAgICAgICBwYXlsb2FkOiB7IGNvdW50OiAxIH0sXG4gICAgICAgICAgICAgICAgdGFyZ2V0OiBhY3Rpb24udGFyZ2V0LFxuICAgICAgICAgICAgICAgIHNvdXJjZTogYWN0aW9uLnNvdXJjZSxcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgb3B0aW9uc1xuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gbnVsbDtcblxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHJldHVybiBCYXNlUm91dGVyLmdldFN0YXRlRm9yQWN0aW9uKHN0YXRlLCBhY3Rpb24pO1xuICAgICAgfVxuICAgIH0sXG5cbiAgICBhY3Rpb25DcmVhdG9yczogU3RhY2tBY3Rpb25zLFxuICB9O1xuXG4gIHJldHVybiByb3V0ZXI7XG59XG4iXX0=