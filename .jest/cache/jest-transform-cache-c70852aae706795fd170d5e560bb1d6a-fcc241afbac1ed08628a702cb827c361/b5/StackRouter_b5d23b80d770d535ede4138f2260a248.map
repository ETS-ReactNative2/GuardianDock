{"version":3,"mappings":"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","names":["StackActions","replace","name","params","type","payload","push","pop","count","popToTop","StackRouter","options","router","BaseRouter","getInitialState","routeNames","routeParamList","initialRouteName","undefined","includes","stale","key","index","routes","getRehydratedState","partialState","state","filter","route","map","length","getStateForRouteNamesChange","routeKeyChanges","Math","min","getStateForRouteFocus","findIndex","r","slice","getStateForAction","action","target","source","i","getId","routeGetIdList","id","find","max","concat","path","merge","actionCreators"],"sources":["StackRouter.tsx"],"sourcesContent":["import { nanoid } from 'nanoid/non-secure';\n\nimport BaseRouter from './BaseRouter';\nimport type {\n  CommonNavigationAction,\n  DefaultRouterOptions,\n  NavigationState,\n  ParamListBase,\n  Route,\n  Router,\n} from './types';\n\nexport type StackActionType =\n  | {\n      type: 'REPLACE';\n      payload: { name: string; key?: string | undefined; params?: object };\n      source?: string;\n      target?: string;\n    }\n  | {\n      type: 'PUSH';\n      payload: { name: string; params?: object };\n      source?: string;\n      target?: string;\n    }\n  | {\n      type: 'POP';\n      payload: { count: number };\n      source?: string;\n      target?: string;\n    }\n  | {\n      type: 'POP_TO_TOP';\n      source?: string;\n      target?: string;\n    };\n\nexport type StackRouterOptions = DefaultRouterOptions;\n\nexport type StackNavigationState<ParamList extends ParamListBase> =\n  NavigationState<ParamList> & {\n    /**\n     * Type of the router, in this case, it's stack.\n     */\n    type: 'stack';\n  };\n\nexport type StackActionHelpers<ParamList extends ParamListBase> = {\n  /**\n   * Replace the current route with a new one.\n   *\n   * @param name Route name of the new route.\n   * @param [params] Params object for the new route.\n   */\n  replace<RouteName extends keyof ParamList>(\n    ...args: undefined extends ParamList[RouteName]\n      ? [screen: RouteName] | [screen: RouteName, params: ParamList[RouteName]]\n      : [screen: RouteName, params: ParamList[RouteName]]\n  ): void;\n\n  /**\n   * Push a new screen onto the stack.\n   *\n   * @param name Name of the route for the tab.\n   * @param [params] Params object for the route.\n   */\n  push<RouteName extends keyof ParamList>(\n    ...args: undefined extends ParamList[RouteName]\n      ? [screen: RouteName] | [screen: RouteName, params: ParamList[RouteName]]\n      : [screen: RouteName, params: ParamList[RouteName]]\n  ): void;\n\n  /**\n   * Pop a screen from the stack.\n   */\n  pop(count?: number): void;\n\n  /**\n   * Pop to the first route in the stack, dismissing all other screens.\n   */\n  popToTop(): void;\n};\n\nexport const StackActions = {\n  replace(name: string, params?: object): StackActionType {\n    return { type: 'REPLACE', payload: { name, params } };\n  },\n  push(name: string, params?: object): StackActionType {\n    return { type: 'PUSH', payload: { name, params } };\n  },\n  pop(count: number = 1): StackActionType {\n    return { type: 'POP', payload: { count } };\n  },\n  popToTop(): StackActionType {\n    return { type: 'POP_TO_TOP' };\n  },\n};\n\nexport default function StackRouter(options: StackRouterOptions) {\n  const router: Router<\n    StackNavigationState<ParamListBase>,\n    CommonNavigationAction | StackActionType\n  > = {\n    ...BaseRouter,\n\n    type: 'stack',\n\n    getInitialState({ routeNames, routeParamList }) {\n      const initialRouteName =\n        options.initialRouteName !== undefined &&\n        routeNames.includes(options.initialRouteName)\n          ? options.initialRouteName\n          : routeNames[0];\n\n      return {\n        stale: false,\n        type: 'stack',\n        key: `stack-${nanoid()}`,\n        index: 0,\n        routeNames,\n        routes: [\n          {\n            key: `${initialRouteName}-${nanoid()}`,\n            name: initialRouteName,\n            params: routeParamList[initialRouteName],\n          },\n        ],\n      };\n    },\n\n    getRehydratedState(partialState, { routeNames, routeParamList }) {\n      let state = partialState;\n\n      if (state.stale === false) {\n        return state;\n      }\n\n      const routes = state.routes\n        .filter((route) => routeNames.includes(route.name))\n        .map(\n          (route) =>\n            ({\n              ...route,\n              key: route.key || `${route.name}-${nanoid()}`,\n              params:\n                routeParamList[route.name] !== undefined\n                  ? {\n                      ...routeParamList[route.name],\n                      ...route.params,\n                    }\n                  : route.params,\n            } as Route<string>)\n        );\n\n      if (routes.length === 0) {\n        const initialRouteName =\n          options.initialRouteName !== undefined\n            ? options.initialRouteName\n            : routeNames[0];\n\n        routes.push({\n          key: `${initialRouteName}-${nanoid()}`,\n          name: initialRouteName,\n          params: routeParamList[initialRouteName],\n        });\n      }\n\n      return {\n        stale: false,\n        type: 'stack',\n        key: `stack-${nanoid()}`,\n        index: routes.length - 1,\n        routeNames,\n        routes,\n      };\n    },\n\n    getStateForRouteNamesChange(\n      state,\n      { routeNames, routeParamList, routeKeyChanges }\n    ) {\n      const routes = state.routes.filter(\n        (route) =>\n          routeNames.includes(route.name) &&\n          !routeKeyChanges.includes(route.name)\n      );\n\n      if (routes.length === 0) {\n        const initialRouteName =\n          options.initialRouteName !== undefined &&\n          routeNames.includes(options.initialRouteName)\n            ? options.initialRouteName\n            : routeNames[0];\n\n        routes.push({\n          key: `${initialRouteName}-${nanoid()}`,\n          name: initialRouteName,\n          params: routeParamList[initialRouteName],\n        });\n      }\n\n      return {\n        ...state,\n        routeNames,\n        routes,\n        index: Math.min(state.index, routes.length - 1),\n      };\n    },\n\n    getStateForRouteFocus(state, key) {\n      const index = state.routes.findIndex((r) => r.key === key);\n\n      if (index === -1 || index === state.index) {\n        return state;\n      }\n\n      return {\n        ...state,\n        index,\n        routes: state.routes.slice(0, index + 1),\n      };\n    },\n\n    getStateForAction(state, action, options) {\n      const { routeParamList } = options;\n\n      switch (action.type) {\n        case 'REPLACE': {\n          const index =\n            action.target === state.key && action.source\n              ? state.routes.findIndex((r) => r.key === action.source)\n              : state.index;\n\n          if (index === -1) {\n            return null;\n          }\n\n          const { name, key, params } = action.payload;\n\n          if (!state.routeNames.includes(name)) {\n            return null;\n          }\n\n          return {\n            ...state,\n            routes: state.routes.map((route, i) =>\n              i === index\n                ? {\n                    key: key !== undefined ? key : `${name}-${nanoid()}`,\n                    name,\n                    params:\n                      routeParamList[name] !== undefined\n                        ? {\n                            ...routeParamList[name],\n                            ...params,\n                          }\n                        : params,\n                  }\n                : route\n            ),\n          };\n        }\n\n        case 'PUSH':\n          if (state.routeNames.includes(action.payload.name)) {\n            const getId = options.routeGetIdList[action.payload.name];\n            const id = getId?.({ params: action.payload.params });\n\n            const route = id\n              ? state.routes.find(\n                  (route) =>\n                    route.name === action.payload.name &&\n                    id === getId?.({ params: route.params })\n                )\n              : undefined;\n\n            let routes: Route<string>[];\n\n            if (route) {\n              routes = state.routes.filter((r) => r.key !== route.key);\n              routes.push({\n                ...route,\n                params:\n                  routeParamList[action.payload.name] !== undefined\n                    ? {\n                        ...routeParamList[action.payload.name],\n                        ...action.payload.params,\n                      }\n                    : action.payload.params,\n              });\n            } else {\n              routes = [\n                ...state.routes,\n                {\n                  key: `${action.payload.name}-${nanoid()}`,\n                  name: action.payload.name,\n                  params:\n                    routeParamList[action.payload.name] !== undefined\n                      ? {\n                          ...routeParamList[action.payload.name],\n                          ...action.payload.params,\n                        }\n                      : action.payload.params,\n                },\n              ];\n            }\n\n            return {\n              ...state,\n              index: routes.length - 1,\n              routes,\n            };\n          }\n\n          return null;\n\n        case 'POP': {\n          const index =\n            action.target === state.key && action.source\n              ? state.routes.findIndex((r) => r.key === action.source)\n              : state.index;\n\n          if (index > 0) {\n            const count = Math.max(index - action.payload.count + 1, 1);\n            const routes = state.routes\n              .slice(0, count)\n              .concat(state.routes.slice(index + 1));\n\n            return {\n              ...state,\n              index: routes.length - 1,\n              routes,\n            };\n          }\n\n          return null;\n        }\n\n        case 'POP_TO_TOP':\n          return router.getStateForAction(\n            state,\n            {\n              type: 'POP',\n              payload: { count: state.routes.length - 1 },\n            },\n            options\n          );\n\n        case 'NAVIGATE':\n          if (\n            action.payload.name !== undefined &&\n            !state.routeNames.includes(action.payload.name)\n          ) {\n            return null;\n          }\n\n          if (action.payload.key || action.payload.name) {\n            // If the route already exists, navigate to that\n            let index = -1;\n\n            const getId =\n              // `getId` and `key` can't be used together\n              action.payload.key === undefined &&\n              action.payload.name !== undefined\n                ? options.routeGetIdList[action.payload.name]\n                : undefined;\n            const id = getId?.({ params: action.payload.params });\n\n            if (id) {\n              index = state.routes.findIndex(\n                (route) =>\n                  route.name === action.payload.name &&\n                  id === getId?.({ params: route.params })\n              );\n            } else if (\n              (state.routes[state.index].name === action.payload.name &&\n                action.payload.key === undefined) ||\n              state.routes[state.index].key === action.payload.key\n            ) {\n              index = state.index;\n            } else {\n              for (let i = state.routes.length - 1; i >= 0; i--) {\n                if (\n                  (state.routes[i].name === action.payload.name &&\n                    action.payload.key === undefined) ||\n                  state.routes[i].key === action.payload.key\n                ) {\n                  index = i;\n                  break;\n                }\n              }\n            }\n\n            if (\n              index === -1 &&\n              action.payload.key &&\n              action.payload.name === undefined\n            ) {\n              return null;\n            }\n\n            if (index === -1 && action.payload.name !== undefined) {\n              const routes = [\n                ...state.routes,\n                {\n                  key:\n                    action.payload.key ?? `${action.payload.name}-${nanoid()}`,\n                  name: action.payload.name,\n                  path: action.payload.path,\n                  params:\n                    routeParamList[action.payload.name] !== undefined\n                      ? {\n                          ...routeParamList[action.payload.name],\n                          ...action.payload.params,\n                        }\n                      : action.payload.params,\n                },\n              ];\n\n              return {\n                ...state,\n                routes,\n                index: routes.length - 1,\n              };\n            }\n\n            const route = state.routes[index];\n\n            let params;\n\n            if (action.payload.merge) {\n              params =\n                action.payload.params !== undefined ||\n                routeParamList[route.name] !== undefined\n                  ? {\n                      ...routeParamList[route.name],\n                      ...route.params,\n                      ...action.payload.params,\n                    }\n                  : route.params;\n            } else {\n              params =\n                routeParamList[route.name] !== undefined\n                  ? {\n                      ...routeParamList[route.name],\n                      ...action.payload.params,\n                    }\n                  : action.payload.params;\n            }\n\n            return {\n              ...state,\n              index,\n              routes: [\n                ...state.routes.slice(0, index),\n                params !== route.params ||\n                (action.payload.path && action.payload.path !== route.path)\n                  ? {\n                      ...route,\n                      path: action.payload.path ?? route.path,\n                      params,\n                    }\n                  : state.routes[index],\n              ],\n            };\n          }\n\n          return null;\n\n        case 'GO_BACK':\n          if (state.index > 0) {\n            return router.getStateForAction(\n              state,\n              {\n                type: 'POP',\n                payload: { count: 1 },\n                target: action.target,\n                source: action.source,\n              },\n              options\n            );\n          }\n\n          return null;\n\n        default:\n          return BaseRouter.getStateForAction(state, action);\n      }\n    },\n\n    actionCreators: StackActions,\n  };\n\n  return router;\n}\n"]}