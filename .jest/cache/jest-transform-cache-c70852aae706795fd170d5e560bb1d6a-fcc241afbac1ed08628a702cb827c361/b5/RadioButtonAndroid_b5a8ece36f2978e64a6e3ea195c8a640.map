{"version":3,"mappings":"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","names":["BORDER_WIDTH","RadioButtonAndroid","disabled","onPress","theme","value","status","testID","rest","React","useRef","Animated","Value","borderAnim","current","radioAnim","isFirstRendering","scale","animation","useEffect","setValue","timing","toValue","duration","useNativeDriver","start","checkedColor","color","colors","accent","uncheckedColor","text","alpha","dark","rgb","string","rippleColor","radioColor","_RadioButtonGroup","Consumer","context","checked","contextValue","fade","_TouchableRipple","borderless","undefined","onValueChange","accessibilityTraits","accessibilityComponentType","accessibilityRole","accessibilityState","accessibilityLiveRegion","style","styles","container","_reactNative","View","radio","borderColor","borderWidth","StyleSheet","absoluteFill","radioContainer","dot","backgroundColor","transform","displayName","create","borderRadius","alignItems","justifyContent","height","width","margin","RadioButtonAndroidWithTheme"],"sources":["RadioButtonAndroid.tsx"],"sourcesContent":["import * as React from 'react';\nimport { Animated, View, StyleSheet } from 'react-native';\nimport color from 'color';\nimport { RadioButtonContext, RadioButtonContextType } from './RadioButtonGroup';\nimport { handlePress, isChecked } from './utils';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport { withTheme } from '../../core/theming';\nimport type { $RemoveChildren } from '../../types';\n\ntype Props = $RemoveChildren<typeof TouchableRipple> & {\n  /**\n   * Value of the radio button\n   */\n  value: string;\n  /**\n   * Status of radio button.\n   */\n  status?: 'checked' | 'unchecked';\n  /**\n   * Whether radio is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: (param?: any) => void;\n  /**\n   * Custom color for unchecked radio.\n   */\n  uncheckedColor?: string;\n  /**\n   * Custom color for radio.\n   */\n  color?: string;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n  /**\n   * testID to be used on tests.\n   */\n  testID?: string;\n};\n\nconst BORDER_WIDTH = 2;\n\n/**\n * Radio buttons allow the selection a single option from a set.\n * This component follows platform guidelines for Android, but can be used\n * on any platform.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img src=\"screenshots/radio-enabled.android.png\" />\n *     <figcaption>Enabled</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/radio-disabled.android.png\" />\n *     <figcaption>Disabled</figcaption>\n *   </figure>\n * </div>\n */\nconst RadioButtonAndroid = ({\n  disabled,\n  onPress,\n  theme,\n  value,\n  status,\n  testID,\n  ...rest\n}: Props) => {\n  const { current: borderAnim } = React.useRef<Animated.Value>(\n    new Animated.Value(BORDER_WIDTH)\n  );\n\n  const { current: radioAnim } = React.useRef<Animated.Value>(\n    new Animated.Value(1)\n  );\n\n  const isFirstRendering = React.useRef<boolean>(true);\n\n  const { scale } = theme.animation;\n\n  React.useEffect(() => {\n    // Do not run animation on very first rendering\n    if (isFirstRendering.current) {\n      isFirstRendering.current = false;\n      return;\n    }\n\n    if (status === 'checked') {\n      radioAnim.setValue(1.2);\n\n      Animated.timing(radioAnim, {\n        toValue: 1,\n        duration: 150 * scale,\n        useNativeDriver: true,\n      }).start();\n    } else {\n      borderAnim.setValue(10);\n\n      Animated.timing(borderAnim, {\n        toValue: BORDER_WIDTH,\n        duration: 150 * scale,\n        useNativeDriver: false,\n      }).start();\n    }\n  }, [status, borderAnim, radioAnim, scale]);\n\n  const checkedColor = rest.color || theme.colors.accent;\n  const uncheckedColor =\n    rest.uncheckedColor ||\n    color(theme.colors.text)\n      .alpha(theme.dark ? 0.7 : 0.54)\n      .rgb()\n      .string();\n\n  let rippleColor: string, radioColor: string;\n\n  return (\n    <RadioButtonContext.Consumer>\n      {(context?: RadioButtonContextType) => {\n        const checked =\n          isChecked({\n            contextValue: context?.value,\n            status,\n            value,\n          }) === 'checked';\n\n        if (disabled) {\n          rippleColor = color(theme.colors.text).alpha(0.16).rgb().string();\n          radioColor = theme.colors.disabled;\n        } else {\n          rippleColor = color(checkedColor).fade(0.32).rgb().string();\n          radioColor = checked ? checkedColor : uncheckedColor;\n        }\n\n        return (\n          <TouchableRipple\n            {...rest}\n            borderless\n            rippleColor={rippleColor}\n            onPress={\n              disabled\n                ? undefined\n                : () => {\n                    handlePress({\n                      onPress,\n                      onValueChange: context?.onValueChange,\n                      value,\n                    });\n                  }\n            }\n            // @ts-expect-error We keep old a11y props for backwards compat with old RN versions\n            accessibilityTraits={disabled ? ['button', 'disabled'] : 'button'}\n            accessibilityComponentType={\n              checked ? 'radiobutton_checked' : 'radiobutton_unchecked'\n            }\n            accessibilityRole=\"radio\"\n            accessibilityState={{ disabled, checked }}\n            accessibilityLiveRegion=\"polite\"\n            style={styles.container}\n            testID={testID}\n          >\n            <Animated.View\n              style={[\n                styles.radio,\n                {\n                  borderColor: radioColor,\n                  borderWidth: borderAnim,\n                },\n              ]}\n            >\n              {checked ? (\n                <View style={[StyleSheet.absoluteFill, styles.radioContainer]}>\n                  <Animated.View\n                    style={[\n                      styles.dot,\n                      {\n                        backgroundColor: radioColor,\n                        transform: [{ scale: radioAnim }],\n                      },\n                    ]}\n                  />\n                </View>\n              ) : null}\n            </Animated.View>\n          </TouchableRipple>\n        );\n      }}\n    </RadioButtonContext.Consumer>\n  );\n};\n\nRadioButtonAndroid.displayName = 'RadioButton.Android';\n\nconst styles = StyleSheet.create({\n  container: {\n    borderRadius: 18,\n  },\n  radioContainer: {\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  radio: {\n    height: 20,\n    width: 20,\n    borderRadius: 10,\n    margin: 8,\n  },\n  dot: {\n    height: 10,\n    width: 10,\n    borderRadius: 5,\n  },\n});\n\nexport default withTheme(RadioButtonAndroid);\n\n// @component-docs ignore-next-line\nconst RadioButtonAndroidWithTheme = withTheme(RadioButtonAndroid);\n// @component-docs ignore-next-line\nexport { RadioButtonAndroidWithTheme as RadioButtonAndroid };\n"]}