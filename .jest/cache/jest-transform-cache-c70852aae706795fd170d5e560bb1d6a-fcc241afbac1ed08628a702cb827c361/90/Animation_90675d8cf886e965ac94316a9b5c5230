b2d7efb146da43cbd2becea04e8e2f52
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var NativeAnimatedHelper = require('../NativeAnimatedHelper');

var startNativeAnimationNextId = 1;

var Animation = function () {
  function Animation() {
    (0, _classCallCheck2.default)(this, Animation);
  }

  (0, _createClass2.default)(Animation, [{
    key: "start",
    value: function start(fromValue, onUpdate, onEnd, previousAnimation, animatedValue) {}
  }, {
    key: "stop",
    value: function stop() {
      if (this.__nativeId) {
        NativeAnimatedHelper.API.stopAnimation(this.__nativeId);
      }
    }
  }, {
    key: "__getNativeAnimationConfig",
    value: function __getNativeAnimationConfig() {
      throw new Error('This animation type cannot be offloaded to native');
    }
  }, {
    key: "__debouncedOnEnd",
    value: function __debouncedOnEnd(result) {
      var onEnd = this.__onEnd;
      this.__onEnd = null;
      onEnd && onEnd(result);
    }
  }, {
    key: "__startNativeAnimation",
    value: function __startNativeAnimation(animatedValue) {
      var startNativeAnimationWaitId = startNativeAnimationNextId + ":startAnimation";
      startNativeAnimationNextId += 1;
      NativeAnimatedHelper.API.setWaitingForIdentifier(startNativeAnimationWaitId);

      try {
        animatedValue.__makeNative();

        this.__nativeId = NativeAnimatedHelper.generateNewAnimationId();
        NativeAnimatedHelper.API.startAnimatingNode(this.__nativeId, animatedValue.__getNativeTag(), this.__getNativeAnimationConfig(), this.__debouncedOnEnd.bind(this));
      } catch (e) {
        throw e;
      } finally {
        NativeAnimatedHelper.API.unsetWaitingForIdentifier(startNativeAnimationWaitId);
      }
    }
  }]);
  return Animation;
}();

module.exports = Animation;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkFuaW1hdGlvbi5qcyJdLCJuYW1lcyI6WyJOYXRpdmVBbmltYXRlZEhlbHBlciIsInJlcXVpcmUiLCJzdGFydE5hdGl2ZUFuaW1hdGlvbk5leHRJZCIsIkFuaW1hdGlvbiIsImZyb21WYWx1ZSIsIm9uVXBkYXRlIiwib25FbmQiLCJwcmV2aW91c0FuaW1hdGlvbiIsImFuaW1hdGVkVmFsdWUiLCJfX25hdGl2ZUlkIiwiQVBJIiwic3RvcEFuaW1hdGlvbiIsIkVycm9yIiwicmVzdWx0IiwiX19vbkVuZCIsInN0YXJ0TmF0aXZlQW5pbWF0aW9uV2FpdElkIiwic2V0V2FpdGluZ0ZvcklkZW50aWZpZXIiLCJfX21ha2VOYXRpdmUiLCJnZW5lcmF0ZU5ld0FuaW1hdGlvbklkIiwic3RhcnRBbmltYXRpbmdOb2RlIiwiX19nZXROYXRpdmVUYWciLCJfX2dldE5hdGl2ZUFuaW1hdGlvbkNvbmZpZyIsIl9fZGVib3VuY2VkT25FbmQiLCJiaW5kIiwiZSIsInVuc2V0V2FpdGluZ0ZvcklkZW50aWZpZXIiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFVQTs7Ozs7Ozs7QUFFQSxJQUFNQSxvQkFBb0IsR0FBR0MsT0FBTyxDQUFDLHlCQUFELENBQXBDOztBQWNBLElBQUlDLDBCQUEwQixHQUFHLENBQWpDOztJQUtNQyxTOzs7Ozs7O1dBTUosZUFDRUMsU0FERixFQUVFQyxRQUZGLEVBR0VDLEtBSEYsRUFJRUMsaUJBSkYsRUFLRUMsYUFMRixFQU1RLENBQUU7OztXQUNWLGdCQUFhO0FBQ1gsVUFBSSxLQUFLQyxVQUFULEVBQXFCO0FBQ25CVCxRQUFBQSxvQkFBb0IsQ0FBQ1UsR0FBckIsQ0FBeUJDLGFBQXpCLENBQXVDLEtBQUtGLFVBQTVDO0FBQ0Q7QUFDRjs7O1dBQ0Qsc0NBQWtDO0FBR2hDLFlBQU0sSUFBSUcsS0FBSixDQUFVLG1EQUFWLENBQU47QUFDRDs7O1dBRUQsMEJBQWlCQyxNQUFqQixFQUEwQztBQUN4QyxVQUFNUCxLQUFLLEdBQUcsS0FBS1EsT0FBbkI7QUFDQSxXQUFLQSxPQUFMLEdBQWUsSUFBZjtBQUNBUixNQUFBQSxLQUFLLElBQUlBLEtBQUssQ0FBQ08sTUFBRCxDQUFkO0FBQ0Q7OztXQUNELGdDQUF1QkwsYUFBdkIsRUFBMkQ7QUFDekQsVUFBTU8sMEJBQTBCLEdBQU1iLDBCQUFOLG9CQUFoQztBQUNBQSxNQUFBQSwwQkFBMEIsSUFBSSxDQUE5QjtBQUNBRixNQUFBQSxvQkFBb0IsQ0FBQ1UsR0FBckIsQ0FBeUJNLHVCQUF6QixDQUNFRCwwQkFERjs7QUFHQSxVQUFJO0FBQ0ZQLFFBQUFBLGFBQWEsQ0FBQ1MsWUFBZDs7QUFDQSxhQUFLUixVQUFMLEdBQWtCVCxvQkFBb0IsQ0FBQ2tCLHNCQUFyQixFQUFsQjtBQUNBbEIsUUFBQUEsb0JBQW9CLENBQUNVLEdBQXJCLENBQXlCUyxrQkFBekIsQ0FDRSxLQUFLVixVQURQLEVBRUVELGFBQWEsQ0FBQ1ksY0FBZCxFQUZGLEVBR0UsS0FBS0MsMEJBQUwsRUFIRixFQUtFLEtBQUtDLGdCQUFMLENBQXNCQyxJQUF0QixDQUEyQixJQUEzQixDQUxGO0FBT0QsT0FWRCxDQVVFLE9BQU9DLENBQVAsRUFBVTtBQUNWLGNBQU1BLENBQU47QUFDRCxPQVpELFNBWVU7QUFDUnhCLFFBQUFBLG9CQUFvQixDQUFDVSxHQUFyQixDQUF5QmUseUJBQXpCLENBQ0VWLDBCQURGO0FBR0Q7QUFDRjs7Ozs7QUFHSFcsTUFBTSxDQUFDQyxPQUFQLEdBQWlCeEIsU0FBakIiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBmbG93XG4gKiBAZm9ybWF0XG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBOYXRpdmVBbmltYXRlZEhlbHBlciA9IHJlcXVpcmUoJy4uL05hdGl2ZUFuaW1hdGVkSGVscGVyJyk7XG5cbmltcG9ydCB0eXBlIEFuaW1hdGVkVmFsdWUgZnJvbSAnLi4vbm9kZXMvQW5pbWF0ZWRWYWx1ZSc7XG5cbmV4cG9ydCB0eXBlIEVuZFJlc3VsdCA9IHtmaW5pc2hlZDogYm9vbGVhbiwgLi4ufTtcbmV4cG9ydCB0eXBlIEVuZENhbGxiYWNrID0gKHJlc3VsdDogRW5kUmVzdWx0KSA9PiB2b2lkO1xuXG5leHBvcnQgdHlwZSBBbmltYXRpb25Db25maWcgPSB7XG4gIGlzSW50ZXJhY3Rpb24/OiBib29sZWFuLFxuICB1c2VOYXRpdmVEcml2ZXI6IGJvb2xlYW4sXG4gIG9uQ29tcGxldGU/OiA/RW5kQ2FsbGJhY2ssXG4gIGl0ZXJhdGlvbnM/OiBudW1iZXIsXG59O1xuXG5sZXQgc3RhcnROYXRpdmVBbmltYXRpb25OZXh0SWQgPSAxO1xuXG4vLyBJbXBvcnRhbnQgbm90ZTogc3RhcnQoKSBhbmQgc3RvcCgpIHdpbGwgb25seSBiZSBjYWxsZWQgYXQgbW9zdCBvbmNlLlxuLy8gT25jZSBhbiBhbmltYXRpb24gaGFzIGJlZW4gc3RvcHBlZCBvciBmaW5pc2hlZCBpdHMgY291cnNlLCBpdCB3aWxsXG4vLyBub3QgYmUgcmV1c2VkLlxuY2xhc3MgQW5pbWF0aW9uIHtcbiAgX19hY3RpdmU6IGJvb2xlYW47XG4gIF9faXNJbnRlcmFjdGlvbjogYm9vbGVhbjtcbiAgX19uYXRpdmVJZDogbnVtYmVyO1xuICBfX29uRW5kOiA/RW5kQ2FsbGJhY2s7XG4gIF9faXRlcmF0aW9uczogbnVtYmVyO1xuICBzdGFydChcbiAgICBmcm9tVmFsdWU6IG51bWJlcixcbiAgICBvblVwZGF0ZTogKHZhbHVlOiBudW1iZXIpID0+IHZvaWQsXG4gICAgb25FbmQ6ID9FbmRDYWxsYmFjayxcbiAgICBwcmV2aW91c0FuaW1hdGlvbjogP0FuaW1hdGlvbixcbiAgICBhbmltYXRlZFZhbHVlOiBBbmltYXRlZFZhbHVlLFxuICApOiB2b2lkIHt9XG4gIHN0b3AoKTogdm9pZCB7XG4gICAgaWYgKHRoaXMuX19uYXRpdmVJZCkge1xuICAgICAgTmF0aXZlQW5pbWF0ZWRIZWxwZXIuQVBJLnN0b3BBbmltYXRpb24odGhpcy5fX25hdGl2ZUlkKTtcbiAgICB9XG4gIH1cbiAgX19nZXROYXRpdmVBbmltYXRpb25Db25maWcoKTogYW55IHtcbiAgICAvLyBTdWJjbGFzc2VzIHRoYXQgaGF2ZSBjb3JyZXNwb25kaW5nIGFuaW1hdGlvbiBpbXBsZW1lbnRhdGlvbiBkb25lIGluIG5hdGl2ZVxuICAgIC8vIHNob3VsZCBvdmVycmlkZSB0aGlzIG1ldGhvZFxuICAgIHRocm93IG5ldyBFcnJvcignVGhpcyBhbmltYXRpb24gdHlwZSBjYW5ub3QgYmUgb2ZmbG9hZGVkIHRvIG5hdGl2ZScpO1xuICB9XG4gIC8vIEhlbHBlciBmdW5jdGlvbiBmb3Igc3ViY2xhc3NlcyB0byBtYWtlIHN1cmUgb25FbmQgaXMgb25seSBjYWxsZWQgb25jZS5cbiAgX19kZWJvdW5jZWRPbkVuZChyZXN1bHQ6IEVuZFJlc3VsdCk6IHZvaWQge1xuICAgIGNvbnN0IG9uRW5kID0gdGhpcy5fX29uRW5kO1xuICAgIHRoaXMuX19vbkVuZCA9IG51bGw7XG4gICAgb25FbmQgJiYgb25FbmQocmVzdWx0KTtcbiAgfVxuICBfX3N0YXJ0TmF0aXZlQW5pbWF0aW9uKGFuaW1hdGVkVmFsdWU6IEFuaW1hdGVkVmFsdWUpOiB2b2lkIHtcbiAgICBjb25zdCBzdGFydE5hdGl2ZUFuaW1hdGlvbldhaXRJZCA9IGAke3N0YXJ0TmF0aXZlQW5pbWF0aW9uTmV4dElkfTpzdGFydEFuaW1hdGlvbmA7XG4gICAgc3RhcnROYXRpdmVBbmltYXRpb25OZXh0SWQgKz0gMTtcbiAgICBOYXRpdmVBbmltYXRlZEhlbHBlci5BUEkuc2V0V2FpdGluZ0ZvcklkZW50aWZpZXIoXG4gICAgICBzdGFydE5hdGl2ZUFuaW1hdGlvbldhaXRJZCxcbiAgICApO1xuICAgIHRyeSB7XG4gICAgICBhbmltYXRlZFZhbHVlLl9fbWFrZU5hdGl2ZSgpO1xuICAgICAgdGhpcy5fX25hdGl2ZUlkID0gTmF0aXZlQW5pbWF0ZWRIZWxwZXIuZ2VuZXJhdGVOZXdBbmltYXRpb25JZCgpO1xuICAgICAgTmF0aXZlQW5pbWF0ZWRIZWxwZXIuQVBJLnN0YXJ0QW5pbWF0aW5nTm9kZShcbiAgICAgICAgdGhpcy5fX25hdGl2ZUlkLFxuICAgICAgICBhbmltYXRlZFZhbHVlLl9fZ2V0TmF0aXZlVGFnKCksXG4gICAgICAgIHRoaXMuX19nZXROYXRpdmVBbmltYXRpb25Db25maWcoKSxcbiAgICAgICAgLy8gJEZsb3dGaXhNZVttZXRob2QtdW5iaW5kaW5nXSBhZGRlZCB3aGVuIGltcHJvdmluZyB0eXBpbmcgZm9yIHRoaXMgcGFyYW1ldGVyc1xuICAgICAgICB0aGlzLl9fZGVib3VuY2VkT25FbmQuYmluZCh0aGlzKSxcbiAgICAgICk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgdGhyb3cgZTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgTmF0aXZlQW5pbWF0ZWRIZWxwZXIuQVBJLnVuc2V0V2FpdGluZ0ZvcklkZW50aWZpZXIoXG4gICAgICAgIHN0YXJ0TmF0aXZlQW5pbWF0aW9uV2FpdElkLFxuICAgICAgKTtcbiAgICB9XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBBbmltYXRpb247XG4iXX0=