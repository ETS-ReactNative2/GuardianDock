{"version":3,"sources":["LayoutAnimation.js"],"names":["UIManager","require","configureNext","config","onAnimationDidEnd","onAnimationDidFail","Platform","isTesting","animationCompletionHasRun","onAnimationComplete","clearTimeout","raceWithAnimationId","setTimeout","duration","FabricUIManager","global","nativeFabricUIManager","configureNextLayoutAnimation","create","type","property","update","delete","Presets","easeInEaseOut","linear","spring","springDamping","LayoutAnimation","Types","Object","freeze","easeIn","easeOut","keyboard","Properties","opacity","scaleX","scaleY","scaleXY","checkConfig","console","error","bind","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\n'use strict';\n\nconst UIManager = require('../ReactNative/UIManager');\nimport type {Spec as FabricUIManagerSpec} from '../ReactNative/FabricUIManager';\nimport type {\n  LayoutAnimationConfig as LayoutAnimationConfig_,\n  LayoutAnimationType,\n  LayoutAnimationProperty,\n} from '../Renderer/shims/ReactNativeTypes';\n\nimport Platform from '../Utilities/Platform';\n\n// Reexport type\nexport type LayoutAnimationConfig = LayoutAnimationConfig_;\n\ntype OnAnimationDidEndCallback = () => void;\ntype OnAnimationDidFailCallback = () => void;\n\n/**\n * Configures the next commit to be animated.\n *\n * onAnimationDidEnd is guaranteed to be called when the animation completes.\n * onAnimationDidFail is *never* called in the classic, pre-Fabric renderer,\n * and never has been. In the new renderer (Fabric) it is called only if configuration\n * parsing fails.\n */\nfunction configureNext(\n  config: LayoutAnimationConfig,\n  onAnimationDidEnd?: OnAnimationDidEndCallback,\n  onAnimationDidFail?: OnAnimationDidFailCallback,\n) {\n  if (Platform.isTesting) {\n    return;\n  }\n\n  // Since LayoutAnimations may possibly be disabled for now on iOS (Fabric),\n  // or Android (non-Fabric) we race a setTimeout with animation completion,\n  // in case onComplete is never called\n  // from native. Once LayoutAnimations+Fabric unconditionally ship everywhere, we can\n  // delete this mechanism at least in the Fabric branch.\n  let animationCompletionHasRun = false;\n  const onAnimationComplete = () => {\n    if (animationCompletionHasRun) {\n      return;\n    }\n    animationCompletionHasRun = true;\n    clearTimeout(raceWithAnimationId);\n    onAnimationDidEnd?.();\n  };\n  const raceWithAnimationId = setTimeout(\n    onAnimationComplete,\n    (config.duration ?? 0) + 17 /* one frame + 1ms */,\n  );\n\n  // In Fabric, LayoutAnimations are unconditionally enabled for Android, and\n  // conditionally enabled on iOS (pending fully shipping; this is a temporary state).\n  const FabricUIManager: FabricUIManagerSpec = global?.nativeFabricUIManager;\n  if (FabricUIManager?.configureNextLayoutAnimation) {\n    global?.nativeFabricUIManager?.configureNextLayoutAnimation(\n      config,\n      onAnimationComplete,\n      onAnimationDidFail ??\n        function() {} /* this will only be called if configuration parsing fails */,\n    );\n    return;\n  }\n\n  // This will only run if Fabric is *not* installed.\n  // If you have Fabric + non-Fabric running in the same VM, non-Fabric LayoutAnimations\n  // will not work.\n  if (UIManager?.configureNextLayoutAnimation) {\n    UIManager.configureNextLayoutAnimation(\n      config,\n      onAnimationComplete ?? function() {},\n      onAnimationDidFail ??\n        function() {} /* this should never be called in Non-Fabric */,\n    );\n  }\n}\n\nfunction create(\n  duration: number,\n  type: LayoutAnimationType,\n  property: LayoutAnimationProperty,\n): LayoutAnimationConfig {\n  return {\n    duration,\n    create: {type, property},\n    update: {type},\n    delete: {type, property},\n  };\n}\n\nconst Presets = {\n  easeInEaseOut: (create(\n    300,\n    'easeInEaseOut',\n    'opacity',\n  ): LayoutAnimationConfig),\n  linear: (create(500, 'linear', 'opacity'): LayoutAnimationConfig),\n  spring: {\n    duration: 700,\n    create: {\n      type: 'linear',\n      property: 'opacity',\n    },\n    update: {\n      type: 'spring',\n      springDamping: 0.4,\n    },\n    delete: {\n      type: 'linear',\n      property: 'opacity',\n    },\n  },\n};\n\n/**\n * Automatically animates views to their new positions when the\n * next layout happens.\n *\n * A common way to use this API is to call it before calling `setState`.\n *\n * Note that in order to get this to work on **Android** you need to set the following flags via `UIManager`:\n *\n *     UIManager.setLayoutAnimationEnabledExperimental && UIManager.setLayoutAnimationEnabledExperimental(true);\n */\nconst LayoutAnimation = {\n  /**\n   * Schedules an animation to happen on the next layout.\n   *\n   * @param config Specifies animation properties:\n   *\n   *   - `duration` in milliseconds\n   *   - `create`, `AnimationConfig` for animating in new views\n   *   - `update`, `AnimationConfig` for animating views that have been updated\n   *\n   * @param onAnimationDidEnd Called when the animation finished.\n   * Only supported on iOS.\n   * @param onError Called on error. Only supported on iOS.\n   */\n  configureNext,\n  /**\n   * Helper for creating a config for `configureNext`.\n   */\n  create,\n  Types: Object.freeze({\n    spring: 'spring',\n    linear: 'linear',\n    easeInEaseOut: 'easeInEaseOut',\n    easeIn: 'easeIn',\n    easeOut: 'easeOut',\n    keyboard: 'keyboard',\n  }),\n  Properties: Object.freeze({\n    opacity: 'opacity',\n    scaleX: 'scaleX',\n    scaleY: 'scaleY',\n    scaleXY: 'scaleXY',\n  }),\n  checkConfig(...args: Array<mixed>) {\n    console.error('LayoutAnimation.checkConfig(...) has been disabled.');\n  },\n  Presets,\n  easeInEaseOut: (configureNext.bind(null, Presets.easeInEaseOut): (\n    onAnimationDidEnd?: OnAnimationDidEndCallback,\n  ) => void),\n  linear: (configureNext.bind(null, Presets.linear): (\n    onAnimationDidEnd?: OnAnimationDidEndCallback,\n  ) => void),\n  spring: (configureNext.bind(null, Presets.spring): (\n    onAnimationDidEnd?: OnAnimationDidEndCallback,\n  ) => void),\n};\n\nmodule.exports = LayoutAnimation;\n"]}