{"version":3,"mappings":";;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAOe,SAASA,sBAAT,GAAkC;AAC/C,sBAAoCC,KAAK,CAACC,MAAND,CAKjC;AACDE,YAAQ,EAAE,EADT;AAEDC,gBAAY,EAAE;AAFb,GALiCH,CAApC;AAAA,MAAiBI,cAAjB,iBAAQC,OAAR;;AAUA,MAAMC,gBAAgB,GAAGN,KAAK,CAACO,WAANP,CACvB,UACEQ,IADF,EAEEC,GAFF,EAGEC,QAHF,EAIK;AACHN,kBAAc,CAACI,IAAD,CAAdJ,CAAqBK,GAArBL,IAA4BM,QAA5BN;AAEA,WAAO,YAAM;AACXA,oBAAc,CAACI,IAAD,CAAdJ,CAAqBK,GAArBL,IAA4BO,SAA5BP;AADF;AARqB,KAYvB,CAACA,cAAD,CAZuBJ,CAAzB;AAeA,SAAO;AACLI,kBADK,EACLA,cADK;AAELE;AAFK,GAAP;AAID","names":["useKeyedChildListeners","React","useRef","getState","beforeRemove","keyedListeners","current","addKeyedListener","useCallback","type","key","listener","undefined"],"sources":["useKeyedChildListeners.tsx"],"sourcesContent":["import * as React from 'react';\n\nimport type { KeyedListenerMap } from './NavigationBuilderContext';\n\n/**\n * Hook which lets child navigators add getters to be called for obtaining rehydrated state.\n */\nexport default function useKeyedChildListeners() {\n  const { current: keyedListeners } = React.useRef<{\n    [K in keyof KeyedListenerMap]: Record<\n      string,\n      KeyedListenerMap[K] | undefined\n    >;\n  }>({\n    getState: {},\n    beforeRemove: {},\n  });\n\n  const addKeyedListener = React.useCallback(\n    <T extends keyof KeyedListenerMap>(\n      type: T,\n      key: string,\n      listener: KeyedListenerMap[T]\n    ) => {\n      keyedListeners[type][key] = listener;\n\n      return () => {\n        keyedListeners[type][key] = undefined;\n      };\n    },\n    [keyedListeners]\n  );\n\n  return {\n    keyedListeners,\n    addKeyedListener,\n  };\n}\n"]}