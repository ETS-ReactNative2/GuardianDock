3d8e4446d24918b22cdcbd26c9274b20
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = useDrawerProgress;

var React = _interopRequireWildcard(require("react"));

var _DrawerProgressContext = _interopRequireDefault(require("./DrawerProgressContext"));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

function _getRequireWildcardCache(nodeInterop) {
  if (typeof WeakMap !== "function") return null;
  var cacheBabelInterop = new WeakMap();
  var cacheNodeInterop = new WeakMap();
  return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {
    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
  })(nodeInterop);
}

function _interopRequireWildcard(obj, nodeInterop) {
  if (!nodeInterop && obj && obj.__esModule) {
    return obj;
  }

  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }

  var cache = _getRequireWildcardCache(nodeInterop);

  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }

  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

  for (var key in obj) {
    if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }

  newObj.default = obj;

  if (cache) {
    cache.set(obj, newObj);
  }

  return newObj;
}

function useDrawerProgress() {
  var progress = React.useContext(_DrawerProgressContext.default);

  if (progress === undefined) {
    throw new Error("Couldn't find a drawer. Is your component inside a drawer navigator?");
  }

  return progress;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBOztBQUdBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBRWUsU0FBU0EsaUJBQVQsR0FFVztBQUN4QixNQUFNQyxRQUFRLEdBQUdDLEtBQUssQ0FBQ0MsVUFBTkQsQ0FBaUJFLDhCQUFqQkYsQ0FBakI7O0FBRUEsTUFBSUQsUUFBUSxLQUFLSSxTQUFqQixFQUE0QjtBQUMxQixVQUFNLElBQUlDLEtBQUosQ0FDSixzRUFESSxDQUFOO0FBR0Q7O0FBRUQsU0FBT0wsUUFBUDtBQUNEIiwibmFtZXMiOlsidXNlRHJhd2VyUHJvZ3Jlc3MiLCJwcm9ncmVzcyIsIlJlYWN0IiwidXNlQ29udGV4dCIsIkRyYXdlclByb2dyZXNzQ29udGV4dCIsInVuZGVmaW5lZCIsIkVycm9yIl0sInNvdXJjZXMiOlsidXNlRHJhd2VyUHJvZ3Jlc3MudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB0eXBlIEFuaW1hdGVkIGZyb20gJ3JlYWN0LW5hdGl2ZS1yZWFuaW1hdGVkJztcblxuaW1wb3J0IERyYXdlclByb2dyZXNzQ29udGV4dCBmcm9tICcuL0RyYXdlclByb2dyZXNzQ29udGV4dCc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHVzZURyYXdlclByb2dyZXNzKCk6XG4gIHwgUmVhZG9ubHk8QW5pbWF0ZWQuU2hhcmVkVmFsdWU8bnVtYmVyPj5cbiAgfCBBbmltYXRlZC5Ob2RlPG51bWJlcj4ge1xuICBjb25zdCBwcm9ncmVzcyA9IFJlYWN0LnVzZUNvbnRleHQoRHJhd2VyUHJvZ3Jlc3NDb250ZXh0KTtcblxuICBpZiAocHJvZ3Jlc3MgPT09IHVuZGVmaW5lZCkge1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgIFwiQ291bGRuJ3QgZmluZCBhIGRyYXdlci4gSXMgeW91ciBjb21wb25lbnQgaW5zaWRlIGEgZHJhd2VyIG5hdmlnYXRvcj9cIlxuICAgICk7XG4gIH1cblxuICByZXR1cm4gcHJvZ3Jlc3M7XG59XG4iXX0=