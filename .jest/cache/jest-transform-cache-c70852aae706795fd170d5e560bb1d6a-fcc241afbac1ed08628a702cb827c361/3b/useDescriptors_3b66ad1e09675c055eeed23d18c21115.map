{"version":3,"mappings":"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","names":["useDescriptors","state","screens","navigation","screenOptions","defaultScreenOptions","onAction","getState","setState","addListener","addKeyedListener","onRouteFocus","router","emitter","React","useState","options","setOptions","useContext","NavigationBuilderContext","onDispatchAction","onOptionsChange","stackRef","context","useMemo","navigations","routes","reduce","acc","route","i","config","name","screen","props","key","optionsList","filter","Boolean","customOptions","curr","Object","mergedOptions","clearOptions","o","_","rest","render","_NavigationBuilderContext","Provider","value","_NavigationContext","_NavigationRouteContext","_SceneView","routeState"],"sources":["useDescriptors.tsx"],"sourcesContent":["import type {\n  NavigationAction,\n  NavigationState,\n  ParamListBase,\n  Router,\n} from '@react-navigation/routers';\nimport * as React from 'react';\n\nimport NavigationBuilderContext, {\n  AddKeyedListener,\n  AddListener,\n} from './NavigationBuilderContext';\nimport NavigationContext from './NavigationContext';\nimport NavigationRouteContext from './NavigationRouteContext';\nimport SceneView from './SceneView';\nimport type {\n  Descriptor,\n  EventMapBase,\n  NavigationHelpers,\n  NavigationProp,\n  RouteConfig,\n  RouteProp,\n} from './types';\nimport type { NavigationEventEmitter } from './useEventEmitter';\nimport useNavigationCache from './useNavigationCache';\nimport useRouteCache from './useRouteCache';\n\nexport type ScreenConfigWithParent<\n  State extends NavigationState,\n  ScreenOptions extends {},\n  EventMap extends EventMapBase\n> = {\n  keys: (string | undefined)[];\n  options: (ScreenOptionsOrCallback<ScreenOptions> | undefined)[] | undefined;\n  props: RouteConfig<ParamListBase, string, State, ScreenOptions, EventMap>;\n};\n\ntype ScreenOptionsOrCallback<ScreenOptions extends {}> =\n  | ScreenOptions\n  | ((props: {\n      route: RouteProp<ParamListBase, string>;\n      navigation: any;\n    }) => ScreenOptions);\n\ntype Options<\n  State extends NavigationState,\n  ScreenOptions extends {},\n  EventMap extends EventMapBase\n> = {\n  state: State;\n  screens: Record<\n    string,\n    ScreenConfigWithParent<State, ScreenOptions, EventMap>\n  >;\n  navigation: NavigationHelpers<ParamListBase>;\n  screenOptions?: ScreenOptionsOrCallback<ScreenOptions>;\n  defaultScreenOptions?:\n    | ScreenOptions\n    | ((props: {\n        route: RouteProp<ParamListBase>;\n        navigation: any;\n        options: ScreenOptions;\n      }) => ScreenOptions);\n  onAction: (action: NavigationAction) => boolean;\n  getState: () => State;\n  setState: (state: State) => void;\n  addListener: AddListener;\n  addKeyedListener: AddKeyedListener;\n  onRouteFocus: (key: string) => void;\n  router: Router<State, NavigationAction>;\n  emitter: NavigationEventEmitter<EventMap>;\n};\n\n/**\n * Hook to create descriptor objects for the child routes.\n *\n * A descriptor object provides 3 things:\n * - Helper method to render a screen\n * - Options specified by the screen for the navigator\n * - Navigation object intended for the route\n */\nexport default function useDescriptors<\n  State extends NavigationState,\n  ActionHelpers extends Record<string, () => void>,\n  ScreenOptions extends {},\n  EventMap extends EventMapBase\n>({\n  state,\n  screens,\n  navigation,\n  screenOptions,\n  defaultScreenOptions,\n  onAction,\n  getState,\n  setState,\n  addListener,\n  addKeyedListener,\n  onRouteFocus,\n  router,\n  emitter,\n}: Options<State, ScreenOptions, EventMap>) {\n  const [options, setOptions] = React.useState<Record<string, object>>({});\n  const { onDispatchAction, onOptionsChange, stackRef } = React.useContext(\n    NavigationBuilderContext\n  );\n\n  const context = React.useMemo(\n    () => ({\n      navigation,\n      onAction,\n      addListener,\n      addKeyedListener,\n      onRouteFocus,\n      onDispatchAction,\n      onOptionsChange,\n      stackRef,\n    }),\n    [\n      navigation,\n      onAction,\n      addListener,\n      addKeyedListener,\n      onRouteFocus,\n      onDispatchAction,\n      onOptionsChange,\n      stackRef,\n    ]\n  );\n\n  const navigations = useNavigationCache<State, ScreenOptions, EventMap>({\n    state,\n    getState,\n    navigation,\n    setOptions,\n    router,\n    emitter,\n  });\n\n  const routes = useRouteCache(state.routes);\n\n  return routes.reduce<\n    Record<\n      string,\n      Descriptor<\n        ScreenOptions,\n        NavigationProp<ParamListBase, string, State, ScreenOptions, EventMap> &\n          ActionHelpers,\n        RouteProp<ParamListBase>\n      >\n    >\n  >((acc, route, i) => {\n    const config = screens[route.name];\n    const screen = config.props;\n    const navigation = navigations[route.key];\n\n    const optionsList = [\n      // The default `screenOptions` passed to the navigator\n      screenOptions,\n      // The `screenOptions` props passed to `Group` elements\n      ...((config.options\n        ? config.options.filter(Boolean)\n        : []) as ScreenOptionsOrCallback<ScreenOptions>[]),\n      // The `options` prop passed to `Screen` elements,\n      screen.options,\n      // The options set via `navigation.setOptions`\n      options[route.key],\n    ];\n\n    const customOptions = optionsList.reduce<ScreenOptions>(\n      (acc, curr) =>\n        Object.assign(\n          acc,\n          typeof curr !== 'function' ? curr : curr({ route, navigation })\n        ),\n      {} as ScreenOptions\n    );\n\n    const mergedOptions = {\n      ...(typeof defaultScreenOptions === 'function'\n        ? // @ts-expect-error: ts gives incorrect error here\n          defaultScreenOptions({\n            route,\n            navigation,\n            options: customOptions,\n          })\n        : defaultScreenOptions),\n      ...customOptions,\n    };\n\n    const clearOptions = () =>\n      setOptions((o) => {\n        if (route.key in o) {\n          // eslint-disable-next-line @typescript-eslint/no-unused-vars\n          const { [route.key]: _, ...rest } = o;\n          return rest;\n        }\n\n        return o;\n      });\n\n    acc[route.key] = {\n      route,\n      // @ts-expect-error: it's missing action helpers, fix later\n      navigation,\n      render() {\n        return (\n          <NavigationBuilderContext.Provider key={route.key} value={context}>\n            <NavigationContext.Provider value={navigation}>\n              <NavigationRouteContext.Provider value={route}>\n                <SceneView\n                  navigation={navigation}\n                  route={route}\n                  screen={screen}\n                  routeState={state.routes[i].state}\n                  getState={getState}\n                  setState={setState}\n                  options={mergedOptions}\n                  clearOptions={clearOptions}\n                />\n              </NavigationRouteContext.Provider>\n            </NavigationContext.Provider>\n          </NavigationBuilderContext.Provider>\n        );\n      },\n      options: mergedOptions as ScreenOptions,\n    };\n\n    return acc;\n  }, {});\n}\n"]}