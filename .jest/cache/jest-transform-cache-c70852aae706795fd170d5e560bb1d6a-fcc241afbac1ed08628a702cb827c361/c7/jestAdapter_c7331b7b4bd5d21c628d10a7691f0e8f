c136eb8e8c2f413f8142ef32b6b1d5c3
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

function _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

var _jestUtil = require('jest-util');

var FRAMEWORK_INITIALIZER = require.resolve("./jestAdapterInit");

var jestAdapter = function _callee(globalConfig, config, environment, runtime, testPath, sendMessageToJest) {
  var _runtime$requireInter, initialize, runAndTransformResultsToJestFormat, _await$initialize, globals, snapshotState, _iterator, _step, path, _esm, esm, results;

  return _regenerator.default.async(function _callee$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          _runtime$requireInter = runtime.requireInternalModule(FRAMEWORK_INITIALIZER), initialize = _runtime$requireInter.initialize, runAndTransformResultsToJestFormat = _runtime$requireInter.runAndTransformResultsToJestFormat;
          _context.next = 3;
          return _regenerator.default.awrap(initialize({
            config: config,
            environment: environment,
            globalConfig: globalConfig,
            localRequire: runtime.requireModule.bind(runtime),
            parentProcess: process,
            sendMessageToJest: sendMessageToJest,
            setGlobalsForRuntime: runtime.setGlobalsForRuntime.bind(runtime),
            testPath: testPath
          }));

        case 3:
          _await$initialize = _context.sent;
          globals = _await$initialize.globals;
          snapshotState = _await$initialize.snapshotState;

          if (config.timers === 'fake' || config.timers === 'modern') {
            environment.fakeTimersModern.useFakeTimers();
          } else if (config.timers === 'legacy') {
            environment.fakeTimers.useFakeTimers();
          }

          globals.beforeEach(function () {
            if (config.resetModules) {
              runtime.resetModules();
            }

            if (config.clearMocks) {
              runtime.clearAllMocks();
            }

            if (config.resetMocks) {
              runtime.resetAllMocks();

              if (config.timers === 'legacy') {
                environment.fakeTimers.useFakeTimers();
              }
            }

            if (config.restoreMocks) {
              runtime.restoreAllMocks();
            }
          });
          _iterator = _createForOfIteratorHelperLoose(config.setupFilesAfterEnv);

        case 9:
          if ((_step = _iterator()).done) {
            _context.next = 20;
            break;
          }

          path = _step.value;
          _esm = runtime.unstable_shouldLoadAsEsm(path);

          if (!_esm) {
            _context.next = 17;
            break;
          }

          _context.next = 15;
          return _regenerator.default.awrap(runtime.unstable_importModule(path));

        case 15:
          _context.next = 18;
          break;

        case 17:
          runtime.requireModule(path);

        case 18:
          _context.next = 9;
          break;

        case 20:
          esm = runtime.unstable_shouldLoadAsEsm(testPath);

          if (!esm) {
            _context.next = 26;
            break;
          }

          _context.next = 24;
          return _regenerator.default.awrap(runtime.unstable_importModule(testPath));

        case 24:
          _context.next = 27;
          break;

        case 26:
          runtime.requireModule(testPath);

        case 27:
          _context.next = 29;
          return _regenerator.default.awrap(runAndTransformResultsToJestFormat({
            config: config,
            globalConfig: globalConfig,
            testPath: testPath
          }));

        case 29:
          results = _context.sent;

          _addSnapshotData(results, snapshotState);

          return _context.abrupt("return", (0, _jestUtil.deepCyclicCopy)(results, {
            keepPrototype: false
          }));

        case 32:
        case "end":
          return _context.stop();
      }
    }
  }, null, null, null, Promise);
};

var _addSnapshotData = function _addSnapshotData(results, snapshotState) {
  results.testResults.forEach(function (_ref) {
    var fullName = _ref.fullName,
        status = _ref.status;

    if (status === 'pending' || status === 'failed') {
      snapshotState.markSnapshotsAsCheckedForTest(fullName);
    }
  });
  var uncheckedCount = snapshotState.getUncheckedCount();
  var uncheckedKeys = snapshotState.getUncheckedKeys();

  if (uncheckedCount) {
    snapshotState.removeUncheckedKeys();
  }

  var status = snapshotState.save();
  results.snapshot.fileDeleted = status.deleted;
  results.snapshot.added = snapshotState.added;
  results.snapshot.matched = snapshotState.matched;
  results.snapshot.unmatched = snapshotState.unmatched;
  results.snapshot.updated = snapshotState.updated;
  results.snapshot.unchecked = !status.deleted ? uncheckedCount : 0;
  results.snapshot.uncheckedKeys = Array.from(uncheckedKeys);
};

module.exports = jestAdapter;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,