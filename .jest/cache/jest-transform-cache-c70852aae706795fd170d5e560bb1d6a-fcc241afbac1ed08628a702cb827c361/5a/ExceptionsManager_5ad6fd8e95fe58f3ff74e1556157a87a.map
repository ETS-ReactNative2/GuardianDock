{"version":3,"sources":["ExceptionsManager.js"],"names":["SyntheticError","name","Error","userExceptionDecorator","inUserExceptionDecorator","unstable_setExceptionDecorator","exceptionDecorator","preprocessException","data","exceptionID","reportException","e","isFatal","reportToConsole","parseErrorStack","require","stack","currentExceptionID","originalMessage","message","componentStack","namePrefix","startsWith","jsEngine","id","extraData","rawStack","console","error","__DEV__","LogBox","addException","isComponentError","type","NativeExceptionsManager","default","inExceptionHandler","handleException","reactConsoleErrorHandler","args","_errorOriginal","reportErrorsAsExceptions","firstArg","stringifySafe","map","arg","join","installConsoleErrorReporter","bind","undefined","module","exports"],"mappings":"AAUA;;;;;;;;;;;;;;;;;;;;;;IAKMA,c;;;;;;;;;;;;;;;UACJC,I,GAAe,E;;;;;iCADYC,K;;AAM7B,IAAIC,sBAAJ;AACA,IAAIC,wBAAwB,GAAG,KAA/B;;AAOA,SAASC,8BAAT,CACEC,kBADF,EAEE;AACAH,EAAAA,sBAAsB,GAAGG,kBAAzB;AACD;;AAED,SAASC,mBAAT,CAA6BC,IAA7B,EAAiE;AAC/D,MAAIL,sBAAsB,IAAI,CAACC,wBAA/B,EAAyD;AACvDA,IAAAA,wBAAwB,GAAG,IAA3B;;AACA,QAAI;AACF,aAAOD,sBAAsB,CAACK,IAAD,CAA7B;AACD,KAFD,CAEE,gBAAM,CAEP,CAJD,SAIU;AACRJ,MAAAA,wBAAwB,GAAG,KAA3B;AACD;AACF;;AACD,SAAOI,IAAP;AACD;;AAKD,IAAIC,WAAW,GAAG,CAAlB;;AACA,SAASC,eAAT,CACEC,CADF,EAEEC,OAFF,EAGEC,eAHF,EAIE;AACA,MAAMC,eAAe,GAAGC,OAAO,CAAC,4BAAD,CAA/B;;AACA,MAAMC,KAAK,GAAGF,eAAe,CAACH,CAAD,oBAACA,CAAC,CAAEK,KAAJ,CAA7B;AACA,MAAMC,kBAAkB,GAAG,EAAER,WAA7B;AACA,MAAMS,eAAe,GAAGP,CAAC,CAACQ,OAAF,IAAa,EAArC;AACA,MAAIA,OAAO,GAAGD,eAAd;;AACA,MAAIP,CAAC,CAACS,cAAF,IAAoB,IAAxB,EAA8B;AAC5BD,IAAAA,OAAO,sCAAoCR,CAAC,CAACS,cAA7C;AACD;;AACD,MAAMC,UAAU,GAAGV,CAAC,CAACV,IAAF,IAAU,IAAV,IAAkBU,CAAC,CAACV,IAAF,KAAW,EAA7B,GAAkC,EAAlC,GAA0CU,CAAC,CAACV,IAA5C,OAAnB;;AAEA,MAAI,CAACkB,OAAO,CAACG,UAAR,CAAmBD,UAAnB,CAAL,EAAqC;AACnCF,IAAAA,OAAO,GAAGE,UAAU,GAAGF,OAAvB;AACD;;AAEDA,EAAAA,OAAO,GACLR,CAAC,CAACY,QAAF,IAAc,IAAd,GAAqBJ,OAArB,GAAkCA,OAAlC,qBAAyDR,CAAC,CAACY,QAD7D;AAGA,MAAMf,IAAI,GAAGD,mBAAmB,CAAC;AAC/BY,IAAAA,OAAO,EAAPA,OAD+B;AAE/BD,IAAAA,eAAe,EAAEC,OAAO,KAAKD,eAAZ,GAA8B,IAA9B,GAAqCA,eAFvB;AAG/BjB,IAAAA,IAAI,EAAEU,CAAC,CAACV,IAAF,IAAU,IAAV,IAAkBU,CAAC,CAACV,IAAF,KAAW,EAA7B,GAAkC,IAAlC,GAAyCU,CAAC,CAACV,IAHlB;AAI/BmB,IAAAA,cAAc,EACZ,OAAOT,CAAC,CAACS,cAAT,KAA4B,QAA5B,GAAuCT,CAAC,CAACS,cAAzC,GAA0D,IAL7B;AAM/BJ,IAAAA,KAAK,EAALA,KAN+B;AAO/BQ,IAAAA,EAAE,EAAEP,kBAP2B;AAQ/BL,IAAAA,OAAO,EAAPA,OAR+B;AAS/Ba,IAAAA,SAAS,EAAE;AACTF,MAAAA,QAAQ,EAAEZ,CAAC,CAACY,QADH;AAETG,MAAAA,QAAQ,EAAEf,CAAC,CAACK;AAFH;AAToB,GAAD,CAAhC;;AAeA,MAAIH,eAAJ,EAAqB;AAInBc,IAAAA,OAAO,CAACC,KAAR,CAAcpB,IAAI,CAACW,OAAnB;AACD;;AAED,MAAIU,OAAJ,EAAa;AACX,QAAMC,MAAM,GAAGf,OAAO,CAAC,kBAAD,CAAtB;;AACAe,IAAAA,MAAM,CAACC,YAAP,4BACKvB,IADL;AAEEwB,MAAAA,gBAAgB,EAAE,CAAC,CAACrB,CAAC,CAACqB;AAFxB;AAID,GAND,MAMO,IAAIpB,OAAO,IAAID,CAAC,CAACsB,IAAF,KAAW,MAA1B,EAAkC;AACvC,QAAMC,uBAAuB,GAAGnB,OAAO,CAAC,2BAAD,CAAP,CAC7BoB,OADH;;AAEA,QAAID,uBAAJ,EAA6B;AAC3BA,MAAAA,uBAAuB,CAACxB,eAAxB,CAAwCF,IAAxC;AACD;AACF;AACF;;AAUD,IAAI4B,kBAAkB,GAAG,KAAzB;;AAKA,SAASC,eAAT,CAAyB1B,CAAzB,EAAmCC,OAAnC,EAAqD;AACnD,MAAIgB,KAAJ;;AACA,MAAIjB,CAAC,YAAYT,KAAjB,EAAwB;AACtB0B,IAAAA,KAAK,GAAGjB,CAAR;AACD,GAFD,MAEO;AAKLiB,IAAAA,KAAK,GAAG,IAAI5B,cAAJ,CAAmBW,CAAnB,CAAR;AACD;;AACD,MAAI;AACFyB,IAAAA,kBAAkB,GAAG,IAArB;AAGA1B,IAAAA,eAAe,CAACkB,KAAD,EAAQhB,OAAR,EAAqC,IAArC,CAAf;AACD,GALD,SAKU;AACRwB,IAAAA,kBAAkB,GAAG,KAArB;AACD;AACF;;AAED,SAASE,wBAAT,GAA2C;AAAA;;AAAA,qCAANC,IAAM;AAANA,IAAAA,IAAM;AAAA;;AAEzC,cAAAZ,OAAO,EAACa,cAAR,iBAA0BD,IAA1B;;AACA,MAAI,CAACZ,OAAO,CAACc,wBAAb,EAAuC;AACrC;AACD;;AACD,MAAIL,kBAAJ,EAAwB;AA6BtB;AACD;;AAED,MAAIR,KAAJ;AAEA,MAAMc,QAAQ,GAAGH,IAAI,CAAC,CAAD,CAArB;;AACA,MAAIG,QAAJ,YAAIA,QAAQ,CAAE1B,KAAd,EAAqB;AAEnBY,IAAAA,KAAK,GAAGc,QAAR;AACD,GAHD,MAGO;AACL,QAAMC,aAAa,GAAG5B,OAAO,CAAC,4BAAD,CAAP,CAAsCoB,OAA5D;;AACA,QAAI,OAAOO,QAAP,KAAoB,QAApB,IAAgCA,QAAQ,CAACpB,UAAT,CAAoB,WAApB,CAApC,EAAsE;AAIpE;AACD;;AACD,QAAMH,OAAO,GAAGoB,IAAI,CACjBK,GADa,CACT,UAAAC,GAAG;AAAA,aAAK,OAAOA,GAAP,KAAe,QAAf,GAA0BA,GAA1B,GAAgCF,aAAa,CAACE,GAAD,CAAlD;AAAA,KADM,EAEbC,IAFa,CAER,GAFQ,CAAhB;AAIAlB,IAAAA,KAAK,GAAG,IAAI5B,cAAJ,CAAmBmB,OAAnB,CAAR;AACAS,IAAAA,KAAK,CAAC3B,IAAN,GAAa,eAAb;AACD;;AAEDS,EAAAA,eAAe,CAGbkB,KAHa,EAIb,KAJa,EAKb,KALa,CAAf;AAOD;;AAMD,SAASmB,2BAAT,GAAuC;AAErC,MAAIpB,OAAO,CAACa,cAAZ,EAA4B;AAC1B;AACD;;AAEDb,EAAAA,OAAO,CAACa,cAAR,GAAyBb,OAAO,CAACC,KAAR,CAAcoB,IAAd,CAAmBrB,OAAnB,CAAzB;AACAA,EAAAA,OAAO,CAACC,KAAR,GAAgBU,wBAAhB;;AACA,MAAIX,OAAO,CAACc,wBAAR,KAAqCQ,SAAzC,EAAoD;AAGlDtB,IAAAA,OAAO,CAACc,wBAAR,GAAmC,IAAnC;AACD;AACF;;AAEDS,MAAM,CAACC,OAAP,GAAiB;AACfd,EAAAA,eAAe,EAAfA,eADe;AAEfU,EAAAA,2BAA2B,EAA3BA,2BAFe;AAGf/C,EAAAA,cAAc,EAAdA,cAHe;AAIfK,EAAAA,8BAA8B,EAA9BA;AAJe,CAAjB","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow strict-local\n */\n\n'use strict';\n\nimport type {ExtendedError} from './ExtendedError';\nimport type {ExceptionData} from './NativeExceptionsManager';\n\nclass SyntheticError extends Error {\n  name: string = '';\n}\n\ntype ExceptionDecorator = ExceptionData => ExceptionData;\n\nlet userExceptionDecorator: ?ExceptionDecorator;\nlet inUserExceptionDecorator = false;\n\n/**\n * Allows the app to add information to the exception report before it is sent\n * to native. This API is not final.\n */\n\nfunction unstable_setExceptionDecorator(\n  exceptionDecorator: ?ExceptionDecorator,\n) {\n  userExceptionDecorator = exceptionDecorator;\n}\n\nfunction preprocessException(data: ExceptionData): ExceptionData {\n  if (userExceptionDecorator && !inUserExceptionDecorator) {\n    inUserExceptionDecorator = true;\n    try {\n      return userExceptionDecorator(data);\n    } catch {\n      // Fall through\n    } finally {\n      inUserExceptionDecorator = false;\n    }\n  }\n  return data;\n}\n\n/**\n * Handles the developer-visible aspect of errors and exceptions\n */\nlet exceptionID = 0;\nfunction reportException(\n  e: ExtendedError,\n  isFatal: boolean,\n  reportToConsole: boolean, // only true when coming from handleException; the error has not yet been logged\n) {\n  const parseErrorStack = require('./Devtools/parseErrorStack');\n  const stack = parseErrorStack(e?.stack);\n  const currentExceptionID = ++exceptionID;\n  const originalMessage = e.message || '';\n  let message = originalMessage;\n  if (e.componentStack != null) {\n    message += `\\n\\nThis error is located at:${e.componentStack}`;\n  }\n  const namePrefix = e.name == null || e.name === '' ? '' : `${e.name}: `;\n\n  if (!message.startsWith(namePrefix)) {\n    message = namePrefix + message;\n  }\n\n  message =\n    e.jsEngine == null ? message : `${message}, js engine: ${e.jsEngine}`;\n\n  const data = preprocessException({\n    message,\n    originalMessage: message === originalMessage ? null : originalMessage,\n    name: e.name == null || e.name === '' ? null : e.name,\n    componentStack:\n      typeof e.componentStack === 'string' ? e.componentStack : null,\n    stack,\n    id: currentExceptionID,\n    isFatal,\n    extraData: {\n      jsEngine: e.jsEngine,\n      rawStack: e.stack,\n    },\n  });\n\n  if (reportToConsole) {\n    // we feed back into console.error, to make sure any methods that are\n    // monkey patched on top of console.error are called when coming from\n    // handleException\n    console.error(data.message);\n  }\n\n  if (__DEV__) {\n    const LogBox = require('../LogBox/LogBox');\n    LogBox.addException({\n      ...data,\n      isComponentError: !!e.isComponentError,\n    });\n  } else if (isFatal || e.type !== 'warn') {\n    const NativeExceptionsManager = require('./NativeExceptionsManager')\n      .default;\n    if (NativeExceptionsManager) {\n      NativeExceptionsManager.reportException(data);\n    }\n  }\n}\n\ndeclare var console: typeof console & {\n  _errorOriginal: typeof console.error,\n  reportErrorsAsExceptions: boolean,\n  ...\n};\n\n// If we trigger console.error _from_ handleException,\n// we do want to make sure that console.error doesn't trigger error reporting again\nlet inExceptionHandler = false;\n\n/**\n * Logs exceptions to the (native) console and displays them\n */\nfunction handleException(e: mixed, isFatal: boolean) {\n  let error: Error;\n  if (e instanceof Error) {\n    error = e;\n  } else {\n    // Workaround for reporting errors caused by `throw 'some string'`\n    // Unfortunately there is no way to figure out the stacktrace in this\n    // case, so if you ended up here trying to trace an error, look for\n    // `throw '<error message>'` somewhere in your codebase.\n    error = new SyntheticError(e);\n  }\n  try {\n    inExceptionHandler = true;\n    /* $FlowFixMe[class-object-subtyping] added when improving typing for this\n     * parameters */\n    reportException(error, isFatal, /*reportToConsole*/ true);\n  } finally {\n    inExceptionHandler = false;\n  }\n}\n\nfunction reactConsoleErrorHandler(...args) {\n  // bubble up to any original handlers\n  console._errorOriginal(...args);\n  if (!console.reportErrorsAsExceptions) {\n    return;\n  }\n  if (inExceptionHandler) {\n    // The fundamental trick here is that are multiple entry point to logging errors:\n    // (see D19743075 for more background)\n    //\n    // 1. An uncaught exception being caught by the global handler\n    // 2. An error being logged throw console.error\n    //\n    // However, console.error is monkey patched multiple times: by this module, and by the\n    // DevTools setup that sends messages to Metro.\n    // The patching order cannot be relied upon.\n    //\n    // So, some scenarios that are handled by this flag:\n    //\n    // Logging an error:\n    // 1. console.error called from user code\n    // 2. (possibly) arrives _first_ at DevTool handler, send to Metro\n    // 3. Bubbles to here\n    // 4. goes into report Exception.\n    // 5. should not trigger console.error again, to avoid looping / logging twice\n    // 6. should still bubble up to original console\n    //    (which might either be console.log, or the DevTools handler in case it patched _earlier_ and (2) didn't happen)\n    //\n    // Throwing an uncaught exception:\n    // 1. exception thrown\n    // 2. picked up by handleException\n    // 3. should be send to console.error (not console._errorOriginal, as DevTools might have patched _later_ and it needs to send it to Metro)\n    // 4. that _might_ bubble again to the `reactConsoleErrorHandle` defined here\n    //    -> should not handle exception _again_, to avoid looping / showing twice (this code branch)\n    // 5. should still bubble up to original console (which might either be console.log, or the DevTools handler in case that one patched _earlier_)\n    return;\n  }\n\n  let error;\n\n  const firstArg = args[0];\n  if (firstArg?.stack) {\n    // reportException will console.error this with high enough fidelity.\n    error = firstArg;\n  } else {\n    const stringifySafe = require('../Utilities/stringifySafe').default;\n    if (typeof firstArg === 'string' && firstArg.startsWith('Warning: ')) {\n      // React warnings use console.error so that a stack trace is shown, but\n      // we don't (currently) want these to show a redbox\n      // (Note: Logic duplicated in polyfills/console.js.)\n      return;\n    }\n    const message = args\n      .map(arg => (typeof arg === 'string' ? arg : stringifySafe(arg)))\n      .join(' ');\n\n    error = new SyntheticError(message);\n    error.name = 'console.error';\n  }\n\n  reportException(\n    /* $FlowFixMe[class-object-subtyping] added when improving typing for this\n     * parameters */\n    error,\n    false, // isFatal\n    false, // reportToConsole\n  );\n}\n\n/**\n * Shows a redbox with stacktrace for all console.error messages.  Disable by\n * setting `console.reportErrorsAsExceptions = false;` in your app.\n */\nfunction installConsoleErrorReporter() {\n  // Enable reportErrorsAsExceptions\n  if (console._errorOriginal) {\n    return; // already installed\n  }\n  // Flow doesn't like it when you set arbitrary values on a global object\n  console._errorOriginal = console.error.bind(console);\n  console.error = reactConsoleErrorHandler;\n  if (console.reportErrorsAsExceptions === undefined) {\n    // Individual apps can disable this\n    // Flow doesn't like it when you set arbitrary values on a global object\n    console.reportErrorsAsExceptions = true;\n  }\n}\n\nmodule.exports = {\n  handleException,\n  installConsoleErrorReporter,\n  SyntheticError,\n  unstable_setExceptionDecorator,\n};\n"]}