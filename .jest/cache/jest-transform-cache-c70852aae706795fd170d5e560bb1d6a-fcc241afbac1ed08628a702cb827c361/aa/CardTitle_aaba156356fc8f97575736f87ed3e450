44d188908aff9660fe19ecc24e4ade13
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CardTitle = exports.default = void 0;

var React = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

var _theming = require("../../core/theming");

var _Caption = _interopRequireDefault(require("./../Typography/Caption"));

var _Title = _interopRequireDefault(require("./../Typography/Title"));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

function _getRequireWildcardCache() {
  if (typeof WeakMap !== "function") return null;
  var cache = new WeakMap();

  _getRequireWildcardCache = function _getRequireWildcardCache() {
    return cache;
  };

  return cache;
}

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  }

  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }

  var cache = _getRequireWildcardCache();

  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }

  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }

  newObj.default = obj;

  if (cache) {
    cache.set(obj, newObj);
  }

  return newObj;
}

var LEFT_SIZE = 40;

var CardTitle = function CardTitle(_ref) {
  var title = _ref.title,
      titleStyle = _ref.titleStyle,
      _ref$titleNumberOfLin = _ref.titleNumberOfLines,
      titleNumberOfLines = _ref$titleNumberOfLin === void 0 ? 1 : _ref$titleNumberOfLin,
      subtitle = _ref.subtitle,
      subtitleStyle = _ref.subtitleStyle,
      _ref$subtitleNumberOf = _ref.subtitleNumberOfLines,
      subtitleNumberOfLines = _ref$subtitleNumberOf === void 0 ? 1 : _ref$subtitleNumberOf,
      left = _ref.left,
      leftStyle = _ref.leftStyle,
      right = _ref.right,
      rightStyle = _ref.rightStyle,
      style = _ref.style;
  return React.createElement(_reactNative.View, {
    style: [styles.container, {
      minHeight: subtitle || left || right ? 72 : 50
    }, style]
  }, left ? React.createElement(_reactNative.View, {
    style: [styles.left, leftStyle]
  }, left({
    size: LEFT_SIZE
  })) : null, React.createElement(_reactNative.View, {
    style: [styles.titles]
  }, title ? React.createElement(_Title.default, {
    style: [styles.title, {
      marginBottom: subtitle ? 0 : 2
    }, titleStyle],
    numberOfLines: titleNumberOfLines
  }, title) : null, subtitle ? React.createElement(_Caption.default, {
    style: [styles.subtitle, subtitleStyle],
    numberOfLines: subtitleNumberOfLines
  }, subtitle) : null), React.createElement(_reactNative.View, {
    style: rightStyle
  }, right ? right({
    size: 24
  }) : null));
};

exports.CardTitle = CardTitle;
CardTitle.displayName = 'Card.Title';

var styles = _reactNative.StyleSheet.create({
  container: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    paddingLeft: 16
  },
  left: {
    justifyContent: 'center',
    marginRight: 16,
    height: LEFT_SIZE,
    width: LEFT_SIZE
  },
  titles: {
    flex: 1,
    flexDirection: 'column',
    justifyContent: 'center'
  },
  title: {
    minHeight: 30,
    paddingRight: 16
  },
  subtitle: {
    minHeight: 20,
    marginVertical: 0,
    paddingRight: 16
  }
});

var _default = (0, _theming.withTheme)(CardTitle);

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,