71b4eb21983d035423bfe0f48e63fc94
'use strict';

function deepFreezeAndThrowOnMutationInDev(object) {
  if (__DEV__) {
    if (typeof object !== 'object' || object === null || Object.isFrozen(object) || Object.isSealed(object)) {
      return object;
    }

    var keys = Object.keys(object);
    var _hasOwnProperty = Object.prototype.hasOwnProperty;

    for (var i = 0; i < keys.length; i++) {
      var key = keys[i];

      if (_hasOwnProperty.call(object, key)) {
        Object.defineProperty(object, key, {
          get: identity.bind(null, object[key])
        });
        Object.defineProperty(object, key, {
          set: throwOnImmutableMutation.bind(null, key)
        });
      }
    }

    Object.freeze(object);
    Object.seal(object);

    for (var _i = 0; _i < keys.length; _i++) {
      var _key = keys[_i];

      if (_hasOwnProperty.call(object, _key)) {
        deepFreezeAndThrowOnMutationInDev(object[_key]);
      }
    }
  }

  return object;
}

function throwOnImmutableMutation(key, value) {
  throw Error('You attempted to set the key `' + key + '` with the value `' + JSON.stringify(value) + '` on an object that is meant to be immutable ' + 'and has been frozen.');
}

function identity(value) {
  return value;
}

module.exports = deepFreezeAndThrowOnMutationInDev;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImRlZXBGcmVlemVBbmRUaHJvd09uTXV0YXRpb25JbkRldi5qcyJdLCJuYW1lcyI6WyJkZWVwRnJlZXplQW5kVGhyb3dPbk11dGF0aW9uSW5EZXYiLCJvYmplY3QiLCJfX0RFVl9fIiwiT2JqZWN0IiwiaXNGcm96ZW4iLCJpc1NlYWxlZCIsImtleXMiLCJoYXNPd25Qcm9wZXJ0eSIsInByb3RvdHlwZSIsImkiLCJsZW5ndGgiLCJrZXkiLCJjYWxsIiwiZGVmaW5lUHJvcGVydHkiLCJnZXQiLCJpZGVudGl0eSIsImJpbmQiLCJzZXQiLCJ0aHJvd09uSW1tdXRhYmxlTXV0YXRpb24iLCJmcmVlemUiLCJzZWFsIiwidmFsdWUiLCJFcnJvciIsIkpTT04iLCJzdHJpbmdpZnkiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFVQTs7QUFtQkEsU0FBU0EsaUNBQVQsQ0FDRUMsTUFERixFQUVLO0FBQ0gsTUFBSUMsT0FBSixFQUFhO0FBQ1gsUUFDRSxPQUFPRCxNQUFQLEtBQWtCLFFBQWxCLElBQ0FBLE1BQU0sS0FBSyxJQURYLElBRUFFLE1BQU0sQ0FBQ0MsUUFBUCxDQUFnQkgsTUFBaEIsQ0FGQSxJQUdBRSxNQUFNLENBQUNFLFFBQVAsQ0FBZ0JKLE1BQWhCLENBSkYsRUFLRTtBQUNBLGFBQU9BLE1BQVA7QUFDRDs7QUFHRCxRQUFNSyxJQUFJLEdBQUdILE1BQU0sQ0FBQ0csSUFBUCxDQUFhTCxNQUFiLENBQWI7QUFFQSxRQUFNTSxlQUFjLEdBQUdKLE1BQU0sQ0FBQ0ssU0FBUCxDQUFpQkQsY0FBeEM7O0FBRUEsU0FBSyxJQUFJRSxDQUFDLEdBQUcsQ0FBYixFQUFnQkEsQ0FBQyxHQUFHSCxJQUFJLENBQUNJLE1BQXpCLEVBQWlDRCxDQUFDLEVBQWxDLEVBQXNDO0FBQ3BDLFVBQU1FLEdBQUcsR0FBR0wsSUFBSSxDQUFDRyxDQUFELENBQWhCOztBQUNBLFVBQUlGLGVBQWMsQ0FBQ0ssSUFBZixDQUFvQlgsTUFBcEIsRUFBNEJVLEdBQTVCLENBQUosRUFBc0M7QUFDcENSLFFBQUFBLE1BQU0sQ0FBQ1UsY0FBUCxDQUFzQlosTUFBdEIsRUFBOEJVLEdBQTlCLEVBQW1DO0FBQ2pDRyxVQUFBQSxHQUFHLEVBQUVDLFFBQVEsQ0FBQ0MsSUFBVCxDQUFjLElBQWQsRUFBb0JmLE1BQU0sQ0FBQ1UsR0FBRCxDQUExQjtBQUQ0QixTQUFuQztBQUdBUixRQUFBQSxNQUFNLENBQUNVLGNBQVAsQ0FBc0JaLE1BQXRCLEVBQThCVSxHQUE5QixFQUFtQztBQUNqQ00sVUFBQUEsR0FBRyxFQUFFQyx3QkFBd0IsQ0FBQ0YsSUFBekIsQ0FBOEIsSUFBOUIsRUFBb0NMLEdBQXBDO0FBRDRCLFNBQW5DO0FBR0Q7QUFDRjs7QUFFRFIsSUFBQUEsTUFBTSxDQUFDZ0IsTUFBUCxDQUFjbEIsTUFBZDtBQUNBRSxJQUFBQSxNQUFNLENBQUNpQixJQUFQLENBQVluQixNQUFaOztBQUVBLFNBQUssSUFBSVEsRUFBQyxHQUFHLENBQWIsRUFBZ0JBLEVBQUMsR0FBR0gsSUFBSSxDQUFDSSxNQUF6QixFQUFpQ0QsRUFBQyxFQUFsQyxFQUFzQztBQUNwQyxVQUFNRSxJQUFHLEdBQUdMLElBQUksQ0FBQ0csRUFBRCxDQUFoQjs7QUFDQSxVQUFJRixlQUFjLENBQUNLLElBQWYsQ0FBb0JYLE1BQXBCLEVBQTRCVSxJQUE1QixDQUFKLEVBQXNDO0FBQ3BDWCxRQUFBQSxpQ0FBaUMsQ0FBQ0MsTUFBTSxDQUFDVSxJQUFELENBQVAsQ0FBakM7QUFDRDtBQUNGO0FBQ0Y7O0FBQ0QsU0FBT1YsTUFBUDtBQUNEOztBQUVELFNBQVNpQix3QkFBVCxDQUFrQ1AsR0FBbEMsRUFBdUNVLEtBQXZDLEVBQThDO0FBQzVDLFFBQU1DLEtBQUssQ0FDVCxtQ0FDRVgsR0FERixHQUVFLG9CQUZGLEdBR0VZLElBQUksQ0FBQ0MsU0FBTCxDQUFlSCxLQUFmLENBSEYsR0FJRSwrQ0FKRixHQUtFLHNCQU5PLENBQVg7QUFRRDs7QUFFRCxTQUFTTixRQUFULENBQWtCTSxLQUFsQixFQUF5QjtBQUN2QixTQUFPQSxLQUFQO0FBQ0Q7O0FBRURJLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQjFCLGlDQUFqQiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZvcm1hdFxuICogQGZsb3cgc3RyaWN0XG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIElmIHlvdXIgYXBwbGljYXRpb24gaXMgYWNjZXB0aW5nIGRpZmZlcmVudCB2YWx1ZXMgZm9yIHRoZSBzYW1lIGZpZWxkIG92ZXJcbiAqIHRpbWUgYW5kIGlzIGRvaW5nIGEgZGlmZiBvbiB0aGVtLCB5b3UgY2FuIGVpdGhlciAoMSkgY3JlYXRlIGEgY29weSBvclxuICogKDIpIGVuc3VyZSB0aGF0IHRob3NlIHZhbHVlcyBhcmUgbm90IG11dGF0ZWQgYmVoaW5kIHR3byBwYXNzZXMuXG4gKiBUaGlzIGZ1bmN0aW9uIGhlbHBzIHlvdSB3aXRoICgyKSBieSBmcmVlemluZyB0aGUgb2JqZWN0IGFuZCB0aHJvd2luZyBpZlxuICogdGhlIHVzZXIgc3Vic2VxdWVudGx5IG1vZGlmaWVzIHRoZSB2YWx1ZS5cbiAqXG4gKiBUaGVyZSBhcmUgdHdvIGNhdmVhdHMgd2l0aCB0aGlzIGZ1bmN0aW9uOlxuICogICAtIElmIHRoZSBjYWxsIHNpdGUgaXMgbm90IGluIHN0cmljdCBtb2RlLCBpdCB3aWxsIG9ubHkgdGhyb3cgd2hlblxuICogICAgIG11dGF0aW5nIGV4aXN0aW5nIGZpZWxkcywgYWRkaW5nIGEgbmV3IG9uZVxuICogICAgIHdpbGwgdW5mb3J0dW5hdGVseSBmYWlsIHNpbGVudGx5IDooXG4gKiAgIC0gSWYgdGhlIG9iamVjdCBpcyBhbHJlYWR5IGZyb3plbiBvciBzZWFsZWQsIGl0IHdpbGwgbm90IGNvbnRpbnVlIHRoZVxuICogICAgIGRlZXAgdHJhdmVyc2FsIGFuZCB3aWxsIGxlYXZlIGxlYWYgbm9kZXMgdW5mcm96ZW4uXG4gKlxuICogRnJlZXppbmcgdGhlIG9iamVjdCBhbmQgYWRkaW5nIHRoZSB0aHJvdyBtZWNoYW5pc20gaXMgZXhwZW5zaXZlIGFuZCB3aWxsXG4gKiBvbmx5IGJlIHVzZWQgaW4gREVWLlxuICovXG5mdW5jdGlvbiBkZWVwRnJlZXplQW5kVGhyb3dPbk11dGF0aW9uSW5EZXY8VDogey4uLn0gfCBBcnJheTxtaXhlZD4+KFxuICBvYmplY3Q6IFQsXG4pOiBUIHtcbiAgaWYgKF9fREVWX18pIHtcbiAgICBpZiAoXG4gICAgICB0eXBlb2Ygb2JqZWN0ICE9PSAnb2JqZWN0JyB8fFxuICAgICAgb2JqZWN0ID09PSBudWxsIHx8XG4gICAgICBPYmplY3QuaXNGcm96ZW4ob2JqZWN0KSB8fFxuICAgICAgT2JqZWN0LmlzU2VhbGVkKG9iamVjdClcbiAgICApIHtcbiAgICAgIHJldHVybiBvYmplY3Q7XG4gICAgfVxuXG4gICAgLy8gJEZsb3dGaXhNZVtub3QtYW4tb2JqZWN0XSBgb2JqZWN0YCBjYW4gYmUgYW4gYXJyYXksIGJ1dCBPYmplY3Qua2V5cyB3b3JrcyB3aXRoIGFycmF5cyB0b29cbiAgICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMoKG9iamVjdDogey4uLn0gfCBBcnJheTxtaXhlZD4pKTtcbiAgICAvLyAkRmxvd0ZpeE1lW21ldGhvZC11bmJpbmRpbmddIGFkZGVkIHdoZW4gaW1wcm92aW5nIHR5cGluZyBmb3IgdGhpcyBwYXJhbWV0ZXJzXG4gICAgY29uc3QgaGFzT3duUHJvcGVydHkgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjb25zdCBrZXkgPSBrZXlzW2ldO1xuICAgICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBrZXkpKSB7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmplY3QsIGtleSwge1xuICAgICAgICAgIGdldDogaWRlbnRpdHkuYmluZChudWxsLCBvYmplY3Rba2V5XSksXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqZWN0LCBrZXksIHtcbiAgICAgICAgICBzZXQ6IHRocm93T25JbW11dGFibGVNdXRhdGlvbi5iaW5kKG51bGwsIGtleSksXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIE9iamVjdC5mcmVlemUob2JqZWN0KTtcbiAgICBPYmplY3Quc2VhbChvYmplY3QpO1xuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjb25zdCBrZXkgPSBrZXlzW2ldO1xuICAgICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBrZXkpKSB7XG4gICAgICAgIGRlZXBGcmVlemVBbmRUaHJvd09uTXV0YXRpb25JbkRldihvYmplY3Rba2V5XSk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiBvYmplY3Q7XG59XG5cbmZ1bmN0aW9uIHRocm93T25JbW11dGFibGVNdXRhdGlvbihrZXksIHZhbHVlKSB7XG4gIHRocm93IEVycm9yKFxuICAgICdZb3UgYXR0ZW1wdGVkIHRvIHNldCB0aGUga2V5IGAnICtcbiAgICAgIGtleSArXG4gICAgICAnYCB3aXRoIHRoZSB2YWx1ZSBgJyArXG4gICAgICBKU09OLnN0cmluZ2lmeSh2YWx1ZSkgK1xuICAgICAgJ2Agb24gYW4gb2JqZWN0IHRoYXQgaXMgbWVhbnQgdG8gYmUgaW1tdXRhYmxlICcgK1xuICAgICAgJ2FuZCBoYXMgYmVlbiBmcm96ZW4uJyxcbiAgKTtcbn1cblxuZnVuY3Rpb24gaWRlbnRpdHkodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGRlZXBGcmVlemVBbmRUaHJvd09uTXV0YXRpb25JbkRldjtcbiJdfQ==