8a1b152fe60ef72790de5a6fe1e6c75e
"use strict";

var _interopRequireDefault2 = require("@babel/runtime/helpers/interopRequireDefault");

var _defineProperty2 = _interopRequireDefault2(require("@babel/runtime/helpers/defineProperty"));

var _extends3 = _interopRequireDefault2(require("@babel/runtime/helpers/extends"));

var _slicedToArray2 = _interopRequireDefault2(require("@babel/runtime/helpers/slicedToArray"));

var _objectWithoutProperties2 = _interopRequireDefault2(require("@babel/runtime/helpers/objectWithoutProperties"));

var _excluded = ["icon", "label", "accessibilityLabel", "accessibilityState", "color", "disabled", "onPress", "onLongPress", "theme", "style", "visible", "uppercase", "testID", "animateFrom", "extended", "iconMode"];
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var React = _interopRequireWildcard(require("react"));

var _color = _interopRequireDefault(require("color"));

var _reactNative = require("react-native");

var _Surface = _interopRequireDefault(require("../../Surface"));

var _Icon = _interopRequireDefault(require("../../Icon"));

var _TouchableRipple = _interopRequireDefault(require("../../TouchableRipple/TouchableRipple"));

var _theming = require("../../../core/theming");

var _colors = require("../../../styles/colors");

var _AnimatedText = _interopRequireDefault(require("../../Typography/AnimatedText"));

var _utils = require("./utils");

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

function _getRequireWildcardCache() {
  if (typeof WeakMap !== "function") return null;
  var cache = new WeakMap();

  _getRequireWildcardCache = function _getRequireWildcardCache() {
    return cache;
  };

  return cache;
}

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  }

  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }

  var cache = _getRequireWildcardCache();

  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }

  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }

  newObj.default = obj;

  if (cache) {
    cache.set(obj, newObj);
  }

  return newObj;
}

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

var SIZE = 56;
var BORDER_RADIUS = SIZE / 2;
var SCALE = 0.9;

var AnimatedFAB = function AnimatedFAB(_ref) {
  var icon = _ref.icon,
      label = _ref.label,
      _ref$accessibilityLab = _ref.accessibilityLabel,
      accessibilityLabel = _ref$accessibilityLab === void 0 ? label : _ref$accessibilityLab,
      accessibilityState = _ref.accessibilityState,
      customColor = _ref.color,
      disabled = _ref.disabled,
      onPress = _ref.onPress,
      onLongPress = _ref.onLongPress,
      theme = _ref.theme,
      style = _ref.style,
      _ref$visible = _ref.visible,
      visible = _ref$visible === void 0 ? true : _ref$visible,
      _ref$uppercase = _ref.uppercase,
      uppercase = _ref$uppercase === void 0 ? true : _ref$uppercase,
      testID = _ref.testID,
      _ref$animateFrom = _ref.animateFrom,
      animateFrom = _ref$animateFrom === void 0 ? 'right' : _ref$animateFrom,
      _ref$extended = _ref.extended,
      extended = _ref$extended === void 0 ? false : _ref$extended,
      _ref$iconMode = _ref.iconMode,
      iconMode = _ref$iconMode === void 0 ? 'dynamic' : _ref$iconMode,
      rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);
  var isIOS = _reactNative.Platform.OS === 'ios';
  var isAnimatedFromRight = animateFrom === 'right';
  var isIconStatic = iconMode === 'static';
  var isRTL = _reactNative.I18nManager.isRTL;

  var _React$useRef = React.useRef(new _reactNative.Animated.Value(visible ? 1 : 0)),
      visibility = _React$useRef.current;

  var _React$useRef2 = React.useRef(new _reactNative.Animated.Value(0)),
      animFAB = _React$useRef2.current;

  var scale = theme.animation.scale;

  var _React$useState = React.useState(0),
      _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 2),
      textWidth = _React$useState2[0],
      setTextWidth = _React$useState2[1];

  var _React$useState3 = React.useState(0),
      _React$useState4 = (0, _slicedToArray2.default)(_React$useState3, 2),
      textHeight = _React$useState4[0],
      setTextHeight = _React$useState4[1];

  React.useEffect(function () {
    if (visible) {
      _reactNative.Animated.timing(visibility, {
        toValue: 1,
        duration: 200 * scale,
        useNativeDriver: true
      }).start();
    } else {
      _reactNative.Animated.timing(visibility, {
        toValue: 0,
        duration: 150 * scale,
        useNativeDriver: true
      }).start();
    }
  }, [visible, scale, visibility]);
  var disabledColor = (0, _color.default)(theme.dark ? _colors.white : _colors.black).alpha(0.12).rgb().string();

  var _ref2 = _reactNative.StyleSheet.flatten(style) || {},
      _ref2$backgroundColor = _ref2.backgroundColor,
      backgroundColor = _ref2$backgroundColor === void 0 ? disabled ? disabledColor : theme.colors.accent : _ref2$backgroundColor;

  var foregroundColor;

  if (typeof customColor !== 'undefined') {
    foregroundColor = customColor;
  } else if (disabled) {
    foregroundColor = (0, _color.default)(theme.dark ? _colors.white : _colors.black).alpha(0.32).rgb().string();
  } else {
    foregroundColor = !(0, _color.default)(backgroundColor).isLight() ? _colors.white : 'rgba(0, 0, 0, .54)';
  }

  var rippleColor = (0, _color.default)(foregroundColor).alpha(0.32).rgb().string();
  var extendedWidth = textWidth + 1.5 * SIZE;
  var distance = isAnimatedFromRight ? -textWidth - BORDER_RADIUS : textWidth + BORDER_RADIUS;
  React.useEffect(function () {
    _reactNative.Animated.timing(animFAB, {
      toValue: !extended ? 0 : distance,
      duration: 150 * scale,
      useNativeDriver: true,
      easing: _reactNative.Easing.linear
    }).start();
  }, [animFAB, scale, distance, extended]);

  var onTextLayout = function onTextLayout(_ref3) {
    var nativeEvent = _ref3.nativeEvent;
    var currentWidth = Math.ceil(nativeEvent.lines[0].width);
    var currentHeight = Math.ceil(nativeEvent.lines[0].height);

    if (currentWidth !== textWidth || currentHeight !== textHeight) {
      setTextHeight(currentHeight);

      if (isIOS) {
        return setTextWidth(currentWidth - 12);
      }

      setTextWidth(currentWidth);
    }
  };

  var propForDirection = function propForDirection(right) {
    if (isAnimatedFromRight) {
      return right;
    }

    return right.reverse();
  };

  var combinedStyles = (0, _utils.getCombinedStyles)({
    isAnimatedFromRight: isAnimatedFromRight,
    isIconStatic: isIconStatic,
    distance: distance,
    animFAB: animFAB
  });
  return React.createElement(_Surface.default, _extends({}, rest, {
    style: [{
      opacity: visibility,
      transform: [{
        scale: visibility
      }],
      elevation: isIOS ? 6 : 0
    }, styles.container, disabled && styles.disabled, style]
  }), React.createElement(_reactNative.Animated.View, {
    style: [{
      transform: [{
        scaleY: animFAB.interpolate({
          inputRange: propForDirection([distance, 0]),
          outputRange: propForDirection([SCALE, 1])
        })
      }]
    }, styles.standard]
  }, React.createElement(_reactNative.View, {
    style: [_reactNative.StyleSheet.absoluteFill, styles.shadowWrapper]
  }, React.createElement(_reactNative.Animated.View, {
    pointerEvents: "none",
    style: [_reactNative.StyleSheet.absoluteFill, styles.shadow, {
      width: extendedWidth,
      opacity: animFAB.interpolate({
        inputRange: propForDirection([distance, 0.9 * distance, 0]),
        outputRange: propForDirection([1, 0.15, 0])
      })
    }]
  }), React.createElement(_reactNative.Animated.View, {
    pointerEvents: "none",
    style: [_reactNative.StyleSheet.absoluteFill, styles.shadow, {
      opacity: animFAB.interpolate({
        inputRange: propForDirection([distance, 0.9 * distance, 0]),
        outputRange: propForDirection([0, 0.85, 1])
      }),
      width: SIZE,
      borderRadius: animFAB.interpolate({
        inputRange: propForDirection([distance, 0]),
        outputRange: propForDirection([SIZE / (extendedWidth / SIZE), BORDER_RADIUS])
      })
    }, combinedStyles.absoluteFill]
  })), React.createElement(_reactNative.Animated.View, {
    pointerEvents: "box-none",
    style: [styles.innerWrapper]
  }, React.createElement(_reactNative.Animated.View, {
    style: [styles.standard, {
      width: extendedWidth,
      backgroundColor: backgroundColor
    }, combinedStyles.innerWrapper]
  }, React.createElement(_TouchableRipple.default, {
    borderless: true,
    onPress: onPress,
    onLongPress: onLongPress,
    rippleColor: rippleColor,
    disabled: disabled,
    accessibilityLabel: accessibilityLabel,
    accessibilityTraits: disabled ? ['button', 'disabled'] : 'button',
    accessibilityComponentType: "button",
    accessibilityRole: "button",
    accessibilityState: (0, _extends3.default)({}, accessibilityState, {
      disabled: disabled
    }),
    testID: testID,
    style: styles.touchable
  }, React.createElement(_reactNative.View, {
    style: [styles.standard, {
      width: extendedWidth
    }]
  }))))), React.createElement(_reactNative.Animated.View, {
    style: [styles.iconWrapper, combinedStyles.iconWrapper],
    pointerEvents: "none"
  }, React.createElement(_Icon.default, {
    source: icon,
    size: 24,
    color: foregroundColor
  })), React.createElement(_reactNative.View, {
    pointerEvents: "none"
  }, React.createElement(_AnimatedText.default, {
    numberOfLines: 1,
    onTextLayout: isIOS ? onTextLayout : undefined,
    ellipsizeMode: 'tail',
    style: [(0, _defineProperty2.default)({}, isAnimatedFromRight || isRTL ? 'right' : 'left', isIconStatic ? isIOS ? SIZE - 10 : SIZE - 12 : BORDER_RADIUS), {
      minWidth: textWidth,
      top: -BORDER_RADIUS - textHeight / 2,
      opacity: animFAB.interpolate({
        inputRange: propForDirection([distance, 0.7 * distance, 0]),
        outputRange: propForDirection([1, 0, 0])
      }),
      transform: [{
        translateX: animFAB.interpolate({
          inputRange: propForDirection([distance, 0]),
          outputRange: propForDirection([0, SIZE])
        })
      }]
    }, styles.label, uppercase && styles.uppercaseLabel, (0, _extends3.default)({
      color: foregroundColor
    }, theme.fonts.medium)]
  }, label)), !isIOS && React.createElement(_reactNative.ScrollView, {
    style: styles.textPlaceholderContainer
  }, React.createElement(_reactNative.Text, {
    onTextLayout: onTextLayout
  }, label)));
};

var styles = _reactNative.StyleSheet.create({
  standard: {
    height: SIZE,
    borderRadius: BORDER_RADIUS
  },
  disabled: {
    elevation: 0
  },
  container: {
    position: 'absolute',
    backgroundColor: 'transparent',
    borderRadius: BORDER_RADIUS
  },
  innerWrapper: {
    flexDirection: 'row',
    overflow: 'hidden',
    borderRadius: BORDER_RADIUS
  },
  shadowWrapper: {
    elevation: 0
  },
  shadow: {
    elevation: 6,
    borderRadius: BORDER_RADIUS
  },
  touchable: {
    borderRadius: BORDER_RADIUS
  },
  iconWrapper: {
    alignItems: 'center',
    justifyContent: 'center',
    position: 'absolute',
    height: SIZE,
    width: SIZE
  },
  label: {
    position: 'absolute'
  },
  uppercaseLabel: {
    textTransform: 'uppercase'
  },
  textPlaceholderContainer: {
    height: 0,
    position: 'absolute'
  }
});

var _default = (0, _theming.withTheme)(AnimatedFAB);

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,