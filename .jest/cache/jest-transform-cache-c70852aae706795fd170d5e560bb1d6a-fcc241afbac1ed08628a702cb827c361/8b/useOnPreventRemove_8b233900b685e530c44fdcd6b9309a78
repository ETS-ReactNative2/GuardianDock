da4411fb86092a3d0e690ca038bc0df2
"use strict";

var _interopRequireDefault2 = require("@babel/runtime/helpers/interopRequireDefault");

var _defineProperty2 = _interopRequireDefault2(require("@babel/runtime/helpers/defineProperty"));

var _extends3 = _interopRequireDefault2(require("@babel/runtime/helpers/extends"));

function _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = useOnPreventRemove;
exports.shouldPreventRemove = void 0;

var React = _interopRequireWildcard(require("react"));

var _NavigationBuilderContext = _interopRequireDefault(require("./NavigationBuilderContext"));

var _NavigationRouteContext = _interopRequireDefault(require("./NavigationRouteContext"));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

function _getRequireWildcardCache(nodeInterop) {
  if (typeof WeakMap !== "function") return null;
  var cacheBabelInterop = new WeakMap();
  var cacheNodeInterop = new WeakMap();
  return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {
    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
  })(nodeInterop);
}

function _interopRequireWildcard(obj, nodeInterop) {
  if (!nodeInterop && obj && obj.__esModule) {
    return obj;
  }

  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }

  var cache = _getRequireWildcardCache(nodeInterop);

  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }

  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

  for (var key in obj) {
    if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }

  newObj.default = obj;

  if (cache) {
    cache.set(obj, newObj);
  }

  return newObj;
}

var VISITED_ROUTE_KEYS = Symbol('VISITED_ROUTE_KEYS');

var shouldPreventRemove = function shouldPreventRemove(emitter, beforeRemoveListeners, currentRoutes, nextRoutes, action) {
  var _action$VISITED_ROUTE;

  var nextRouteKeys = nextRoutes.map(function (route) {
    return route.key;
  });
  var removedRoutes = currentRoutes.filter(function (route) {
    return !nextRouteKeys.includes(route.key);
  }).reverse();
  var visitedRouteKeys = (_action$VISITED_ROUTE = action[VISITED_ROUTE_KEYS]) !== null && _action$VISITED_ROUTE !== void 0 ? _action$VISITED_ROUTE : new Set();
  var beforeRemoveAction = (0, _extends3.default)({}, action, (0, _defineProperty2.default)({}, VISITED_ROUTE_KEYS, visitedRouteKeys));

  for (var _iterator = _createForOfIteratorHelperLoose(removedRoutes), _step; !(_step = _iterator()).done;) {
    var route = _step.value;

    var _beforeRemoveListener;

    if (visitedRouteKeys.has(route.key)) {
      continue;
    }

    var isPrevented = (_beforeRemoveListener = beforeRemoveListeners[route.key]) === null || _beforeRemoveListener === void 0 ? void 0 : _beforeRemoveListener.call(beforeRemoveListeners, beforeRemoveAction);

    if (isPrevented) {
      return true;
    }

    visitedRouteKeys.add(route.key);
    var event = emitter.emit({
      type: 'beforeRemove',
      target: route.key,
      data: {
        action: beforeRemoveAction
      },
      canPreventDefault: true
    });

    if (event.defaultPrevented) {
      return true;
    }
  }

  return false;
};

exports.shouldPreventRemove = shouldPreventRemove;

function useOnPreventRemove(_ref) {
  var getState = _ref.getState,
      emitter = _ref.emitter,
      beforeRemoveListeners = _ref.beforeRemoveListeners;

  var _React$useContext = React.useContext(_NavigationBuilderContext.default),
      addKeyedListener = _React$useContext.addKeyedListener;

  var route = React.useContext(_NavigationRouteContext.default);
  var routeKey = route === null || route === void 0 ? void 0 : route.key;
  React.useEffect(function () {
    if (routeKey) {
      return addKeyedListener === null || addKeyedListener === void 0 ? void 0 : addKeyedListener('beforeRemove', routeKey, function (action) {
        var state = getState();
        return shouldPreventRemove(emitter, beforeRemoveListeners, state.routes, [], action);
      });
    }
  }, [addKeyedListener, beforeRemoveListeners, emitter, getState, routeKey]);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFJQTs7QUFFQTs7QUFHQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQVVBLElBQU1BLGtCQUFrQixHQUFHQyxNQUFNLENBQUMsb0JBQUQsQ0FBakM7O0FBRU8sSUFBTUMsbUJBQW1CLEdBQUcsU0FBdEJBLG1CQUFzQixDQUNqQ0MsT0FEaUMsRUFFakNDLHFCQUZpQyxFQUdqQ0MsYUFIaUMsRUFJakNDLFVBSmlDLEVBS2pDQyxNQUxpQyxFQU05QjtBQUFBOztBQUNILE1BQU1DLGFBQWEsR0FBR0YsVUFBVSxDQUFDRyxHQUFYSCxDQUFnQkksZUFBRDtBQUFBLFdBQVdBLEtBQUssQ0FBQ0MsR0FBakI7QUFBQSxHQUFmTCxDQUF0QjtBQUdBLE1BQU1NLGFBQWEsR0FBR1AsYUFBYSxDQUNoQ1EsTUFEbUJSLENBQ1hLLGVBQUQ7QUFBQSxXQUFXLENBQUNGLGFBQWEsQ0FBQ00sUUFBZE4sQ0FBdUJFLEtBQUssQ0FBQ0MsR0FBN0JILENBQVo7QUFBQSxHQURZSCxFQUVuQlUsT0FGbUJWLEVBQXRCO0FBSUEsTUFBTVcsZ0JBQTZCLDRCQUVqQ1QsTUFBTSxDQUFDUCxrQkFBRCxDQUYyQix5RUFFSCxJQUFJaUIsR0FBSixFQUZoQztBQUlBLE1BQU1DLGtCQUFrQiw4QkFDbkJYLE1BRG1CLG9DQUVyQlAsa0JBRnFCLEVBRUFnQixnQkFGQSxFQUF4Qjs7QUFLQSx1REFBb0JKLGFBQXBCLHdDQUFtQztBQUFBLFFBQXhCRixLQUF3Qjs7QUFBQTs7QUFDakMsUUFBSU0sZ0JBQWdCLENBQUNHLEdBQWpCSCxDQUFxQk4sS0FBSyxDQUFDQyxHQUEzQkssQ0FBSixFQUFxQztBQUVuQztBQUgrQjs7QUFPakMsUUFBTUksV0FBVyw0QkFBR2hCLHFCQUFxQixDQUFDTSxLQUFLLENBQUNDLEdBQVAsQ0FBeEIsMERBQUdVLGtEQUFtQ0gsa0JBQW5DLENBQXBCOztBQUVBLFFBQUlFLFdBQUosRUFBaUI7QUFDZixhQUFPLElBQVA7QUFDRDs7QUFFREosb0JBQWdCLENBQUNNLEdBQWpCTixDQUFxQk4sS0FBSyxDQUFDQyxHQUEzQks7QUFFQSxRQUFNTyxLQUFLLEdBQUdwQixPQUFPLENBQUNxQixJQUFSckIsQ0FBYTtBQUN6QnNCLFVBQUksRUFBRSxjQURtQjtBQUV6QkMsWUFBTSxFQUFFaEIsS0FBSyxDQUFDQyxHQUZXO0FBR3pCZ0IsVUFBSSxFQUFFO0FBQUVwQixjQUFNLEVBQUVXO0FBQVYsT0FIbUI7QUFJekJVLHVCQUFpQixFQUFFO0FBSk0sS0FBYnpCLENBQWQ7O0FBT0EsUUFBSW9CLEtBQUssQ0FBQ00sZ0JBQVYsRUFBNEI7QUFDMUIsYUFBTyxJQUFQO0FBQ0Q7QUFDRjs7QUFFRCxTQUFPLEtBQVA7QUFsREs7Ozs7QUFxRFEsU0FBU0Msa0JBQVQsT0FJSDtBQUFBLE1BSFZDLFFBR1UsUUFIVkEsUUFHVTtBQUFBLE1BRlY1QixPQUVVLFFBRlZBLE9BRVU7QUFBQSxNQURWQyxxQkFDVSxRQURWQSxxQkFDVTs7QUFDViwwQkFBNkI0QixLQUFLLENBQUNDLFVBQU5ELENBQWlCRSxpQ0FBakJGLENBQTdCO0FBQUEsTUFBUUcsZ0JBQVIscUJBQVFBLGdCQUFSOztBQUNBLE1BQU16QixLQUFLLEdBQUdzQixLQUFLLENBQUNDLFVBQU5ELENBQWlCSSwrQkFBakJKLENBQWQ7QUFDQSxNQUFNSyxRQUFRLEdBQUczQixLQUFILFNBQUdBLFNBQUgsV0FBR0EsR0FBSCxNQUFHQSxRQUFLLENBQUVDLEdBQXhCO0FBRUFxQixPQUFLLENBQUNNLFNBQU5OLENBQWdCLFlBQU07QUFDcEIsUUFBSUssUUFBSixFQUFjO0FBQ1osYUFBT0YsZ0JBQVAsU0FBT0Esb0JBQVAsV0FBT0EsR0FBUCxNQUFPQSxtQkFBZ0IsQ0FBRyxjQUFILEVBQW1CRSxRQUFuQixFQUE4QjlCLGdCQUFELEVBQVk7QUFDOUQsWUFBTWdDLEtBQUssR0FBR1IsUUFBUSxFQUF0QjtBQUVBLGVBQU83QixtQkFBbUIsQ0FDeEJDLE9BRHdCLEVBRXhCQyxxQkFGd0IsRUFHeEJtQyxLQUFLLENBQUNDLE1BSGtCLEVBSXhCLEVBSndCLEVBS3hCakMsTUFMd0IsQ0FBMUI7QUFIcUIsUUFBdkI7QUFXRDtBQWJILEtBY0csQ0FBQzRCLGdCQUFELEVBQW1CL0IscUJBQW5CLEVBQTBDRCxPQUExQyxFQUFtRDRCLFFBQW5ELEVBQTZETSxRQUE3RCxDQWRITDtBQWVEIiwibmFtZXMiOlsiVklTSVRFRF9ST1VURV9LRVlTIiwiU3ltYm9sIiwic2hvdWxkUHJldmVudFJlbW92ZSIsImVtaXR0ZXIiLCJiZWZvcmVSZW1vdmVMaXN0ZW5lcnMiLCJjdXJyZW50Um91dGVzIiwibmV4dFJvdXRlcyIsImFjdGlvbiIsIm5leHRSb3V0ZUtleXMiLCJtYXAiLCJyb3V0ZSIsImtleSIsInJlbW92ZWRSb3V0ZXMiLCJmaWx0ZXIiLCJpbmNsdWRlcyIsInJldmVyc2UiLCJ2aXNpdGVkUm91dGVLZXlzIiwiU2V0IiwiYmVmb3JlUmVtb3ZlQWN0aW9uIiwiaGFzIiwiaXNQcmV2ZW50ZWQiLCJfYmVmb3JlUmVtb3ZlTGlzdGVuZXIiLCJhZGQiLCJldmVudCIsImVtaXQiLCJ0eXBlIiwidGFyZ2V0IiwiZGF0YSIsImNhblByZXZlbnREZWZhdWx0IiwiZGVmYXVsdFByZXZlbnRlZCIsInVzZU9uUHJldmVudFJlbW92ZSIsImdldFN0YXRlIiwiUmVhY3QiLCJ1c2VDb250ZXh0IiwiTmF2aWdhdGlvbkJ1aWxkZXJDb250ZXh0IiwiYWRkS2V5ZWRMaXN0ZW5lciIsIk5hdmlnYXRpb25Sb3V0ZUNvbnRleHQiLCJyb3V0ZUtleSIsInVzZUVmZmVjdCIsInN0YXRlIiwicm91dGVzIl0sInNvdXJjZXMiOlsidXNlT25QcmV2ZW50UmVtb3ZlLnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7XG4gIE5hdmlnYXRpb25BY3Rpb24sXG4gIE5hdmlnYXRpb25TdGF0ZSxcbn0gZnJvbSAnQHJlYWN0LW5hdmlnYXRpb24vcm91dGVycyc7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5cbmltcG9ydCBOYXZpZ2F0aW9uQnVpbGRlckNvbnRleHQsIHtcbiAgQ2hpbGRCZWZvcmVSZW1vdmVMaXN0ZW5lcixcbn0gZnJvbSAnLi9OYXZpZ2F0aW9uQnVpbGRlckNvbnRleHQnO1xuaW1wb3J0IE5hdmlnYXRpb25Sb3V0ZUNvbnRleHQgZnJvbSAnLi9OYXZpZ2F0aW9uUm91dGVDb250ZXh0JztcbmltcG9ydCB0eXBlIHsgRXZlbnRNYXBDb3JlIH0gZnJvbSAnLi90eXBlcyc7XG5pbXBvcnQgdHlwZSB7IE5hdmlnYXRpb25FdmVudEVtaXR0ZXIgfSBmcm9tICcuL3VzZUV2ZW50RW1pdHRlcic7XG5cbnR5cGUgT3B0aW9ucyA9IHtcbiAgZ2V0U3RhdGU6ICgpID0+IE5hdmlnYXRpb25TdGF0ZTtcbiAgZW1pdHRlcjogTmF2aWdhdGlvbkV2ZW50RW1pdHRlcjxFdmVudE1hcENvcmU8YW55Pj47XG4gIGJlZm9yZVJlbW92ZUxpc3RlbmVyczogUmVjb3JkPHN0cmluZywgQ2hpbGRCZWZvcmVSZW1vdmVMaXN0ZW5lciB8IHVuZGVmaW5lZD47XG59O1xuXG5jb25zdCBWSVNJVEVEX1JPVVRFX0tFWVMgPSBTeW1ib2woJ1ZJU0lURURfUk9VVEVfS0VZUycpO1xuXG5leHBvcnQgY29uc3Qgc2hvdWxkUHJldmVudFJlbW92ZSA9IChcbiAgZW1pdHRlcjogTmF2aWdhdGlvbkV2ZW50RW1pdHRlcjxFdmVudE1hcENvcmU8YW55Pj4sXG4gIGJlZm9yZVJlbW92ZUxpc3RlbmVyczogUmVjb3JkPHN0cmluZywgQ2hpbGRCZWZvcmVSZW1vdmVMaXN0ZW5lciB8IHVuZGVmaW5lZD4sXG4gIGN1cnJlbnRSb3V0ZXM6IHsga2V5OiBzdHJpbmcgfVtdLFxuICBuZXh0Um91dGVzOiB7IGtleT86IHN0cmluZyB8IHVuZGVmaW5lZCB9W10sXG4gIGFjdGlvbjogTmF2aWdhdGlvbkFjdGlvblxuKSA9PiB7XG4gIGNvbnN0IG5leHRSb3V0ZUtleXMgPSBuZXh0Um91dGVzLm1hcCgocm91dGUpID0+IHJvdXRlLmtleSk7XG5cbiAgLy8gQ2FsbCB0aGVzZSBpbiByZXZlcnNlIG9yZGVyIHNvIGxhc3Qgc2NyZWVucyBoYW5kbGUgdGhlIGV2ZW50IGZpcnN0XG4gIGNvbnN0IHJlbW92ZWRSb3V0ZXMgPSBjdXJyZW50Um91dGVzXG4gICAgLmZpbHRlcigocm91dGUpID0+ICFuZXh0Um91dGVLZXlzLmluY2x1ZGVzKHJvdXRlLmtleSkpXG4gICAgLnJldmVyc2UoKTtcblxuICBjb25zdCB2aXNpdGVkUm91dGVLZXlzOiBTZXQ8c3RyaW5nPiA9XG4gICAgLy8gQHRzLWV4cGVjdC1lcnJvcjogYWRkIHRoaXMgcHJvcGVydHkgdG8gbWFyayB0aGF0IHdlJ3ZlIGFscmVhZHkgZW1pdHRlZCB0aGlzIGFjdGlvblxuICAgIGFjdGlvbltWSVNJVEVEX1JPVVRFX0tFWVNdID8/IG5ldyBTZXQ8c3RyaW5nPigpO1xuXG4gIGNvbnN0IGJlZm9yZVJlbW92ZUFjdGlvbiA9IHtcbiAgICAuLi5hY3Rpb24sXG4gICAgW1ZJU0lURURfUk9VVEVfS0VZU106IHZpc2l0ZWRSb3V0ZUtleXMsXG4gIH07XG5cbiAgZm9yIChjb25zdCByb3V0ZSBvZiByZW1vdmVkUm91dGVzKSB7XG4gICAgaWYgKHZpc2l0ZWRSb3V0ZUtleXMuaGFzKHJvdXRlLmtleSkpIHtcbiAgICAgIC8vIFNraXAgaWYgd2UndmUgYWxyZWFkeSBlbWl0dGVkIHRoaXMgYWN0aW9uIGZvciB0aGlzIHNjcmVlblxuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgLy8gRmlyc3QsIHdlIG5lZWQgdG8gY2hlY2sgaWYgYW55IGNoaWxkIHNjcmVlbnMgd2FudCB0byBwcmV2ZW50IGl0XG4gICAgY29uc3QgaXNQcmV2ZW50ZWQgPSBiZWZvcmVSZW1vdmVMaXN0ZW5lcnNbcm91dGUua2V5XT8uKGJlZm9yZVJlbW92ZUFjdGlvbik7XG5cbiAgICBpZiAoaXNQcmV2ZW50ZWQpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIHZpc2l0ZWRSb3V0ZUtleXMuYWRkKHJvdXRlLmtleSk7XG5cbiAgICBjb25zdCBldmVudCA9IGVtaXR0ZXIuZW1pdCh7XG4gICAgICB0eXBlOiAnYmVmb3JlUmVtb3ZlJyxcbiAgICAgIHRhcmdldDogcm91dGUua2V5LFxuICAgICAgZGF0YTogeyBhY3Rpb246IGJlZm9yZVJlbW92ZUFjdGlvbiB9LFxuICAgICAgY2FuUHJldmVudERlZmF1bHQ6IHRydWUsXG4gICAgfSk7XG5cbiAgICBpZiAoZXZlbnQuZGVmYXVsdFByZXZlbnRlZCkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdXNlT25QcmV2ZW50UmVtb3ZlKHtcbiAgZ2V0U3RhdGUsXG4gIGVtaXR0ZXIsXG4gIGJlZm9yZVJlbW92ZUxpc3RlbmVycyxcbn06IE9wdGlvbnMpIHtcbiAgY29uc3QgeyBhZGRLZXllZExpc3RlbmVyIH0gPSBSZWFjdC51c2VDb250ZXh0KE5hdmlnYXRpb25CdWlsZGVyQ29udGV4dCk7XG4gIGNvbnN0IHJvdXRlID0gUmVhY3QudXNlQ29udGV4dChOYXZpZ2F0aW9uUm91dGVDb250ZXh0KTtcbiAgY29uc3Qgcm91dGVLZXkgPSByb3V0ZT8ua2V5O1xuXG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKHJvdXRlS2V5KSB7XG4gICAgICByZXR1cm4gYWRkS2V5ZWRMaXN0ZW5lcj8uKCdiZWZvcmVSZW1vdmUnLCByb3V0ZUtleSwgKGFjdGlvbikgPT4ge1xuICAgICAgICBjb25zdCBzdGF0ZSA9IGdldFN0YXRlKCk7XG5cbiAgICAgICAgcmV0dXJuIHNob3VsZFByZXZlbnRSZW1vdmUoXG4gICAgICAgICAgZW1pdHRlcixcbiAgICAgICAgICBiZWZvcmVSZW1vdmVMaXN0ZW5lcnMsXG4gICAgICAgICAgc3RhdGUucm91dGVzLFxuICAgICAgICAgIFtdLFxuICAgICAgICAgIGFjdGlvblxuICAgICAgICApO1xuICAgICAgfSk7XG4gICAgfVxuICB9LCBbYWRkS2V5ZWRMaXN0ZW5lciwgYmVmb3JlUmVtb3ZlTGlzdGVuZXJzLCBlbWl0dGVyLCBnZXRTdGF0ZSwgcm91dGVLZXldKTtcbn1cbiJdfQ==