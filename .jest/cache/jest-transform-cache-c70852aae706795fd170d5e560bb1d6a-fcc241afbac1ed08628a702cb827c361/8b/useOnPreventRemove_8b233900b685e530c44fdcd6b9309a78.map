{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;AAIA;;AAEA;;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAUA,IAAMA,kBAAkB,GAAGC,MAAM,CAAC,oBAAD,CAAjC;;AAEO,IAAMC,mBAAmB,GAAG,SAAtBA,mBAAsB,CACjCC,OADiC,EAEjCC,qBAFiC,EAGjCC,aAHiC,EAIjCC,UAJiC,EAKjCC,MALiC,EAM9B;AAAA;;AACH,MAAMC,aAAa,GAAGF,UAAU,CAACG,GAAXH,CAAgBI,eAAD;AAAA,WAAWA,KAAK,CAACC,GAAjB;AAAA,GAAfL,CAAtB;AAGA,MAAMM,aAAa,GAAGP,aAAa,CAChCQ,MADmBR,CACXK,eAAD;AAAA,WAAW,CAACF,aAAa,CAACM,QAAdN,CAAuBE,KAAK,CAACC,GAA7BH,CAAZ;AAAA,GADYH,EAEnBU,OAFmBV,EAAtB;AAIA,MAAMW,gBAA6B,4BAEjCT,MAAM,CAACP,kBAAD,CAF2B,yEAEH,IAAIiB,GAAJ,EAFhC;AAIA,MAAMC,kBAAkB,8BACnBX,MADmB,oCAErBP,kBAFqB,EAEAgB,gBAFA,EAAxB;;AAKA,uDAAoBJ,aAApB,wCAAmC;AAAA,QAAxBF,KAAwB;;AAAA;;AACjC,QAAIM,gBAAgB,CAACG,GAAjBH,CAAqBN,KAAK,CAACC,GAA3BK,CAAJ,EAAqC;AAEnC;AAH+B;;AAOjC,QAAMI,WAAW,4BAAGhB,qBAAqB,CAACM,KAAK,CAACC,GAAP,CAAxB,0DAAGU,kDAAmCH,kBAAnC,CAApB;;AAEA,QAAIE,WAAJ,EAAiB;AACf,aAAO,IAAP;AACD;;AAEDJ,oBAAgB,CAACM,GAAjBN,CAAqBN,KAAK,CAACC,GAA3BK;AAEA,QAAMO,KAAK,GAAGpB,OAAO,CAACqB,IAARrB,CAAa;AACzBsB,UAAI,EAAE,cADmB;AAEzBC,YAAM,EAAEhB,KAAK,CAACC,GAFW;AAGzBgB,UAAI,EAAE;AAAEpB,cAAM,EAAEW;AAAV,OAHmB;AAIzBU,uBAAiB,EAAE;AAJM,KAAbzB,CAAd;;AAOA,QAAIoB,KAAK,CAACM,gBAAV,EAA4B;AAC1B,aAAO,IAAP;AACD;AACF;;AAED,SAAO,KAAP;AAlDK;;;;AAqDQ,SAASC,kBAAT,OAIH;AAAA,MAHVC,QAGU,QAHVA,QAGU;AAAA,MAFV5B,OAEU,QAFVA,OAEU;AAAA,MADVC,qBACU,QADVA,qBACU;;AACV,0BAA6B4B,KAAK,CAACC,UAAND,CAAiBE,iCAAjBF,CAA7B;AAAA,MAAQG,gBAAR,qBAAQA,gBAAR;;AACA,MAAMzB,KAAK,GAAGsB,KAAK,CAACC,UAAND,CAAiBI,+BAAjBJ,CAAd;AACA,MAAMK,QAAQ,GAAG3B,KAAH,SAAGA,SAAH,WAAGA,GAAH,MAAGA,QAAK,CAAEC,GAAxB;AAEAqB,OAAK,CAACM,SAANN,CAAgB,YAAM;AACpB,QAAIK,QAAJ,EAAc;AACZ,aAAOF,gBAAP,SAAOA,oBAAP,WAAOA,GAAP,MAAOA,mBAAgB,CAAG,cAAH,EAAmBE,QAAnB,EAA8B9B,gBAAD,EAAY;AAC9D,YAAMgC,KAAK,GAAGR,QAAQ,EAAtB;AAEA,eAAO7B,mBAAmB,CACxBC,OADwB,EAExBC,qBAFwB,EAGxBmC,KAAK,CAACC,MAHkB,EAIxB,EAJwB,EAKxBjC,MALwB,CAA1B;AAHqB,QAAvB;AAWD;AAbH,KAcG,CAAC4B,gBAAD,EAAmB/B,qBAAnB,EAA0CD,OAA1C,EAAmD4B,QAAnD,EAA6DM,QAA7D,CAdHL;AAeD","names":["VISITED_ROUTE_KEYS","Symbol","shouldPreventRemove","emitter","beforeRemoveListeners","currentRoutes","nextRoutes","action","nextRouteKeys","map","route","key","removedRoutes","filter","includes","reverse","visitedRouteKeys","Set","beforeRemoveAction","has","isPrevented","_beforeRemoveListener","add","event","emit","type","target","data","canPreventDefault","defaultPrevented","useOnPreventRemove","getState","React","useContext","NavigationBuilderContext","addKeyedListener","NavigationRouteContext","routeKey","useEffect","state","routes"],"sources":["useOnPreventRemove.tsx"],"sourcesContent":["import type {\n  NavigationAction,\n  NavigationState,\n} from '@react-navigation/routers';\nimport * as React from 'react';\n\nimport NavigationBuilderContext, {\n  ChildBeforeRemoveListener,\n} from './NavigationBuilderContext';\nimport NavigationRouteContext from './NavigationRouteContext';\nimport type { EventMapCore } from './types';\nimport type { NavigationEventEmitter } from './useEventEmitter';\n\ntype Options = {\n  getState: () => NavigationState;\n  emitter: NavigationEventEmitter<EventMapCore<any>>;\n  beforeRemoveListeners: Record<string, ChildBeforeRemoveListener | undefined>;\n};\n\nconst VISITED_ROUTE_KEYS = Symbol('VISITED_ROUTE_KEYS');\n\nexport const shouldPreventRemove = (\n  emitter: NavigationEventEmitter<EventMapCore<any>>,\n  beforeRemoveListeners: Record<string, ChildBeforeRemoveListener | undefined>,\n  currentRoutes: { key: string }[],\n  nextRoutes: { key?: string | undefined }[],\n  action: NavigationAction\n) => {\n  const nextRouteKeys = nextRoutes.map((route) => route.key);\n\n  // Call these in reverse order so last screens handle the event first\n  const removedRoutes = currentRoutes\n    .filter((route) => !nextRouteKeys.includes(route.key))\n    .reverse();\n\n  const visitedRouteKeys: Set<string> =\n    // @ts-expect-error: add this property to mark that we've already emitted this action\n    action[VISITED_ROUTE_KEYS] ?? new Set<string>();\n\n  const beforeRemoveAction = {\n    ...action,\n    [VISITED_ROUTE_KEYS]: visitedRouteKeys,\n  };\n\n  for (const route of removedRoutes) {\n    if (visitedRouteKeys.has(route.key)) {\n      // Skip if we've already emitted this action for this screen\n      continue;\n    }\n\n    // First, we need to check if any child screens want to prevent it\n    const isPrevented = beforeRemoveListeners[route.key]?.(beforeRemoveAction);\n\n    if (isPrevented) {\n      return true;\n    }\n\n    visitedRouteKeys.add(route.key);\n\n    const event = emitter.emit({\n      type: 'beforeRemove',\n      target: route.key,\n      data: { action: beforeRemoveAction },\n      canPreventDefault: true,\n    });\n\n    if (event.defaultPrevented) {\n      return true;\n    }\n  }\n\n  return false;\n};\n\nexport default function useOnPreventRemove({\n  getState,\n  emitter,\n  beforeRemoveListeners,\n}: Options) {\n  const { addKeyedListener } = React.useContext(NavigationBuilderContext);\n  const route = React.useContext(NavigationRouteContext);\n  const routeKey = route?.key;\n\n  React.useEffect(() => {\n    if (routeKey) {\n      return addKeyedListener?.('beforeRemove', routeKey, (action) => {\n        const state = getState();\n\n        return shouldPreventRemove(\n          emitter,\n          beforeRemoveListeners,\n          state.routes,\n          [],\n          action\n        );\n      });\n    }\n  }, [addKeyedListener, beforeRemoveListeners, emitter, getState, routeKey]);\n}\n"]}