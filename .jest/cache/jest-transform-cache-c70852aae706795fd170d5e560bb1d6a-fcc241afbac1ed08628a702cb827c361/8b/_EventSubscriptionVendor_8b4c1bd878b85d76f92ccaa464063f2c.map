{"version":3,"sources":["_EventSubscriptionVendor.js"],"names":["invariant","require","EventSubscriptionVendor","_subscriptionsForType","eventType","subscription","subscriber","key","length","push","subscriptionsForType","module","exports"],"mappings":"AAUA;;;;;;;;AAEA,IAAMA,SAAS,GAAGC,OAAO,CAAC,WAAD,CAAzB;;IAQMC,uB;AAQJ,qCAAc;AAAA;AACZ,SAAKC,qBAAL,GAA6B,EAA7B;AACD;;;;WAQD,yBACEC,SADF,EAEEC,YAFF,EAG0C;AACxCL,MAAAA,SAAS,CACPK,YAAY,CAACC,UAAb,KAA4B,IADrB,EAEP,wDAFO,CAAT;;AAIA,UAAI,CAAC,KAAKH,qBAAL,CAA2BC,SAA3B,CAAL,EAA4C;AAC1C,aAAKD,qBAAL,CAA2BC,SAA3B,IAAwC,EAAxC;AACD;;AACD,UAAMG,GAAG,GAAG,KAAKJ,qBAAL,CAA2BC,SAA3B,EAAsCI,MAAlD;;AACA,WAAKL,qBAAL,CAA2BC,SAA3B,EAAsCK,IAAtC,CAA2CJ,YAA3C;;AACAA,MAAAA,YAAY,CAACD,SAAb,GAAyBA,SAAzB;AACAC,MAAAA,YAAY,CAACE,GAAb,GAAmBA,GAAnB;AACA,aAAOF,YAAP;AACD;;;WAQD,gCAAmDD,SAAnD,EAAwE;AACtE,UAAIA,SAAS,IAAI,IAAjB,EAAuB;AACrB,aAAKD,qBAAL,GAA6B,EAA7B;AACD,OAFD,MAEO;AACL,eAAO,KAAKA,qBAAL,CAA2BC,SAA3B,CAAP;AACD;AACF;;;WAQD,4BACEC,YADF,EAEQ;AACN,UAAMD,SAAS,GAAGC,YAAY,CAACD,SAA/B;AACA,UAAMG,GAAG,GAAGF,YAAY,CAACE,GAAzB;AAEA,UAAMG,oBAAoB,GAAG,KAAKP,qBAAL,CAA2BC,SAA3B,CAA7B;;AACA,UAAIM,oBAAJ,EAA0B;AACxB,eAAOA,oBAAoB,CAACH,GAAD,CAA3B;AACD;AACF;;;WAcD,iCACEH,SADF,EAEkD;AAChD,aAAO,KAAKD,qBAAL,CAA2BC,SAA3B,CAAP;AACD;;;;;AAGHO,MAAM,CAACC,OAAP,GAAiBV,uBAAjB","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow strict\n */\n\n'use strict';\n\nconst invariant = require('invariant');\n\nimport type EventSubscription from './_EventSubscription';\n\n/**\n * EventSubscriptionVendor stores a set of EventSubscriptions that are\n * subscribed to a particular event type.\n */\nclass EventSubscriptionVendor<EventDefinitions: {...}> {\n  _subscriptionsForType: {\n    [type: $Keys<EventDefinitions>]: Array<\n      EventSubscription<EventDefinitions, $FlowFixMe>,\n    >,\n    ...,\n  };\n\n  constructor() {\n    this._subscriptionsForType = {};\n  }\n\n  /**\n   * Adds a subscription keyed by an event type.\n   *\n   * @param {string} eventType\n   * @param {EventSubscription} subscription\n   */\n  addSubscription<K: $Keys<EventDefinitions>>(\n    eventType: K,\n    subscription: EventSubscription<EventDefinitions, K>,\n  ): EventSubscription<EventDefinitions, K> {\n    invariant(\n      subscription.subscriber === this,\n      'The subscriber of the subscription is incorrectly set.',\n    );\n    if (!this._subscriptionsForType[eventType]) {\n      this._subscriptionsForType[eventType] = [];\n    }\n    const key = this._subscriptionsForType[eventType].length;\n    this._subscriptionsForType[eventType].push(subscription);\n    subscription.eventType = eventType;\n    subscription.key = key;\n    return subscription;\n  }\n\n  /**\n   * Removes a bulk set of the subscriptions.\n   *\n   * @param {?string} eventType - Optional name of the event type whose\n   *   registered subscriptions to remove, if null remove all subscriptions.\n   */\n  removeAllSubscriptions<K: $Keys<EventDefinitions>>(eventType: ?K): void {\n    if (eventType == null) {\n      this._subscriptionsForType = {};\n    } else {\n      delete this._subscriptionsForType[eventType];\n    }\n  }\n\n  /**\n   * Removes a specific subscription. Instead of calling this function, call\n   * `subscription.remove()` directly.\n   *\n   * @param {object} subscription\n   */\n  removeSubscription<K: $Keys<EventDefinitions>>(\n    subscription: EventSubscription<EventDefinitions, K>,\n  ): void {\n    const eventType = subscription.eventType;\n    const key = subscription.key;\n\n    const subscriptionsForType = this._subscriptionsForType[eventType];\n    if (subscriptionsForType) {\n      delete subscriptionsForType[key];\n    }\n  }\n\n  /**\n   * Returns the array of subscriptions that are currently registered for the\n   * given event type.\n   *\n   * Note: This array can be potentially sparse as subscriptions are deleted\n   * from it when they are removed.\n   *\n   * TODO: This returns a nullable array. wat?\n   *\n   * @param {string} eventType\n   * @returns {?array}\n   */\n  getSubscriptionsForType<K: $Keys<EventDefinitions>>(\n    eventType: K,\n  ): ?Array<EventSubscription<EventDefinitions, K>> {\n    return this._subscriptionsForType[eventType];\n  }\n}\n\nmodule.exports = EventSubscriptionVendor;\n"]}