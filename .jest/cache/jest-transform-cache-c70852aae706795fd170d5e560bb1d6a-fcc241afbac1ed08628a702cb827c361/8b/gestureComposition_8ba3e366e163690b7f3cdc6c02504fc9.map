{"version":3,"mappings":"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","names":["extendRelation","currentRelation","extendWith","undefined","ComposedGesture","constructor","_defineProperty","gestures","prepareSingleGesture","gesture","simultaneousGestures","requireGesturesToFail","BaseGesture","newConfig","config","simultaneousWith","requireToFail","prepare","initialize","toGestureArray","flatMap","Gesture","SimultaneousGesture","simultaneousArray","concat","ExclusiveGesture","gestureArrays","map","i","length"],"sources":["gestureComposition.ts"],"sourcesContent":["import { BaseGesture, Gesture, GestureRef, GestureType } from './gesture';\n\nfunction extendRelation(\n  currentRelation: GestureRef[] | undefined,\n  extendWith: GestureType[]\n) {\n  if (currentRelation === undefined) {\n    return [...extendWith];\n  } else {\n    return [...currentRelation, ...extendWith];\n  }\n}\n\nexport class ComposedGesture extends Gesture {\n  protected gestures: Gesture[] = [];\n  protected simultaneousGestures: GestureType[] = [];\n  protected requireGesturesToFail: GestureType[] = [];\n\n  constructor(...gestures: Gesture[]) {\n    super();\n    this.gestures = gestures;\n  }\n\n  protected prepareSingleGesture(\n    gesture: Gesture,\n    simultaneousGestures: GestureType[],\n    requireGesturesToFail: GestureType[]\n  ) {\n    if (gesture instanceof BaseGesture) {\n      const newConfig = { ...gesture.config };\n\n      newConfig.simultaneousWith = extendRelation(\n        newConfig.simultaneousWith,\n        simultaneousGestures\n      );\n      newConfig.requireToFail = extendRelation(\n        newConfig.requireToFail,\n        requireGesturesToFail\n      );\n\n      gesture.config = newConfig;\n    } else if (gesture instanceof ComposedGesture) {\n      gesture.simultaneousGestures = simultaneousGestures;\n      gesture.requireGesturesToFail = requireGesturesToFail;\n      gesture.prepare();\n    }\n  }\n\n  prepare() {\n    for (const gesture of this.gestures) {\n      this.prepareSingleGesture(\n        gesture,\n        this.simultaneousGestures,\n        this.requireGesturesToFail\n      );\n    }\n  }\n\n  initialize() {\n    for (const gesture of this.gestures) {\n      gesture.initialize();\n    }\n  }\n\n  toGestureArray(): GestureType[] {\n    return this.gestures.flatMap((gesture) => gesture.toGestureArray());\n  }\n}\n\nexport class SimultaneousGesture extends ComposedGesture {\n  prepare() {\n    const simultaneousArray = this.gestures\n      .flatMap((gesture) => gesture.toGestureArray())\n      .concat(this.simultaneousGestures);\n\n    for (const gesture of this.gestures) {\n      this.prepareSingleGesture(\n        gesture,\n        simultaneousArray,\n        this.requireGesturesToFail\n      );\n    }\n  }\n}\n\nexport class ExclusiveGesture extends ComposedGesture {\n  prepare() {\n    const gestureArrays = this.gestures.map((gesture) =>\n      gesture.toGestureArray()\n    );\n\n    let requireToFail: GestureType[] = [];\n\n    for (let i = 0; i < this.gestures.length; i++) {\n      this.prepareSingleGesture(\n        this.gestures[i],\n        this.simultaneousGestures,\n        this.requireGesturesToFail.concat(requireToFail)\n      );\n\n      requireToFail = requireToFail.concat(gestureArrays[i]);\n    }\n  }\n}\n\nexport type ComposedGestureType = InstanceType<typeof ComposedGesture>;\nexport type RaceGestureType = ComposedGestureType;\nexport type SimultaneousGestureType = InstanceType<typeof SimultaneousGesture>;\nexport type ExclusiveGestureType = InstanceType<typeof ExclusiveGesture>;\n"]}