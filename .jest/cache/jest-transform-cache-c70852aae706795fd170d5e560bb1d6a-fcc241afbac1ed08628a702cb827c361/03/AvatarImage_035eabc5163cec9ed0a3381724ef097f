42b99276146cec0a57040ce4c0a077c7
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _excluded = ["size", "source", "style", "theme"];
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var React = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

var _theming = require("../../core/theming");

function _getRequireWildcardCache() {
  if (typeof WeakMap !== "function") return null;
  var cache = new WeakMap();

  _getRequireWildcardCache = function _getRequireWildcardCache() {
    return cache;
  };

  return cache;
}

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  }

  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }

  var cache = _getRequireWildcardCache();

  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }

  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }

  newObj.default = obj;

  if (cache) {
    cache.set(obj, newObj);
  }

  return newObj;
}

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

var defaultSize = 64;

var AvatarImage = function AvatarImage(_ref) {
  var _ref$size = _ref.size,
      size = _ref$size === void 0 ? defaultSize : _ref$size,
      source = _ref.source,
      style = _ref.style,
      theme = _ref.theme,
      rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);
  var colors = theme.colors;

  var _ref2 = _reactNative.StyleSheet.flatten(style) || {},
      _ref2$backgroundColor = _ref2.backgroundColor,
      backgroundColor = _ref2$backgroundColor === void 0 ? colors.primary : _ref2$backgroundColor;

  return React.createElement(_reactNative.View, _extends({
    style: [{
      width: size,
      height: size,
      borderRadius: size / 2,
      backgroundColor: backgroundColor
    }, style]
  }, rest), typeof source === 'function' && source({
    size: size
  }), typeof source !== 'function' && React.createElement(_reactNative.Image, {
    source: source,
    style: {
      width: size,
      height: size,
      borderRadius: size / 2
    }
  }));
};

AvatarImage.displayName = 'Avatar.Image';

var _default = (0, _theming.withTheme)(AvatarImage);

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBQUE7O0FBQ0E7O0FBUUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUVBLElBQU1BLFdBQVcsR0FBRyxFQUFwQjs7QUE0Q0EsSUFBTUMsV0FBVyxHQUFHLFNBQWRBLFdBQWMsT0FNUDtBQUFBLHVCQUxYQyxJQUtXO0FBQUEsTUFMWEEsSUFLVywwQkFMSkYsV0FLSTtBQUFBLE1BSlhHLE1BSVcsUUFKWEEsTUFJVztBQUFBLE1BSFhDLEtBR1csUUFIWEEsS0FHVztBQUFBLE1BRlhDLEtBRVcsUUFGWEEsS0FFVztBQUFBLE1BRFJDLElBQ1E7QUFDWCxNQUFRQyxNQUFSLEdBQW1CRixLQUFuQixDQUFRRSxNQUFSOztBQUVBLGNBQTZDQyx3QkFBV0MsT0FBWEQsQ0FBbUJKLEtBQW5CSSxLQUE2QixFQUExRTtBQUFBLG9DQUFRRSxlQUFSO0FBQUEsTUFBUUEsZUFBUixzQ0FBMEJILE1BQU0sQ0FBQ0ksT0FBakM7O0FBRUEsU0FDRUMsb0JBQUNDLGlCQUFEO0FBQ0VULFNBQUssRUFBRSxDQUNMO0FBQ0VVLFdBQUssRUFBRVosSUFEVDtBQUVFYSxZQUFNLEVBQUViLElBRlY7QUFHRWMsa0JBQVksRUFBRWQsSUFBSSxHQUFHLENBSHZCO0FBSUVRO0FBSkYsS0FESyxFQU9MTixLQVBLO0FBRFQsS0FVTUUsSUFWTixHQVlHLE9BQU9ILE1BQVAsS0FBa0IsVUFBbEIsSUFBZ0NBLE1BQU0sQ0FBQztBQUFFRDtBQUFGLEdBQUQsQ0FaekMsRUFhRyxPQUFPQyxNQUFQLEtBQWtCLFVBQWxCLElBQ0NTLG9CQUFDQyxrQkFBRDtBQUNFVixVQUFNLEVBQUVBLE1BRFY7QUFFRUMsU0FBSyxFQUFFO0FBQUVVLFdBQUssRUFBRVosSUFBVDtBQUFlYSxZQUFNLEVBQUViLElBQXZCO0FBQTZCYyxrQkFBWSxFQUFFZCxJQUFJLEdBQUc7QUFBbEQ7QUFGVCxJQWRKLENBREY7QUFYRjs7QUFtQ0FELFdBQVcsQ0FBQ2dCLFdBQVpoQixHQUEwQixjQUExQkE7O2VBRWUsd0JBQVVBLFdBQVYiLCJuYW1lcyI6WyJkZWZhdWx0U2l6ZSIsIkF2YXRhckltYWdlIiwic2l6ZSIsInNvdXJjZSIsInN0eWxlIiwidGhlbWUiLCJyZXN0IiwiY29sb3JzIiwiU3R5bGVTaGVldCIsImZsYXR0ZW4iLCJiYWNrZ3JvdW5kQ29sb3IiLCJwcmltYXJ5IiwiUmVhY3QiLCJfcmVhY3ROYXRpdmUiLCJ3aWR0aCIsImhlaWdodCIsImJvcmRlclJhZGl1cyIsImRpc3BsYXlOYW1lIl0sInNvdXJjZXMiOlsiQXZhdGFySW1hZ2UudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7XG4gIEltYWdlLFxuICBJbWFnZVNvdXJjZVByb3BUeXBlLFxuICBTdHlsZVNoZWV0LFxuICBWaWV3LFxuICBWaWV3U3R5bGUsXG4gIFN0eWxlUHJvcCxcbn0gZnJvbSAncmVhY3QtbmF0aXZlJztcbmltcG9ydCB7IHdpdGhUaGVtZSB9IGZyb20gJy4uLy4uL2NvcmUvdGhlbWluZyc7XG5cbmNvbnN0IGRlZmF1bHRTaXplID0gNjQ7XG5cbmV4cG9ydCB0eXBlIEF2YXRhckltYWdlU291cmNlID1cbiAgfCBJbWFnZVNvdXJjZVByb3BUeXBlXG4gIHwgKChwcm9wczogeyBzaXplOiBudW1iZXIgfSkgPT4gUmVhY3QuUmVhY3ROb2RlKTtcblxudHlwZSBQcm9wcyA9IFJlYWN0LkNvbXBvbmVudFByb3BzV2l0aFJlZjx0eXBlb2YgVmlldz4gJiB7XG4gIC8qKlxuICAgKiBJbWFnZSB0byBkaXNwbGF5IGZvciB0aGUgYEF2YXRhcmAuXG4gICAqIEl0IGFjY2VwdHMgYSBzdGFuZGFyZCBSZWFjdCBOYXRpdmUgSW1hZ2UgYHNvdXJjZWAgcHJvcFxuICAgKiBPciBhIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyBhbiBgSW1hZ2VgLlxuICAgKi9cbiAgc291cmNlOiBBdmF0YXJJbWFnZVNvdXJjZTtcbiAgLyoqXG4gICAqIFNpemUgb2YgdGhlIGF2YXRhci5cbiAgICovXG4gIHNpemU/OiBudW1iZXI7XG4gIHN0eWxlPzogU3R5bGVQcm9wPFZpZXdTdHlsZT47XG4gIC8qKlxuICAgKiBAb3B0aW9uYWxcbiAgICovXG4gIHRoZW1lOiBSZWFjdE5hdGl2ZVBhcGVyLlRoZW1lO1xufTtcblxuLyoqXG4gKiBBdmF0YXJzIGNhbiBiZSB1c2VkIHRvIHJlcHJlc2VudCBwZW9wbGUgaW4gYSBncmFwaGljYWwgd2F5LlxuICpcbiAqIDxkaXYgY2xhc3M9XCJzY3JlZW5zaG90c1wiPlxuICogICA8ZmlndXJlPlxuICogICAgIDxpbWcgY2xhc3M9XCJtZWRpdW1cIiBzcmM9XCJzY3JlZW5zaG90cy9hdmF0YXItaW1hZ2UucG5nXCIgLz5cbiAqICAgPC9maWd1cmU+XG4gKiA8L2Rpdj5cbiAqXG4gKiAjIyBVc2FnZVxuICogYGBganNcbiAqIGltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbiAqIGltcG9ydCB7IEF2YXRhciB9IGZyb20gJ3JlYWN0LW5hdGl2ZS1wYXBlcic7XG4gKlxuICogY29uc3QgTXlDb21wb25lbnQgPSAoKSA9PiAoXG4gKiAgIDxBdmF0YXIuSW1hZ2Ugc2l6ZT17MjR9IHNvdXJjZT17cmVxdWlyZSgnLi4vYXNzZXRzL2F2YXRhci5wbmcnKX0gLz5cbiAqICk7XG4gKiBleHBvcnQgZGVmYXVsdCBNeUNvbXBvbmVudFxuICogYGBgXG4gKi9cbmNvbnN0IEF2YXRhckltYWdlID0gKHtcbiAgc2l6ZSA9IGRlZmF1bHRTaXplLFxuICBzb3VyY2UsXG4gIHN0eWxlLFxuICB0aGVtZSxcbiAgLi4ucmVzdFxufTogUHJvcHMpID0+IHtcbiAgY29uc3QgeyBjb2xvcnMgfSA9IHRoZW1lO1xuXG4gIGNvbnN0IHsgYmFja2dyb3VuZENvbG9yID0gY29sb3JzLnByaW1hcnkgfSA9IFN0eWxlU2hlZXQuZmxhdHRlbihzdHlsZSkgfHwge307XG5cbiAgcmV0dXJuIChcbiAgICA8Vmlld1xuICAgICAgc3R5bGU9e1tcbiAgICAgICAge1xuICAgICAgICAgIHdpZHRoOiBzaXplLFxuICAgICAgICAgIGhlaWdodDogc2l6ZSxcbiAgICAgICAgICBib3JkZXJSYWRpdXM6IHNpemUgLyAyLFxuICAgICAgICAgIGJhY2tncm91bmRDb2xvcixcbiAgICAgICAgfSxcbiAgICAgICAgc3R5bGUsXG4gICAgICBdfVxuICAgICAgey4uLnJlc3R9XG4gICAgPlxuICAgICAge3R5cGVvZiBzb3VyY2UgPT09ICdmdW5jdGlvbicgJiYgc291cmNlKHsgc2l6ZSB9KX1cbiAgICAgIHt0eXBlb2Ygc291cmNlICE9PSAnZnVuY3Rpb24nICYmIChcbiAgICAgICAgPEltYWdlXG4gICAgICAgICAgc291cmNlPXtzb3VyY2V9XG4gICAgICAgICAgc3R5bGU9e3sgd2lkdGg6IHNpemUsIGhlaWdodDogc2l6ZSwgYm9yZGVyUmFkaXVzOiBzaXplIC8gMiB9fVxuICAgICAgICAvPlxuICAgICAgKX1cbiAgICA8L1ZpZXc+XG4gICk7XG59O1xuXG5BdmF0YXJJbWFnZS5kaXNwbGF5TmFtZSA9ICdBdmF0YXIuSW1hZ2UnO1xuXG5leHBvcnQgZGVmYXVsdCB3aXRoVGhlbWUoQXZhdGFySW1hZ2UpO1xuIl19