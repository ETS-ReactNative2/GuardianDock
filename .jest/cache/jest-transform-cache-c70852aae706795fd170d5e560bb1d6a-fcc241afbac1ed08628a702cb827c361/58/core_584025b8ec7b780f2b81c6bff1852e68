bdc65d3742ab0cdc196cceea4139fee3
'use strict';

var asap = require('asap/raw');

function noop() {}

var LAST_ERROR = null;
var IS_ERROR = {};

function getThen(obj) {
  try {
    return obj.then;
  } catch (ex) {
    LAST_ERROR = ex;
    return IS_ERROR;
  }
}

function tryCallOne(fn, a) {
  try {
    return fn(a);
  } catch (ex) {
    LAST_ERROR = ex;
    return IS_ERROR;
  }
}

function tryCallTwo(fn, a, b) {
  try {
    fn(a, b);
  } catch (ex) {
    LAST_ERROR = ex;
    return IS_ERROR;
  }
}

module.exports = Promise;

function Promise(fn) {
  if (typeof this !== 'object') {
    throw new TypeError('Promises must be constructed via new');
  }

  if (typeof fn !== 'function') {
    throw new TypeError('Promise constructor\'s argument is not a function');
  }

  this._U = 0;
  this._V = 0;
  this._W = null;
  this._X = null;
  if (fn === noop) return;
  doResolve(fn, this);
}

Promise._Y = null;
Promise._Z = null;
Promise._0 = noop;

Promise.prototype.then = function (onFulfilled, onRejected) {
  if (this.constructor !== Promise) {
    return safeThen(this, onFulfilled, onRejected);
  }

  var res = new Promise(noop);
  handle(this, new Handler(onFulfilled, onRejected, res));
  return res;
};

function safeThen(self, onFulfilled, onRejected) {
  return new self.constructor(function (resolve, reject) {
    var res = new Promise(noop);
    res.then(resolve, reject);
    handle(self, new Handler(onFulfilled, onRejected, res));
  });
}

function handle(self, deferred) {
  while (self._V === 3) {
    self = self._W;
  }

  if (Promise._Y) {
    Promise._Y(self);
  }

  if (self._V === 0) {
    if (self._U === 0) {
      self._U = 1;
      self._X = deferred;
      return;
    }

    if (self._U === 1) {
      self._U = 2;
      self._X = [self._X, deferred];
      return;
    }

    self._X.push(deferred);

    return;
  }

  handleResolved(self, deferred);
}

function handleResolved(self, deferred) {
  asap(function () {
    var cb = self._V === 1 ? deferred.onFulfilled : deferred.onRejected;

    if (cb === null) {
      if (self._V === 1) {
        resolve(deferred.promise, self._W);
      } else {
        reject(deferred.promise, self._W);
      }

      return;
    }

    var ret = tryCallOne(cb, self._W);

    if (ret === IS_ERROR) {
      reject(deferred.promise, LAST_ERROR);
    } else {
      resolve(deferred.promise, ret);
    }
  });
}

function resolve(self, newValue) {
  if (newValue === self) {
    return reject(self, new TypeError('A promise cannot be resolved with itself.'));
  }

  if (newValue && (typeof newValue === 'object' || typeof newValue === 'function')) {
    var then = getThen(newValue);

    if (then === IS_ERROR) {
      return reject(self, LAST_ERROR);
    }

    if (then === self.then && newValue instanceof Promise) {
      self._V = 3;
      self._W = newValue;
      finale(self);
      return;
    } else if (typeof then === 'function') {
      doResolve(then.bind(newValue), self);
      return;
    }
  }

  self._V = 1;
  self._W = newValue;
  finale(self);
}

function reject(self, newValue) {
  self._V = 2;
  self._W = newValue;

  if (Promise._Z) {
    Promise._Z(self, newValue);
  }

  finale(self);
}

function finale(self) {
  if (self._U === 1) {
    handle(self, self._X);
    self._X = null;
  }

  if (self._U === 2) {
    for (var i = 0; i < self._X.length; i++) {
      handle(self, self._X[i]);
    }

    self._X = null;
  }
}

function Handler(onFulfilled, onRejected, promise) {
  this.onFulfilled = typeof onFulfilled === 'function' ? onFulfilled : null;
  this.onRejected = typeof onRejected === 'function' ? onRejected : null;
  this.promise = promise;
}

function doResolve(fn, promise) {
  var done = false;
  var res = tryCallTwo(fn, function (value) {
    if (done) return;
    done = true;
    resolve(promise, value);
  }, function (reason) {
    if (done) return;
    done = true;
    reject(promise, reason);
  });

  if (!done && res === IS_ERROR) {
    done = true;
    reject(promise, LAST_ERROR);
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvcmUuanMiXSwibmFtZXMiOlsiYXNhcCIsInJlcXVpcmUiLCJub29wIiwiTEFTVF9FUlJPUiIsIklTX0VSUk9SIiwiZ2V0VGhlbiIsIm9iaiIsInRoZW4iLCJleCIsInRyeUNhbGxPbmUiLCJmbiIsImEiLCJ0cnlDYWxsVHdvIiwiYiIsIm1vZHVsZSIsImV4cG9ydHMiLCJQcm9taXNlIiwiVHlwZUVycm9yIiwiX1UiLCJfViIsIl9XIiwiX1giLCJkb1Jlc29sdmUiLCJfWSIsIl9aIiwiXzAiLCJwcm90b3R5cGUiLCJvbkZ1bGZpbGxlZCIsIm9uUmVqZWN0ZWQiLCJjb25zdHJ1Y3RvciIsInNhZmVUaGVuIiwicmVzIiwiaGFuZGxlIiwiSGFuZGxlciIsInNlbGYiLCJyZXNvbHZlIiwicmVqZWN0IiwiZGVmZXJyZWQiLCJwdXNoIiwiaGFuZGxlUmVzb2x2ZWQiLCJjYiIsInByb21pc2UiLCJyZXQiLCJuZXdWYWx1ZSIsImZpbmFsZSIsImJpbmQiLCJpIiwibGVuZ3RoIiwiZG9uZSIsInZhbHVlIiwicmVhc29uIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQSxJQUFJQSxJQUFJLEdBQUdDLE9BQU8sQ0FBQyxVQUFELENBQWxCOztBQUVBLFNBQVNDLElBQVQsR0FBZ0IsQ0FBRTs7QUFtQmxCLElBQUlDLFVBQVUsR0FBRyxJQUFqQjtBQUNBLElBQUlDLFFBQVEsR0FBRyxFQUFmOztBQUNBLFNBQVNDLE9BQVQsQ0FBaUJDLEdBQWpCLEVBQXNCO0FBQ3BCLE1BQUk7QUFDRixXQUFPQSxHQUFHLENBQUNDLElBQVg7QUFDRCxHQUZELENBRUUsT0FBT0MsRUFBUCxFQUFXO0FBQ1hMLElBQUFBLFVBQVUsR0FBR0ssRUFBYjtBQUNBLFdBQU9KLFFBQVA7QUFDRDtBQUNGOztBQUVELFNBQVNLLFVBQVQsQ0FBb0JDLEVBQXBCLEVBQXdCQyxDQUF4QixFQUEyQjtBQUN6QixNQUFJO0FBQ0YsV0FBT0QsRUFBRSxDQUFDQyxDQUFELENBQVQ7QUFDRCxHQUZELENBRUUsT0FBT0gsRUFBUCxFQUFXO0FBQ1hMLElBQUFBLFVBQVUsR0FBR0ssRUFBYjtBQUNBLFdBQU9KLFFBQVA7QUFDRDtBQUNGOztBQUNELFNBQVNRLFVBQVQsQ0FBb0JGLEVBQXBCLEVBQXdCQyxDQUF4QixFQUEyQkUsQ0FBM0IsRUFBOEI7QUFDNUIsTUFBSTtBQUNGSCxJQUFBQSxFQUFFLENBQUNDLENBQUQsRUFBSUUsQ0FBSixDQUFGO0FBQ0QsR0FGRCxDQUVFLE9BQU9MLEVBQVAsRUFBVztBQUNYTCxJQUFBQSxVQUFVLEdBQUdLLEVBQWI7QUFDQSxXQUFPSixRQUFQO0FBQ0Q7QUFDRjs7QUFFRFUsTUFBTSxDQUFDQyxPQUFQLEdBQWlCQyxPQUFqQjs7QUFFQSxTQUFTQSxPQUFULENBQWlCTixFQUFqQixFQUFxQjtBQUNuQixNQUFJLE9BQU8sSUFBUCxLQUFnQixRQUFwQixFQUE4QjtBQUM1QixVQUFNLElBQUlPLFNBQUosQ0FBYyxzQ0FBZCxDQUFOO0FBQ0Q7O0FBQ0QsTUFBSSxPQUFPUCxFQUFQLEtBQWMsVUFBbEIsRUFBOEI7QUFDNUIsVUFBTSxJQUFJTyxTQUFKLENBQWMsbURBQWQsQ0FBTjtBQUNEOztBQUNELE9BQUtDLEVBQUwsR0FBVSxDQUFWO0FBQ0EsT0FBS0MsRUFBTCxHQUFVLENBQVY7QUFDQSxPQUFLQyxFQUFMLEdBQVUsSUFBVjtBQUNBLE9BQUtDLEVBQUwsR0FBVSxJQUFWO0FBQ0EsTUFBSVgsRUFBRSxLQUFLUixJQUFYLEVBQWlCO0FBQ2pCb0IsRUFBQUEsU0FBUyxDQUFDWixFQUFELEVBQUssSUFBTCxDQUFUO0FBQ0Q7O0FBQ0RNLE9BQU8sQ0FBQ08sRUFBUixHQUFhLElBQWI7QUFDQVAsT0FBTyxDQUFDUSxFQUFSLEdBQWEsSUFBYjtBQUNBUixPQUFPLENBQUNTLEVBQVIsR0FBYXZCLElBQWI7O0FBRUFjLE9BQU8sQ0FBQ1UsU0FBUixDQUFrQm5CLElBQWxCLEdBQXlCLFVBQVNvQixXQUFULEVBQXNCQyxVQUF0QixFQUFrQztBQUN6RCxNQUFJLEtBQUtDLFdBQUwsS0FBcUJiLE9BQXpCLEVBQWtDO0FBQ2hDLFdBQU9jLFFBQVEsQ0FBQyxJQUFELEVBQU9ILFdBQVAsRUFBb0JDLFVBQXBCLENBQWY7QUFDRDs7QUFDRCxNQUFJRyxHQUFHLEdBQUcsSUFBSWYsT0FBSixDQUFZZCxJQUFaLENBQVY7QUFDQThCLEVBQUFBLE1BQU0sQ0FBQyxJQUFELEVBQU8sSUFBSUMsT0FBSixDQUFZTixXQUFaLEVBQXlCQyxVQUF6QixFQUFxQ0csR0FBckMsQ0FBUCxDQUFOO0FBQ0EsU0FBT0EsR0FBUDtBQUNELENBUEQ7O0FBU0EsU0FBU0QsUUFBVCxDQUFrQkksSUFBbEIsRUFBd0JQLFdBQXhCLEVBQXFDQyxVQUFyQyxFQUFpRDtBQUMvQyxTQUFPLElBQUlNLElBQUksQ0FBQ0wsV0FBVCxDQUFxQixVQUFVTSxPQUFWLEVBQW1CQyxNQUFuQixFQUEyQjtBQUNyRCxRQUFJTCxHQUFHLEdBQUcsSUFBSWYsT0FBSixDQUFZZCxJQUFaLENBQVY7QUFDQTZCLElBQUFBLEdBQUcsQ0FBQ3hCLElBQUosQ0FBUzRCLE9BQVQsRUFBa0JDLE1BQWxCO0FBQ0FKLElBQUFBLE1BQU0sQ0FBQ0UsSUFBRCxFQUFPLElBQUlELE9BQUosQ0FBWU4sV0FBWixFQUF5QkMsVUFBekIsRUFBcUNHLEdBQXJDLENBQVAsQ0FBTjtBQUNELEdBSk0sQ0FBUDtBQUtEOztBQUNELFNBQVNDLE1BQVQsQ0FBZ0JFLElBQWhCLEVBQXNCRyxRQUF0QixFQUFnQztBQUM5QixTQUFPSCxJQUFJLENBQUNmLEVBQUwsS0FBWSxDQUFuQixFQUFzQjtBQUNwQmUsSUFBQUEsSUFBSSxHQUFHQSxJQUFJLENBQUNkLEVBQVo7QUFDRDs7QUFDRCxNQUFJSixPQUFPLENBQUNPLEVBQVosRUFBZ0I7QUFDZFAsSUFBQUEsT0FBTyxDQUFDTyxFQUFSLENBQVdXLElBQVg7QUFDRDs7QUFDRCxNQUFJQSxJQUFJLENBQUNmLEVBQUwsS0FBWSxDQUFoQixFQUFtQjtBQUNqQixRQUFJZSxJQUFJLENBQUNoQixFQUFMLEtBQVksQ0FBaEIsRUFBbUI7QUFDakJnQixNQUFBQSxJQUFJLENBQUNoQixFQUFMLEdBQVUsQ0FBVjtBQUNBZ0IsTUFBQUEsSUFBSSxDQUFDYixFQUFMLEdBQVVnQixRQUFWO0FBQ0E7QUFDRDs7QUFDRCxRQUFJSCxJQUFJLENBQUNoQixFQUFMLEtBQVksQ0FBaEIsRUFBbUI7QUFDakJnQixNQUFBQSxJQUFJLENBQUNoQixFQUFMLEdBQVUsQ0FBVjtBQUNBZ0IsTUFBQUEsSUFBSSxDQUFDYixFQUFMLEdBQVUsQ0FBQ2EsSUFBSSxDQUFDYixFQUFOLEVBQVVnQixRQUFWLENBQVY7QUFDQTtBQUNEOztBQUNESCxJQUFBQSxJQUFJLENBQUNiLEVBQUwsQ0FBUWlCLElBQVIsQ0FBYUQsUUFBYjs7QUFDQTtBQUNEOztBQUNERSxFQUFBQSxjQUFjLENBQUNMLElBQUQsRUFBT0csUUFBUCxDQUFkO0FBQ0Q7O0FBRUQsU0FBU0UsY0FBVCxDQUF3QkwsSUFBeEIsRUFBOEJHLFFBQTlCLEVBQXdDO0FBQ3RDckMsRUFBQUEsSUFBSSxDQUFDLFlBQVc7QUFDZCxRQUFJd0MsRUFBRSxHQUFHTixJQUFJLENBQUNmLEVBQUwsS0FBWSxDQUFaLEdBQWdCa0IsUUFBUSxDQUFDVixXQUF6QixHQUF1Q1UsUUFBUSxDQUFDVCxVQUF6RDs7QUFDQSxRQUFJWSxFQUFFLEtBQUssSUFBWCxFQUFpQjtBQUNmLFVBQUlOLElBQUksQ0FBQ2YsRUFBTCxLQUFZLENBQWhCLEVBQW1CO0FBQ2pCZ0IsUUFBQUEsT0FBTyxDQUFDRSxRQUFRLENBQUNJLE9BQVYsRUFBbUJQLElBQUksQ0FBQ2QsRUFBeEIsQ0FBUDtBQUNELE9BRkQsTUFFTztBQUNMZ0IsUUFBQUEsTUFBTSxDQUFDQyxRQUFRLENBQUNJLE9BQVYsRUFBbUJQLElBQUksQ0FBQ2QsRUFBeEIsQ0FBTjtBQUNEOztBQUNEO0FBQ0Q7O0FBQ0QsUUFBSXNCLEdBQUcsR0FBR2pDLFVBQVUsQ0FBQytCLEVBQUQsRUFBS04sSUFBSSxDQUFDZCxFQUFWLENBQXBCOztBQUNBLFFBQUlzQixHQUFHLEtBQUt0QyxRQUFaLEVBQXNCO0FBQ3BCZ0MsTUFBQUEsTUFBTSxDQUFDQyxRQUFRLENBQUNJLE9BQVYsRUFBbUJ0QyxVQUFuQixDQUFOO0FBQ0QsS0FGRCxNQUVPO0FBQ0xnQyxNQUFBQSxPQUFPLENBQUNFLFFBQVEsQ0FBQ0ksT0FBVixFQUFtQkMsR0FBbkIsQ0FBUDtBQUNEO0FBQ0YsR0FoQkcsQ0FBSjtBQWlCRDs7QUFDRCxTQUFTUCxPQUFULENBQWlCRCxJQUFqQixFQUF1QlMsUUFBdkIsRUFBaUM7QUFFL0IsTUFBSUEsUUFBUSxLQUFLVCxJQUFqQixFQUF1QjtBQUNyQixXQUFPRSxNQUFNLENBQ1hGLElBRFcsRUFFWCxJQUFJakIsU0FBSixDQUFjLDJDQUFkLENBRlcsQ0FBYjtBQUlEOztBQUNELE1BQ0UwQixRQUFRLEtBQ1AsT0FBT0EsUUFBUCxLQUFvQixRQUFwQixJQUFnQyxPQUFPQSxRQUFQLEtBQW9CLFVBRDdDLENBRFYsRUFHRTtBQUNBLFFBQUlwQyxJQUFJLEdBQUdGLE9BQU8sQ0FBQ3NDLFFBQUQsQ0FBbEI7O0FBQ0EsUUFBSXBDLElBQUksS0FBS0gsUUFBYixFQUF1QjtBQUNyQixhQUFPZ0MsTUFBTSxDQUFDRixJQUFELEVBQU8vQixVQUFQLENBQWI7QUFDRDs7QUFDRCxRQUNFSSxJQUFJLEtBQUsyQixJQUFJLENBQUMzQixJQUFkLElBQ0FvQyxRQUFRLFlBQVkzQixPQUZ0QixFQUdFO0FBQ0FrQixNQUFBQSxJQUFJLENBQUNmLEVBQUwsR0FBVSxDQUFWO0FBQ0FlLE1BQUFBLElBQUksQ0FBQ2QsRUFBTCxHQUFVdUIsUUFBVjtBQUNBQyxNQUFBQSxNQUFNLENBQUNWLElBQUQsQ0FBTjtBQUNBO0FBQ0QsS0FSRCxNQVFPLElBQUksT0FBTzNCLElBQVAsS0FBZ0IsVUFBcEIsRUFBZ0M7QUFDckNlLE1BQUFBLFNBQVMsQ0FBQ2YsSUFBSSxDQUFDc0MsSUFBTCxDQUFVRixRQUFWLENBQUQsRUFBc0JULElBQXRCLENBQVQ7QUFDQTtBQUNEO0FBQ0Y7O0FBQ0RBLEVBQUFBLElBQUksQ0FBQ2YsRUFBTCxHQUFVLENBQVY7QUFDQWUsRUFBQUEsSUFBSSxDQUFDZCxFQUFMLEdBQVV1QixRQUFWO0FBQ0FDLEVBQUFBLE1BQU0sQ0FBQ1YsSUFBRCxDQUFOO0FBQ0Q7O0FBRUQsU0FBU0UsTUFBVCxDQUFnQkYsSUFBaEIsRUFBc0JTLFFBQXRCLEVBQWdDO0FBQzlCVCxFQUFBQSxJQUFJLENBQUNmLEVBQUwsR0FBVSxDQUFWO0FBQ0FlLEVBQUFBLElBQUksQ0FBQ2QsRUFBTCxHQUFVdUIsUUFBVjs7QUFDQSxNQUFJM0IsT0FBTyxDQUFDUSxFQUFaLEVBQWdCO0FBQ2RSLElBQUFBLE9BQU8sQ0FBQ1EsRUFBUixDQUFXVSxJQUFYLEVBQWlCUyxRQUFqQjtBQUNEOztBQUNEQyxFQUFBQSxNQUFNLENBQUNWLElBQUQsQ0FBTjtBQUNEOztBQUNELFNBQVNVLE1BQVQsQ0FBZ0JWLElBQWhCLEVBQXNCO0FBQ3BCLE1BQUlBLElBQUksQ0FBQ2hCLEVBQUwsS0FBWSxDQUFoQixFQUFtQjtBQUNqQmMsSUFBQUEsTUFBTSxDQUFDRSxJQUFELEVBQU9BLElBQUksQ0FBQ2IsRUFBWixDQUFOO0FBQ0FhLElBQUFBLElBQUksQ0FBQ2IsRUFBTCxHQUFVLElBQVY7QUFDRDs7QUFDRCxNQUFJYSxJQUFJLENBQUNoQixFQUFMLEtBQVksQ0FBaEIsRUFBbUI7QUFDakIsU0FBSyxJQUFJNEIsQ0FBQyxHQUFHLENBQWIsRUFBZ0JBLENBQUMsR0FBR1osSUFBSSxDQUFDYixFQUFMLENBQVEwQixNQUE1QixFQUFvQ0QsQ0FBQyxFQUFyQyxFQUF5QztBQUN2Q2QsTUFBQUEsTUFBTSxDQUFDRSxJQUFELEVBQU9BLElBQUksQ0FBQ2IsRUFBTCxDQUFReUIsQ0FBUixDQUFQLENBQU47QUFDRDs7QUFDRFosSUFBQUEsSUFBSSxDQUFDYixFQUFMLEdBQVUsSUFBVjtBQUNEO0FBQ0Y7O0FBRUQsU0FBU1ksT0FBVCxDQUFpQk4sV0FBakIsRUFBOEJDLFVBQTlCLEVBQTBDYSxPQUExQyxFQUFrRDtBQUNoRCxPQUFLZCxXQUFMLEdBQW1CLE9BQU9BLFdBQVAsS0FBdUIsVUFBdkIsR0FBb0NBLFdBQXBDLEdBQWtELElBQXJFO0FBQ0EsT0FBS0MsVUFBTCxHQUFrQixPQUFPQSxVQUFQLEtBQXNCLFVBQXRCLEdBQW1DQSxVQUFuQyxHQUFnRCxJQUFsRTtBQUNBLE9BQUthLE9BQUwsR0FBZUEsT0FBZjtBQUNEOztBQVFELFNBQVNuQixTQUFULENBQW1CWixFQUFuQixFQUF1QitCLE9BQXZCLEVBQWdDO0FBQzlCLE1BQUlPLElBQUksR0FBRyxLQUFYO0FBQ0EsTUFBSWpCLEdBQUcsR0FBR25CLFVBQVUsQ0FBQ0YsRUFBRCxFQUFLLFVBQVV1QyxLQUFWLEVBQWlCO0FBQ3hDLFFBQUlELElBQUosRUFBVTtBQUNWQSxJQUFBQSxJQUFJLEdBQUcsSUFBUDtBQUNBYixJQUFBQSxPQUFPLENBQUNNLE9BQUQsRUFBVVEsS0FBVixDQUFQO0FBQ0QsR0FKbUIsRUFJakIsVUFBVUMsTUFBVixFQUFrQjtBQUNuQixRQUFJRixJQUFKLEVBQVU7QUFDVkEsSUFBQUEsSUFBSSxHQUFHLElBQVA7QUFDQVosSUFBQUEsTUFBTSxDQUFDSyxPQUFELEVBQVVTLE1BQVYsQ0FBTjtBQUNELEdBUm1CLENBQXBCOztBQVNBLE1BQUksQ0FBQ0YsSUFBRCxJQUFTakIsR0FBRyxLQUFLM0IsUUFBckIsRUFBK0I7QUFDN0I0QyxJQUFBQSxJQUFJLEdBQUcsSUFBUDtBQUNBWixJQUFBQSxNQUFNLENBQUNLLE9BQUQsRUFBVXRDLFVBQVYsQ0FBTjtBQUNEO0FBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciBhc2FwID0gcmVxdWlyZSgnYXNhcC9yYXcnKTtcblxuZnVuY3Rpb24gbm9vcCgpIHt9XG5cbi8vIFN0YXRlczpcbi8vXG4vLyAwIC0gcGVuZGluZ1xuLy8gMSAtIGZ1bGZpbGxlZCB3aXRoIF92YWx1ZVxuLy8gMiAtIHJlamVjdGVkIHdpdGggX3ZhbHVlXG4vLyAzIC0gYWRvcHRlZCB0aGUgc3RhdGUgb2YgYW5vdGhlciBwcm9taXNlLCBfdmFsdWVcbi8vXG4vLyBvbmNlIHRoZSBzdGF0ZSBpcyBubyBsb25nZXIgcGVuZGluZyAoMCkgaXQgaXMgaW1tdXRhYmxlXG5cbi8vIEFsbCBgX2AgcHJlZml4ZWQgcHJvcGVydGllcyB3aWxsIGJlIHJlZHVjZWQgdG8gYF97cmFuZG9tIG51bWJlcn1gXG4vLyBhdCBidWlsZCB0aW1lIHRvIG9iZnVzY2F0ZSB0aGVtIGFuZCBkaXNjb3VyYWdlIHRoZWlyIHVzZS5cbi8vIFdlIGRvbid0IHVzZSBzeW1ib2xzIG9yIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSB0byBmdWxseSBoaWRlIHRoZW1cbi8vIGJlY2F1c2UgdGhlIHBlcmZvcm1hbmNlIGlzbid0IGdvb2QgZW5vdWdoLlxuXG5cbi8vIHRvIGF2b2lkIHVzaW5nIHRyeS9jYXRjaCBpbnNpZGUgY3JpdGljYWwgZnVuY3Rpb25zLCB3ZVxuLy8gZXh0cmFjdCB0aGVtIHRvIGhlcmUuXG52YXIgTEFTVF9FUlJPUiA9IG51bGw7XG52YXIgSVNfRVJST1IgPSB7fTtcbmZ1bmN0aW9uIGdldFRoZW4ob2JqKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIG9iai50aGVuO1xuICB9IGNhdGNoIChleCkge1xuICAgIExBU1RfRVJST1IgPSBleDtcbiAgICByZXR1cm4gSVNfRVJST1I7XG4gIH1cbn1cblxuZnVuY3Rpb24gdHJ5Q2FsbE9uZShmbiwgYSkge1xuICB0cnkge1xuICAgIHJldHVybiBmbihhKTtcbiAgfSBjYXRjaCAoZXgpIHtcbiAgICBMQVNUX0VSUk9SID0gZXg7XG4gICAgcmV0dXJuIElTX0VSUk9SO1xuICB9XG59XG5mdW5jdGlvbiB0cnlDYWxsVHdvKGZuLCBhLCBiKSB7XG4gIHRyeSB7XG4gICAgZm4oYSwgYik7XG4gIH0gY2F0Y2ggKGV4KSB7XG4gICAgTEFTVF9FUlJPUiA9IGV4O1xuICAgIHJldHVybiBJU19FUlJPUjtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFByb21pc2U7XG5cbmZ1bmN0aW9uIFByb21pc2UoZm4pIHtcbiAgaWYgKHR5cGVvZiB0aGlzICE9PSAnb2JqZWN0Jykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1Byb21pc2VzIG11c3QgYmUgY29uc3RydWN0ZWQgdmlhIG5ldycpO1xuICB9XG4gIGlmICh0eXBlb2YgZm4gIT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdQcm9taXNlIGNvbnN0cnVjdG9yXFwncyBhcmd1bWVudCBpcyBub3QgYSBmdW5jdGlvbicpO1xuICB9XG4gIHRoaXMuX1UgPSAwO1xuICB0aGlzLl9WID0gMDtcbiAgdGhpcy5fVyA9IG51bGw7XG4gIHRoaXMuX1ggPSBudWxsO1xuICBpZiAoZm4gPT09IG5vb3ApIHJldHVybjtcbiAgZG9SZXNvbHZlKGZuLCB0aGlzKTtcbn1cblByb21pc2UuX1kgPSBudWxsO1xuUHJvbWlzZS5fWiA9IG51bGw7XG5Qcm9taXNlLl8wID0gbm9vcDtcblxuUHJvbWlzZS5wcm90b3R5cGUudGhlbiA9IGZ1bmN0aW9uKG9uRnVsZmlsbGVkLCBvblJlamVjdGVkKSB7XG4gIGlmICh0aGlzLmNvbnN0cnVjdG9yICE9PSBQcm9taXNlKSB7XG4gICAgcmV0dXJuIHNhZmVUaGVuKHRoaXMsIG9uRnVsZmlsbGVkLCBvblJlamVjdGVkKTtcbiAgfVxuICB2YXIgcmVzID0gbmV3IFByb21pc2Uobm9vcCk7XG4gIGhhbmRsZSh0aGlzLCBuZXcgSGFuZGxlcihvbkZ1bGZpbGxlZCwgb25SZWplY3RlZCwgcmVzKSk7XG4gIHJldHVybiByZXM7XG59O1xuXG5mdW5jdGlvbiBzYWZlVGhlbihzZWxmLCBvbkZ1bGZpbGxlZCwgb25SZWplY3RlZCkge1xuICByZXR1cm4gbmV3IHNlbGYuY29uc3RydWN0b3IoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgIHZhciByZXMgPSBuZXcgUHJvbWlzZShub29wKTtcbiAgICByZXMudGhlbihyZXNvbHZlLCByZWplY3QpO1xuICAgIGhhbmRsZShzZWxmLCBuZXcgSGFuZGxlcihvbkZ1bGZpbGxlZCwgb25SZWplY3RlZCwgcmVzKSk7XG4gIH0pO1xufVxuZnVuY3Rpb24gaGFuZGxlKHNlbGYsIGRlZmVycmVkKSB7XG4gIHdoaWxlIChzZWxmLl9WID09PSAzKSB7XG4gICAgc2VsZiA9IHNlbGYuX1c7XG4gIH1cbiAgaWYgKFByb21pc2UuX1kpIHtcbiAgICBQcm9taXNlLl9ZKHNlbGYpO1xuICB9XG4gIGlmIChzZWxmLl9WID09PSAwKSB7XG4gICAgaWYgKHNlbGYuX1UgPT09IDApIHtcbiAgICAgIHNlbGYuX1UgPSAxO1xuICAgICAgc2VsZi5fWCA9IGRlZmVycmVkO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoc2VsZi5fVSA9PT0gMSkge1xuICAgICAgc2VsZi5fVSA9IDI7XG4gICAgICBzZWxmLl9YID0gW3NlbGYuX1gsIGRlZmVycmVkXTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgc2VsZi5fWC5wdXNoKGRlZmVycmVkKTtcbiAgICByZXR1cm47XG4gIH1cbiAgaGFuZGxlUmVzb2x2ZWQoc2VsZiwgZGVmZXJyZWQpO1xufVxuXG5mdW5jdGlvbiBoYW5kbGVSZXNvbHZlZChzZWxmLCBkZWZlcnJlZCkge1xuICBhc2FwKGZ1bmN0aW9uKCkge1xuICAgIHZhciBjYiA9IHNlbGYuX1YgPT09IDEgPyBkZWZlcnJlZC5vbkZ1bGZpbGxlZCA6IGRlZmVycmVkLm9uUmVqZWN0ZWQ7XG4gICAgaWYgKGNiID09PSBudWxsKSB7XG4gICAgICBpZiAoc2VsZi5fViA9PT0gMSkge1xuICAgICAgICByZXNvbHZlKGRlZmVycmVkLnByb21pc2UsIHNlbGYuX1cpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVqZWN0KGRlZmVycmVkLnByb21pc2UsIHNlbGYuX1cpO1xuICAgICAgfVxuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgcmV0ID0gdHJ5Q2FsbE9uZShjYiwgc2VsZi5fVyk7XG4gICAgaWYgKHJldCA9PT0gSVNfRVJST1IpIHtcbiAgICAgIHJlamVjdChkZWZlcnJlZC5wcm9taXNlLCBMQVNUX0VSUk9SKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzb2x2ZShkZWZlcnJlZC5wcm9taXNlLCByZXQpO1xuICAgIH1cbiAgfSk7XG59XG5mdW5jdGlvbiByZXNvbHZlKHNlbGYsIG5ld1ZhbHVlKSB7XG4gIC8vIFByb21pc2UgUmVzb2x1dGlvbiBQcm9jZWR1cmU6IGh0dHBzOi8vZ2l0aHViLmNvbS9wcm9taXNlcy1hcGx1cy9wcm9taXNlcy1zcGVjI3RoZS1wcm9taXNlLXJlc29sdXRpb24tcHJvY2VkdXJlXG4gIGlmIChuZXdWYWx1ZSA9PT0gc2VsZikge1xuICAgIHJldHVybiByZWplY3QoXG4gICAgICBzZWxmLFxuICAgICAgbmV3IFR5cGVFcnJvcignQSBwcm9taXNlIGNhbm5vdCBiZSByZXNvbHZlZCB3aXRoIGl0c2VsZi4nKVxuICAgICk7XG4gIH1cbiAgaWYgKFxuICAgIG5ld1ZhbHVlICYmXG4gICAgKHR5cGVvZiBuZXdWYWx1ZSA9PT0gJ29iamVjdCcgfHwgdHlwZW9mIG5ld1ZhbHVlID09PSAnZnVuY3Rpb24nKVxuICApIHtcbiAgICB2YXIgdGhlbiA9IGdldFRoZW4obmV3VmFsdWUpO1xuICAgIGlmICh0aGVuID09PSBJU19FUlJPUikge1xuICAgICAgcmV0dXJuIHJlamVjdChzZWxmLCBMQVNUX0VSUk9SKTtcbiAgICB9XG4gICAgaWYgKFxuICAgICAgdGhlbiA9PT0gc2VsZi50aGVuICYmXG4gICAgICBuZXdWYWx1ZSBpbnN0YW5jZW9mIFByb21pc2VcbiAgICApIHtcbiAgICAgIHNlbGYuX1YgPSAzO1xuICAgICAgc2VsZi5fVyA9IG5ld1ZhbHVlO1xuICAgICAgZmluYWxlKHNlbGYpO1xuICAgICAgcmV0dXJuO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIHRoZW4gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGRvUmVzb2x2ZSh0aGVuLmJpbmQobmV3VmFsdWUpLCBzZWxmKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gIH1cbiAgc2VsZi5fViA9IDE7XG4gIHNlbGYuX1cgPSBuZXdWYWx1ZTtcbiAgZmluYWxlKHNlbGYpO1xufVxuXG5mdW5jdGlvbiByZWplY3Qoc2VsZiwgbmV3VmFsdWUpIHtcbiAgc2VsZi5fViA9IDI7XG4gIHNlbGYuX1cgPSBuZXdWYWx1ZTtcbiAgaWYgKFByb21pc2UuX1opIHtcbiAgICBQcm9taXNlLl9aKHNlbGYsIG5ld1ZhbHVlKTtcbiAgfVxuICBmaW5hbGUoc2VsZik7XG59XG5mdW5jdGlvbiBmaW5hbGUoc2VsZikge1xuICBpZiAoc2VsZi5fVSA9PT0gMSkge1xuICAgIGhhbmRsZShzZWxmLCBzZWxmLl9YKTtcbiAgICBzZWxmLl9YID0gbnVsbDtcbiAgfVxuICBpZiAoc2VsZi5fVSA9PT0gMikge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2VsZi5fWC5sZW5ndGg7IGkrKykge1xuICAgICAgaGFuZGxlKHNlbGYsIHNlbGYuX1hbaV0pO1xuICAgIH1cbiAgICBzZWxmLl9YID0gbnVsbDtcbiAgfVxufVxuXG5mdW5jdGlvbiBIYW5kbGVyKG9uRnVsZmlsbGVkLCBvblJlamVjdGVkLCBwcm9taXNlKXtcbiAgdGhpcy5vbkZ1bGZpbGxlZCA9IHR5cGVvZiBvbkZ1bGZpbGxlZCA9PT0gJ2Z1bmN0aW9uJyA/IG9uRnVsZmlsbGVkIDogbnVsbDtcbiAgdGhpcy5vblJlamVjdGVkID0gdHlwZW9mIG9uUmVqZWN0ZWQgPT09ICdmdW5jdGlvbicgPyBvblJlamVjdGVkIDogbnVsbDtcbiAgdGhpcy5wcm9taXNlID0gcHJvbWlzZTtcbn1cblxuLyoqXG4gKiBUYWtlIGEgcG90ZW50aWFsbHkgbWlzYmVoYXZpbmcgcmVzb2x2ZXIgZnVuY3Rpb24gYW5kIG1ha2Ugc3VyZVxuICogb25GdWxmaWxsZWQgYW5kIG9uUmVqZWN0ZWQgYXJlIG9ubHkgY2FsbGVkIG9uY2UuXG4gKlxuICogTWFrZXMgbm8gZ3VhcmFudGVlcyBhYm91dCBhc3luY2hyb255LlxuICovXG5mdW5jdGlvbiBkb1Jlc29sdmUoZm4sIHByb21pc2UpIHtcbiAgdmFyIGRvbmUgPSBmYWxzZTtcbiAgdmFyIHJlcyA9IHRyeUNhbGxUd28oZm4sIGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIGlmIChkb25lKSByZXR1cm47XG4gICAgZG9uZSA9IHRydWU7XG4gICAgcmVzb2x2ZShwcm9taXNlLCB2YWx1ZSk7XG4gIH0sIGZ1bmN0aW9uIChyZWFzb24pIHtcbiAgICBpZiAoZG9uZSkgcmV0dXJuO1xuICAgIGRvbmUgPSB0cnVlO1xuICAgIHJlamVjdChwcm9taXNlLCByZWFzb24pO1xuICB9KTtcbiAgaWYgKCFkb25lICYmIHJlcyA9PT0gSVNfRVJST1IpIHtcbiAgICBkb25lID0gdHJ1ZTtcbiAgICByZWplY3QocHJvbWlzZSwgTEFTVF9FUlJPUik7XG4gIH1cbn1cbiJdfQ==