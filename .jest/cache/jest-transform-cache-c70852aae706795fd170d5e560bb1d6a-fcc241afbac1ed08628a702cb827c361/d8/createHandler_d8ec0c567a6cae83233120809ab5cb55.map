{"version":3,"mappings":"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","names":["UIManagerAny","UIManager","customGHEventsConfigFabricAndroid","topOnGestureHandlerEvent","registrationName","topOnGestureHandlerStateChange","customGHEventsConfig","onGestureHandlerEvent","onGestureHandlerStateChange","Platform","OS","genericDirectEventTypes","UIManagerConstants","getViewManagerConfig","_UIManagerAny$getView2","getConstants","_UIManagerAny$getCons","setJSResponder","oldSetJSResponder","clearJSResponder","oldClearJSResponder","tag","blockNativeResponder","RNGestureHandlerModule","handleSetJSResponder","handleClearJSResponder","allowTouches","DEV_ON_ANDROID","__DEV__","DeviceEventEmitter","addListener","hasUnresolvedRefs","props","extract","refs","Array","isArray","current","some","r","stateToPropMappings","State","UNDETERMINED","undefined","BEGAN","FAILED","CANCELLED","ACTIVE","END","showedRngh2Notice","showRngh2NoticeIfNeeded","console","warn","createHandler","name","allowedProps","config","transformProps","customNativeProps","Handler","constructor","_defineProperty","event","nativeEvent","handlerTag","onGestureEvent","onHandlerStateChange","state","stateEventName","eventHandler","node","viewNode","child","React","Children","only","children","ref","newConfig","createGestureHandler","newViewTag","viewTag","attachGestureHandler","ActionType","JS_FUNCTION_OLD_API","propsRef","onGestureStateChange","actionType","REANIMATED_WORKLET","NATIVE_ANIMATED_EVENT","updateGestureHandler","createRef","id","handlerIDToTag","Error","componentDidMount","inspectorToggleListener","setState","_","update","updateEnqueued","setImmediate","componentDidUpdate","componentWillUnmount","remove","dropGestureHandler","clearImmediate","handlerID","setNativeProps","updates","mergedProps","render","gestureEventHandler","gestureStateEventHandler","events","grandChildren","Touchable","TOUCH_TARGET_DEBUG","type","displayName","toArray","push","renderDebugView","color","hitSlop","cloneElement","refHandler","collapsable","handlerType","testID","Component"],"sources":["createHandler.ts"],"sourcesContent":["import * as React from 'react';\nimport {\n  Platform,\n  Touchable,\n  UIManager,\n  DeviceEventEmitter,\n  EmitterSubscription,\n} from 'react-native';\n// @ts-ignore - it isn't typed by TS & don't have definitelyTyped types\nimport deepEqual from 'lodash/isEqual';\nimport RNGestureHandlerModule from '../RNGestureHandlerModule';\nimport type RNGestureHandlerModuleWeb from '../RNGestureHandlerModule.web';\nimport { State } from '../State';\nimport {\n  handlerIDToTag,\n  getNextHandlerTag,\n  registerOldGestureHandler,\n} from './handlersRegistry';\n\nimport {\n  BaseGestureHandlerProps,\n  filterConfig,\n  GestureEvent,\n  HandlerStateChangeEvent,\n  findNodeHandle,\n} from './gestureHandlerCommon';\nimport { ValueOf } from '../typeUtils';\nimport { isFabric, isJestEnv, tagMessage } from '../utils';\nimport { ActionType } from '../ActionType';\n\nconst UIManagerAny = UIManager as any;\n\nconst customGHEventsConfigFabricAndroid = {\n  topOnGestureHandlerEvent: { registrationName: 'onGestureHandlerEvent' },\n  topOnGestureHandlerStateChange: {\n    registrationName: 'onGestureHandlerStateChange',\n  },\n};\n\nconst customGHEventsConfig = {\n  onGestureHandlerEvent: { registrationName: 'onGestureHandlerEvent' },\n  onGestureHandlerStateChange: {\n    registrationName: 'onGestureHandlerStateChange',\n  },\n\n  // When using React Native Gesture Handler for Animated.event with useNativeDriver: true\n  // on Android with Fabric enabled, the native part still sends the native events to JS\n  // but prefixed with \"top\". We cannot simply rename the events above so they are prefixed\n  // with \"top\" instead of \"on\" because in such case Animated.events would not be registered.\n  // That's why we need to register another pair of event names.\n  // The incoming events will be queued but never handled.\n  // Without this piece of code below, you'll get the following JS error:\n  // Unsupported top level event type \"topOnGestureHandlerEvent\" dispatched\n  ...(isFabric() &&\n    Platform.OS === 'android' &&\n    customGHEventsConfigFabricAndroid),\n};\n\n// Add gesture specific events to genericDirectEventTypes object exported from UIManager\n// native module.\n// Once new event types are registered with react it is possible to dispatch these\n// events to all kind of native views.\nUIManagerAny.genericDirectEventTypes = {\n  ...UIManagerAny.genericDirectEventTypes,\n  ...customGHEventsConfig,\n};\n// In newer versions of RN the `genericDirectEventTypes` is located in the object\n// returned by UIManager.getViewManagerConfig('getConstants') or in older RN UIManager.getConstants(), we need to add it there as well to make\n// it compatible with RN 61+\nconst UIManagerConstants =\n  UIManagerAny.getViewManagerConfig?.('getConstants') ??\n  UIManagerAny.getConstants?.();\n\nif (UIManagerConstants) {\n  UIManagerConstants.genericDirectEventTypes = {\n    ...UIManagerConstants.genericDirectEventTypes,\n    ...customGHEventsConfig,\n  };\n}\n\n// Wrap JS responder calls and notify gesture handler manager\nconst {\n  setJSResponder: oldSetJSResponder = () => {\n    //no operation\n  },\n  clearJSResponder: oldClearJSResponder = () => {\n    //no operation\n  },\n} = UIManagerAny;\nUIManagerAny.setJSResponder = (tag: number, blockNativeResponder: boolean) => {\n  RNGestureHandlerModule.handleSetJSResponder(tag, blockNativeResponder);\n  oldSetJSResponder(tag, blockNativeResponder);\n};\nUIManagerAny.clearJSResponder = () => {\n  RNGestureHandlerModule.handleClearJSResponder();\n  oldClearJSResponder();\n};\n\nlet allowTouches = true;\nconst DEV_ON_ANDROID = __DEV__ && Platform.OS === 'android';\n// Toggled inspector blocks touch events in order to allow inspecting on Android\n// This needs to be a global variable in order to set initial state for `allowTouches` property in Handler component\nif (DEV_ON_ANDROID) {\n  DeviceEventEmitter.addListener('toggleElementInspector', () => {\n    allowTouches = !allowTouches;\n  });\n}\n\ntype HandlerProps<T extends Record<string, unknown>> = Readonly<\n  React.PropsWithChildren<BaseGestureHandlerProps<T>>\n>;\nfunction hasUnresolvedRefs<T extends Record<string, unknown>>(\n  props: HandlerProps<T>\n) {\n  // TODO(TS) - add type for extract arg\n  const extract = (refs: any | any[]) => {\n    if (!Array.isArray(refs)) {\n      return refs && refs.current === null;\n    }\n    return refs.some((r) => r && r.current === null);\n  };\n  return extract(props['simultaneousHandlers']) || extract(props['waitFor']);\n}\n\nconst stateToPropMappings = {\n  [State.UNDETERMINED]: undefined,\n  [State.BEGAN]: 'onBegan',\n  [State.FAILED]: 'onFailed',\n  [State.CANCELLED]: 'onCancelled',\n  [State.ACTIVE]: 'onActivated',\n  [State.END]: 'onEnded',\n} as const;\n\ntype CreateHandlerArgs<\n  HandlerPropsT extends Record<string, unknown>\n> = Readonly<{\n  name: string;\n  allowedProps: Readonly<Extract<keyof HandlerPropsT, string>[]>;\n  config: Readonly<Record<string, unknown>>;\n  transformProps?: (props: HandlerPropsT) => HandlerPropsT;\n  customNativeProps?: Readonly<string[]>;\n}>;\n\n// TODO(TS) fix event types\ntype InternalEventHandlers = {\n  onGestureHandlerEvent?: (event: any) => void;\n  onGestureHandlerStateChange?: (event: any) => void;\n};\n\nlet showedRngh2Notice = false;\nfunction showRngh2NoticeIfNeeded() {\n  if (!showedRngh2Notice) {\n    console.warn(\n      tagMessage(\n        \"Seems like you're using an old API with gesture components, check out new Gestures system!\"\n      )\n    );\n    showedRngh2Notice = true;\n  }\n}\n\n// TODO(TS) - make sure that BaseGestureHandlerProps doesn't need other generic parameter to work with custom properties.\nexport default function createHandler<\n  T extends BaseGestureHandlerProps<U>,\n  U extends Record<string, unknown>\n>({\n  name,\n  allowedProps = [],\n  config = {},\n  transformProps,\n  customNativeProps = [],\n}: CreateHandlerArgs<T>): React.ComponentType<T & React.RefAttributes<any>> {\n  interface HandlerState {\n    allowTouches: boolean;\n  }\n  class Handler extends React.Component<\n    T & InternalEventHandlers,\n    HandlerState\n  > {\n    static displayName = name;\n\n    private handlerTag: number;\n    private config: Record<string, unknown>;\n    private propsRef: React.MutableRefObject<unknown>;\n    private viewNode: any;\n    private viewTag?: number;\n    private updateEnqueued: ReturnType<typeof setImmediate> | null = null;\n    private inspectorToggleListener?: EmitterSubscription;\n\n    constructor(props: T & InternalEventHandlers) {\n      super(props);\n      this.handlerTag = getNextHandlerTag();\n      this.config = {};\n      this.propsRef = React.createRef();\n      this.state = { allowTouches };\n      if (props.id) {\n        if (handlerIDToTag[props.id] !== undefined) {\n          throw new Error(`Handler with ID \"${props.id}\" already registered`);\n        }\n        handlerIDToTag[props.id] = this.handlerTag;\n      }\n      if (__DEV__ && !isJestEnv()) {\n        showRngh2NoticeIfNeeded();\n      }\n    }\n\n    componentDidMount() {\n      const props: HandlerProps<U> = this.props;\n\n      if (DEV_ON_ANDROID) {\n        this.inspectorToggleListener = DeviceEventEmitter.addListener(\n          'toggleElementInspector',\n          () => {\n            this.setState((_) => ({ allowTouches }));\n            this.update();\n          }\n        );\n      }\n      if (hasUnresolvedRefs(props)) {\n        // If there are unresolved refs (e.g. \".current\" has not yet been set)\n        // passed as `simultaneousHandlers` or `waitFor`, we enqueue a call to\n        // _update method that will try to update native handler props using\n        // setImmediate. This makes it so update() function gets called after all\n        // react components are mounted and we expect the missing ref object to\n        // be resolved by then.\n        this.updateEnqueued = setImmediate(() => {\n          this.updateEnqueued = null;\n          this.update();\n        });\n      }\n\n      this.createGestureHandler(\n        filterConfig(\n          transformProps ? transformProps(this.props) : this.props,\n          [...allowedProps, ...customNativeProps],\n          config\n        )\n      );\n\n      this.attachGestureHandler(findNodeHandle(this.viewNode) as number); // TODO(TS) - check if this can be null\n    }\n\n    componentDidUpdate() {\n      const viewTag = findNodeHandle(this.viewNode);\n      if (this.viewTag !== viewTag) {\n        this.attachGestureHandler(viewTag as number); // TODO(TS) - check interaction between _viewTag & findNodeHandle\n      }\n      this.update();\n    }\n\n    componentWillUnmount() {\n      this.inspectorToggleListener?.remove();\n      RNGestureHandlerModule.dropGestureHandler(this.handlerTag);\n      if (this.updateEnqueued) {\n        clearImmediate(this.updateEnqueued);\n      }\n      // We can't use this.props.id directly due to TS generic type narrowing bug, see https://github.com/microsoft/TypeScript/issues/13995 for more context\n      const handlerID: string | undefined = this.props.id;\n      if (handlerID) {\n        // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n        delete handlerIDToTag[handlerID];\n      }\n    }\n\n    private onGestureHandlerEvent = (event: GestureEvent<U>) => {\n      if (event.nativeEvent.handlerTag === this.handlerTag) {\n        if (typeof this.props.onGestureEvent === 'function') {\n          this.props.onGestureEvent?.(event);\n        }\n      } else {\n        this.props.onGestureHandlerEvent?.(event);\n      }\n    };\n\n    // TODO(TS) - make sure this is right type for event\n    private onGestureHandlerStateChange = (\n      event: HandlerStateChangeEvent<U>\n    ) => {\n      if (event.nativeEvent.handlerTag === this.handlerTag) {\n        if (typeof this.props.onHandlerStateChange === 'function') {\n          this.props.onHandlerStateChange?.(event);\n        }\n\n        const state: ValueOf<typeof State> = event.nativeEvent.state;\n        const stateEventName = stateToPropMappings[state];\n        const eventHandler = stateEventName && this.props[stateEventName];\n        if (eventHandler && typeof eventHandler === 'function') {\n          eventHandler(event);\n        }\n      } else {\n        this.props.onGestureHandlerStateChange?.(event);\n      }\n    };\n\n    private refHandler = (node: any) => {\n      this.viewNode = node;\n\n      const child = React.Children.only(this.props.children);\n      // TODO(TS) fix ref type\n      const { ref }: any = child;\n      if (ref !== null) {\n        if (typeof ref === 'function') {\n          ref(node);\n        } else {\n          ref.current = node;\n        }\n      }\n    };\n\n    private createGestureHandler = (\n      newConfig: Readonly<Record<string, unknown>>\n    ) => {\n      this.config = newConfig;\n\n      RNGestureHandlerModule.createGestureHandler(\n        name,\n        this.handlerTag,\n        newConfig\n      );\n    };\n\n    private attachGestureHandler = (newViewTag: number) => {\n      this.viewTag = newViewTag;\n\n      if (Platform.OS === 'web') {\n        // typecast due to dynamic resolution, attachGestureHandler should have web version signature in this branch\n        (RNGestureHandlerModule.attachGestureHandler as typeof RNGestureHandlerModuleWeb.attachGestureHandler)(\n          this.handlerTag,\n          newViewTag,\n          ActionType.JS_FUNCTION_OLD_API, // ignored on web\n          this.propsRef\n        );\n      } else {\n        registerOldGestureHandler(this.handlerTag, {\n          onGestureEvent: this.onGestureHandlerEvent,\n          onGestureStateChange: this.onGestureHandlerStateChange,\n        });\n\n        const actionType = (() => {\n          if (\n            this.props?.onGestureEvent &&\n            'current' in this.props.onGestureEvent\n          ) {\n            // Reanimated worklet\n            return ActionType.REANIMATED_WORKLET;\n          } else if (\n            this.props?.onGestureEvent &&\n            '__isNative' in this.props.onGestureEvent\n          ) {\n            // Animated.event with useNativeDriver: true\n            return ActionType.NATIVE_ANIMATED_EVENT;\n          } else {\n            // JS callback or Animated.event with useNativeDriver: false\n            return ActionType.JS_FUNCTION_OLD_API;\n          }\n        })();\n\n        RNGestureHandlerModule.attachGestureHandler(\n          this.handlerTag,\n          newViewTag,\n          actionType\n        );\n      }\n    };\n\n    private updateGestureHandler = (\n      newConfig: Readonly<Record<string, unknown>>\n    ) => {\n      this.config = newConfig;\n\n      RNGestureHandlerModule.updateGestureHandler(this.handlerTag, newConfig);\n    };\n\n    private update() {\n      const newConfig = filterConfig(\n        transformProps ? transformProps(this.props) : this.props,\n        [...allowedProps, ...customNativeProps],\n        config\n      );\n      if (!deepEqual(this.config, newConfig)) {\n        this.updateGestureHandler(newConfig);\n      }\n    }\n\n    setNativeProps(updates: any) {\n      const mergedProps = { ...this.props, ...updates };\n      const newConfig = filterConfig(\n        transformProps ? transformProps(mergedProps) : mergedProps,\n        [...allowedProps, ...customNativeProps],\n        config\n      );\n      this.updateGestureHandler(newConfig);\n    }\n\n    render() {\n      let gestureEventHandler = this.onGestureHandlerEvent;\n      // Another instance of https://github.com/microsoft/TypeScript/issues/13995\n      type OnGestureEventHandlers = {\n        onGestureEvent?: BaseGestureHandlerProps<U>['onGestureEvent'];\n        onGestureHandlerEvent?: InternalEventHandlers['onGestureHandlerEvent'];\n      };\n      const {\n        onGestureEvent,\n        onGestureHandlerEvent,\n      }: OnGestureEventHandlers = this.props;\n      if (onGestureEvent && typeof onGestureEvent !== 'function') {\n        // If it's not a method it should be an native Animated.event\n        // object. We set it directly as the handler for the view\n        // In this case nested handlers are not going to be supported\n        if (onGestureHandlerEvent) {\n          throw new Error(\n            'Nesting touch handlers with native animated driver is not supported yet'\n          );\n        }\n        gestureEventHandler = onGestureEvent;\n      } else {\n        if (\n          onGestureHandlerEvent &&\n          typeof onGestureHandlerEvent !== 'function'\n        ) {\n          throw new Error(\n            'Nesting touch handlers with native animated driver is not supported yet'\n          );\n        }\n      }\n\n      let gestureStateEventHandler = this.onGestureHandlerStateChange;\n      // Another instance of https://github.com/microsoft/TypeScript/issues/13995\n      type OnGestureStateChangeHandlers = {\n        onHandlerStateChange?: BaseGestureHandlerProps<U>['onHandlerStateChange'];\n        onGestureHandlerStateChange?: InternalEventHandlers['onGestureHandlerStateChange'];\n      };\n      const {\n        onHandlerStateChange,\n        onGestureHandlerStateChange,\n      }: OnGestureStateChangeHandlers = this.props;\n      if (onHandlerStateChange && typeof onHandlerStateChange !== 'function') {\n        // If it's not a method it should be an native Animated.event\n        // object. We set it directly as the handler for the view\n        // In this case nested handlers are not going to be supported\n        if (onGestureHandlerStateChange) {\n          throw new Error(\n            'Nesting touch handlers with native animated driver is not supported yet'\n          );\n        }\n        gestureStateEventHandler = onHandlerStateChange;\n      } else {\n        if (\n          onGestureHandlerStateChange &&\n          typeof onGestureHandlerStateChange !== 'function'\n        ) {\n          throw new Error(\n            'Nesting touch handlers with native animated driver is not supported yet'\n          );\n        }\n      }\n      const events = {\n        onGestureHandlerEvent: this.state.allowTouches\n          ? gestureEventHandler\n          : undefined,\n        onGestureHandlerStateChange: this.state.allowTouches\n          ? gestureStateEventHandler\n          : undefined,\n      };\n\n      this.propsRef.current = events;\n\n      const child: any = React.Children.only(this.props.children);\n      let grandChildren = child.props.children;\n      if (\n        Touchable.TOUCH_TARGET_DEBUG &&\n        child.type &&\n        (child.type === 'RNGestureHandlerButton' ||\n          child.type.name === 'View' ||\n          child.type.displayName === 'View')\n      ) {\n        grandChildren = React.Children.toArray(grandChildren);\n        grandChildren.push(\n          Touchable.renderDebugView({\n            color: 'mediumspringgreen',\n            hitSlop: child.props.hitSlop,\n          })\n        );\n      }\n\n      return React.cloneElement(\n        child,\n        {\n          ref: this.refHandler,\n          collapsable: false,\n          ...(isJestEnv()\n            ? {\n                handlerType: name,\n                handlerTag: this.handlerTag,\n              }\n            : {}),\n          testID: this.props.testID ?? child.props.testID,\n          ...events,\n        },\n        grandChildren\n      );\n    }\n  }\n  return Handler;\n}\n"]}