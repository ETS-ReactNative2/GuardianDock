{"version":3,"sources":["usePressability.js"],"names":["usePressability","config","pressabilityRef","current","Pressability","pressability","configure","reset","getEventHandlers"],"mappings":";;;;;;;AAUA;;AAIA;;AAOe,SAASA,eAAT,CACbC,MADa,EAEG;AAChB,MAAMC,eAAe,GAAG,mBAAsB,IAAtB,CAAxB;;AACA,MAAID,MAAM,IAAI,IAAV,IAAkBC,eAAe,CAACC,OAAhB,IAA2B,IAAjD,EAAuD;AACrDD,IAAAA,eAAe,CAACC,OAAhB,GAA0B,IAAIC,qBAAJ,CAAiBH,MAAjB,CAA1B;AACD;;AACD,MAAMI,YAAY,GAAGH,eAAe,CAACC,OAArC;AAIA,wBAAU,YAAM;AACd,QAAIF,MAAM,IAAI,IAAV,IAAkBI,YAAY,IAAI,IAAtC,EAA4C;AAC1CA,MAAAA,YAAY,CAACC,SAAb,CAAuBL,MAAvB;AACD;AACF,GAJD,EAIG,CAACA,MAAD,EAASI,YAAT,CAJH;AAQA,wBAAU,YAAM;AACd,QAAIA,YAAY,IAAI,IAApB,EAA0B;AACxB,aAAO,YAAM;AACXA,QAAAA,YAAY,CAACE,KAAb;AACD,OAFD;AAGD;AACF,GAND,EAMG,CAACF,YAAD,CANH;AAQA,SAAOA,YAAY,IAAI,IAAhB,GAAuB,IAAvB,GAA8BA,YAAY,CAACG,gBAAb,EAArC;AACD","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\nimport Pressability, {\n  type EventHandlers,\n  type PressabilityConfig,\n} from './Pressability';\nimport {useEffect, useRef} from 'react';\n\n/**\n * Creates a persistent instance of `Pressability` that automatically configures\n * itself and resets. Accepts null `config` to support lazy initialization. Once\n * initialized, will not un-initialize until the component has been unmounted.\n */\nexport default function usePressability(\n  config: ?PressabilityConfig,\n): ?EventHandlers {\n  const pressabilityRef = useRef<?Pressability>(null);\n  if (config != null && pressabilityRef.current == null) {\n    pressabilityRef.current = new Pressability(config);\n  }\n  const pressability = pressabilityRef.current;\n\n  // On the initial mount, this is a no-op. On updates, `pressability` will be\n  // re-configured to use the new configuration.\n  useEffect(() => {\n    if (config != null && pressability != null) {\n      pressability.configure(config);\n    }\n  }, [config, pressability]);\n\n  // On unmount, reset pending state and timers inside `pressability`. This is\n  // a separate effect because we do not want to reset when `config` changes.\n  useEffect(() => {\n    if (pressability != null) {\n      return () => {\n        pressability.reset();\n      };\n    }\n  }, [pressability]);\n\n  return pressability == null ? null : pressability.getEventHandlers();\n}\n"]}