2a98fe0c150a368762648faf9e87e32b
'use strict';

var NativeComponentRegistry = _interopRequireWildcard(require("../NativeComponent/NativeComponentRegistry"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var TextInlineImage = NativeComponentRegistry.get('RCTTextInlineImage', function () {
  return {
    uiViewClassName: 'RCTImageView',
    bubblingEventTypes: {},
    directEventTypes: {
      topLoadStart: {
        registrationName: 'onLoadStart'
      },
      topProgress: {
        registrationName: 'onProgress'
      },
      topError: {
        registrationName: 'onError'
      },
      topPartialLoad: {
        registrationName: 'onPartialLoad'
      },
      topLoad: {
        registrationName: 'onLoad'
      },
      topLoadEnd: {
        registrationName: 'onLoadEnd'
      }
    },
    validAttributes: {
      blurRadius: true,
      capInsets: {
        diff: require("../Utilities/differ/insetsDiffer")
      },
      defaultSource: {
        process: require("./resolveAssetSource")
      },
      defaultSrc: true,
      fadeDuration: true,
      headers: true,
      internal_analyticTag: true,
      loadingIndicatorSrc: true,
      onError: true,
      onLoad: true,
      onLoadEnd: true,
      onLoadStart: true,
      onPartialLoad: true,
      onProgress: true,
      overlayColor: {
        process: require("../StyleSheet/processColor")
      },
      progressiveRenderingEnabled: true,
      resizeMethod: true,
      resizeMode: true,
      shouldNotifyLoadEvents: true,
      source: true,
      src: true,
      tintColor: {
        process: require("../StyleSheet/processColor")
      }
    }
  };
});
module.exports = TextInlineImage;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlRleHRJbmxpbmVJbWFnZU5hdGl2ZUNvbXBvbmVudC5qcyJdLCJuYW1lcyI6WyJUZXh0SW5saW5lSW1hZ2UiLCJOYXRpdmVDb21wb25lbnRSZWdpc3RyeSIsImdldCIsInVpVmlld0NsYXNzTmFtZSIsImJ1YmJsaW5nRXZlbnRUeXBlcyIsImRpcmVjdEV2ZW50VHlwZXMiLCJ0b3BMb2FkU3RhcnQiLCJyZWdpc3RyYXRpb25OYW1lIiwidG9wUHJvZ3Jlc3MiLCJ0b3BFcnJvciIsInRvcFBhcnRpYWxMb2FkIiwidG9wTG9hZCIsInRvcExvYWRFbmQiLCJ2YWxpZEF0dHJpYnV0ZXMiLCJibHVyUmFkaXVzIiwiY2FwSW5zZXRzIiwiZGlmZiIsInJlcXVpcmUiLCJkZWZhdWx0U291cmNlIiwicHJvY2VzcyIsImRlZmF1bHRTcmMiLCJmYWRlRHVyYXRpb24iLCJoZWFkZXJzIiwiaW50ZXJuYWxfYW5hbHl0aWNUYWciLCJsb2FkaW5nSW5kaWNhdG9yU3JjIiwib25FcnJvciIsIm9uTG9hZCIsIm9uTG9hZEVuZCIsIm9uTG9hZFN0YXJ0Iiwib25QYXJ0aWFsTG9hZCIsIm9uUHJvZ3Jlc3MiLCJvdmVybGF5Q29sb3IiLCJwcm9ncmVzc2l2ZVJlbmRlcmluZ0VuYWJsZWQiLCJyZXNpemVNZXRob2QiLCJyZXNpemVNb2RlIiwic2hvdWxkTm90aWZ5TG9hZEV2ZW50cyIsInNvdXJjZSIsInNyYyIsInRpbnRDb2xvciIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQVVBOztBQU1BOzs7Ozs7QUF5QkEsSUFBTUEsZUFBcUMsR0FBR0MsdUJBQXVCLENBQUNDLEdBQXhCLENBQzVDLG9CQUQ0QyxFQUU1QztBQUFBLFNBQU87QUFDTEMsSUFBQUEsZUFBZSxFQUFFLGNBRFo7QUFFTEMsSUFBQUEsa0JBQWtCLEVBQUUsRUFGZjtBQUdMQyxJQUFBQSxnQkFBZ0IsRUFBRTtBQUNoQkMsTUFBQUEsWUFBWSxFQUFFO0FBQ1pDLFFBQUFBLGdCQUFnQixFQUFFO0FBRE4sT0FERTtBQUloQkMsTUFBQUEsV0FBVyxFQUFFO0FBQ1hELFFBQUFBLGdCQUFnQixFQUFFO0FBRFAsT0FKRztBQU9oQkUsTUFBQUEsUUFBUSxFQUFFO0FBQ1JGLFFBQUFBLGdCQUFnQixFQUFFO0FBRFYsT0FQTTtBQVVoQkcsTUFBQUEsY0FBYyxFQUFFO0FBQ2RILFFBQUFBLGdCQUFnQixFQUFFO0FBREosT0FWQTtBQWFoQkksTUFBQUEsT0FBTyxFQUFFO0FBQ1BKLFFBQUFBLGdCQUFnQixFQUFFO0FBRFgsT0FiTztBQWdCaEJLLE1BQUFBLFVBQVUsRUFBRTtBQUNWTCxRQUFBQSxnQkFBZ0IsRUFBRTtBQURSO0FBaEJJLEtBSGI7QUF1QkxNLElBQUFBLGVBQWUsRUFBRTtBQUNmQyxNQUFBQSxVQUFVLEVBQUUsSUFERztBQUVmQyxNQUFBQSxTQUFTLEVBQUU7QUFDVEMsUUFBQUEsSUFBSSxFQUFFQyxPQUFPO0FBREosT0FGSTtBQUtmQyxNQUFBQSxhQUFhLEVBQUU7QUFDYkMsUUFBQUEsT0FBTyxFQUFFRixPQUFPO0FBREgsT0FMQTtBQVFmRyxNQUFBQSxVQUFVLEVBQUUsSUFSRztBQVNmQyxNQUFBQSxZQUFZLEVBQUUsSUFUQztBQVVmQyxNQUFBQSxPQUFPLEVBQUUsSUFWTTtBQVdmQyxNQUFBQSxvQkFBb0IsRUFBRSxJQVhQO0FBWWZDLE1BQUFBLG1CQUFtQixFQUFFLElBWk47QUFhZkMsTUFBQUEsT0FBTyxFQUFFLElBYk07QUFjZkMsTUFBQUEsTUFBTSxFQUFFLElBZE87QUFlZkMsTUFBQUEsU0FBUyxFQUFFLElBZkk7QUFnQmZDLE1BQUFBLFdBQVcsRUFBRSxJQWhCRTtBQWlCZkMsTUFBQUEsYUFBYSxFQUFFLElBakJBO0FBa0JmQyxNQUFBQSxVQUFVLEVBQUUsSUFsQkc7QUFtQmZDLE1BQUFBLFlBQVksRUFBRTtBQUNaWixRQUFBQSxPQUFPLEVBQUVGLE9BQU87QUFESixPQW5CQztBQXNCZmUsTUFBQUEsMkJBQTJCLEVBQUUsSUF0QmQ7QUF1QmZDLE1BQUFBLFlBQVksRUFBRSxJQXZCQztBQXdCZkMsTUFBQUEsVUFBVSxFQUFFLElBeEJHO0FBeUJmQyxNQUFBQSxzQkFBc0IsRUFBRSxJQXpCVDtBQTBCZkMsTUFBQUEsTUFBTSxFQUFFLElBMUJPO0FBMkJmQyxNQUFBQSxHQUFHLEVBQUUsSUEzQlU7QUE0QmZDLE1BQUFBLFNBQVMsRUFBRTtBQUNUbkIsUUFBQUEsT0FBTyxFQUFFRixPQUFPO0FBRFA7QUE1Qkk7QUF2QlosR0FBUDtBQUFBLENBRjRDLENBQTlDO0FBNERBc0IsTUFBTSxDQUFDQyxPQUFQLEdBQWlCeEMsZUFBakIiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBmb3JtYXRcbiAqIEBmbG93IHN0cmljdC1sb2NhbFxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IHR5cGUge1Jlc29sdmVkQXNzZXRTb3VyY2V9IGZyb20gJy4vQXNzZXRTb3VyY2VSZXNvbHZlcic7XG5pbXBvcnQgdHlwZSB7SG9zdENvbXBvbmVudH0gZnJvbSAnLi4vUmVuZGVyZXIvc2hpbXMvUmVhY3ROYXRpdmVUeXBlcyc7XG5pbXBvcnQgdHlwZSB7SW1hZ2VQcm9wc30gZnJvbSAnLi9JbWFnZVByb3BzJztcbmltcG9ydCB0eXBlIHtWaWV3UHJvcHN9IGZyb20gJy4uL0NvbXBvbmVudHMvVmlldy9WaWV3UHJvcFR5cGVzJztcbmltcG9ydCAqIGFzIE5hdGl2ZUNvbXBvbmVudFJlZ2lzdHJ5IGZyb20gJy4uL05hdGl2ZUNvbXBvbmVudC9OYXRpdmVDb21wb25lbnRSZWdpc3RyeSc7XG5pbXBvcnQgdHlwZSB7XG4gIENvbG9yVmFsdWUsXG4gIERhbmdlcm91c2x5SW1wcmVjaXNlU3R5bGUsXG4gIEltYWdlU3R5bGVQcm9wLFxufSBmcm9tICcuLi9TdHlsZVNoZWV0L1N0eWxlU2hlZXQnO1xuXG50eXBlIFByb3BzID0gJFJlYWRPbmx5PHtcbiAgLi4uSW1hZ2VQcm9wcyxcbiAgLi4uVmlld1Byb3BzLFxuXG4gIHN0eWxlPzogSW1hZ2VTdHlsZVByb3AgfCBEYW5nZXJvdXNseUltcHJlY2lzZVN0eWxlLFxuXG4gIC8vIGlPUyBuYXRpdmUgcHJvcHNcbiAgdGludENvbG9yPzogQ29sb3JWYWx1ZSxcblxuICAvLyBBbmRyb2lkIG5hdGl2ZSBwcm9wc1xuICBzaG91bGROb3RpZnlMb2FkRXZlbnRzPzogYm9vbGVhbixcbiAgc3JjPzogP1Jlc29sdmVkQXNzZXRTb3VyY2UgfCAkUmVhZE9ubHlBcnJheTx7dXJpOiBzdHJpbmcsIC4uLn0+LFxuICBoZWFkZXJzPzogP3N0cmluZyxcbiAgZGVmYXVsdFNyYz86ID9zdHJpbmcsXG4gIGxvYWRpbmdJbmRpY2F0b3JTcmM/OiA/c3RyaW5nLFxuICBpbnRlcm5hbF9hbmFseXRpY1RhZz86ID9zdHJpbmcsXG59PjtcblxuY29uc3QgVGV4dElubGluZUltYWdlOiBIb3N0Q29tcG9uZW50PFByb3BzPiA9IE5hdGl2ZUNvbXBvbmVudFJlZ2lzdHJ5LmdldDxQcm9wcz4oXG4gICdSQ1RUZXh0SW5saW5lSW1hZ2UnLFxuICAoKSA9PiAoe1xuICAgIHVpVmlld0NsYXNzTmFtZTogJ1JDVEltYWdlVmlldycsXG4gICAgYnViYmxpbmdFdmVudFR5cGVzOiB7fSxcbiAgICBkaXJlY3RFdmVudFR5cGVzOiB7XG4gICAgICB0b3BMb2FkU3RhcnQ6IHtcbiAgICAgICAgcmVnaXN0cmF0aW9uTmFtZTogJ29uTG9hZFN0YXJ0JyxcbiAgICAgIH0sXG4gICAgICB0b3BQcm9ncmVzczoge1xuICAgICAgICByZWdpc3RyYXRpb25OYW1lOiAnb25Qcm9ncmVzcycsXG4gICAgICB9LFxuICAgICAgdG9wRXJyb3I6IHtcbiAgICAgICAgcmVnaXN0cmF0aW9uTmFtZTogJ29uRXJyb3InLFxuICAgICAgfSxcbiAgICAgIHRvcFBhcnRpYWxMb2FkOiB7XG4gICAgICAgIHJlZ2lzdHJhdGlvbk5hbWU6ICdvblBhcnRpYWxMb2FkJyxcbiAgICAgIH0sXG4gICAgICB0b3BMb2FkOiB7XG4gICAgICAgIHJlZ2lzdHJhdGlvbk5hbWU6ICdvbkxvYWQnLFxuICAgICAgfSxcbiAgICAgIHRvcExvYWRFbmQ6IHtcbiAgICAgICAgcmVnaXN0cmF0aW9uTmFtZTogJ29uTG9hZEVuZCcsXG4gICAgICB9LFxuICAgIH0sXG4gICAgdmFsaWRBdHRyaWJ1dGVzOiB7XG4gICAgICBibHVyUmFkaXVzOiB0cnVlLFxuICAgICAgY2FwSW5zZXRzOiB7XG4gICAgICAgIGRpZmY6IHJlcXVpcmUoJy4uL1V0aWxpdGllcy9kaWZmZXIvaW5zZXRzRGlmZmVyJyksXG4gICAgICB9LFxuICAgICAgZGVmYXVsdFNvdXJjZToge1xuICAgICAgICBwcm9jZXNzOiByZXF1aXJlKCcuL3Jlc29sdmVBc3NldFNvdXJjZScpLFxuICAgICAgfSxcbiAgICAgIGRlZmF1bHRTcmM6IHRydWUsXG4gICAgICBmYWRlRHVyYXRpb246IHRydWUsXG4gICAgICBoZWFkZXJzOiB0cnVlLFxuICAgICAgaW50ZXJuYWxfYW5hbHl0aWNUYWc6IHRydWUsXG4gICAgICBsb2FkaW5nSW5kaWNhdG9yU3JjOiB0cnVlLFxuICAgICAgb25FcnJvcjogdHJ1ZSxcbiAgICAgIG9uTG9hZDogdHJ1ZSxcbiAgICAgIG9uTG9hZEVuZDogdHJ1ZSxcbiAgICAgIG9uTG9hZFN0YXJ0OiB0cnVlLFxuICAgICAgb25QYXJ0aWFsTG9hZDogdHJ1ZSxcbiAgICAgIG9uUHJvZ3Jlc3M6IHRydWUsXG4gICAgICBvdmVybGF5Q29sb3I6IHtcbiAgICAgICAgcHJvY2VzczogcmVxdWlyZSgnLi4vU3R5bGVTaGVldC9wcm9jZXNzQ29sb3InKSxcbiAgICAgIH0sXG4gICAgICBwcm9ncmVzc2l2ZVJlbmRlcmluZ0VuYWJsZWQ6IHRydWUsXG4gICAgICByZXNpemVNZXRob2Q6IHRydWUsXG4gICAgICByZXNpemVNb2RlOiB0cnVlLFxuICAgICAgc2hvdWxkTm90aWZ5TG9hZEV2ZW50czogdHJ1ZSxcbiAgICAgIHNvdXJjZTogdHJ1ZSxcbiAgICAgIHNyYzogdHJ1ZSxcbiAgICAgIHRpbnRDb2xvcjoge1xuICAgICAgICBwcm9jZXNzOiByZXF1aXJlKCcuLi9TdHlsZVNoZWV0L3Byb2Nlc3NDb2xvcicpLFxuICAgICAgfSxcbiAgICB9LFxuICB9KSxcbik7XG5cbm1vZHVsZS5leHBvcnRzID0gVGV4dElubGluZUltYWdlO1xuIl19