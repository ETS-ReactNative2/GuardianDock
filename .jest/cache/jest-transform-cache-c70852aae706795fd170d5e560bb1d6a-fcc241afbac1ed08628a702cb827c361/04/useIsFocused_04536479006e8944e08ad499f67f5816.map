{"version":3,"mappings":";;;;;;;;;;;AAAA;;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAMe,SAASA,YAAT,GAAiC;AAC9C,MAAMC,UAAU,GAAG,6BAAnB;;AACA,aAAkC,oBAASA,UAAU,CAACC,SAApB,CAAlC;AAAA;AAAA,MAAOA,SAAP;AAAA,MAAkBC,YAAlB;;AAEA,MAAMC,aAAa,GAAGH,UAAU,CAACC,SAAXD,EAAtB;;AAEA,MAAIC,SAAS,KAAKE,aAAlB,EAAiC;AAM/BD,gBAAY,CAACC,aAAD,CAAZD;AACD;;AAEDE,OAAK,CAACC,SAAND,CAAgB,YAAM;AACpB,QAAME,gBAAgB,GAAGN,UAAU,CAACO,WAAXP,CAAuB,OAAvBA,EAAgC;AAAA,aACvDE,YAAY,CAAC,IAAD,CAD2C;AAAA,KAAhCF,CAAzB;AAIA,QAAMQ,eAAe,GAAGR,UAAU,CAACO,WAAXP,CAAuB,MAAvBA,EAA+B;AAAA,aACrDE,YAAY,CAAC,KAAD,CADyC;AAAA,KAA/BF,CAAxB;AAIA,WAAO,YAAM;AACXM,sBAAgB;AAChBE,qBAAe;AAFjB;AATF,KAaG,CAACR,UAAD,CAbHI;AAeAA,OAAK,CAACK,aAANL,CAAoBD,aAApBC;AAEA,SAAOD,aAAP;AACD","names":["useIsFocused","navigation","isFocused","setIsFocused","valueToReturn","React","useEffect","unsubscribeFocus","addListener","unsubscribeBlur","useDebugValue"],"sources":["useIsFocused.tsx"],"sourcesContent":["import * as React from 'react';\nimport { useState } from 'react';\n\nimport useNavigation from './useNavigation';\n\n/**\n * Hook to get the current focus state of the screen. Returns a `true` if screen is focused, otherwise `false`.\n * This can be used if a component needs to render something based on the focus state.\n */\nexport default function useIsFocused(): boolean {\n  const navigation = useNavigation();\n  const [isFocused, setIsFocused] = useState(navigation.isFocused);\n\n  const valueToReturn = navigation.isFocused();\n\n  if (isFocused !== valueToReturn) {\n    // If the value has changed since the last render, we need to update it.\n    // This could happen if we missed an update from the event listeners during re-render.\n    // React will process this update immediately, so the old subscription value won't be committed.\n    // It is still nice to avoid returning a mismatched value though, so let's override the return value.\n    // This is the same logic as in https://github.com/facebook/react/tree/master/packages/use-subscription\n    setIsFocused(valueToReturn);\n  }\n\n  React.useEffect(() => {\n    const unsubscribeFocus = navigation.addListener('focus', () =>\n      setIsFocused(true)\n    );\n\n    const unsubscribeBlur = navigation.addListener('blur', () =>\n      setIsFocused(false)\n    );\n\n    return () => {\n      unsubscribeFocus();\n      unsubscribeBlur();\n    };\n  }, [navigation]);\n\n  React.useDebugValue(valueToReturn);\n\n  return valueToReturn;\n}\n"]}