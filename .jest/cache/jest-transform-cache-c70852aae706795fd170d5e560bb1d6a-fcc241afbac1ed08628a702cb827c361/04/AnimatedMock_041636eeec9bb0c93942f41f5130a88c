638aa8fad2b4f7ea6697e051f5120965
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _require = require('./AnimatedEvent'),
    AnimatedEvent = _require.AnimatedEvent,
    attachNativeEvent = _require.attachNativeEvent;

var AnimatedImplementation = require('./AnimatedImplementation');

var AnimatedInterpolation = require('./nodes/AnimatedInterpolation');

var AnimatedNode = require('./nodes/AnimatedNode');

var AnimatedValue = require('./nodes/AnimatedValue');

var AnimatedValueXY = require('./nodes/AnimatedValueXY');

var createAnimatedComponent = require('./createAnimatedComponent');

var emptyAnimation = {
  start: function start() {},
  stop: function stop() {},
  reset: function reset() {},
  _startNativeLoop: function _startNativeLoop() {},
  _isUsingNativeDriver: function _isUsingNativeDriver() {
    return false;
  }
};

var spring = function spring(value, config) {
  var anyValue = value;
  return (0, _extends2.default)({}, emptyAnimation, {
    start: function start(callback) {
      anyValue.setValue(config.toValue);
      callback && callback({
        finished: true
      });
    }
  });
};

var timing = function timing(value, config) {
  var anyValue = value;
  return (0, _extends2.default)({}, emptyAnimation, {
    start: function start(callback) {
      anyValue.setValue(config.toValue);
      callback && callback({
        finished: true
      });
    }
  });
};

var decay = function decay(value, config) {
  return emptyAnimation;
};

var sequence = function sequence(animations) {
  return emptyAnimation;
};

var parallel = function parallel(animations, config) {
  return emptyAnimation;
};

var delay = function delay(time) {
  return emptyAnimation;
};

var stagger = function stagger(time, animations) {
  return emptyAnimation;
};

var loop = function loop(animation) {
  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
      _ref$iterations = _ref.iterations,
      iterations = _ref$iterations === void 0 ? -1 : _ref$iterations;

  return emptyAnimation;
};

module.exports = {
  Value: AnimatedValue,
  ValueXY: AnimatedValueXY,
  Interpolation: AnimatedInterpolation,
  Node: AnimatedNode,
  decay: decay,
  timing: timing,
  spring: spring,
  add: AnimatedImplementation.add,
  subtract: AnimatedImplementation.subtract,
  divide: AnimatedImplementation.divide,
  multiply: AnimatedImplementation.multiply,
  modulo: AnimatedImplementation.modulo,
  diffClamp: AnimatedImplementation.diffClamp,
  delay: delay,
  sequence: sequence,
  parallel: parallel,
  stagger: stagger,
  loop: loop,
  event: AnimatedImplementation.event,
  createAnimatedComponent: createAnimatedComponent,
  attachNativeEvent: attachNativeEvent,
  forkEvent: AnimatedImplementation.forkEvent,
  unforkEvent: AnimatedImplementation.unforkEvent,
  Event: AnimatedEvent
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,