{"version":3,"mappings":";;;;;;;;;;;AAAA;;AAOA;;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAWe,SAASA,cAAT,OAIL;AAAA,MAHRC,KAGQ,QAHRA,KAGQ;AAAA,MAFRC,UAEQ,QAFRA,UAEQ;AAAA,MADRC,WACQ,QADRA,WACQ;AACR,MAAMC,SAAS,GAAG,6BAAlB;AAEA,MAAMC,YAAY,GAAGJ,KAAK,CAACK,MAANL,CAAaA,KAAK,CAACM,KAAnBN,CAArB;AACA,MAAMO,iBAAiB,GAAGL,WAAW,CAACE,YAAY,CAACI,GAAd,CAArC;AACA,MAAMC,cAAc,GAAGF,iBAAiB,CAACG,OAAzC;AAEA,MACEC,qBADF,GAKIF,cALJ,CACEE,qBADF;AAAA,MAEEC,uBAFF,GAKIH,cALJ,CAEEG,uBAFF;AAAA,MAGEC,2BAHF,GAKIJ,cALJ,CAGEI,2BAHF;AAAA,MAIEC,6BAJF,GAKIL,cALJ,CAIEK,6BAJF;AAOA,SAAOd,KAAK,CAACK,MAANL,CAAae,GAAbf,CAAiB,UAACgB,KAAD,EAAQC,CAAR,EAAc;AACpC,QAAMC,OAAO,GAAGD,CAAC,KAAKjB,KAAK,CAACM,KAA5B;;AAEA,QAAMa,OAAO,GAAG,SAAVA,OAAU,GAAM;AACpB,UAAMC,KAAK,GAAGnB,UAAU,CAACoB,IAAXpB,CAAgB;AAC5BqB,YAAI,EAAE,iBADsB;AAE5BC,cAAM,EAAEP,KAAK,CAACR,GAFc;AAG5BgB,yBAAiB,EAAE;AAHS,OAAhBvB,CAAd;;AAMA,UAAI,CAACmB,KAAK,CAACK,gBAAX,EAA6B;AAC3BxB,kBAAU,CAACyB,QAAXzB,4BACMiB,OAAO,GACPS,sBAAcC,WAAdD,EADO,GAEPE,sBAAcC,QAAdD,CAAuB;AAAEE,cAAI,EAAEf,KAAK,CAACe,IAAd;AAAoBC,eAAK,EAAE;AAA3B,SAAvBH,CAHN5B;AAIEsB,gBAAM,EAAEvB,KAAK,CAACQ;AAJhBP;AAMD;AAdH;;AAiBA,gCAOIC,WAAW,CAACc,KAAK,CAACR,GAAP,CAAXN,CAAuBQ,OAP3B;AAAA,QACEuB,KADF,yBACEA,KADF;AAAA,QAEEC,WAFF,yBAEEA,WAFF;AAAA,QAGEC,UAHF,yBAGEA,UAHF;AAAA,QAIEC,gBAJF,yBAIEA,gBAJF;AAAA,QAKEC,eALF,yBAKEA,eALF;AAAA,QAMEC,sBANF,yBAMEA,sBANF;AASA,WACEC,oBAACC,mBAAD;AACEhC,SAAG,EAAEQ,KAAK,CAACR,GADb;AAEEiC,WAAK,EACHP,WAAW,KAAKQ,SAAhBR,GACIA,WADJA,GAEID,KAAK,KAAKS,SAAVT,GACAA,KADAA,GAEAjB,KAAK,CAACe,IAPd;AASEY,UAAI,EAAER,UATR;AAUEjB,aAAO,EAAEA,OAVX;AAWE0B,qBAAe,EAAEjC,qBAXnB;AAYEkC,uBAAiB,EAAEjC,uBAZrB;AAaEkC,2BAAqB,EAAEjC,2BAbzB;AAcEkC,6BAAuB,EAAEjC,6BAd3B;AAeEkC,sBAAgB,EAAEV,sBAfpB;AAgBEW,gBAAU,EAAEb,gBAhBd;AAiBEc,WAAK,EAAEb,eAjBT;AAkBEc,QAAE,EAAEhD,SAAS,CAACa,KAAK,CAACe,IAAP,EAAaf,KAAK,CAACoC,MAAnB,CAlBf;AAmBEjC,aAAO,EAAEA;AAnBX,MADF;AA7BK,IAAP;AAqDD","names":["DrawerItemList","state","navigation","descriptors","buildLink","focusedRoute","routes","index","focusedDescriptor","key","focusedOptions","options","drawerActiveTintColor","drawerInactiveTintColor","drawerActiveBackgroundColor","drawerInactiveBackgroundColor","map","route","i","focused","onPress","event","emit","type","target","canPreventDefault","defaultPrevented","dispatch","DrawerActions","closeDrawer","CommonActions","navigate","name","merge","title","drawerLabel","drawerIcon","drawerLabelStyle","drawerItemStyle","drawerAllowFontScaling","React","_DrawerItem","label","undefined","icon","activeTintColor","inactiveTintColor","activeBackgroundColor","inactiveBackgroundColor","allowFontScaling","labelStyle","style","to","params"],"sources":["DrawerItemList.tsx"],"sourcesContent":["import {\n  CommonActions,\n  DrawerActions,\n  DrawerNavigationState,\n  ParamListBase,\n  useLinkBuilder,\n} from '@react-navigation/native';\nimport * as React from 'react';\n\nimport type { DrawerDescriptorMap, DrawerNavigationHelpers } from '../types';\nimport DrawerItem from './DrawerItem';\n\ntype Props = {\n  state: DrawerNavigationState<ParamListBase>;\n  navigation: DrawerNavigationHelpers;\n  descriptors: DrawerDescriptorMap;\n};\n\n/**\n * Component that renders the navigation list in the drawer.\n */\nexport default function DrawerItemList({\n  state,\n  navigation,\n  descriptors,\n}: Props) {\n  const buildLink = useLinkBuilder();\n\n  const focusedRoute = state.routes[state.index];\n  const focusedDescriptor = descriptors[focusedRoute.key];\n  const focusedOptions = focusedDescriptor.options;\n\n  const {\n    drawerActiveTintColor,\n    drawerInactiveTintColor,\n    drawerActiveBackgroundColor,\n    drawerInactiveBackgroundColor,\n  } = focusedOptions;\n\n  return state.routes.map((route, i) => {\n    const focused = i === state.index;\n\n    const onPress = () => {\n      const event = navigation.emit({\n        type: 'drawerItemPress',\n        target: route.key,\n        canPreventDefault: true,\n      });\n\n      if (!event.defaultPrevented) {\n        navigation.dispatch({\n          ...(focused\n            ? DrawerActions.closeDrawer()\n            : CommonActions.navigate({ name: route.name, merge: true })),\n          target: state.key,\n        });\n      }\n    };\n\n    const {\n      title,\n      drawerLabel,\n      drawerIcon,\n      drawerLabelStyle,\n      drawerItemStyle,\n      drawerAllowFontScaling,\n    } = descriptors[route.key].options;\n\n    return (\n      <DrawerItem\n        key={route.key}\n        label={\n          drawerLabel !== undefined\n            ? drawerLabel\n            : title !== undefined\n            ? title\n            : route.name\n        }\n        icon={drawerIcon}\n        focused={focused}\n        activeTintColor={drawerActiveTintColor}\n        inactiveTintColor={drawerInactiveTintColor}\n        activeBackgroundColor={drawerActiveBackgroundColor}\n        inactiveBackgroundColor={drawerInactiveBackgroundColor}\n        allowFontScaling={drawerAllowFontScaling}\n        labelStyle={drawerLabelStyle}\n        style={drawerItemStyle}\n        to={buildLink(route.name, route.params)}\n        onPress={onPress}\n      />\n    );\n  }) as React.ReactNode as React.ReactElement;\n}\n"]}