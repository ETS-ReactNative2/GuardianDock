9f60e19f60c346fb649b9bc31e847a3e
"use strict";

var _interopRequireDefault2 = require("@babel/runtime/helpers/interopRequireDefault");

var _extends2 = _interopRequireDefault2(require("@babel/runtime/helpers/extends"));

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = useNavigationHelpers;

var _routers = require("@react-navigation/routers");

var React = _interopRequireWildcard(require("react"));

var _NavigationContext = _interopRequireDefault(require("./NavigationContext"));

var _types = require("./types");

var _UnhandledActionContext = _interopRequireDefault(require("./UnhandledActionContext"));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

function _getRequireWildcardCache(nodeInterop) {
  if (typeof WeakMap !== "function") return null;
  var cacheBabelInterop = new WeakMap();
  var cacheNodeInterop = new WeakMap();
  return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {
    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
  })(nodeInterop);
}

function _interopRequireWildcard(obj, nodeInterop) {
  if (!nodeInterop && obj && obj.__esModule) {
    return obj;
  }

  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }

  var cache = _getRequireWildcardCache(nodeInterop);

  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }

  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

  for (var key in obj) {
    if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }

  newObj.default = obj;

  if (cache) {
    cache.set(obj, newObj);
  }

  return newObj;
}

_types.PrivateValueStore;

function useNavigationHelpers(_ref) {
  var onAction = _ref.onAction,
      getState = _ref.getState,
      emitter = _ref.emitter,
      router = _ref.router;
  var onUnhandledAction = React.useContext(_UnhandledActionContext.default);
  var parentNavigationHelpers = React.useContext(_NavigationContext.default);
  return React.useMemo(function () {
    var dispatch = function dispatch(op) {
      var action = typeof op === 'function' ? op(getState()) : op;
      var handled = onAction(action);

      if (!handled) {
        onUnhandledAction === null || onUnhandledAction === void 0 ? void 0 : onUnhandledAction(action);
      }
    };

    var actions = (0, _extends2.default)({}, router.actionCreators, _routers.CommonActions);
    var helpers = Object.keys(actions).reduce(function (acc, name) {
      acc[name] = function () {
        return dispatch(actions[name].apply(actions, arguments));
      };

      return acc;
    }, {});
    return (0, _extends2.default)({}, parentNavigationHelpers, helpers, {
      dispatch: dispatch,
      emit: emitter.emit,
      isFocused: parentNavigationHelpers ? parentNavigationHelpers.isFocused : function () {
        return true;
      },
      canGoBack: function canGoBack() {
        var state = getState();
        return router.getStateForAction(state, _routers.CommonActions.goBack(), {
          routeNames: state.routeNames,
          routeParamList: {},
          routeGetIdList: {}
        }) !== null || (parentNavigationHelpers === null || parentNavigationHelpers === void 0 ? void 0 : parentNavigationHelpers.canGoBack()) || false;
      },
      getParent: function getParent() {
        return parentNavigationHelpers;
      },
      getState: getState
    });
  }, [emitter.emit, getState, onAction, onUnhandledAction, parentNavigationHelpers, router]);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQTs7QUFPQTs7QUFFQTs7QUFDQTs7QUFDQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUtBQTs7QUFhZSxTQUFTQyxvQkFBVCxPQUtvRDtBQUFBLE1BQS9EQyxRQUErRCxRQUEvREEsUUFBK0Q7QUFBQSxNQUFyREMsUUFBcUQsUUFBckRBLFFBQXFEO0FBQUEsTUFBM0NDLE9BQTJDLFFBQTNDQSxPQUEyQztBQUFBLE1BQWxDQyxNQUFrQyxRQUFsQ0EsTUFBa0M7QUFDakUsTUFBTUMsaUJBQWlCLEdBQUdDLEtBQUssQ0FBQ0MsVUFBTkQsQ0FBaUJFLCtCQUFqQkYsQ0FBMUI7QUFDQSxNQUFNRyx1QkFBdUIsR0FBR0gsS0FBSyxDQUFDQyxVQUFORCxDQUFpQkksMEJBQWpCSixDQUFoQztBQUVBLFNBQU9BLEtBQUssQ0FBQ0ssT0FBTkwsQ0FBYyxZQUFNO0FBQ3pCLFFBQU1NLFFBQVEsR0FBSUMsU0FBWkQsUUFBWUMsR0FBRCxFQUE2QztBQUM1RCxVQUFNQyxNQUFNLEdBQUcsT0FBT0QsRUFBUCxLQUFjLFVBQWQsR0FBMkJBLEVBQUUsQ0FBQ1gsUUFBUSxFQUFULENBQTdCLEdBQTRDVyxFQUEzRDtBQUVBLFVBQU1FLE9BQU8sR0FBR2QsUUFBUSxDQUFDYSxNQUFELENBQXhCOztBQUVBLFVBQUksQ0FBQ0MsT0FBTCxFQUFjO0FBQ1pWLHlCQUFpQixTQUFqQkEscUJBQWlCLFdBQWpCQSw2QkFBaUIsQ0FBR1MsTUFBSCxDQUFqQlQ7QUFDRDtBQVBIOztBQVVBLFFBQU1XLE9BQU8sOEJBQ1JaLE1BQU0sQ0FBQ2EsY0FEQyxFQUVSQyxzQkFGUSxDQUFiO0FBS0EsUUFBTUMsT0FBTyxHQUFHQyxNQUFNLENBQUNDLElBQVBELENBQVlKLE9BQVpJLEVBQXFCRSxNQUFyQkYsQ0FDZCxVQUFDRyxHQUFELEVBQU1DLElBQU4sRUFBZTtBQUViRCxTQUFHLENBQUNDLElBQUQsQ0FBSEQsR0FBWTtBQUFBLGVBQWtCWCxRQUFRLENBQUNJLE9BQU8sQ0FBQ1EsSUFBRCxDQUFQUixjQUFPLEVBQU9TLFNBQVAsQ0FBUixDQUExQjtBQUFaOztBQUNBLGFBQU9GLEdBQVA7QUFKWSxPQU1kLEVBTmNILENBQWhCO0FBU0Esc0NBQ0tYLHVCQURMLEVBRUtVLE9BRkw7QUFHRVAsY0FISyxFQUdMQSxRQUhGO0FBSUVjLFVBQUksRUFBRXZCLE9BQU8sQ0FBQ3VCLElBSmhCO0FBS0VDLGVBQVMsRUFBRWxCLHVCQUF1QixHQUM5QkEsdUJBQXVCLENBQUNrQixTQURNLEdBRTlCO0FBQUEsZUFBTSxJQUFOO0FBQUEsT0FQTjtBQVFFQyxlQUFTLEVBQUUscUJBQU07QUFDZixZQUFNQyxLQUFLLEdBQUczQixRQUFRLEVBQXRCO0FBRUEsZUFDRUUsTUFBTSxDQUFDMEIsaUJBQVAxQixDQUF5QnlCLEtBQXpCekIsRUFBZ0NjLHVCQUFjYSxNQUFkYixFQUFoQ2QsRUFBa0U7QUFDaEU0QixvQkFBVSxFQUFFSCxLQUFLLENBQUNHLFVBRDhDO0FBRWhFQyx3QkFBYyxFQUFFLEVBRmdEO0FBR2hFQyx3QkFBYyxFQUFFO0FBSGdELFNBQWxFOUIsTUFJTyxJQUpQQSxLQUtBSyx1QkFMQSxTQUtBQSwyQkFMQSxXQUtBQSxHQUxBLE1BS0FBLDBCQUF1QixDQUFFbUIsU0FBekJuQixFQUxBTCxLQU1BLEtBUEY7QUFYRyxPQUFQO0FBcUJFK0IsZUFBUyxFQUFFO0FBQUEsZUFBTTFCLHVCQUFOO0FBQUEsT0FyQmI7QUFzQkVQO0FBdEJGO0FBekJLLEtBbURKLENBQ0RDLE9BQU8sQ0FBQ3VCLElBRFAsRUFFRHhCLFFBRkMsRUFHREQsUUFIQyxFQUlESSxpQkFKQyxFQUtESSx1QkFMQyxFQU1ETCxNQU5DLENBbkRJRSxDQUFQO0FBMkREIiwibmFtZXMiOlsiUHJpdmF0ZVZhbHVlU3RvcmUiLCJ1c2VOYXZpZ2F0aW9uSGVscGVycyIsIm9uQWN0aW9uIiwiZ2V0U3RhdGUiLCJlbWl0dGVyIiwicm91dGVyIiwib25VbmhhbmRsZWRBY3Rpb24iLCJSZWFjdCIsInVzZUNvbnRleHQiLCJVbmhhbmRsZWRBY3Rpb25Db250ZXh0IiwicGFyZW50TmF2aWdhdGlvbkhlbHBlcnMiLCJOYXZpZ2F0aW9uQ29udGV4dCIsInVzZU1lbW8iLCJkaXNwYXRjaCIsIm9wIiwiYWN0aW9uIiwiaGFuZGxlZCIsImFjdGlvbnMiLCJhY3Rpb25DcmVhdG9ycyIsIkNvbW1vbkFjdGlvbnMiLCJoZWxwZXJzIiwiT2JqZWN0Iiwia2V5cyIsInJlZHVjZSIsImFjYyIsIm5hbWUiLCJhcmd1bWVudHMiLCJlbWl0IiwiaXNGb2N1c2VkIiwiY2FuR29CYWNrIiwic3RhdGUiLCJnZXRTdGF0ZUZvckFjdGlvbiIsImdvQmFjayIsInJvdXRlTmFtZXMiLCJyb3V0ZVBhcmFtTGlzdCIsInJvdXRlR2V0SWRMaXN0IiwiZ2V0UGFyZW50Il0sInNvdXJjZXMiOlsidXNlTmF2aWdhdGlvbkhlbHBlcnMudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIENvbW1vbkFjdGlvbnMsXG4gIE5hdmlnYXRpb25BY3Rpb24sXG4gIE5hdmlnYXRpb25TdGF0ZSxcbiAgUGFyYW1MaXN0QmFzZSxcbiAgUm91dGVyLFxufSBmcm9tICdAcmVhY3QtbmF2aWdhdGlvbi9yb3V0ZXJzJztcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcblxuaW1wb3J0IE5hdmlnYXRpb25Db250ZXh0IGZyb20gJy4vTmF2aWdhdGlvbkNvbnRleHQnO1xuaW1wb3J0IHsgTmF2aWdhdGlvbkhlbHBlcnMsIE5hdmlnYXRpb25Qcm9wLCBQcml2YXRlVmFsdWVTdG9yZSB9IGZyb20gJy4vdHlwZXMnO1xuaW1wb3J0IFVuaGFuZGxlZEFjdGlvbkNvbnRleHQgZnJvbSAnLi9VbmhhbmRsZWRBY3Rpb25Db250ZXh0JztcbmltcG9ydCB0eXBlIHsgTmF2aWdhdGlvbkV2ZW50RW1pdHRlciB9IGZyb20gJy4vdXNlRXZlbnRFbWl0dGVyJztcblxuLy8gVGhpcyBpcyB0byBtYWtlIFR5cGVTY3JpcHQgY29tcGlsZXIgaGFwcHlcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBiYWJlbC9uby11bnVzZWQtZXhwcmVzc2lvbnNcblByaXZhdGVWYWx1ZVN0b3JlO1xuXG50eXBlIE9wdGlvbnM8U3RhdGUgZXh0ZW5kcyBOYXZpZ2F0aW9uU3RhdGUsIEFjdGlvbiBleHRlbmRzIE5hdmlnYXRpb25BY3Rpb24+ID0ge1xuICBvbkFjdGlvbjogKGFjdGlvbjogTmF2aWdhdGlvbkFjdGlvbikgPT4gYm9vbGVhbjtcbiAgZ2V0U3RhdGU6ICgpID0+IFN0YXRlO1xuICBlbWl0dGVyOiBOYXZpZ2F0aW9uRXZlbnRFbWl0dGVyPGFueT47XG4gIHJvdXRlcjogUm91dGVyPFN0YXRlLCBBY3Rpb24+O1xufTtcblxuLyoqXG4gKiBOYXZpZ2F0aW9uIG9iamVjdCB3aXRoIGhlbHBlciBtZXRob2RzIHRvIGJlIHVzZWQgYnkgYSBuYXZpZ2F0b3IuXG4gKiBUaGlzIG9iamVjdCBpbmNsdWRlcyBtZXRob2RzIGZvciBjb21tb24gYWN0aW9ucyBhcyB3ZWxsIGFzIG1ldGhvZHMgdGhlIHBhcmVudCBzY3JlZW4ncyBuYXZpZ2F0aW9uIG9iamVjdC5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdXNlTmF2aWdhdGlvbkhlbHBlcnM8XG4gIFN0YXRlIGV4dGVuZHMgTmF2aWdhdGlvblN0YXRlLFxuICBBY3Rpb25IZWxwZXJzIGV4dGVuZHMgUmVjb3JkPHN0cmluZywgKCkgPT4gdm9pZD4sXG4gIEFjdGlvbiBleHRlbmRzIE5hdmlnYXRpb25BY3Rpb24sXG4gIEV2ZW50TWFwIGV4dGVuZHMgUmVjb3JkPHN0cmluZywgYW55PlxuPih7IG9uQWN0aW9uLCBnZXRTdGF0ZSwgZW1pdHRlciwgcm91dGVyIH06IE9wdGlvbnM8U3RhdGUsIEFjdGlvbj4pIHtcbiAgY29uc3Qgb25VbmhhbmRsZWRBY3Rpb24gPSBSZWFjdC51c2VDb250ZXh0KFVuaGFuZGxlZEFjdGlvbkNvbnRleHQpO1xuICBjb25zdCBwYXJlbnROYXZpZ2F0aW9uSGVscGVycyA9IFJlYWN0LnVzZUNvbnRleHQoTmF2aWdhdGlvbkNvbnRleHQpO1xuXG4gIHJldHVybiBSZWFjdC51c2VNZW1vKCgpID0+IHtcbiAgICBjb25zdCBkaXNwYXRjaCA9IChvcDogQWN0aW9uIHwgKChzdGF0ZTogU3RhdGUpID0+IEFjdGlvbikpID0+IHtcbiAgICAgIGNvbnN0IGFjdGlvbiA9IHR5cGVvZiBvcCA9PT0gJ2Z1bmN0aW9uJyA/IG9wKGdldFN0YXRlKCkpIDogb3A7XG5cbiAgICAgIGNvbnN0IGhhbmRsZWQgPSBvbkFjdGlvbihhY3Rpb24pO1xuXG4gICAgICBpZiAoIWhhbmRsZWQpIHtcbiAgICAgICAgb25VbmhhbmRsZWRBY3Rpb24/LihhY3Rpb24pO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBjb25zdCBhY3Rpb25zID0ge1xuICAgICAgLi4ucm91dGVyLmFjdGlvbkNyZWF0b3JzLFxuICAgICAgLi4uQ29tbW9uQWN0aW9ucyxcbiAgICB9O1xuXG4gICAgY29uc3QgaGVscGVycyA9IE9iamVjdC5rZXlzKGFjdGlvbnMpLnJlZHVjZTxSZWNvcmQ8c3RyaW5nLCAoKSA9PiB2b2lkPj4oXG4gICAgICAoYWNjLCBuYW1lKSA9PiB7XG4gICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3I6IG5hbWUgaXMgYSB2YWxpZCBrZXksIGJ1dCBUeXBlU2NyaXB0IGlzIGR1bWJcbiAgICAgICAgYWNjW25hbWVdID0gKC4uLmFyZ3M6IGFueSkgPT4gZGlzcGF0Y2goYWN0aW9uc1tuYW1lXSguLi5hcmdzKSk7XG4gICAgICAgIHJldHVybiBhY2M7XG4gICAgICB9LFxuICAgICAge31cbiAgICApO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIC4uLnBhcmVudE5hdmlnYXRpb25IZWxwZXJzLFxuICAgICAgLi4uaGVscGVycyxcbiAgICAgIGRpc3BhdGNoLFxuICAgICAgZW1pdDogZW1pdHRlci5lbWl0LFxuICAgICAgaXNGb2N1c2VkOiBwYXJlbnROYXZpZ2F0aW9uSGVscGVyc1xuICAgICAgICA/IHBhcmVudE5hdmlnYXRpb25IZWxwZXJzLmlzRm9jdXNlZFxuICAgICAgICA6ICgpID0+IHRydWUsXG4gICAgICBjYW5Hb0JhY2s6ICgpID0+IHtcbiAgICAgICAgY29uc3Qgc3RhdGUgPSBnZXRTdGF0ZSgpO1xuXG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgcm91dGVyLmdldFN0YXRlRm9yQWN0aW9uKHN0YXRlLCBDb21tb25BY3Rpb25zLmdvQmFjaygpIGFzIEFjdGlvbiwge1xuICAgICAgICAgICAgcm91dGVOYW1lczogc3RhdGUucm91dGVOYW1lcyxcbiAgICAgICAgICAgIHJvdXRlUGFyYW1MaXN0OiB7fSxcbiAgICAgICAgICAgIHJvdXRlR2V0SWRMaXN0OiB7fSxcbiAgICAgICAgICB9KSAhPT0gbnVsbCB8fFxuICAgICAgICAgIHBhcmVudE5hdmlnYXRpb25IZWxwZXJzPy5jYW5Hb0JhY2soKSB8fFxuICAgICAgICAgIGZhbHNlXG4gICAgICAgICk7XG4gICAgICB9LFxuICAgICAgZ2V0UGFyZW50OiAoKSA9PiBwYXJlbnROYXZpZ2F0aW9uSGVscGVycyBhcyBhbnksXG4gICAgICBnZXRTdGF0ZSxcbiAgICB9IGFzIE5hdmlnYXRpb25IZWxwZXJzPFBhcmFtTGlzdEJhc2UsIEV2ZW50TWFwPiAmXG4gICAgICAoTmF2aWdhdGlvblByb3A8UGFyYW1MaXN0QmFzZSwgc3RyaW5nLCBhbnksIGFueSwgYW55PiB8IHVuZGVmaW5lZCkgJlxuICAgICAgQWN0aW9uSGVscGVycztcbiAgfSwgW1xuICAgIGVtaXR0ZXIuZW1pdCxcbiAgICBnZXRTdGF0ZSxcbiAgICBvbkFjdGlvbixcbiAgICBvblVuaGFuZGxlZEFjdGlvbixcbiAgICBwYXJlbnROYXZpZ2F0aW9uSGVscGVycyxcbiAgICByb3V0ZXIsXG4gIF0pO1xufVxuIl19