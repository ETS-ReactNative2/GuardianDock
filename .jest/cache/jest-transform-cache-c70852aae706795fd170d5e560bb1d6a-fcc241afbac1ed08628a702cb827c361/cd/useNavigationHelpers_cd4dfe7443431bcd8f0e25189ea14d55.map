{"version":3,"mappings":";;;;;;;;;;;AAAA;;AAOA;;AAEA;;AACA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAKAA;;AAae,SAASC,oBAAT,OAKoD;AAAA,MAA/DC,QAA+D,QAA/DA,QAA+D;AAAA,MAArDC,QAAqD,QAArDA,QAAqD;AAAA,MAA3CC,OAA2C,QAA3CA,OAA2C;AAAA,MAAlCC,MAAkC,QAAlCA,MAAkC;AACjE,MAAMC,iBAAiB,GAAGC,KAAK,CAACC,UAAND,CAAiBE,+BAAjBF,CAA1B;AACA,MAAMG,uBAAuB,GAAGH,KAAK,CAACC,UAAND,CAAiBI,0BAAjBJ,CAAhC;AAEA,SAAOA,KAAK,CAACK,OAANL,CAAc,YAAM;AACzB,QAAMM,QAAQ,GAAIC,SAAZD,QAAYC,GAAD,EAA6C;AAC5D,UAAMC,MAAM,GAAG,OAAOD,EAAP,KAAc,UAAd,GAA2BA,EAAE,CAACX,QAAQ,EAAT,CAA7B,GAA4CW,EAA3D;AAEA,UAAME,OAAO,GAAGd,QAAQ,CAACa,MAAD,CAAxB;;AAEA,UAAI,CAACC,OAAL,EAAc;AACZV,yBAAiB,SAAjBA,qBAAiB,WAAjBA,6BAAiB,CAAGS,MAAH,CAAjBT;AACD;AAPH;;AAUA,QAAMW,OAAO,8BACRZ,MAAM,CAACa,cADC,EAERC,sBAFQ,CAAb;AAKA,QAAMC,OAAO,GAAGC,MAAM,CAACC,IAAPD,CAAYJ,OAAZI,EAAqBE,MAArBF,CACd,UAACG,GAAD,EAAMC,IAAN,EAAe;AAEbD,SAAG,CAACC,IAAD,CAAHD,GAAY;AAAA,eAAkBX,QAAQ,CAACI,OAAO,CAACQ,IAAD,CAAPR,cAAO,EAAOS,SAAP,CAAR,CAA1B;AAAZ;;AACA,aAAOF,GAAP;AAJY,OAMd,EANcH,CAAhB;AASA,sCACKX,uBADL,EAEKU,OAFL;AAGEP,cAHK,EAGLA,QAHF;AAIEc,UAAI,EAAEvB,OAAO,CAACuB,IAJhB;AAKEC,eAAS,EAAElB,uBAAuB,GAC9BA,uBAAuB,CAACkB,SADM,GAE9B;AAAA,eAAM,IAAN;AAAA,OAPN;AAQEC,eAAS,EAAE,qBAAM;AACf,YAAMC,KAAK,GAAG3B,QAAQ,EAAtB;AAEA,eACEE,MAAM,CAAC0B,iBAAP1B,CAAyByB,KAAzBzB,EAAgCc,uBAAca,MAAdb,EAAhCd,EAAkE;AAChE4B,oBAAU,EAAEH,KAAK,CAACG,UAD8C;AAEhEC,wBAAc,EAAE,EAFgD;AAGhEC,wBAAc,EAAE;AAHgD,SAAlE9B,MAIO,IAJPA,KAKAK,uBALA,SAKAA,2BALA,WAKAA,GALA,MAKAA,0BAAuB,CAAEmB,SAAzBnB,EALAL,KAMA,KAPF;AAXG,OAAP;AAqBE+B,eAAS,EAAE;AAAA,eAAM1B,uBAAN;AAAA,OArBb;AAsBEP;AAtBF;AAzBK,KAmDJ,CACDC,OAAO,CAACuB,IADP,EAEDxB,QAFC,EAGDD,QAHC,EAIDI,iBAJC,EAKDI,uBALC,EAMDL,MANC,CAnDIE,CAAP;AA2DD","names":["PrivateValueStore","useNavigationHelpers","onAction","getState","emitter","router","onUnhandledAction","React","useContext","UnhandledActionContext","parentNavigationHelpers","NavigationContext","useMemo","dispatch","op","action","handled","actions","actionCreators","CommonActions","helpers","Object","keys","reduce","acc","name","arguments","emit","isFocused","canGoBack","state","getStateForAction","goBack","routeNames","routeParamList","routeGetIdList","getParent"],"sources":["useNavigationHelpers.tsx"],"sourcesContent":["import {\n  CommonActions,\n  NavigationAction,\n  NavigationState,\n  ParamListBase,\n  Router,\n} from '@react-navigation/routers';\nimport * as React from 'react';\n\nimport NavigationContext from './NavigationContext';\nimport { NavigationHelpers, NavigationProp, PrivateValueStore } from './types';\nimport UnhandledActionContext from './UnhandledActionContext';\nimport type { NavigationEventEmitter } from './useEventEmitter';\n\n// This is to make TypeScript compiler happy\n// eslint-disable-next-line babel/no-unused-expressions\nPrivateValueStore;\n\ntype Options<State extends NavigationState, Action extends NavigationAction> = {\n  onAction: (action: NavigationAction) => boolean;\n  getState: () => State;\n  emitter: NavigationEventEmitter<any>;\n  router: Router<State, Action>;\n};\n\n/**\n * Navigation object with helper methods to be used by a navigator.\n * This object includes methods for common actions as well as methods the parent screen's navigation object.\n */\nexport default function useNavigationHelpers<\n  State extends NavigationState,\n  ActionHelpers extends Record<string, () => void>,\n  Action extends NavigationAction,\n  EventMap extends Record<string, any>\n>({ onAction, getState, emitter, router }: Options<State, Action>) {\n  const onUnhandledAction = React.useContext(UnhandledActionContext);\n  const parentNavigationHelpers = React.useContext(NavigationContext);\n\n  return React.useMemo(() => {\n    const dispatch = (op: Action | ((state: State) => Action)) => {\n      const action = typeof op === 'function' ? op(getState()) : op;\n\n      const handled = onAction(action);\n\n      if (!handled) {\n        onUnhandledAction?.(action);\n      }\n    };\n\n    const actions = {\n      ...router.actionCreators,\n      ...CommonActions,\n    };\n\n    const helpers = Object.keys(actions).reduce<Record<string, () => void>>(\n      (acc, name) => {\n        // @ts-expect-error: name is a valid key, but TypeScript is dumb\n        acc[name] = (...args: any) => dispatch(actions[name](...args));\n        return acc;\n      },\n      {}\n    );\n\n    return {\n      ...parentNavigationHelpers,\n      ...helpers,\n      dispatch,\n      emit: emitter.emit,\n      isFocused: parentNavigationHelpers\n        ? parentNavigationHelpers.isFocused\n        : () => true,\n      canGoBack: () => {\n        const state = getState();\n\n        return (\n          router.getStateForAction(state, CommonActions.goBack() as Action, {\n            routeNames: state.routeNames,\n            routeParamList: {},\n            routeGetIdList: {},\n          }) !== null ||\n          parentNavigationHelpers?.canGoBack() ||\n          false\n        );\n      },\n      getParent: () => parentNavigationHelpers as any,\n      getState,\n    } as NavigationHelpers<ParamListBase, EventMap> &\n      (NavigationProp<ParamListBase, string, any, any, any> | undefined) &\n      ActionHelpers;\n  }, [\n    emitter.emit,\n    getState,\n    onAction,\n    onUnhandledAction,\n    parentNavigationHelpers,\n    router,\n  ]);\n}\n"]}