{"version":3,"mappings":"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","names":["MIN_RIPPLE_SCALE","MIN_TAB_WIDTH","MAX_TAB_WIDTH","BAR_HEIGHT","BOTTOM_INSET","FAR_FAR_AWAY","Platform","OS","Touchable","_0","route","style","children","borderless","centered","rippleColor","rest","TouchableRipple","supported","React","_TouchableRipple","disabled","undefined","_reactNative","SceneComponent","memo","component","createElement","BottomNavigation","navigationState","renderScene","renderIcon","renderLabel","renderTouchable","props","getLabelText","title","getBadge","badge","getColor","color","getAccessibilityLabel","accessibilityLabel","getTestID","testID","activeColor","inactiveColor","keyboardHidesNavigationBar","barStyle","labeled","theme","sceneAnimationEnabled","onTabPress","onIndexChange","shifting","routes","length","safeAreaInsets","scale","animation","focusedKey","index","key","visibleAnim","tabsAnims","map","_","i","offsetsAnims","indexAnim","rippleAnim","layout","onLayout","useState","loaded","setLoaded","includes","keyboardVisible","setKeyboardVisible","handleKeyboardShow","useCallback","Animated","timing","toValue","duration","useNativeDriver","start","handleKeyboardHide","animateToIndex","setValue","parallel","finished","tab","forEach","offset","useEffect","onShow","onHide","prevNavigationState","useRef","current","_prevNavigationState$","handleTabPress","event","defaultPrevented","preventDefault","jumpTo","findIndex","colors","isDarkTheme","dark","mode","StyleSheet","flatten","customBackground","backgroundColor","elevation","approxBackgroundColor","surface","primary","interpolate","inputRange","outputRange","isDark","isLight","textColor","white","black","activeTintColor","inactiveTintColor","alpha","rgb","string","touchColor","maxTabWidth","maxTabBarWidth","tabBarWidth","Math","min","width","tabWidth","rippleSize","insets","left","right","bottom","styles","container","content","background","focused","opacity","top","_BottomNavigationRouteScreen","pointerEvents","accessibilityElementsHidden","importantForAccessibility","visibility","absoluteFill","collapsable","removeClippedSubviews","View","_Surface","bar","transform","translateY","height","position","measured","barContent","items","marginBottom","marginHorizontal","max","maxWidth","accessibilityRole","ripple","borderRadius","active","activeOpacity","inactiveOpacity","onPress","accessibilityTraits","accessibilityComponentType","accessibilityState","selected","item","iconContainer","iconWrapper","_Icon","source","icon","size","badgeContainer","String","_Badge","visible","labelContainer","labelWrapper","_Text","label","selectable","SceneMap","scenes","create","flex","overflow","alignItems","flexDirection","paddingVertical","marginTop","alignSelf","absoluteFillObject","paddingBottom","fontSize","textAlign","whiteSpace"],"sources":["BottomNavigation.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  View,\n  Animated,\n  TouchableWithoutFeedback,\n  TouchableWithoutFeedbackProps,\n  StyleSheet,\n  StyleProp,\n  Platform,\n  ViewStyle,\n} from 'react-native';\nimport { getBottomSpace } from 'react-native-iphone-x-helper';\nimport color from 'color';\nimport overlay from '../../styles/overlay';\nimport Icon, { IconSource } from '../Icon';\nimport Surface from '../Surface';\nimport Badge from '../Badge';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport Text from '../Typography/Text';\nimport { black, white } from '../../styles/colors';\nimport { withTheme } from '../../core/theming';\nimport useAnimatedValue from '../../utils/useAnimatedValue';\nimport useAnimatedValueArray from '../../utils/useAnimatedValueArray';\nimport useLayout from '../../utils/useLayout';\nimport useIsKeyboardShown from '../../utils/useIsKeyboardShown';\nimport BottomNavigationRouteScreen from './BottomNavigationRouteScreen';\n\ntype Route = {\n  key: string;\n  title?: string;\n  icon?: IconSource;\n  badge?: string | number | boolean;\n  color?: string;\n  accessibilityLabel?: string;\n  testID?: string;\n};\n\ntype NavigationState = {\n  index: number;\n  routes: Route[];\n};\n\ntype TabPressEvent = {\n  defaultPrevented: boolean;\n  preventDefault(): void;\n};\n\ntype TouchableProps = TouchableWithoutFeedbackProps & {\n  key: string;\n  route: Route;\n  children: React.ReactNode;\n  borderless?: boolean;\n  centered?: boolean;\n  rippleColor?: string;\n};\n\ntype Props = {\n  /**\n   * Whether the shifting style is used, the active tab icon shifts up to show the label and the inactive tabs won't have a label.\n   *\n   * By default, this is `true` when you have more than 3 tabs.\n   * Pass `shifting={false}` to explicitly disable this animation, or `shifting={true}` to always use this animation.\n   */\n  shifting?: boolean;\n  /**\n   * Whether to show labels in tabs. When `false`, only icons will be displayed.\n   */\n  labeled?: boolean;\n  /**\n   * State for the bottom navigation. The state should contain the following properties:\n   *\n   * - `index`: a number representing the index of the active route in the `routes` array\n   * - `routes`: an array containing a list of route objects used for rendering the tabs\n   *\n   * Each route object should contain the following properties:\n   *\n   * - `key`: a unique key to identify the route (required)\n   * - `title`: title of the route to use as the tab label\n   * - `icon`: icon to use as the tab icon, can be a string, an image source or a react component\n   * - `color`: color to use as background color for shifting bottom navigation\n   * - `badge`: badge to show on the tab icon, can be `true` to show a dot, `string` or `number` to show text.\n   * - `accessibilityLabel`: accessibility label for the tab button\n   * - `testID`: test id for the tab button\n   *\n   * Example:\n   *\n   * ```js\n   * {\n   *   index: 1,\n   *   routes: [\n   *     { key: 'music', title: 'Music', icon: 'queue-music', color: '#3F51B5' },\n   *     { key: 'albums', title: 'Albums', icon: 'album', color: '#009688' },\n   *     { key: 'recents', title: 'Recents', icon: 'history', color: '#795548' },\n   *     { key: 'purchased', title: 'Purchased', icon: 'shopping-cart', color: '#607D8B' },\n   *   ]\n   * }\n   * ```\n   *\n   * `BottomNavigation` is a controlled component, which means the `index` needs to be updated via the `onIndexChange` callback.\n   */\n  navigationState: NavigationState;\n  /**\n   * Callback which is called on tab change, receives the index of the new tab as argument.\n   * The navigation state needs to be updated when it's called, otherwise the change is dropped.\n   */\n  onIndexChange: (index: number) => void;\n  /**\n   * Callback which returns a react element to render as the page for the tab. Receives an object containing the route as the argument:\n   *\n   * ```js\n   * renderScene = ({ route, jumpTo }) => {\n   *   switch (route.key) {\n   *     case 'music':\n   *       return <MusicRoute jumpTo={jumpTo} />;\n   *     case 'albums':\n   *       return <AlbumsRoute jumpTo={jumpTo} />;\n   *   }\n   * }\n   * ```\n   *\n   * Pages are lazily rendered, which means that a page will be rendered the first time you navigate to it.\n   * After initial render, all the pages stay rendered to preserve their state.\n   *\n   * You need to make sure that your individual routes implement a `shouldComponentUpdate` to improve the performance.\n   * To make it easier to specify the components, you can use the `SceneMap` helper:\n   *\n   * ```js\n   * renderScene = BottomNavigation.SceneMap({\n   *   music: MusicRoute,\n   *   albums: AlbumsRoute,\n   * });\n   * ```\n   *\n   * Specifying the components this way is easier and takes care of implementing a `shouldComponentUpdate` method.\n   * Each component will receive the current route and a `jumpTo` method as it's props.\n   * The `jumpTo` method can be used to navigate to other tabs programmatically:\n   *\n   * ```js\n   * this.props.jumpTo('albums')\n   * ```\n   */\n  renderScene: (props: {\n    route: Route;\n    jumpTo: (key: string) => void;\n  }) => React.ReactNode | null;\n  /**\n   * Callback which returns a React Element to be used as tab icon.\n   */\n  renderIcon?: (props: {\n    route: Route;\n    focused: boolean;\n    color: string;\n  }) => React.ReactNode;\n  /**\n   * Callback which React Element to be used as tab label.\n   */\n  renderLabel?: (props: {\n    route: Route;\n    focused: boolean;\n    color: string;\n  }) => React.ReactNode;\n  /**\n   * Callback which returns a React element to be used as the touchable for the tab item.\n   * Renders a `TouchableRipple` on Android and `TouchableWithoutFeedback` with `View` on iOS.\n   */\n  renderTouchable?: (props: TouchableProps) => React.ReactNode;\n  /**\n   * Get label text for the tab, uses `route.title` by default. Use `renderLabel` to replace label component.\n   */\n  getLabelText?: (props: { route: Route }) => string | undefined;\n  /**\n   * Get accessibility label for the tab button. This is read by the screen reader when the user taps the tab.\n   * Uses `route.accessibilityLabel` by default.\n   */\n  getAccessibilityLabel?: (props: { route: Route }) => string | undefined;\n  /**\n   * Get the id to locate this tab button in tests, uses `route.testID` by default.\n   */\n  getTestID?: (props: { route: Route }) => string | undefined;\n  /**\n   * Get badge for the tab, uses `route.badge` by default.\n   */\n  getBadge?: (props: { route: Route }) => boolean | number | string | undefined;\n  /**\n   * Get color for the tab, uses `route.color` by default.\n   */\n  getColor?: (props: { route: Route }) => string | undefined;\n  /**\n   * Function to execute on tab press. It receives the route for the pressed tab, useful for things like scroll to top.\n   */\n  onTabPress?: (props: { route: Route } & TabPressEvent) => void;\n  /**\n   * Custom color for icon and label in the active tab.\n   */\n  activeColor?: string;\n  /**\n   * Custom color for icon and label in the inactive tab.\n   */\n  inactiveColor?: string;\n  /**\n   * Whether animation is enabled for scenes transitions in `shifting` mode.\n   * By default, the scenes cross-fade during tab change when `shifting` is enabled.\n   * Specify `sceneAnimationEnabled` as `false` to disable the animation.\n   */\n  sceneAnimationEnabled?: boolean;\n  /**\n   * Whether the bottom navigation bar is hidden when keyboard is shown.\n   * On Android, this works best when [`windowSoftInputMode`](https://developer.android.com/guide/topics/manifest/activity-element#wsoft) is set to `adjustResize`.\n   */\n  keyboardHidesNavigationBar?: boolean;\n  /**\n   * Safe area insets for the tab bar. This can be used to avoid elements like the navigation bar on Android and bottom safe area on iOS.\n   * The bottom insets for iOS is added by default. You can override the behavior with this option.\n   */\n  safeAreaInsets?: {\n    top?: number;\n    right?: number;\n    bottom?: number;\n    left?: number;\n  };\n  /**\n   * Style for the bottom navigation bar.  You can pass a custom background color here:\n   *\n   * ```js\n   * barStyle={{ backgroundColor: '#694fad' }}\n   * ```\n   */\n  barStyle?: StyleProp<ViewStyle>;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n};\n\nconst MIN_RIPPLE_SCALE = 0.001; // Minimum scale is not 0 due to bug with animation\nconst MIN_TAB_WIDTH = 96;\nconst MAX_TAB_WIDTH = 168;\nconst BAR_HEIGHT = 56;\nconst BOTTOM_INSET = getBottomSpace();\nconst FAR_FAR_AWAY = Platform.OS === 'web' ? 0 : 9999;\n\nconst Touchable = ({\n  route: _0,\n  style,\n  children,\n  borderless,\n  centered,\n  rippleColor,\n  ...rest\n}: TouchableProps) =>\n  TouchableRipple.supported ? (\n    <TouchableRipple\n      {...rest}\n      disabled={rest.disabled || undefined}\n      borderless={borderless}\n      centered={centered}\n      rippleColor={rippleColor}\n      style={style}\n    >\n      {children}\n    </TouchableRipple>\n  ) : (\n    <TouchableWithoutFeedback {...rest}>\n      <View style={style}>{children}</View>\n    </TouchableWithoutFeedback>\n  );\n\nconst SceneComponent = React.memo(({ component, ...rest }: any) =>\n  React.createElement(component, rest)\n);\n\n/**\n * Bottom navigation provides quick navigation between top-level views of an app with a bottom navigation bar.\n * It is primarily designed for use on mobile.\n *\n * For integration with React Navigation, you can use [react-navigation-material-bottom-tabs](https://github.com/react-navigation/react-navigation/tree/main/packages/material-bottom-tabs) and consult [createMaterialBottomTabNavigator](https://reactnavigation.org/docs/material-bottom-tab-navigator/) documentation.\n *\n * By default Bottom navigation uses primary color as a background, in dark theme with `adaptive` mode it will use surface colour instead.\n * See [Dark Theme](https://callstack.github.io/react-native-paper/theming.html#dark-theme) for more information.\n *\n * <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/bottom-navigation.gif\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { BottomNavigation, Text } from 'react-native-paper';\n *\n * const MusicRoute = () => <Text>Music</Text>;\n *\n * const AlbumsRoute = () => <Text>Albums</Text>;\n *\n * const RecentsRoute = () => <Text>Recents</Text>;\n *\n * const MyComponent = () => {\n *   const [index, setIndex] = React.useState(0);\n *   const [routes] = React.useState([\n *     { key: 'music', title: 'Music', icon: 'queue-music' },\n *     { key: 'albums', title: 'Albums', icon: 'album' },\n *     { key: 'recents', title: 'Recents', icon: 'history' },\n *   ]);\n *\n *   const renderScene = BottomNavigation.SceneMap({\n *     music: MusicRoute,\n *     albums: AlbumsRoute,\n *     recents: RecentsRoute,\n *   });\n *\n *   return (\n *     <BottomNavigation\n *       navigationState={{ index, routes }}\n *       onIndexChange={setIndex}\n *       renderScene={renderScene}\n *     />\n *   );\n * };\n *\n * export default MyComponent;\n * ```\n */\nconst BottomNavigation = ({\n  navigationState,\n  renderScene,\n  renderIcon,\n  renderLabel,\n  renderTouchable = (props: TouchableProps) => <Touchable {...props} />,\n  getLabelText = ({ route }: { route: Route }) => route.title,\n  getBadge = ({ route }: { route: Route }) => route.badge,\n  getColor = ({ route }: { route: Route }) => route.color,\n  getAccessibilityLabel = ({ route }: { route: Route }) =>\n    route.accessibilityLabel,\n  getTestID = ({ route }: { route: Route }) => route.testID,\n  activeColor,\n  inactiveColor,\n  keyboardHidesNavigationBar = true,\n  barStyle,\n  labeled = true,\n  style,\n  theme,\n  sceneAnimationEnabled = false,\n  onTabPress,\n  onIndexChange,\n  shifting = navigationState.routes.length > 3,\n  safeAreaInsets,\n}: Props) => {\n  const { scale } = theme.animation;\n\n  const focusedKey = navigationState.routes[navigationState.index].key;\n\n  /**\n   * Visibility of the navigation bar, visible state is 1 and invisible is 0.\n   */\n  const visibleAnim = useAnimatedValue(1);\n\n  /**\n   * Active state of individual tab items, active state is 1 and inactive state is 0.\n   */\n  const tabsAnims = useAnimatedValueArray(\n    navigationState.routes.map(\n      // focused === 1, unfocused === 0\n      (_, i) => (i === navigationState.index ? 1 : 0)\n    )\n  );\n\n  /**\n   * The top offset for each tab item to position it offscreen.\n   * Placing items offscreen helps to save memory usage for inactive screens with removeClippedSubviews.\n   * We use animated values for this to prevent unnecessary re-renders.\n   */\n  const offsetsAnims = useAnimatedValueArray(\n    navigationState.routes.map(\n      // offscreen === 1, normal === 0\n      (_, i) => (i === navigationState.index ? 0 : 1)\n    )\n  );\n\n  /**\n   * Index of the currently active tab. Used for setting the background color.\n   * We don't use the color as an animated value directly, because `setValue` seems to be buggy with colors.\n   */\n  const indexAnim = useAnimatedValue(navigationState.index);\n\n  /**\n   * Animation for the background color ripple, used to determine it's scale and opacity.\n   */\n  const rippleAnim = useAnimatedValue(MIN_RIPPLE_SCALE);\n\n  /**\n   * Layout of the navigation bar. The width is used to determine the size and position of the ripple.\n   */\n  const [layout, onLayout] = useLayout();\n\n  /**\n   * List of loaded tabs, tabs will be loaded when navigated to.\n   */\n  const [loaded, setLoaded] = React.useState<string[]>([focusedKey]);\n\n  if (!loaded.includes(focusedKey)) {\n    // Set the current tab to be loaded if it was not loaded before\n    setLoaded((loaded) => [...loaded, focusedKey]);\n  }\n\n  /**\n   * Track whether the keyboard is visible to show and hide the navigation bar.\n   */\n  const [keyboardVisible, setKeyboardVisible] = React.useState(false);\n\n  const handleKeyboardShow = React.useCallback(() => {\n    setKeyboardVisible(true);\n    Animated.timing(visibleAnim, {\n      toValue: 0,\n      duration: 150 * scale,\n      useNativeDriver: true,\n    }).start();\n  }, [scale, visibleAnim]);\n\n  const handleKeyboardHide = React.useCallback(() => {\n    Animated.timing(visibleAnim, {\n      toValue: 1,\n      duration: 100 * scale,\n      useNativeDriver: true,\n    }).start(() => {\n      setKeyboardVisible(false);\n    });\n  }, [scale, visibleAnim]);\n\n  const animateToIndex = React.useCallback(\n    (index: number) => {\n      // Reset the ripple to avoid glitch if it's currently animating\n      rippleAnim.setValue(MIN_RIPPLE_SCALE);\n\n      Animated.parallel([\n        Animated.timing(rippleAnim, {\n          toValue: 1,\n          duration: shifting ? 400 * scale : 0,\n          useNativeDriver: true,\n        }),\n        ...navigationState.routes.map((_, i) =>\n          Animated.timing(tabsAnims[i], {\n            toValue: i === index ? 1 : 0,\n            duration: shifting ? 150 * scale : 0,\n            useNativeDriver: true,\n          })\n        ),\n      ]).start(({ finished }) => {\n        // Workaround a bug in native animations where this is reset after first animation\n        tabsAnims.map((tab, i) => tab.setValue(i === index ? 1 : 0));\n\n        // Update the index to change bar's background color and then hide the ripple\n        indexAnim.setValue(index);\n        rippleAnim.setValue(MIN_RIPPLE_SCALE);\n\n        if (finished) {\n          // Position all inactive screens offscreen to save memory usage\n          // Only do it when animation has finished to avoid glitches mid-transition if switching fast\n          offsetsAnims.forEach((offset, i) => {\n            if (i === index) {\n              offset.setValue(0);\n            } else {\n              offset.setValue(1);\n            }\n          });\n        }\n      });\n    },\n    [\n      indexAnim,\n      shifting,\n      navigationState.routes,\n      offsetsAnims,\n      rippleAnim,\n      scale,\n      tabsAnims,\n    ]\n  );\n\n  React.useEffect(() => {\n    // Workaround for native animated bug in react-native@^0.57\n    // Context: https://github.com/callstack/react-native-paper/pull/637\n    animateToIndex(navigationState.index);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  useIsKeyboardShown({\n    onShow: handleKeyboardShow,\n    onHide: handleKeyboardHide,\n  });\n\n  const prevNavigationState = React.useRef<NavigationState>();\n\n  React.useEffect(() => {\n    // Reset offsets of previous and current tabs before animation\n    offsetsAnims.forEach((offset, i) => {\n      if (\n        i === navigationState.index ||\n        i === prevNavigationState.current?.index\n      ) {\n        offset.setValue(0);\n      }\n    });\n\n    animateToIndex(navigationState.index);\n  }, [navigationState.index, animateToIndex, offsetsAnims]);\n\n  const handleTabPress = (index: number) => {\n    const event = {\n      route: navigationState.routes[index],\n      defaultPrevented: false,\n      preventDefault: () => {\n        event.defaultPrevented = true;\n      },\n    };\n\n    onTabPress?.(event);\n\n    if (event.defaultPrevented) {\n      return;\n    }\n\n    if (index !== navigationState.index) {\n      onIndexChange(index);\n    }\n  };\n\n  const jumpTo = React.useCallback(\n    (key: string) => {\n      const index = navigationState.routes.findIndex(\n        (route) => route.key === key\n      );\n\n      onIndexChange(index);\n    },\n    [navigationState.routes, onIndexChange]\n  );\n\n  const { routes } = navigationState;\n  const { colors, dark: isDarkTheme, mode } = theme;\n\n  const { backgroundColor: customBackground, elevation = 4 }: ViewStyle =\n    StyleSheet.flatten(barStyle) || {};\n\n  const approxBackgroundColor = customBackground\n    ? customBackground\n    : isDarkTheme && mode === 'adaptive'\n    ? overlay(elevation, colors.surface)\n    : colors.primary;\n\n  const backgroundColor = shifting\n    ? indexAnim.interpolate({\n        inputRange: routes.map((_, i) => i),\n        // FIXME: does outputRange support ColorValue or just strings?\n        // @ts-expect-error\n        outputRange: routes.map(\n          (route) => getColor({ route }) || approxBackgroundColor\n        ),\n      })\n    : approxBackgroundColor;\n\n  const isDark =\n    typeof approxBackgroundColor === 'string'\n      ? !color(approxBackgroundColor).isLight()\n      : true;\n\n  const textColor = isDark ? white : black;\n  const activeTintColor =\n    typeof activeColor !== 'undefined' ? activeColor : textColor;\n  const inactiveTintColor =\n    typeof inactiveColor !== 'undefined'\n      ? inactiveColor\n      : color(textColor).alpha(0.5).rgb().string();\n\n  const touchColor = color(activeColor || activeTintColor)\n    .alpha(0.12)\n    .rgb()\n    .string();\n\n  const maxTabWidth = routes.length > 3 ? MIN_TAB_WIDTH : MAX_TAB_WIDTH;\n  const maxTabBarWidth = maxTabWidth * routes.length;\n\n  const tabBarWidth = Math.min(layout.width, maxTabBarWidth);\n  const tabWidth = tabBarWidth / routes.length;\n\n  const rippleSize = layout.width / 4;\n\n  const insets = {\n    left: safeAreaInsets?.left ?? 0,\n    right: safeAreaInsets?.right ?? 0,\n    bottom: safeAreaInsets?.bottom ?? BOTTOM_INSET,\n  };\n\n  return (\n    <View style={[styles.container, style]}>\n      <View style={[styles.content, { backgroundColor: colors.background }]}>\n        {routes.map((route, index) => {\n          if (!loaded.includes(route.key)) {\n            // Don't render a screen if we've never navigated to it\n            return null;\n          }\n\n          const focused = navigationState.index === index;\n\n          const opacity = sceneAnimationEnabled\n            ? tabsAnims[index]\n            : focused\n            ? 1\n            : 0;\n\n          const top = sceneAnimationEnabled\n            ? offsetsAnims[index].interpolate({\n                inputRange: [0, 1],\n                outputRange: [0, FAR_FAR_AWAY],\n              })\n            : focused\n            ? 0\n            : FAR_FAR_AWAY;\n\n          return (\n            <BottomNavigationRouteScreen\n              key={route.key}\n              pointerEvents={focused ? 'auto' : 'none'}\n              accessibilityElementsHidden={!focused}\n              importantForAccessibility={\n                focused ? 'auto' : 'no-hide-descendants'\n              }\n              index={index}\n              visibility={opacity}\n              style={[StyleSheet.absoluteFill, { opacity }]}\n              collapsable={false}\n              removeClippedSubviews={\n                // On iOS, set removeClippedSubviews to true only when not focused\n                // This is an workaround for a bug where the clipped view never re-appears\n                Platform.OS === 'ios' ? navigationState.index !== index : true\n              }\n            >\n              <Animated.View style={[styles.content, { top }]}>\n                {renderScene({ route, jumpTo })}\n              </Animated.View>\n            </BottomNavigationRouteScreen>\n          );\n        })}\n      </View>\n      <Surface\n        style={\n          [\n            styles.bar,\n            keyboardHidesNavigationBar\n              ? {\n                  // When the keyboard is shown, slide down the navigation bar\n                  transform: [\n                    {\n                      translateY: visibleAnim.interpolate({\n                        inputRange: [0, 1],\n                        outputRange: [layout.height, 0],\n                      }),\n                    },\n                  ],\n                  // Absolutely position the navigation bar so that the content is below it\n                  // This is needed to avoid gap at bottom when the navigation bar is hidden\n                  position: keyboardVisible ? 'absolute' : null,\n                }\n              : null,\n            barStyle,\n          ] as StyleProp<ViewStyle>\n        }\n        pointerEvents={\n          layout.measured\n            ? keyboardHidesNavigationBar && keyboardVisible\n              ? 'none'\n              : 'auto'\n            : 'none'\n        }\n        onLayout={onLayout}\n      >\n        <Animated.View style={[styles.barContent, { backgroundColor }]}>\n          <View\n            style={[\n              styles.items,\n              {\n                marginBottom: insets.bottom,\n                marginHorizontal: Math.max(insets.left, insets.right),\n                maxWidth: maxTabBarWidth,\n              },\n            ]}\n            accessibilityRole={'tablist'}\n          >\n            {shifting ? (\n              <Animated.View\n                pointerEvents=\"none\"\n                style={[\n                  styles.ripple,\n                  {\n                    // Since we have a single ripple, we have to reposition it so that it appears to expand from active tab.\n                    // We need to move it from the top to center of the navigation bar and from the left to the active tab.\n                    top: (BAR_HEIGHT - rippleSize) / 2,\n                    left:\n                      tabWidth * (navigationState.index + 0.5) - rippleSize / 2,\n                    height: rippleSize,\n                    width: rippleSize,\n                    borderRadius: rippleSize / 2,\n                    backgroundColor: getColor({\n                      route: routes[navigationState.index],\n                    }),\n                    transform: [\n                      {\n                        // Scale to twice the size  to ensure it covers the whole navigation bar\n                        scale: rippleAnim.interpolate({\n                          inputRange: [0, 1],\n                          outputRange: [0, 8],\n                        }),\n                      },\n                    ],\n                    opacity: rippleAnim.interpolate({\n                      inputRange: [0, MIN_RIPPLE_SCALE, 0.3, 1],\n                      outputRange: [0, 0, 1, 1],\n                    }),\n                  },\n                ]}\n              />\n            ) : null}\n            {routes.map((route, index) => {\n              const focused = navigationState.index === index;\n              const active = tabsAnims[index];\n\n              // Scale the label up\n              const scale =\n                labeled && shifting\n                  ? active.interpolate({\n                      inputRange: [0, 1],\n                      outputRange: [0.5, 1],\n                    })\n                  : 1;\n\n              // Move down the icon to account for no-label in shifting and smaller label in non-shifting.\n              const translateY = labeled\n                ? shifting\n                  ? active.interpolate({\n                      inputRange: [0, 1],\n                      outputRange: [7, 0],\n                    })\n                  : 0\n                : 7;\n\n              // We render the active icon and label on top of inactive ones and cross-fade them on change.\n              // This trick gives the illusion that we are animating between active and inactive colors.\n              // This is to ensure that we can use native driver, as colors cannot be animated with native driver.\n              const activeOpacity = active;\n              const inactiveOpacity = active.interpolate({\n                inputRange: [0, 1],\n                outputRange: [1, 0],\n              });\n\n              const badge = getBadge({ route });\n\n              return renderTouchable({\n                key: route.key,\n                route,\n                borderless: true,\n                centered: true,\n                rippleColor: touchColor,\n                onPress: () => handleTabPress(index),\n                testID: getTestID({ route }),\n                accessibilityLabel: getAccessibilityLabel({ route }),\n                // @ts-expect-error We keep old a11y props for backwards compat with old RN versions\n                accessibilityTraits: focused\n                  ? ['button', 'selected']\n                  : 'button',\n                accessibilityComponentType: 'button',\n                accessibilityRole: Platform.OS === 'ios' ? 'button' : 'tab',\n                accessibilityState: { selected: focused },\n                style: styles.item,\n                children: (\n                  <View pointerEvents=\"none\">\n                    <Animated.View\n                      style={[\n                        styles.iconContainer,\n                        { transform: [{ translateY }] },\n                      ]}\n                    >\n                      <Animated.View\n                        style={[styles.iconWrapper, { opacity: activeOpacity }]}\n                      >\n                        {renderIcon ? (\n                          renderIcon({\n                            route,\n                            focused: true,\n                            color: activeTintColor,\n                          })\n                        ) : (\n                          <Icon\n                            source={route.icon as IconSource}\n                            color={activeTintColor}\n                            size={24}\n                          />\n                        )}\n                      </Animated.View>\n                      <Animated.View\n                        style={[\n                          styles.iconWrapper,\n                          { opacity: inactiveOpacity },\n                        ]}\n                      >\n                        {renderIcon ? (\n                          renderIcon({\n                            route,\n                            focused: false,\n                            color: inactiveTintColor,\n                          })\n                        ) : (\n                          <Icon\n                            source={route.icon as IconSource}\n                            color={inactiveTintColor}\n                            size={24}\n                          />\n                        )}\n                      </Animated.View>\n                      <View\n                        style={[\n                          styles.badgeContainer,\n                          {\n                            right:\n                              (badge != null && typeof badge !== 'boolean'\n                                ? String(badge).length * -2\n                                : 0) - 2,\n                          },\n                        ]}\n                      >\n                        {typeof badge === 'boolean' ? (\n                          <Badge visible={badge} size={8} />\n                        ) : (\n                          <Badge visible={badge != null} size={16}>\n                            {badge}\n                          </Badge>\n                        )}\n                      </View>\n                    </Animated.View>\n                    {labeled ? (\n                      <Animated.View\n                        style={[\n                          styles.labelContainer,\n                          { transform: [{ scale }] },\n                        ]}\n                      >\n                        <Animated.View\n                          style={[\n                            styles.labelWrapper,\n                            { opacity: activeOpacity },\n                          ]}\n                        >\n                          {renderLabel ? (\n                            renderLabel({\n                              route,\n                              focused: true,\n                              color: activeTintColor,\n                            })\n                          ) : (\n                            <Text\n                              style={[styles.label, { color: activeTintColor }]}\n                            >\n                              {getLabelText({ route })}\n                            </Text>\n                          )}\n                        </Animated.View>\n                        {shifting ? null : (\n                          <Animated.View\n                            style={[\n                              styles.labelWrapper,\n                              { opacity: inactiveOpacity },\n                            ]}\n                          >\n                            {renderLabel ? (\n                              renderLabel({\n                                route,\n                                focused: false,\n                                color: inactiveTintColor,\n                              })\n                            ) : (\n                              <Text\n                                selectable={false}\n                                style={[\n                                  styles.label,\n                                  { color: inactiveTintColor },\n                                ]}\n                              >\n                                {getLabelText({ route })}\n                              </Text>\n                            )}\n                          </Animated.View>\n                        )}\n                      </Animated.View>\n                    ) : (\n                      <View style={styles.labelContainer} />\n                    )}\n                  </View>\n                ),\n              });\n            })}\n          </View>\n        </Animated.View>\n      </Surface>\n    </View>\n  );\n};\n\n/**\n * Function which takes a map of route keys to components.\n * Pure components are used to minimize re-rendering of the pages.\n * This drastically improves the animation performance.\n */\nBottomNavigation.SceneMap = (scenes: {\n  [key: string]: React.ComponentType<{\n    route: Route;\n    jumpTo: (key: string) => void;\n  }>;\n}) => {\n  return ({\n    route,\n    jumpTo,\n  }: {\n    route: Route;\n    jumpTo: (key: string) => void;\n  }) => (\n    <SceneComponent\n      key={route.key}\n      component={scenes[route.key ? route.key : '']}\n      route={route}\n      jumpTo={jumpTo}\n    />\n  );\n};\n\nexport default withTheme(BottomNavigation);\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    overflow: 'hidden',\n  },\n  content: {\n    flex: 1,\n  },\n  bar: {\n    left: 0,\n    right: 0,\n    bottom: 0,\n    elevation: 4,\n  },\n  barContent: {\n    alignItems: 'center',\n    overflow: 'hidden',\n  },\n  items: {\n    flexDirection: 'row',\n    ...(Platform.OS === 'web'\n      ? {\n          width: '100%',\n        }\n      : null),\n  },\n  item: {\n    flex: 1,\n    // Top padding is 6 and bottom padding is 10\n    // The extra 4dp bottom padding is offset by label's height\n    paddingVertical: 6,\n  },\n  ripple: {\n    position: 'absolute',\n  },\n  iconContainer: {\n    height: 24,\n    width: 24,\n    marginTop: 2,\n    marginHorizontal: 12,\n    alignSelf: 'center',\n  },\n  iconWrapper: {\n    ...StyleSheet.absoluteFillObject,\n    alignItems: 'center',\n  },\n  labelContainer: {\n    height: 16,\n    paddingBottom: 2,\n  },\n  labelWrapper: {\n    ...StyleSheet.absoluteFillObject,\n  },\n  // eslint-disable-next-line react-native/no-color-literals\n  label: {\n    fontSize: 12,\n    textAlign: 'center',\n    backgroundColor: 'transparent',\n    ...(Platform.OS === 'web'\n      ? {\n          whiteSpace: 'nowrap',\n          alignSelf: 'center',\n        }\n      : null),\n  },\n  badgeContainer: {\n    position: 'absolute',\n    left: 0,\n    top: -2,\n  },\n});\n"]}