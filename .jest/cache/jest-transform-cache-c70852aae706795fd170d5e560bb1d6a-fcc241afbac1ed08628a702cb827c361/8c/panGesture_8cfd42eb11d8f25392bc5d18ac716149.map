{"version":3,"mappings":"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","names":["changeEventCalculator","current","previous","changePayload","undefined","changeX","translationX","changeY","translationY","PanGesture","constructor","_defineProperty","handlerName","activeOffsetY","offset","Array","isArray","config","activeOffsetYStart","activeOffsetYEnd","activeOffsetX","activeOffsetXStart","activeOffsetXEnd","failOffsetY","failOffsetYStart","failOffsetYEnd","failOffsetX","failOffsetXStart","failOffsetXEnd","minPointers","maxPointers","minDistance","distance","minDist","minVelocity","velocity","minVelocityX","minVelocityY","averageTouches","value","avgTouches","enableTrackpadTwoFingerGesture","onChange","callback","handlers","ContinousBaseGesture"],"sources":["panGesture.ts"],"sourcesContent":["import { BaseGestureConfig, ContinousBaseGesture } from './gesture';\nimport { GestureUpdateEvent } from '../gestureHandlerCommon';\nimport {\n  PanGestureConfig,\n  PanGestureHandlerEventPayload,\n} from '../PanGestureHandler';\n\nexport type PanGestureChangeEventPayload = {\n  changeX: number;\n  changeY: number;\n};\n\nfunction changeEventCalculator(\n  current: GestureUpdateEvent<PanGestureHandlerEventPayload>,\n  previous?: GestureUpdateEvent<PanGestureHandlerEventPayload>\n) {\n  'worklet';\n  let changePayload: PanGestureChangeEventPayload;\n  if (previous === undefined) {\n    changePayload = {\n      changeX: current.translationX,\n      changeY: current.translationY,\n    };\n  } else {\n    changePayload = {\n      changeX: current.translationX - previous.translationX,\n      changeY: current.translationY - previous.translationY,\n    };\n  }\n\n  return { ...current, ...changePayload };\n}\n\nexport class PanGesture extends ContinousBaseGesture<\n  PanGestureHandlerEventPayload,\n  PanGestureChangeEventPayload\n> {\n  public config: BaseGestureConfig & PanGestureConfig = {};\n\n  constructor() {\n    super();\n\n    this.handlerName = 'PanGestureHandler';\n  }\n\n  activeOffsetY(offset: number | number[]) {\n    if (Array.isArray(offset)) {\n      this.config.activeOffsetYStart = offset[0];\n      this.config.activeOffsetYEnd = offset[1];\n    } else if (offset < 0) {\n      this.config.activeOffsetYStart = offset;\n    } else {\n      this.config.activeOffsetYEnd = offset;\n    }\n    return this;\n  }\n\n  activeOffsetX(offset: number | number[]) {\n    if (Array.isArray(offset)) {\n      this.config.activeOffsetXStart = offset[0];\n      this.config.activeOffsetXEnd = offset[1];\n    } else if (offset < 0) {\n      this.config.activeOffsetXStart = offset;\n    } else {\n      this.config.activeOffsetXEnd = offset;\n    }\n    return this;\n  }\n\n  failOffsetY(offset: number | number[]) {\n    if (Array.isArray(offset)) {\n      this.config.failOffsetYStart = offset[0];\n      this.config.failOffsetYEnd = offset[1];\n    } else if (offset < 0) {\n      this.config.failOffsetYStart = offset;\n    } else {\n      this.config.failOffsetYEnd = offset;\n    }\n    return this;\n  }\n\n  failOffsetX(offset: number | number[]) {\n    if (Array.isArray(offset)) {\n      this.config.failOffsetXStart = offset[0];\n      this.config.failOffsetXEnd = offset[1];\n    } else if (offset < 0) {\n      this.config.failOffsetXStart = offset;\n    } else {\n      this.config.failOffsetXEnd = offset;\n    }\n    return this;\n  }\n\n  minPointers(minPointers: number) {\n    this.config.minPointers = minPointers;\n    return this;\n  }\n\n  maxPointers(maxPointers: number) {\n    this.config.maxPointers = maxPointers;\n    return this;\n  }\n\n  minDistance(distance: number) {\n    this.config.minDist = distance;\n    return this;\n  }\n\n  minVelocity(velocity: number) {\n    this.config.minVelocity = velocity;\n    return this;\n  }\n\n  minVelocityX(velocity: number) {\n    this.config.minVelocityX = velocity;\n    return this;\n  }\n\n  minVelocityY(velocity: number) {\n    this.config.minVelocityY = velocity;\n    return this;\n  }\n\n  averageTouches(value: boolean) {\n    this.config.avgTouches = value;\n    return this;\n  }\n\n  enableTrackpadTwoFingerGesture(value: boolean) {\n    this.config.enableTrackpadTwoFingerGesture = value;\n    return this;\n  }\n\n  onChange(\n    callback: (\n      event: GestureUpdateEvent<\n        PanGestureHandlerEventPayload & PanGestureChangeEventPayload\n      >\n    ) => void\n  ) {\n    // @ts-ignore TS being overprotective, PanGestureHandlerEventPayload is Record\n    this.handlers.changeEventCalculator = changeEventCalculator;\n    return super.onChange(callback);\n  }\n}\n\nexport type PanGestureType = InstanceType<typeof PanGesture>;\n"]}