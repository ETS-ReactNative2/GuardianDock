{"version":3,"mappings":"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","names":["PaginationControls","page","numberOfPages","onPageChange","showFastPaginationControls","colors","React","_IconButton","icon","size","color","_MaterialCommunityIcon","name","direction","I18nManager","isRTL","text","disabled","onPress","accessibilityLabel","PaginationDropdown","numberOfItemsPerPageList","numberOfItemsPerPage","onItemsPerPageChange","useState","showSelect","toggleSelect","_Menu","visible","onDismiss","anchor","_Button","mode","style","styles","button","contentStyle","map","option","Item","key","titleStyle","primary","title","DataTablePagination","label","theme","selectPageDropdownLabel","selectPageDropdownAccessibilityLabel","rest","labelColor","alpha","rgb","string","_reactNative","container","optionsContainer","_Text","numberOfLines","iconsContainer","displayName","StyleSheet","create","justifyContent","flexDirection","alignItems","paddingLeft","flexWrap","marginVertical","fontSize","marginRight","textAlign"],"sources":["DataTablePagination.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  StyleSheet,\n  StyleProp,\n  View,\n  ViewStyle,\n  I18nManager,\n} from 'react-native';\nimport color from 'color';\nimport IconButton from '../IconButton';\nimport Text from '../Typography/Text';\nimport { withTheme, useTheme } from '../../core/theming';\nimport MaterialCommunityIcon from '../MaterialCommunityIcon';\nimport Menu from '../Menu/Menu';\nimport Button from '../Button';\n\ntype Props = React.ComponentPropsWithRef<typeof View> &\n  PaginationControlsProps &\n  PaginationDropdownProps & {\n    /**\n     * Label text to display which indicates current pagination.\n     */\n    label?: React.ReactNode;\n    /**\n     * AccessibilityLabel for `label`.\n     */\n    accessibilityLabel?: string;\n    /**\n     * Label text for select page dropdown to display.\n     */\n    selectPageDropdownLabel?: React.ReactNode;\n    /**\n     * AccessibilityLabel for `selectPageDropdownLabel`.\n     */\n    selectPageDropdownAccessibilityLabel?: string;\n    style?: StyleProp<ViewStyle>;\n    /**\n     * @optional\n     */\n    theme: ReactNativePaper.Theme;\n  };\n\ntype PaginationDropdownProps = {\n  /**\n   * The current number of rows per page.\n   */\n  numberOfItemsPerPage?: number;\n  /**\n   * Options for a number of rows per page to choose from.\n   */\n  numberOfItemsPerPageList?: Array<number>;\n  /**\n   * The function to set the number of rows per page.\n   */\n  onItemsPerPageChange?: (numberOfItemsPerPage: number) => void;\n};\n\ntype PaginationControlsProps = {\n  /**\n   * The currently visible page (starting with 0).\n   */\n  page: number;\n  /**\n   * The total number of pages.\n   */\n  numberOfPages: number;\n  /**\n   * Function to execute on page change.\n   */\n  onPageChange: (page: number) => void;\n  /**\n   * Whether to show fast forward and fast rewind buttons in pagination. False by default.\n   */\n  showFastPaginationControls?: boolean;\n};\n\nconst PaginationControls = ({\n  page,\n  numberOfPages,\n  onPageChange,\n  showFastPaginationControls,\n}: PaginationControlsProps) => {\n  const { colors } = useTheme();\n  return (\n    <>\n      {showFastPaginationControls ? (\n        <IconButton\n          icon={({ size, color }) => (\n            <MaterialCommunityIcon\n              name=\"page-first\"\n              color={color}\n              size={size}\n              direction={I18nManager.isRTL ? 'rtl' : 'ltr'}\n            />\n          )}\n          color={colors.text}\n          disabled={page === 0}\n          onPress={() => onPageChange(0)}\n          accessibilityLabel=\"page-first\"\n        />\n      ) : null}\n      <IconButton\n        icon={({ size, color }) => (\n          <MaterialCommunityIcon\n            name=\"chevron-left\"\n            color={color}\n            size={size}\n            direction={I18nManager.isRTL ? 'rtl' : 'ltr'}\n          />\n        )}\n        color={colors.text}\n        disabled={page === 0}\n        onPress={() => onPageChange(page - 1)}\n        accessibilityLabel=\"chevron-left\"\n      />\n      <IconButton\n        icon={({ size, color }) => (\n          <MaterialCommunityIcon\n            name=\"chevron-right\"\n            color={color}\n            size={size}\n            direction={I18nManager.isRTL ? 'rtl' : 'ltr'}\n          />\n        )}\n        color={colors.text}\n        disabled={numberOfPages === 0 || page === numberOfPages - 1}\n        onPress={() => onPageChange(page + 1)}\n        accessibilityLabel=\"chevron-right\"\n      />\n      {showFastPaginationControls ? (\n        <IconButton\n          icon={({ size, color }) => (\n            <MaterialCommunityIcon\n              name=\"page-last\"\n              color={color}\n              size={size}\n              direction={I18nManager.isRTL ? 'rtl' : 'ltr'}\n            />\n          )}\n          color={colors.text}\n          disabled={numberOfPages === 0 || page === numberOfPages - 1}\n          onPress={() => onPageChange(numberOfPages - 1)}\n          accessibilityLabel=\"page-last\"\n        />\n      ) : null}\n    </>\n  );\n};\n\nconst PaginationDropdown = ({\n  numberOfItemsPerPageList,\n  numberOfItemsPerPage,\n  onItemsPerPageChange,\n}: PaginationDropdownProps) => {\n  const { colors } = useTheme();\n  const [showSelect, toggleSelect] = React.useState<boolean>(false);\n\n  return (\n    <Menu\n      visible={showSelect}\n      onDismiss={() => toggleSelect(!showSelect)}\n      anchor={\n        <Button\n          mode=\"outlined\"\n          onPress={() => toggleSelect(true)}\n          style={styles.button}\n          icon=\"menu-down\"\n          contentStyle={styles.contentStyle}\n        >\n          {`${numberOfItemsPerPage}`}\n        </Button>\n      }\n    >\n      {numberOfItemsPerPageList?.map((option) => (\n        <Menu.Item\n          key={option}\n          titleStyle={\n            option === numberOfItemsPerPage && {\n              color: colors.primary,\n            }\n          }\n          onPress={() => {\n            onItemsPerPageChange?.(option);\n            toggleSelect(false);\n          }}\n          title={option}\n        />\n      ))}\n    </Menu>\n  );\n};\n\n/**\n * A component to show pagination for data table.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/data-table-pagination.png\" />\n *   </figure>\n * </div>\n *\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { DataTable } from 'react-native-paper';\n *\n * const numberOfItemsPerPageList = [2, 3, 4];\n *\n * const items = [\n *   {\n *     key: 1,\n *     name: 'Page 1',\n *   },\n *   {\n *     key: 2,\n *     name: 'Page 2',\n *   },\n *   {\n *     key: 3,\n *     name: 'Page 3',\n *   },\n * ];\n *\n * const MyComponent = () => {\n *   const [page, setPage] = React.useState(0);\n *   const [numberOfItemsPerPage, onItemsPerPageChange] = React.useState(numberOfItemsPerPageList[0]);\n *   const from = page * numberOfItemsPerPage;\n *   const to = Math.min((page + 1) * numberOfItemsPerPage, items.length);\n *\n *   React.useEffect(() => {\n *      setPage(0);\n *   }, [numberOfItemsPerPage]);\n *\n *   return (\n *     <DataTable>\n *       <DataTable.Pagination\n *         page={page}\n *         numberOfPages={Math.ceil(items.length / numberOfItemsPerPage)}\n *         onPageChange={page => setPage(page)}\n *         label={`${from + 1}-${to} of ${items.length}`}\n *         showFastPaginationControls\n *         numberOfItemsPerPageList={numberOfItemsPerPageList}\n *         numberOfItemsPerPage={numberOfItemsPerPage}\n *         onItemsPerPageChange={onItemsPerPageChange}\n *         selectPageDropdownLabel={'Rows per page'}\n *       />\n *     </DataTable>\n *   );\n * };\n *\n * export default MyComponent;\n * ```\n */\nconst DataTablePagination = ({\n  label,\n  accessibilityLabel,\n  page,\n  numberOfPages,\n  onPageChange,\n  style,\n  theme,\n  showFastPaginationControls = false,\n  numberOfItemsPerPageList,\n  numberOfItemsPerPage,\n  onItemsPerPageChange,\n  selectPageDropdownLabel,\n  selectPageDropdownAccessibilityLabel,\n  ...rest\n}: Props) => {\n  const labelColor = color(theme.colors.text).alpha(0.6).rgb().string();\n\n  return (\n    <View\n      {...rest}\n      style={[styles.container, style]}\n      accessibilityLabel=\"pagination-container\"\n    >\n      {numberOfItemsPerPageList &&\n        numberOfItemsPerPage &&\n        onItemsPerPageChange && (\n          <View\n            accessibilityLabel=\"Options Select\"\n            style={styles.optionsContainer}\n          >\n            <Text\n              style={[styles.label, { color: labelColor }]}\n              numberOfLines={3}\n              accessibilityLabel={\n                selectPageDropdownAccessibilityLabel ||\n                'selectPageDropdownLabel'\n              }\n            >\n              {selectPageDropdownLabel}\n            </Text>\n            <PaginationDropdown\n              numberOfItemsPerPageList={numberOfItemsPerPageList}\n              numberOfItemsPerPage={numberOfItemsPerPage}\n              onItemsPerPageChange={onItemsPerPageChange}\n            />\n          </View>\n        )}\n      <Text\n        style={[styles.label, { color: labelColor }]}\n        numberOfLines={3}\n        accessibilityLabel={accessibilityLabel || 'label'}\n      >\n        {label}\n      </Text>\n      <View style={styles.iconsContainer}>\n        <PaginationControls\n          showFastPaginationControls={showFastPaginationControls}\n          onPageChange={onPageChange}\n          page={page}\n          numberOfPages={numberOfPages}\n        />\n      </View>\n    </View>\n  );\n};\n\nDataTablePagination.displayName = 'DataTable.Pagination';\n\nconst styles = StyleSheet.create({\n  container: {\n    justifyContent: 'flex-end',\n    flexDirection: 'row',\n    alignItems: 'center',\n    paddingLeft: 16,\n    flexWrap: 'wrap',\n  },\n  optionsContainer: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    marginVertical: 6,\n  },\n  label: {\n    fontSize: 12,\n    marginRight: 16,\n  },\n  button: {\n    textAlign: 'center',\n    marginRight: 16,\n  },\n  iconsContainer: {\n    flexDirection: 'row',\n  },\n  contentStyle: {\n    flexDirection: 'row-reverse',\n  },\n});\n\nexport default withTheme(DataTablePagination);\n\n// @component-docs ignore-next-line\nexport { DataTablePagination };\n"]}