{"version":3,"mappings":"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","names":["DEFAULT_DURATION","TOP_INSET","BOTTOM_INSET","Modal","dismissable","visible","overlayAccessibilityLabel","onDismiss","children","contentContainerStyle","style","visibleRef","React","useRef","useEffect","current","colors","animation","opacity","useState","rendered","setRendered","handleBack","hideModal","subscription","undefined","showModal","_subscription$current","remove","BackHandler","removeEventListener","addEventListener","scale","Animated","timing","toValue","duration","easing","Easing","out","cubic","useNativeDriver","start","_subscription$current2","finished","prevVisible","_reactNative","View","pointerEvents","accessibilityViewIsModal","accessibilityLiveRegion","StyleSheet","absoluteFill","onAccessibilityEscape","accessibilityLabel","accessibilityRole","disabled","onPress","importantForAccessibility","styles","backdrop","backgroundColor","wrapper","marginTop","marginBottom","_Surface","content","create","flex","absoluteFillObject","justifyContent"],"sources":["Modal.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  Animated,\n  BackHandler,\n  Easing,\n  StyleProp,\n  StyleSheet,\n  TouchableWithoutFeedback,\n  ViewStyle,\n  View,\n  NativeEventSubscription,\n} from 'react-native';\nimport {\n  getStatusBarHeight,\n  getBottomSpace,\n} from 'react-native-iphone-x-helper';\nimport Surface from './Surface';\nimport { useTheme } from '../core/theming';\nimport useAnimatedValue from '../utils/useAnimatedValue';\n\ntype Props = {\n  /**\n   * Determines whether clicking outside the modal dismiss it.\n   */\n  dismissable?: boolean;\n  /**\n   * Callback that is called when the user dismisses the modal.\n   */\n  onDismiss?: () => void;\n  /**\n   * Accessibility label for the overlay. This is read by the screen reader when the user taps outside the modal.\n   */\n  overlayAccessibilityLabel?: string;\n  /**\n   * Determines Whether the modal is visible.\n   */\n  visible: boolean;\n  /**\n   * Content of the `Modal`.\n   */\n  children: React.ReactNode;\n  /**\n   * Style for the content of the modal\n   */\n  contentContainerStyle?: StyleProp<ViewStyle>;\n  /**\n   * Style for the wrapper of the modal.\n   * Use this prop to change the default wrapper style or to override safe area insets with marginTop and marginBottom.\n   */\n  style?: StyleProp<ViewStyle>;\n};\n\nconst DEFAULT_DURATION = 220;\nconst TOP_INSET = getStatusBarHeight(true);\nconst BOTTOM_INSET = getBottomSpace();\n\n/**\n * The Modal component is a simple way to present content above an enclosing view.\n * To render the `Modal` above other components, you'll need to wrap it with the [`Portal`](portal.html) component.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/modal.gif\" />\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Modal, Portal, Text, Button, Provider } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [visible, setVisible] = React.useState(false);\n *\n *   const showModal = () => setVisible(true);\n *   const hideModal = () => setVisible(false);\n *   const containerStyle = {backgroundColor: 'white', padding: 20};\n *\n *   return (\n *     <Provider>\n *       <Portal>\n *         <Modal visible={visible} onDismiss={hideModal} contentContainerStyle={containerStyle}>\n *           <Text>Example Modal.  Click outside this area to dismiss.</Text>\n *         </Modal>\n *       </Portal>\n *       <Button style={{marginTop: 30}} onPress={showModal}>\n *         Show\n *       </Button>\n *     </Provider>\n *   );\n * };\n *\n * export default MyComponent;\n * ```\n */\nexport default function Modal({\n  dismissable = true,\n  visible = false,\n  overlayAccessibilityLabel = 'Close modal',\n  onDismiss,\n  children,\n  contentContainerStyle,\n  style,\n}: Props) {\n  const visibleRef = React.useRef(visible);\n\n  React.useEffect(() => {\n    visibleRef.current = visible;\n  });\n\n  const { colors, animation } = useTheme();\n\n  const opacity = useAnimatedValue(visible ? 1 : 0);\n\n  const [rendered, setRendered] = React.useState(visible);\n\n  if (visible && !rendered) {\n    setRendered(true);\n  }\n\n  const handleBack = () => {\n    if (dismissable) {\n      hideModal();\n    }\n    return true;\n  };\n\n  const subscription = React.useRef<NativeEventSubscription | undefined>(\n    undefined\n  );\n\n  const showModal = () => {\n    if (subscription.current?.remove) {\n      subscription.current.remove();\n    } else {\n      BackHandler.removeEventListener('hardwareBackPress', handleBack);\n    }\n    subscription.current = BackHandler.addEventListener(\n      'hardwareBackPress',\n      handleBack\n    );\n\n    const { scale } = animation;\n\n    Animated.timing(opacity, {\n      toValue: 1,\n      duration: scale * DEFAULT_DURATION,\n      easing: Easing.out(Easing.cubic),\n      useNativeDriver: true,\n    }).start();\n  };\n\n  const hideModal = () => {\n    if (subscription.current?.remove) {\n      subscription.current?.remove();\n    } else {\n      BackHandler.removeEventListener('hardwareBackPress', handleBack);\n    }\n\n    const { scale } = animation;\n\n    Animated.timing(opacity, {\n      toValue: 0,\n      duration: scale * DEFAULT_DURATION,\n      easing: Easing.out(Easing.cubic),\n      useNativeDriver: true,\n    }).start(({ finished }) => {\n      if (!finished) {\n        return;\n      }\n\n      if (visible && onDismiss) {\n        onDismiss();\n      }\n\n      if (visibleRef.current) {\n        showModal();\n      } else {\n        setRendered(false);\n      }\n    });\n  };\n\n  const prevVisible = React.useRef<boolean | null>(null);\n\n  React.useEffect(() => {\n    if (prevVisible.current !== visible) {\n      if (visible) {\n        showModal();\n      } else {\n        hideModal();\n      }\n    }\n    prevVisible.current = visible;\n  });\n\n  if (!rendered) return null;\n\n  return (\n    <Animated.View\n      pointerEvents={visible ? 'auto' : 'none'}\n      accessibilityViewIsModal\n      accessibilityLiveRegion=\"polite\"\n      style={StyleSheet.absoluteFill}\n      onAccessibilityEscape={hideModal}\n    >\n      <TouchableWithoutFeedback\n        accessibilityLabel={overlayAccessibilityLabel}\n        accessibilityRole=\"button\"\n        disabled={!dismissable}\n        onPress={dismissable ? hideModal : undefined}\n        importantForAccessibility=\"no\"\n      >\n        <Animated.View\n          style={[\n            styles.backdrop,\n            { backgroundColor: colors.backdrop, opacity },\n          ]}\n        />\n      </TouchableWithoutFeedback>\n      <View\n        style={[\n          styles.wrapper,\n          { marginTop: TOP_INSET, marginBottom: BOTTOM_INSET },\n          style,\n        ]}\n        pointerEvents=\"box-none\"\n      >\n        <Surface\n          style={\n            [{ opacity }, styles.content, contentContainerStyle] as StyleProp<\n              ViewStyle\n            >\n          }\n        >\n          {children}\n        </Surface>\n      </View>\n    </Animated.View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  backdrop: {\n    flex: 1,\n  },\n  wrapper: {\n    ...StyleSheet.absoluteFillObject,\n    justifyContent: 'center',\n  },\n  content: {\n    backgroundColor: 'transparent',\n    justifyContent: 'center',\n  },\n});\n"]}