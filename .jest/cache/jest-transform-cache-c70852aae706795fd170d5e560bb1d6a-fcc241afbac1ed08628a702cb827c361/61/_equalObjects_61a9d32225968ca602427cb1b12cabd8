4acba497a56f60a42bedc4f10004ffd3
var getAllKeys = require("./_getAllKeys");

var COMPARE_PARTIAL_FLAG = 1;
var objectProto = Object.prototype;
var hasOwnProperty = objectProto.hasOwnProperty;

function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
      objProps = getAllKeys(object),
      objLength = objProps.length,
      othProps = getAllKeys(other),
      othLength = othProps.length;

  if (objLength != othLength && !isPartial) {
    return false;
  }

  var index = objLength;

  while (index--) {
    var key = objProps[index];

    if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
      return false;
    }
  }

  var objStacked = stack.get(object);
  var othStacked = stack.get(other);

  if (objStacked && othStacked) {
    return objStacked == other && othStacked == object;
  }

  var result = true;
  stack.set(object, other);
  stack.set(other, object);
  var skipCtor = isPartial;

  while (++index < objLength) {
    key = objProps[index];
    var objValue = object[key],
        othValue = other[key];

    if (customizer) {
      var compared = isPartial ? customizer(othValue, objValue, key, other, object, stack) : customizer(objValue, othValue, key, object, other, stack);
    }

    if (!(compared === undefined ? objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack) : compared)) {
      result = false;
      break;
    }

    skipCtor || (skipCtor = key == 'constructor');
  }

  if (result && !skipCtor) {
    var objCtor = object.constructor,
        othCtor = other.constructor;

    if (objCtor != othCtor && 'constructor' in object && 'constructor' in other && !(typeof objCtor == 'function' && objCtor instanceof objCtor && typeof othCtor == 'function' && othCtor instanceof othCtor)) {
      result = false;
    }
  }

  stack['delete'](object);
  stack['delete'](other);
  return result;
}

module.exports = equalObjects;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIl9lcXVhbE9iamVjdHMuanMiXSwibmFtZXMiOlsiZ2V0QWxsS2V5cyIsInJlcXVpcmUiLCJDT01QQVJFX1BBUlRJQUxfRkxBRyIsIm9iamVjdFByb3RvIiwiT2JqZWN0IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJlcXVhbE9iamVjdHMiLCJvYmplY3QiLCJvdGhlciIsImJpdG1hc2siLCJjdXN0b21pemVyIiwiZXF1YWxGdW5jIiwic3RhY2siLCJpc1BhcnRpYWwiLCJvYmpQcm9wcyIsIm9iakxlbmd0aCIsImxlbmd0aCIsIm90aFByb3BzIiwib3RoTGVuZ3RoIiwiaW5kZXgiLCJrZXkiLCJjYWxsIiwib2JqU3RhY2tlZCIsImdldCIsIm90aFN0YWNrZWQiLCJyZXN1bHQiLCJzZXQiLCJza2lwQ3RvciIsIm9ialZhbHVlIiwib3RoVmFsdWUiLCJjb21wYXJlZCIsInVuZGVmaW5lZCIsIm9iakN0b3IiLCJjb25zdHJ1Y3RvciIsIm90aEN0b3IiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQSxJQUFJQSxVQUFVLEdBQUdDLE9BQU8saUJBQXhCOztBQUdBLElBQUlDLG9CQUFvQixHQUFHLENBQTNCO0FBR0EsSUFBSUMsV0FBVyxHQUFHQyxNQUFNLENBQUNDLFNBQXpCO0FBR0EsSUFBSUMsY0FBYyxHQUFHSCxXQUFXLENBQUNHLGNBQWpDOztBQWVBLFNBQVNDLFlBQVQsQ0FBc0JDLE1BQXRCLEVBQThCQyxLQUE5QixFQUFxQ0MsT0FBckMsRUFBOENDLFVBQTlDLEVBQTBEQyxTQUExRCxFQUFxRUMsS0FBckUsRUFBNEU7QUFDMUUsTUFBSUMsU0FBUyxHQUFHSixPQUFPLEdBQUdSLG9CQUExQjtBQUFBLE1BQ0lhLFFBQVEsR0FBR2YsVUFBVSxDQUFDUSxNQUFELENBRHpCO0FBQUEsTUFFSVEsU0FBUyxHQUFHRCxRQUFRLENBQUNFLE1BRnpCO0FBQUEsTUFHSUMsUUFBUSxHQUFHbEIsVUFBVSxDQUFDUyxLQUFELENBSHpCO0FBQUEs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QUFDLFFBQUQsQ0FBTCxDQUFnQkosS0FBaEI7QUFDQSxTQUFPaUIsTUFBUDtBQUNEOztBQUVEVSxNQUFNLENBQUNDLE9BQVAsR0FBaUI5QixZQUFqQiIsInNvdXJjZXNDb250ZW50IjpbInZhciBnZXRBbGxLZXlzID0gcmVxdWlyZSgnLi9fZ2V0QWxsS2V5cycpO1xuXG4vKiogVXNlZCB0byBjb21wb3NlIGJpdG1hc2tzIGZvciB2YWx1ZSBjb21wYXJpc29ucy4gKi9cbnZhciBDT01QQVJFX1BBUlRJQUxfRkxBRyA9IDE7XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xudmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlSXNFcXVhbERlZXBgIGZvciBvYmplY3RzIHdpdGggc3VwcG9ydCBmb3JcbiAqIHBhcnRpYWwgZGVlcCBjb21wYXJpc29ucy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGNvbXBhcmUuXG4gKiBAcGFyYW0ge09iamVjdH0gb3RoZXIgVGhlIG90aGVyIG9iamVjdCB0byBjb21wYXJlLlxuICogQHBhcmFtIHtudW1iZXJ9IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuIFNlZSBgYmFzZUlzRXF1YWxgIGZvciBtb3JlIGRldGFpbHMuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjdXN0b21pemVyIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY29tcGFyaXNvbnMuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBlcXVhbEZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGRldGVybWluZSBlcXVpdmFsZW50cyBvZiB2YWx1ZXMuXG4gKiBAcGFyYW0ge09iamVjdH0gc3RhY2sgVHJhY2tzIHRyYXZlcnNlZCBgb2JqZWN0YCBhbmQgYG90aGVyYCBvYmplY3RzLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBvYmplY3RzIGFyZSBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGVxdWFsT2JqZWN0cyhvYmplY3QsIG90aGVyLCBiaXRtYXNrLCBjdXN0b21pemVyLCBlcXVhbEZ1bmMsIHN0YWNrKSB7XG4gIHZhciBpc1BhcnRpYWwgPSBiaXRtYXNrICYgQ09NUEFSRV9QQVJUSUFMX0ZMQUcsXG4gICAgICBvYmpQcm9wcyA9IGdldEFsbEtleXMob2JqZWN0KSxcbiAgICAgIG9iakxlbmd0aCA9IG9ialByb3BzLmxlbmd0aCxcbiAgICAgIG90aFByb3BzID0gZ2V0QWxsS2V5cyhvdGhlciksXG4gICAgICBvdGhMZW5ndGggPSBvdGhQcm9wcy5sZW5ndGg7XG5cbiAgaWYgKG9iakxlbmd0aCAhPSBvdGhMZW5ndGggJiYgIWlzUGFydGlhbCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICB2YXIgaW5kZXggPSBvYmpMZW5ndGg7XG4gIHdoaWxlIChpbmRleC0tKSB7XG4gICAgdmFyIGtleSA9IG9ialByb3BzW2luZGV4XTtcbiAgICBpZiAoIShpc1BhcnRpYWwgPyBrZXkgaW4gb3RoZXIgOiBoYXNPd25Qcm9wZXJ0eS5jYWxsKG90aGVyLCBrZXkpKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuICAvLyBDaGVjayB0aGF0IGN5Y2xpYyB2YWx1ZXMgYXJlIGVxdWFsLlxuICB2YXIgb2JqU3RhY2tlZCA9IHN0YWNrLmdldChvYmplY3QpO1xuICB2YXIgb3RoU3RhY2tlZCA9IHN0YWNrLmdldChvdGhlcik7XG4gIGlmIChvYmpTdGFja2VkICYmIG90aFN0YWNrZWQpIHtcbiAgICByZXR1cm4gb2JqU3RhY2tlZCA9PSBvdGhlciAmJiBvdGhTdGFja2VkID09IG9iamVjdDtcbiAgfVxuICB2YXIgcmVzdWx0ID0gdHJ1ZTtcbiAgc3RhY2suc2V0KG9iamVjdCwgb3RoZXIpO1xuICBzdGFjay5zZXQob3RoZXIsIG9iamVjdCk7XG5cbiAgdmFyIHNraXBDdG9yID0gaXNQYXJ0aWFsO1xuICB3aGlsZSAoKytpbmRleCA8IG9iakxlbmd0aCkge1xuICAgIGtleSA9IG9ialByb3BzW2luZGV4XTtcbiAgICB2YXIgb2JqVmFsdWUgPSBvYmplY3Rba2V5XSxcbiAgICAgICAgb3RoVmFsdWUgPSBvdGhlcltrZXldO1xuXG4gICAgaWYgKGN1c3RvbWl6ZXIpIHtcbiAgICAgIHZhciBjb21wYXJlZCA9IGlzUGFydGlhbFxuICAgICAgICA/IGN1c3RvbWl6ZXIob3RoVmFsdWUsIG9ialZhbHVlLCBrZXksIG90aGVyLCBvYmplY3QsIHN0YWNrKVxuICAgICAgICA6IGN1c3RvbWl6ZXIob2JqVmFsdWUsIG90aFZhbHVlLCBrZXksIG9iamVjdCwgb3RoZXIsIHN0YWNrKTtcbiAgICB9XG4gICAgLy8gUmVjdXJzaXZlbHkgY29tcGFyZSBvYmplY3RzIChzdXNjZXB0aWJsZSB0byBjYWxsIHN0YWNrIGxpbWl0cykuXG4gICAgaWYgKCEoY29tcGFyZWQgPT09IHVuZGVmaW5lZFxuICAgICAgICAgID8gKG9ialZhbHVlID09PSBvdGhWYWx1ZSB8fCBlcXVhbEZ1bmMob2JqVmFsdWUsIG90aFZhbHVlLCBiaXRtYXNrLCBjdXN0b21pemVyLCBzdGFjaykpXG4gICAgICAgICAgOiBjb21wYXJlZFxuICAgICAgICApKSB7XG4gICAgICByZXN1bHQgPSBmYWxzZTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBza2lwQ3RvciB8fCAoc2tpcEN0b3IgPSBrZXkgPT0gJ2NvbnN0cnVjdG9yJyk7XG4gIH1cbiAgaWYgKHJlc3VsdCAmJiAhc2tpcEN0b3IpIHtcbiAgICB2YXIgb2JqQ3RvciA9IG9iamVjdC5jb25zdHJ1Y3RvcixcbiAgICAgICAgb3RoQ3RvciA9IG90aGVyLmNvbnN0cnVjdG9yO1xuXG4gICAgLy8gTm9uIGBPYmplY3RgIG9iamVjdCBpbnN0YW5jZXMgd2l0aCBkaWZmZXJlbnQgY29uc3RydWN0b3JzIGFyZSBub3QgZXF1YWwuXG4gICAgaWYgKG9iakN0b3IgIT0gb3RoQ3RvciAmJlxuICAgICAgICAoJ2NvbnN0cnVjdG9yJyBpbiBvYmplY3QgJiYgJ2NvbnN0cnVjdG9yJyBpbiBvdGhlcikgJiZcbiAgICAgICAgISh0eXBlb2Ygb2JqQ3RvciA9PSAnZnVuY3Rpb24nICYmIG9iakN0b3IgaW5zdGFuY2VvZiBvYmpDdG9yICYmXG4gICAgICAgICAgdHlwZW9mIG90aEN0b3IgPT0gJ2Z1bmN0aW9uJyAmJiBvdGhDdG9yIGluc3RhbmNlb2Ygb3RoQ3RvcikpIHtcbiAgICAgIHJlc3VsdCA9IGZhbHNlO1xuICAgIH1cbiAgfVxuICBzdGFja1snZGVsZXRlJ10ob2JqZWN0KTtcbiAgc3RhY2tbJ2RlbGV0ZSddKG90aGVyKTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBlcXVhbE9iamVjdHM7XG4iXX0=