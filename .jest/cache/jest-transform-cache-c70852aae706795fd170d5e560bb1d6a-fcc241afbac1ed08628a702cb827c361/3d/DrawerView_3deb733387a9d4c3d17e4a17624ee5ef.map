{"version":3,"mappings":";;;;;;;;;;;;;;;;;;AAAA;;AAMA;;AAOA;;AACA;;AAOA;;AACA;;AAWA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AASA,IAAMA,qBAAqB,GAAG,SAAxBA,qBAAwB,OAMxB;AAAA,MALJC,MAKI,QALJA,MAKI;AAAA,MAJJC,KAII,QAJJA,KAII;AAMJ,MAAMC,eAAe,GAAGC,IAAI,CAACC,GAALD,CAASH,MAATG,EAAiBF,KAAjBE,CAAxB;AACA,MAAME,WAAW,GAAGJ,KAAK,GAAGD,MAA5B;AACA,MAAMM,QAAQ,GAAGJ,eAAe,IAAI,GAApC;AACA,MAAMK,YAAY,GAAGC,sBAASC,EAATD,KAAgB,KAAhBA,GAAyBH,WAAW,GAAG,EAAH,GAAQ,EAA5CG,GAAkD,EAAvE;AACA,MAAME,QAAQ,GAAGJ,QAAQ,GAAG,GAAH,GAAS,GAAlC;AAEA,SAAOH,IAAI,CAACC,GAALD,CAASD,eAAe,GAAGK,YAA3BJ,EAAyCO,QAAzCP,CAAP;AAlBF;;AAqBA,IAAMQ,qBAAqB,GAAGC,2CAAH,IAAGA,+CAAH,MAAGA,4CAA0BC,iBAAxD;;AAEA,SAASC,cAAT,QAiBU;AAAA;;AAAA,MAhBRC,KAgBQ,SAhBRA,KAgBQ;AAAA,MAfRC,UAeQ,SAfRA,UAeQ;AAAA,MAdRC,WAcQ,SAdRA,WAcQ;AAAA,MAbRC,aAaQ,SAbRA,aAaQ;AAAA,kCAZRC,aAYQ;AAAA,MAZRA,aAYQ,oCAZSC,eAAD;AAAA,WACdC,oBAACC,sBAAD,EAAmBF,KAAnB,CADc;AAAA,GAYR;AAAA,oCATRG,qBASQ;AAAA,MATRA,qBASQ,sCATgBf,sBAASC,EAATD,KAAgB,KAAhBA,IACtBA,sBAASC,EAATD,KAAgB,SADMA,IAEtBA,sBAASC,EAATD,KAAgB,KAOV;AAAA,oCAJRgB,uBAIQ;AAAA,MAJRA,uBAIQ,sCAJkB,CAACC,MAAM,CAACC,kBAAR,IAGxB,2BAACC,UAAU,CAACC,YAAZ,kDAACC,sCAAD,CACM;AACR,MAAMC,MAAwC,GAAGN,uBAAuB,GACpEO,OAAO,mBAAPA,CAA2BC,OADyC,GAEpED,OAAO,mBAAPA,CAA2BC,OAF/B;AAIA,MAAMC,eAAe,GAAGlB,KAAK,CAACmB,MAANnB,CAAaA,KAAK,CAACoB,KAAnBpB,EAA0BqB,GAAlD;AACA,8BAcInB,WAAW,CAACgB,eAAD,CAAXhB,CAA6BoB,OAdjC;AAAA,qDACEC,yBADF;AAAA,MACEA,yBADF,uCAC8B,KAD9B;AAAA,qDAEEC,cAFF;AAAA,MAEEA,cAFF,uCAEmBC,yBAAYC,KAAZD,GAAoB,OAApBA,GAA8B,MAFjD;AAAA,qDAGEE,wBAHF;AAAA,MAGEA,wBAHF,uCAG6B,OAH7B;AAAA,MAIEC,WAJF,yBAIEA,WAJF;AAAA,qDAKEC,UALF;AAAA,MAKEA,UALF,uCAKepC,sBAASqC,MAATrC,CAAgB;AAAEsC,OAAG,EAAE,OAAP;AAAgBd,WAAO,EAAE;AAAzB,GAAhBxB,CALf;AAAA,MAMEuC,mBANF,yBAMEA,mBANF;AAAA,qDAOEC,mBAPF;AAAA,MAOEA,mBAPF,uCAOwB,SAPxB;AAAA,qDAQEC,YARF;AAAA,MAQEA,YARF,uCAQiB,oBARjB;AAAA,qDASEC,cATF;AAAA,MASEA,cATF,uCASmB,EATnB;AAAA,qDAUEC,YAVF;AAAA,MAUEA,YAVF,uCAUiB3C,sBAASC,EAATD,KAAgB,KAAhBA,IACbA,sBAASC,EAATD,KAAgB,SADHA,IAEbA,sBAASC,EAATD,KAAgB,OAZpB;AAAA,sDAaE4C,gBAbF;AAAA,MAaEA,gBAbF,wCAaqB,EAbrB;;AAgBA,wBAA4B/B,KAAK,CAACgC,QAANhC,CAAe,CAACY,eAAD,CAAfZ,CAA5B;AAAA;AAAA,MAAOiC,MAAP;AAAA,MAAeC,SAAf;;AAEA,MAAI,CAACD,MAAM,CAACE,QAAPF,CAAgBrB,eAAhBqB,CAAL,EAAuC;AACrCC,aAAS,4CAAKD,MAAL,IAAarB,eAAb,GAATsB;AACD;;AAED,MAAME,UAAU,GAAG,mDAAnB;;AAEA,cAAmB,uBAAnB;AAAA,MAAQC,MAAR,SAAQA,MAAR;;AAEA,MAAMC,YAAY,GAAG,uCAAyB5C,KAAzB,CAArB;AAEA,MAAM6C,gBAAgB,GAAGvC,KAAK,CAACwC,WAANxC,CAAkB,YAAM;AAC/CL,cAAU,CAAC8C,QAAX9C,4BACK+C,sBAAcC,UAAdD,EADL/C;AAEEiD,YAAM,EAAElD,KAAK,CAACqB;AAFhBpB;AADuB,KAKtB,CAACA,UAAD,EAAaD,KAAK,CAACqB,GAAnB,CALsBf,CAAzB;AAOA,MAAM6C,iBAAiB,GAAG7C,KAAK,CAACwC,WAANxC,CAAkB,YAAM;AAChDL,cAAU,CAAC8C,QAAX9C,4BACK+C,sBAAcI,WAAdJ,EADL/C;AAEEiD,YAAM,EAAElD,KAAK,CAACqB;AAFhBpB;AADwB,KAKvB,CAACA,UAAD,EAAaD,KAAK,CAACqB,GAAnB,CALuBf,CAA1B;AAOAA,OAAK,CAAC+C,SAAN/C,CAAgB,YAAM;AACpB,QAAIsC,YAAY,KAAKzC,aAAjByC,IAAkCf,UAAU,KAAK,WAArD,EAAkE;AAChE;AACD;;AAED,QAAMyB,kBAAkB,GAAG,SAArBA,kBAAqB,GAAM;AAG/B,UAAI,CAACrD,UAAU,CAACsD,SAAXtD,EAAL,EAA6B;AAC3B,eAAO,KAAP;AACD;;AAED,UAAIE,aAAa,KAAK,MAAtB,EAA8B;AAC5B0C,wBAAgB;AADlB,aAEO;AACLM,yBAAiB;AAClB;;AAED,aAAO,IAAP;AAbF;;AAgBA,QAAMK,YAAY,GAAIC,SAAhBD,YAAgBC,EAAD,EAAsB;AACzC,UAAIA,CAAC,CAACpC,GAAFoC,KAAU,QAAd,EAAwB;AACtBH,0BAAkB;AACnB;AAHH;;AASA,QAAMI,YAAY,GAAGC,yBAAYC,gBAAZD,CACnB,mBADmBA,EAEnBL,kBAFmBK,CAArB;;AAKA,QAAIlE,sBAASC,EAATD,KAAgB,KAApB,EAA2B;AAAA;;AACzB,iCAAQ,IAAR,gEAAUoE,IAAV,2FAAgBD,gBAAhB,qGAAmC,OAAnC,EAA4CJ,YAA5C;AACD;;AAED,WAAO,YAAM;AACXE,kBAAY,CAACI,MAAbJ;;AAEA,UAAIjE,sBAASC,EAATD,KAAgB,KAApB,EAA2B;AAAA;;AACzB,oCAAQ,IAAR,mEAAUoE,IAAV,6FAAgBE,mBAAhB,sGAAsC,OAAtC,EAA+CP,YAA/C;AACD;AALH;AAvCF,KA8CG,CACDrD,aADC,EAEDyC,YAFC,EAGDf,UAHC,EAIDsB,iBAJC,EAKDN,gBALC,EAMD5C,UANC,CA9CHK;;AAuDA,MAAM0D,mBAAmB,GAAG,SAAtBA,mBAAsB,GAAM;AAChC,WACE1D,oBAAC2D,+BAAsBC,QAAvB;AAAgCC,WAAK,EAAE3C;AAAvC,OACGpB,aAAa,CAAC;AACbJ,WAAK,EAAEA,KADM;AAEbC,gBAAU,EAAEA,UAFC;AAGbC,iBAAW,EAAEA;AAHA,KAAD,CADhB,CADF;AADF;;AAYA,MAAMkE,kBAAkB,GAAG,SAArBA,kBAAqB,GAAM;AAC/B,WACE9D,oBAAC+D,oCAAD;AACEC,aAAO,EAAE9D,qBADX;AAEE+D,kBAAY,MAFd;AAGEC,WAAK,EAAEC,MAAM,CAACC;AAHhB,OAKG1E,KAAK,CAACmB,MAANnB,CAAa2E,GAAb3E,CAAiB,UAAC4E,KAAD,EAAQxD,KAAR,EAAkB;AAClC,UAAMyD,UAAU,GAAG3E,WAAW,CAAC0E,KAAK,CAACvD,GAAP,CAA9B;AACA,gCAAuCwD,UAAU,CAACvD,OAAlD;AAAA,sDAAQwD,IAAR;AAAA,UAAQA,IAAR,sCAAe,IAAf;AAAA,UAAqBC,aAArB,uBAAqBA,aAArB;AACA,UAAMxB,SAAS,GAAGvD,KAAK,CAACoB,KAANpB,KAAgBoB,KAAlC;;AAEA,UAAI2D,aAAa,IAAI,CAACxB,SAAtB,EAAiC;AAC/B,eAAO,IAAP;AACD;;AAED,UAAIuB,IAAI,IAAI,CAACvC,MAAM,CAACE,QAAPF,CAAgBqC,KAAK,CAACvD,GAAtBkB,CAATuC,IAAuC,CAACvB,SAA5C,EAAuD;AAErD,eAAO,IAAP;AACD;;AAED,iCAaIsB,UAAU,CAACvD,OAbf;AAAA,uDACE0D,MADF;AAAA,UACEA,MADF,sCACW;AAAA;;AAAA,YAAGC,MAAH,SAAGA,MAAH;AAAA,YAAW3D,OAAX,SAAWA,OAAX;AAAA,eACPhB,oBAAC4E,gBAAD,eACM5D,OADN;AAEE2D,gBAAM,EAAEA,MAFV;AAGEE,eAAK,EAAE,8BAAe7D,OAAf,EAAwBsD,KAAK,CAACQ,IAA9B,CAHT;AAIEC,oBAAU,yBACR/D,OAAO,CAAC+D,UADA,qEAENhF,eAAD;AAAA,mBAAWC,oBAACgF,2BAAD,EAAwBjF,KAAxB,CAAX;AAAA;AANL,WADO;AADL,OAAN;AAAA,UAYEkF,mBAZF,wBAYEA,mBAZF;AAeA,aACEjF,oBAAC+D,2BAAD;AACEhD,WAAG,EAAEuD,KAAK,CAACvD,GADb;AAEEmD,aAAK,EAAE,CAACgB,wBAAWC,YAAZ,EAA0B;AAAEC,gBAAM,EAAEnC,SAAS,GAAG,CAAH,GAAO,CAAC;AAA3B,SAA1B,CAFT;AAGEoC,eAAO,EAAEpC,SAHX;AAIEe,eAAO,EAAE9D;AAJX,SAMEF,oBAAC4E,gBAAD;AACEU,eAAO,EAAErC,SADX;AAEEqB,aAAK,EAAEC,UAAU,CAACD,KAFpB;AAGE3E,kBAAU,EAAE4E,UAAU,CAAC5E,UAHzB;AAIE4F,mBAAW,EAAEhB,UAAU,CAACvD,OAAXuD,CAAmBgB,WAJlC;AAKEC,yBAAiB,EAAEjB,UAAU,CAACvD,OAAXuD,CAAmBiB,iBALxC;AAMEC,6BAAqB,EAAElB,UAAU,CAACvD,OAAXuD,CAAmBkB,qBAN5C;AAOEf,cAAM,EAAEA,MAAM,CAAC;AACbC,gBAAM,EAAEvC,UADK;AAEbkC,eAAK,EAAEC,UAAU,CAACD,KAFL;AAGb3E,oBAAU,EACR4E,UAAU,CAAC5E,UAJA;AAKbqB,iBAAO,EAAEuD,UAAU,CAACvD;AALP,SAAD,CAPhB;AAcEkD,aAAK,EAAEe;AAdT,SAgBGV,UAAU,CAACmB,MAAXnB,EAhBH,CANF,CADF;AA7BD,MALH,CADF;AADF;;AAoEA,SACEvE,oBAAC2F,6BAAoB/B,QAArB;AAA8BC,SAAK,EAAEvB;AAArC,KACEtC,oBAACS,MAAD;AACEmF,QAAI,EAAEtD,YAAY,KAAK,QADzB;AAEEuD,UAAM,EAAEtD,gBAFV;AAGEuD,WAAO,EAAEjD,iBAHX;AAIEnB,uBAAmB,EAAEA,mBAJvB;AAKEI,gBAAY,EAAEA,YALhB;AAMED,kBAAc,EAAEA,cANlB;AAOEkE,0BAAsB,EAAE,GAP1B;AAQEC,0BAAsB,EAAEjE,gBAR1B;AASEkE,uBAAmB,EAAEhF,yBATvB;AAUEiF,sBAAkB,EAAE7E,wBAVtB;AAWEM,uBAAmB,EAAEA,mBAXvB;AAYEJ,cAAU,EAAEA,UAZd;AAaEL,kBAAc,EAAEA,cAblB;AAcEI,eAAW,EAAE,CACX;AACE1C,WAAK,EAAEF,qBAAqB,CAAC0D,UAAD,CAD9B;AAEE+D,qBAAe,EAAE9D,MAAM,CAAC+D;AAF1B,KADW,EAKX7E,UAAU,KAAK,WAAfA,KACGL,cAAc,KAAK,MAAnBA,GACG;AACEmF,sBAAgB,EAAEhE,MAAM,CAACiE,MAD3B;AAEEC,sBAAgB,EAAErB,wBAAWsB;AAF/B,KADHtF,GAKG;AACEuF,qBAAe,EAAEpE,MAAM,CAACiE,MAD1B;AAEEI,qBAAe,EAAExB,wBAAWsB;AAF9B,KANNjF,CALW,EAeXD,WAfW,CAdf;AA+BEqF,gBAAY,EAAE;AAAER,qBAAe,EAAEvE;AAAnB,KA/BhB;AAgCE8B,uBAAmB,EAAEA,mBAhCvB;AAiCEI,sBAAkB,EAAEA,kBAjCtB;AAkCE1B,cAAU,EAAEA;AAlCd,IADF,CADF;AAwCD;;AAEc,SAASwE,UAAT,QAAoD;AAAA,MAA9BjH,UAA8B,SAA9BA,UAA8B;AAAA,MAAfkH,IAAe;AACjE,SACE7G,oBAAC4E,gCAAD,QACE5E,oBAACV,qBAAD;AAAuB4E,SAAK,EAAEC,MAAM,CAACC;AAArC,KACEpE,oBAACP,cAAD;AAAgBE,cAAU,EAAEA;AAA5B,KAA4CkH,IAA5C,EADF,CADF,CADF;AAOD;;AAED,IAAM1C,MAAM,GAAGe,wBAAW4B,MAAX5B,CAAkB;AAC/Bd,SAAO,EAAE;AACP2C,QAAI,EAAE;AADC;AADsB,CAAlB7B,CAAf","names":["getDefaultDrawerWidth","height","width","smallerAxisSize","Math","min","isLandscape","isTablet","appBarHeight","Platform","OS","maxWidth","GestureHandlerWrapper","GestureHandlerRootView","View","DrawerViewBase","state","navigation","descriptors","defaultStatus","drawerContent","props","React","_DrawerContent","detachInactiveScreens","useLegacyImplementation","global","nativeCallSyncHook","Reanimated","isConfigured","_Reanimated$isConfigu","Drawer","require","default","focusedRouteKey","routes","index","key","options","drawerHideStatusBarOnOpen","drawerPosition","I18nManager","isRTL","drawerStatusBarAnimation","drawerStyle","drawerType","select","ios","gestureHandlerProps","keyboardDismissMode","overlayColor","swipeEdgeWidth","swipeEnabled","swipeMinDistance","useState","loaded","setLoaded","includes","dimensions","colors","drawerStatus","handleDrawerOpen","useCallback","dispatch","DrawerActions","openDrawer","target","handleDrawerClose","closeDrawer","useEffect","handleHardwareBack","isFocused","handleEscape","e","subscription","BackHandler","addEventListener","body","remove","removeEventListener","renderDrawerContent","_DrawerPositionContext","Provider","value","renderSceneContent","_ScreenFallback","enabled","hasTwoStates","style","styles","content","map","route","descriptor","lazy","unmountOnBlur","header","layout","_elements","title","name","headerLeft","_DrawerToggleButton","sceneContainerStyle","StyleSheet","absoluteFill","zIndex","visible","focused","headerShown","headerTransparent","headerStatusBarHeight","render","_DrawerStatusContext","open","onOpen","onClose","swipeVelocityThreshold","swipeDistanceThreshold","hideStatusBarOnOpen","statusBarAnimation","backgroundColor","card","borderRightColor","border","borderRightWidth","hairlineWidth","borderLeftColor","borderLeftWidth","overlayStyle","DrawerView","rest","create","flex"],"sources":["DrawerView.tsx"],"sourcesContent":["import {\n  getHeaderTitle,\n  Header,\n  SafeAreaProviderCompat,\n  Screen,\n} from '@react-navigation/elements';\nimport {\n  DrawerActions,\n  DrawerNavigationState,\n  DrawerStatus,\n  ParamListBase,\n  useTheme,\n} from '@react-navigation/native';\nimport * as React from 'react';\nimport {\n  BackHandler,\n  I18nManager,\n  Platform,\n  StyleSheet,\n  View,\n} from 'react-native';\nimport * as Reanimated from 'react-native-reanimated';\nimport { useSafeAreaFrame } from 'react-native-safe-area-context';\n\nimport type {\n  DrawerContentComponentProps,\n  DrawerDescriptorMap,\n  DrawerHeaderProps,\n  DrawerNavigationConfig,\n  DrawerNavigationHelpers,\n  DrawerNavigationProp,\n  DrawerProps,\n} from '../types';\nimport DrawerPositionContext from '../utils/DrawerPositionContext';\nimport DrawerStatusContext from '../utils/DrawerStatusContext';\nimport getDrawerStatusFromState from '../utils/getDrawerStatusFromState';\nimport DrawerContent from './DrawerContent';\nimport DrawerToggleButton from './DrawerToggleButton';\nimport { GestureHandlerRootView } from './GestureHandler';\nimport { MaybeScreen, MaybeScreenContainer } from './ScreenFallback';\n\ntype Props = DrawerNavigationConfig & {\n  defaultStatus: DrawerStatus;\n  state: DrawerNavigationState<ParamListBase>;\n  navigation: DrawerNavigationHelpers;\n  descriptors: DrawerDescriptorMap;\n};\n\nconst getDefaultDrawerWidth = ({\n  height,\n  width,\n}: {\n  height: number;\n  width: number;\n}) => {\n  /*\n   * Default drawer width is screen width - header height\n   * with a max width of 280 on mobile and 320 on tablet\n   * https://material.io/components/navigation-drawer\n   */\n  const smallerAxisSize = Math.min(height, width);\n  const isLandscape = width > height;\n  const isTablet = smallerAxisSize >= 600;\n  const appBarHeight = Platform.OS === 'ios' ? (isLandscape ? 32 : 44) : 56;\n  const maxWidth = isTablet ? 320 : 280;\n\n  return Math.min(smallerAxisSize - appBarHeight, maxWidth);\n};\n\nconst GestureHandlerWrapper = GestureHandlerRootView ?? View;\n\nfunction DrawerViewBase({\n  state,\n  navigation,\n  descriptors,\n  defaultStatus,\n  drawerContent = (props: DrawerContentComponentProps) => (\n    <DrawerContent {...props} />\n  ),\n  detachInactiveScreens = Platform.OS === 'web' ||\n    Platform.OS === 'android' ||\n    Platform.OS === 'ios',\n  // Running in chrome debugger\n  // @ts-expect-error\n  useLegacyImplementation = !global.nativeCallSyncHook ||\n    // Reanimated 2 is not configured\n    // @ts-expect-error: the type definitions are incomplete\n    !Reanimated.isConfigured?.(),\n}: Props) {\n  const Drawer: React.ComponentType<DrawerProps> = useLegacyImplementation\n    ? require('./legacy/Drawer').default\n    : require('./modern/Drawer').default;\n\n  const focusedRouteKey = state.routes[state.index].key;\n  const {\n    drawerHideStatusBarOnOpen = false,\n    drawerPosition = I18nManager.isRTL ? 'right' : 'left',\n    drawerStatusBarAnimation = 'slide',\n    drawerStyle,\n    drawerType = Platform.select({ ios: 'slide', default: 'front' }),\n    gestureHandlerProps,\n    keyboardDismissMode = 'on-drag',\n    overlayColor = 'rgba(0, 0, 0, 0.5)',\n    swipeEdgeWidth = 32,\n    swipeEnabled = Platform.OS !== 'web' &&\n      Platform.OS !== 'windows' &&\n      Platform.OS !== 'macos',\n    swipeMinDistance = 60,\n  } = descriptors[focusedRouteKey].options;\n\n  const [loaded, setLoaded] = React.useState([focusedRouteKey]);\n\n  if (!loaded.includes(focusedRouteKey)) {\n    setLoaded([...loaded, focusedRouteKey]);\n  }\n\n  const dimensions = useSafeAreaFrame();\n\n  const { colors } = useTheme();\n\n  const drawerStatus = getDrawerStatusFromState(state);\n\n  const handleDrawerOpen = React.useCallback(() => {\n    navigation.dispatch({\n      ...DrawerActions.openDrawer(),\n      target: state.key,\n    });\n  }, [navigation, state.key]);\n\n  const handleDrawerClose = React.useCallback(() => {\n    navigation.dispatch({\n      ...DrawerActions.closeDrawer(),\n      target: state.key,\n    });\n  }, [navigation, state.key]);\n\n  React.useEffect(() => {\n    if (drawerStatus === defaultStatus || drawerType === 'permanent') {\n      return;\n    }\n\n    const handleHardwareBack = () => {\n      // We shouldn't handle the back button if the parent screen isn't focused\n      // This will avoid the drawer overriding event listeners from a focused screen\n      if (!navigation.isFocused()) {\n        return false;\n      }\n\n      if (defaultStatus === 'open') {\n        handleDrawerOpen();\n      } else {\n        handleDrawerClose();\n      }\n\n      return true;\n    };\n\n    const handleEscape = (e: KeyboardEvent) => {\n      if (e.key === 'Escape') {\n        handleHardwareBack();\n      }\n    };\n\n    // We only add the listeners when drawer opens\n    // This way we can make sure that the listener is added as late as possible\n    // This will make sure that our handler will run first when back button is pressed\n    const subscription = BackHandler.addEventListener(\n      'hardwareBackPress',\n      handleHardwareBack\n    );\n\n    if (Platform.OS === 'web') {\n      document?.body?.addEventListener?.('keyup', handleEscape);\n    }\n\n    return () => {\n      subscription.remove();\n\n      if (Platform.OS === 'web') {\n        document?.body?.removeEventListener?.('keyup', handleEscape);\n      }\n    };\n  }, [\n    defaultStatus,\n    drawerStatus,\n    drawerType,\n    handleDrawerClose,\n    handleDrawerOpen,\n    navigation,\n  ]);\n\n  const renderDrawerContent = () => {\n    return (\n      <DrawerPositionContext.Provider value={drawerPosition}>\n        {drawerContent({\n          state: state,\n          navigation: navigation,\n          descriptors: descriptors,\n        })}\n      </DrawerPositionContext.Provider>\n    );\n  };\n\n  const renderSceneContent = () => {\n    return (\n      <MaybeScreenContainer\n        enabled={detachInactiveScreens}\n        hasTwoStates\n        style={styles.content}\n      >\n        {state.routes.map((route, index) => {\n          const descriptor = descriptors[route.key];\n          const { lazy = true, unmountOnBlur } = descriptor.options;\n          const isFocused = state.index === index;\n\n          if (unmountOnBlur && !isFocused) {\n            return null;\n          }\n\n          if (lazy && !loaded.includes(route.key) && !isFocused) {\n            // Don't render a lazy screen if we've never navigated to it\n            return null;\n          }\n\n          const {\n            header = ({ layout, options }: DrawerHeaderProps) => (\n              <Header\n                {...options}\n                layout={layout}\n                title={getHeaderTitle(options, route.name)}\n                headerLeft={\n                  options.headerLeft ??\n                  ((props) => <DrawerToggleButton {...props} />)\n                }\n              />\n            ),\n            sceneContainerStyle,\n          } = descriptor.options;\n\n          return (\n            <MaybeScreen\n              key={route.key}\n              style={[StyleSheet.absoluteFill, { zIndex: isFocused ? 0 : -1 }]}\n              visible={isFocused}\n              enabled={detachInactiveScreens}\n            >\n              <Screen\n                focused={isFocused}\n                route={descriptor.route}\n                navigation={descriptor.navigation}\n                headerShown={descriptor.options.headerShown}\n                headerTransparent={descriptor.options.headerTransparent}\n                headerStatusBarHeight={descriptor.options.headerStatusBarHeight}\n                header={header({\n                  layout: dimensions,\n                  route: descriptor.route,\n                  navigation:\n                    descriptor.navigation as DrawerNavigationProp<ParamListBase>,\n                  options: descriptor.options,\n                })}\n                style={sceneContainerStyle}\n              >\n                {descriptor.render()}\n              </Screen>\n            </MaybeScreen>\n          );\n        })}\n      </MaybeScreenContainer>\n    );\n  };\n\n  return (\n    <DrawerStatusContext.Provider value={drawerStatus}>\n      <Drawer\n        open={drawerStatus !== 'closed'}\n        onOpen={handleDrawerOpen}\n        onClose={handleDrawerClose}\n        gestureHandlerProps={gestureHandlerProps}\n        swipeEnabled={swipeEnabled}\n        swipeEdgeWidth={swipeEdgeWidth}\n        swipeVelocityThreshold={500}\n        swipeDistanceThreshold={swipeMinDistance}\n        hideStatusBarOnOpen={drawerHideStatusBarOnOpen}\n        statusBarAnimation={drawerStatusBarAnimation}\n        keyboardDismissMode={keyboardDismissMode}\n        drawerType={drawerType}\n        drawerPosition={drawerPosition}\n        drawerStyle={[\n          {\n            width: getDefaultDrawerWidth(dimensions),\n            backgroundColor: colors.card,\n          },\n          drawerType === 'permanent' &&\n            (drawerPosition === 'left'\n              ? {\n                  borderRightColor: colors.border,\n                  borderRightWidth: StyleSheet.hairlineWidth,\n                }\n              : {\n                  borderLeftColor: colors.border,\n                  borderLeftWidth: StyleSheet.hairlineWidth,\n                }),\n          drawerStyle,\n        ]}\n        overlayStyle={{ backgroundColor: overlayColor }}\n        renderDrawerContent={renderDrawerContent}\n        renderSceneContent={renderSceneContent}\n        dimensions={dimensions}\n      />\n    </DrawerStatusContext.Provider>\n  );\n}\n\nexport default function DrawerView({ navigation, ...rest }: Props) {\n  return (\n    <SafeAreaProviderCompat>\n      <GestureHandlerWrapper style={styles.content}>\n        <DrawerViewBase navigation={navigation} {...rest} />\n      </GestureHandlerWrapper>\n    </SafeAreaProviderCompat>\n  );\n}\n\nconst styles = StyleSheet.create({\n  content: {\n    flex: 1,\n  },\n});\n"]}