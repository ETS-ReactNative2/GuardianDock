{"version":3,"mappings":"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","names":["PortalContext","React","createContext","PortalHost","args","_defineProperty","manager","children","key","nextKey","mount","queue","push","type","update","op","index","findIndex","o","unmount","componentDidMount","length","action","pop","render","Provider","value","_reactNative","style","styles","container","collapsable","pointerEvents","props","_PortalManager","ref","setManager","Component","StyleSheet","create","flex"],"sources":["PortalHost.tsx"],"sourcesContent":["import * as React from 'react';\nimport { View, StyleSheet } from 'react-native';\nimport PortalManager from './PortalManager';\n\ntype Props = {\n  children: React.ReactNode;\n};\n\ntype Operation =\n  | { type: 'mount'; key: number; children: React.ReactNode }\n  | { type: 'update'; key: number; children: React.ReactNode }\n  | { type: 'unmount'; key: number };\n\nexport type PortalMethods = {\n  mount: (children: React.ReactNode) => number;\n  update: (key: number, children: React.ReactNode) => void;\n  unmount: (key: number) => void;\n};\n\nexport const PortalContext = React.createContext<PortalMethods>(null as any);\n\n/**\n * Portal host renders all of its children `Portal` elements.\n * For example, you can wrap a screen in `Portal.Host` to render items above the screen.\n * If you're using the `Provider` component, it already includes `Portal.Host`.\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Text } from 'react-native';\n * import { Portal } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <Portal.Host>\n *     <Text>Content of the app</Text>\n *   </Portal.Host>\n * );\n *\n * export default MyComponent;\n * ```\n *\n * Here any `Portal` elements under `<App />` are rendered alongside `<App />` and will appear above `<App />` like a `Modal`.\n */\nexport default class PortalHost extends React.Component<Props> {\n  static displayName = 'Portal.Host';\n\n  componentDidMount() {\n    const manager = this.manager;\n    const queue = this.queue;\n\n    while (queue.length && manager) {\n      const action = queue.pop();\n      if (action) {\n        // eslint-disable-next-line default-case\n        switch (action.type) {\n          case 'mount':\n            manager.mount(action.key, action.children);\n            break;\n          case 'update':\n            manager.update(action.key, action.children);\n            break;\n          case 'unmount':\n            manager.unmount(action.key);\n            break;\n        }\n      }\n    }\n  }\n\n  private setManager = (manager: PortalManager | undefined | null) => {\n    this.manager = manager;\n  };\n\n  private mount = (children: React.ReactNode) => {\n    const key = this.nextKey++;\n\n    if (this.manager) {\n      this.manager.mount(key, children);\n    } else {\n      this.queue.push({ type: 'mount', key, children });\n    }\n\n    return key;\n  };\n\n  private update = (key: number, children: React.ReactNode) => {\n    if (this.manager) {\n      this.manager.update(key, children);\n    } else {\n      const op: Operation = { type: 'mount', key, children };\n      const index = this.queue.findIndex(\n        (o) => o.type === 'mount' || (o.type === 'update' && o.key === key)\n      );\n\n      if (index > -1) {\n        this.queue[index] = op;\n      } else {\n        this.queue.push(op as Operation);\n      }\n    }\n  };\n\n  private unmount = (key: number) => {\n    if (this.manager) {\n      this.manager.unmount(key);\n    } else {\n      this.queue.push({ type: 'unmount', key });\n    }\n  };\n\n  private nextKey = 0;\n  private queue: Operation[] = [];\n  private manager: PortalManager | null | undefined;\n\n  render() {\n    return (\n      <PortalContext.Provider\n        value={{\n          mount: this.mount,\n          update: this.update,\n          unmount: this.unmount,\n        }}\n      >\n        {/* Need collapsable=false here to clip the elevations, otherwise they appear above Portal components */}\n        <View\n          style={styles.container}\n          collapsable={false}\n          pointerEvents=\"box-none\"\n        >\n          {this.props.children}\n        </View>\n        <PortalManager ref={this.setManager} />\n      </PortalContext.Provider>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n});\n"]}