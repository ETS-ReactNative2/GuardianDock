{"version":3,"mappings":"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","names":["InputLabel","props","parentState","labelBackground","labelProps","label","error","onLayoutAnimatedText","hasActiveOutline","activeColor","placeholderStyle","baseLabelTranslateX","baseLabelTranslateY","font","fontSize","fontWeight","placeholderOpacity","wiggleOffsetX","labelScale","topPosition","paddingOffset","placeholderColor","errorColor","labelTranslationXOffset","labelTranslationX","transform","translateX","labeled","interpolate","inputRange","outputRange","labelStyle","value","translateY","scale","_react","_reactNative","View","pointerEvents","style","StyleSheet","absoluteFill","styles","labelContainer","opacity","focused","labelLayout","measured","_AnimatedText","onLayout","top","color","numberOfLines","create","zIndex"],"sources":["InputLabel.tsx"],"sourcesContent":["import React from 'react';\nimport { Animated, StyleSheet } from 'react-native';\nimport AnimatedText from '../../Typography/AnimatedText';\n\nimport type { InputLabelProps } from '../types';\n\nconst InputLabel = (props: InputLabelProps) => {\n  const { parentState, labelBackground } = props;\n\n  const {\n    label,\n    error,\n    onLayoutAnimatedText,\n    hasActiveOutline,\n    activeColor,\n    placeholderStyle,\n    baseLabelTranslateX,\n    baseLabelTranslateY,\n    font,\n    fontSize,\n    fontWeight,\n    placeholderOpacity,\n    wiggleOffsetX,\n    labelScale,\n    topPosition,\n    paddingOffset,\n    placeholderColor,\n    errorColor,\n    labelTranslationXOffset,\n  } = props.labelProps;\n\n  const labelTranslationX = {\n    transform: [\n      {\n        // Offset label scale since RN doesn't support transform origin\n        translateX: parentState.labeled.interpolate({\n          inputRange: [0, 1],\n          outputRange: [baseLabelTranslateX, labelTranslationXOffset || 0],\n        }),\n      },\n    ],\n  };\n\n  const labelStyle = {\n    ...font,\n    fontSize,\n    fontWeight,\n    transform: [\n      {\n        // Wiggle the label when there's an error\n        translateX: parentState.error.interpolate({\n          inputRange: [0, 0.5, 1],\n          outputRange: [0, parentState.value && error ? wiggleOffsetX : 0, 0],\n        }),\n      },\n      {\n        // Move label to top\n        translateY: parentState.labeled.interpolate({\n          inputRange: [0, 1],\n          outputRange: [baseLabelTranslateY, 0],\n        }),\n      },\n      {\n        // Make label smaller\n        scale: parentState.labeled.interpolate({\n          inputRange: [0, 1],\n          outputRange: [labelScale, 1],\n        }),\n      },\n    ],\n  };\n\n  return label ? (\n    // Position colored placeholder and gray placeholder on top of each other and crossfade them\n    // This gives the effect of animating the color, but allows us to use native driver\n    <Animated.View\n      pointerEvents=\"none\"\n      style={[\n        StyleSheet.absoluteFill,\n        styles.labelContainer,\n        {\n          opacity:\n            // Hide the label in minimized state until we measure it's width\n            parentState.value || parentState.focused\n              ? parentState.labelLayout.measured\n                ? 1\n                : 0\n              : 1,\n        },\n        labelTranslationX,\n      ]}\n    >\n      {labelBackground?.({\n        parentState,\n        labelStyle,\n        labelProps: props.labelProps,\n      })}\n      <AnimatedText\n        onLayout={onLayoutAnimatedText}\n        style={[\n          placeholderStyle,\n          {\n            top: topPosition,\n          },\n          labelStyle,\n          paddingOffset || {},\n          {\n            color: activeColor,\n            opacity: parentState.labeled.interpolate({\n              inputRange: [0, 1],\n              outputRange: [hasActiveOutline ? 1 : 0, 0],\n            }),\n          },\n        ]}\n        numberOfLines={1}\n      >\n        {label}\n      </AnimatedText>\n      <AnimatedText\n        style={[\n          placeholderStyle,\n          {\n            top: topPosition,\n          },\n          labelStyle,\n          paddingOffset,\n          {\n            color: error && errorColor ? errorColor : placeholderColor,\n            opacity: placeholderOpacity,\n          },\n        ]}\n        numberOfLines={1}\n      >\n        {label}\n      </AnimatedText>\n    </Animated.View>\n  ) : null;\n};\n\nconst styles = StyleSheet.create({\n  labelContainer: {\n    zIndex: 3,\n  },\n});\n\nexport default InputLabel;\n"]}