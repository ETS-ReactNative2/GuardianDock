{"version":3,"mappings":"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","names":["Animated","Clock","Value","onChange","clockRunning","startClock","stopClock","spring","abs","add","and","block","call","cond","divide","eq","event","greaterThan","lessThan","max","min","multiply","neq","or","set","sub","TRUE","FALSE","NOOP","UNSET","DIRECTION_LEFT","DIRECTION_RIGHT","SWIPE_DISTANCE_MINIMUM","DEFAULT_DRAWER_WIDTH","SPRING_CONFIG","stiffness","damping","mass","overshootClamping","restDisplacementThreshold","restSpeedThreshold","ANIMATED_ZERO","ANIMATED_ONE","DrawerView","_defineProperty","interactionHandle","undefined","InteractionManager","clearInteractionHandle","createInteractionHandle","props","drawerStyle","dimensions","StyleSheet","flatten","width","endsWith","percentage","Number","replace","isFinite","drawerType","open","getDrawerWidth","GestureState","UNDETERMINED","initialDrawerWidth","drawerPosition","isDrawerTypeFront","touchX","gestureX","drawerWidth","containerWidth","swipeDistanceThreshold","swipeVelocityThreshold","isOpen","toValue","frameTime","state","position","time","finished","velocity","clock","velocityX","handleStartInteraction","manuallyTriggerSpring","offsetX","value","Boolean","handleEndInteraction","toggleDrawer","currentOpenValue","onOpen","onClose","pendingOpenValue","forceUpdate","nextIsOpen","isSwiping","keyboardDismissMode","Keyboard","dismiss","toggleStatusBar","gestureState","ACTIVE","touchDistanceFromDrawer","transitionTo","dragX","translateX","nativeEvent","x","translationX","s","e","setValue","layout","requestAnimationFrame","drawerOpacity","hidden","hideStatusBar","hideStatusBarOnOpen","statusBarAnimation","isStatusBarHidden","StatusBar","setHidden","componentDidUpdate","prevProps","componentWillUnmount","render","swipeEnabled","swipeEdgeWidth","overlayStyle","renderDrawerContent","renderSceneContent","gestureHandlerProps","isRight","contentTranslateX","drawerTranslateX","I18nManager","isRTL","offset","hitSlop","right","left","progress","React","_DrawerProgressContext","Provider","_GestureHandler","activeOffsetX","failOffsetY","onGestureEvent","handleGestureEvent","onHandlerStateChange","handleGestureStateChange","enabled","_reactNativeReanimated","View","onLayout","handleContainerLayout","style","styles","main","flexDirection","content","transform","_reactNative","accessibilityElementsHidden","importantForAccessibility","_Overlay","onPress","Code","exec","accessibilityViewIsModal","removeClippedSubviews","Platform","OS","handleDrawerLayout","container","opacity","nonPermanent","zIndex","Component","create","backgroundColor","maxWidth","top","bottom","flex","select","web","default","overflow"],"sources":["Drawer.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  I18nManager,\n  InteractionManager,\n  Keyboard,\n  LayoutChangeEvent,\n  Platform,\n  StatusBar,\n  StyleSheet,\n  View,\n} from 'react-native';\nimport Animated from 'react-native-reanimated';\n\nimport type { DrawerProps } from '../../types';\nimport DrawerProgressContext from '../../utils/DrawerProgressContext';\nimport { GestureState, PanGestureHandler } from '../GestureHandler';\nimport Overlay from './Overlay';\n\nconst {\n  Clock,\n  Value,\n  onChange,\n  clockRunning,\n  startClock,\n  stopClock,\n  spring,\n  abs,\n  add,\n  and,\n  block,\n  call,\n  cond,\n  divide,\n  eq,\n  event,\n  greaterThan,\n  lessThan,\n  max,\n  min,\n  multiply,\n  neq,\n  or,\n  set,\n  sub,\n} = Animated;\n\nconst TRUE = 1;\nconst FALSE = 0;\nconst NOOP = 0;\nconst UNSET = -1;\n\nconst DIRECTION_LEFT = 1;\nconst DIRECTION_RIGHT = -1;\n\nconst SWIPE_DISTANCE_MINIMUM = 5;\n\nconst DEFAULT_DRAWER_WIDTH = '80%';\n\nconst SPRING_CONFIG = {\n  stiffness: 1000,\n  damping: 500,\n  mass: 3,\n  overshootClamping: true,\n  restDisplacementThreshold: 0.01,\n  restSpeedThreshold: 0.01,\n};\n\nconst ANIMATED_ZERO = new Animated.Value(0);\nconst ANIMATED_ONE = new Animated.Value(1);\n\ntype Binary = 0 | 1;\n\nexport default class DrawerView extends React.Component<DrawerProps> {\n  componentDidUpdate(prevProps: DrawerProps) {\n    const {\n      open,\n      drawerPosition,\n      drawerType,\n      swipeDistanceThreshold,\n      swipeVelocityThreshold,\n      hideStatusBarOnOpen: hideStatusBar,\n    } = this.props;\n\n    if (\n      // If we're not in the middle of a transition, sync the drawer's open state\n      typeof this.pendingOpenValue !== 'boolean' ||\n      open !== this.pendingOpenValue\n    ) {\n      this.toggleDrawer(open);\n    }\n\n    this.pendingOpenValue = undefined;\n\n    if (open !== prevProps.open && hideStatusBar) {\n      this.toggleStatusBar(open);\n    }\n\n    if (prevProps.drawerPosition !== drawerPosition) {\n      this.drawerPosition.setValue(\n        drawerPosition === 'right' ? DIRECTION_RIGHT : DIRECTION_LEFT\n      );\n    }\n\n    if (prevProps.drawerType !== drawerType) {\n      this.isDrawerTypeFront.setValue(drawerType === 'front' ? TRUE : FALSE);\n    }\n\n    if (prevProps.swipeDistanceThreshold !== swipeDistanceThreshold) {\n      this.swipeDistanceThreshold.setValue(swipeDistanceThreshold);\n    }\n\n    if (prevProps.swipeVelocityThreshold !== swipeVelocityThreshold) {\n      this.swipeVelocityThreshold.setValue(swipeVelocityThreshold);\n    }\n  }\n\n  componentWillUnmount() {\n    this.toggleStatusBar(false);\n    this.handleEndInteraction();\n  }\n\n  private handleEndInteraction = () => {\n    if (this.interactionHandle !== undefined) {\n      InteractionManager.clearInteractionHandle(this.interactionHandle);\n      this.interactionHandle = undefined;\n    }\n  };\n\n  private handleStartInteraction = () => {\n    if (this.interactionHandle === undefined) {\n      this.interactionHandle = InteractionManager.createInteractionHandle();\n    }\n  };\n\n  private getDrawerWidth = (): number => {\n    const { drawerStyle, dimensions } = this.props;\n    const { width = DEFAULT_DRAWER_WIDTH } =\n      StyleSheet.flatten(drawerStyle) || {};\n\n    if (typeof width === 'string' && width.endsWith('%')) {\n      // Try to calculate width if a percentage is given\n      const percentage = Number(width.replace(/%$/, ''));\n\n      if (Number.isFinite(percentage)) {\n        return dimensions.width * (percentage / 100);\n      }\n    }\n\n    return typeof width === 'number' ? width : 0;\n  };\n\n  private clock = new Clock();\n  private interactionHandle: number | undefined;\n\n  private isDrawerTypeFront = new Value<Binary>(\n    this.props.drawerType === 'front' ? TRUE : FALSE\n  );\n\n  private isOpen = new Value<Binary>(this.props.open ? TRUE : FALSE);\n  private nextIsOpen = new Value<Binary | -1>(UNSET);\n  private isSwiping = new Value<Binary>(FALSE);\n\n  private initialDrawerWidth = this.getDrawerWidth();\n\n  private gestureState = new Value<number>(GestureState.UNDETERMINED);\n  private touchX = new Value<number>(0);\n  private velocityX = new Value<number>(0);\n  private gestureX = new Value<number>(0);\n  private offsetX = new Value<number>(0);\n  private position = new Value<number>(\n    this.props.open\n      ? this.initialDrawerWidth *\n        (this.props.drawerPosition === 'right'\n          ? DIRECTION_RIGHT\n          : DIRECTION_LEFT)\n      : 0\n  );\n\n  private containerWidth = new Value<number>(this.props.dimensions.width);\n  private drawerWidth = new Value<number>(this.initialDrawerWidth);\n  private drawerOpacity = new Value<number>(\n    this.props.drawerType === 'permanent' ? 1 : 0\n  );\n  private drawerPosition = new Value<number>(\n    this.props.drawerPosition === 'right' ? DIRECTION_RIGHT : DIRECTION_LEFT\n  );\n\n  // Comment stolen from react-native-gesture-handler/DrawerLayout\n  //\n  // While closing the drawer when user starts gesture outside of its area (in greyed\n  // out part of the window), we want the drawer to follow only once finger reaches the\n  // edge of the drawer.\n  // E.g. on the diagram below drawer is illustrate by X signs and the greyed out area by\n  // dots. The touch gesture starts at '*' and moves left, touch path is indicated by\n  // an arrow pointing left\n  // 1) +---------------+ 2) +---------------+ 3) +---------------+ 4) +---------------+\n  //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n  //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n  //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n  //    |XXXXXXXX|......|    |XXXXXXXX|.<-*..|    |XXXXXXXX|<--*..|    |XXXXX|<-----*..|\n  //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n  //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n  //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n  //    +---------------+    +---------------+    +---------------+    +---------------+\n  //\n  // For the above to work properly we define animated value that will keep start position\n  // of the gesture. Then we use that value to calculate how much we need to subtract from\n  // the dragX. If the gesture started on the greyed out area we take the distance from the\n  // edge of the drawer to the start position. Otherwise we don't subtract at all and the\n  // drawer be pulled back as soon as you start the pan.\n  //\n  // This is used only when drawerType is \"front\"\n  private touchDistanceFromDrawer = cond(\n    this.isDrawerTypeFront,\n    cond(\n      eq(this.drawerPosition, DIRECTION_LEFT),\n      max(\n        // Distance of touch start from left screen edge - Drawer width\n        sub(sub(this.touchX, this.gestureX), this.drawerWidth),\n        0\n      ),\n      min(\n        multiply(\n          // Distance of drawer from left screen edge - Touch start point\n          sub(\n            sub(this.containerWidth, this.drawerWidth),\n            sub(this.touchX, this.gestureX)\n          ),\n          DIRECTION_RIGHT\n        ),\n        0\n      )\n    ),\n    0\n  );\n\n  private swipeDistanceThreshold = new Value<number>(\n    this.props.swipeDistanceThreshold\n  );\n  private swipeVelocityThreshold = new Value<number>(\n    this.props.swipeVelocityThreshold\n  );\n\n  private currentOpenValue: boolean = this.props.open;\n  private pendingOpenValue: boolean | undefined;\n\n  private isStatusBarHidden: boolean = false;\n\n  private manuallyTriggerSpring = new Value<Binary>(FALSE);\n\n  private transitionTo = (isOpen: number | Animated.Node<number>) => {\n    const toValue = new Value(0);\n    const frameTime = new Value(0);\n\n    const state = {\n      position: this.position,\n      time: new Value(0),\n      finished: new Value(FALSE),\n      velocity: new Value(0),\n    };\n\n    return block([\n      cond(clockRunning(this.clock), NOOP, [\n        // Animation wasn't running before\n        // Set the initial values and start the clock\n        set(toValue, multiply(isOpen, this.drawerWidth, this.drawerPosition)),\n        set(frameTime, 0),\n        set(state.time, 0),\n        set(state.finished, FALSE),\n        set(state.velocity, this.velocityX),\n        set(this.isOpen, isOpen),\n        startClock(this.clock),\n        call([], this.handleStartInteraction),\n        set(this.manuallyTriggerSpring, FALSE),\n      ]),\n      spring(this.clock, state, { ...SPRING_CONFIG, toValue }),\n      cond(state.finished, [\n        // Reset gesture and velocity from previous gesture\n        set(this.touchX, 0),\n        set(this.gestureX, 0),\n        set(this.velocityX, 0),\n        set(this.offsetX, 0),\n        // When the animation finishes, stop the clock\n        stopClock(this.clock),\n        call([this.isOpen], ([value]: readonly Binary[]) => {\n          const open = Boolean(value);\n          this.handleEndInteraction();\n\n          if (open !== this.props.open) {\n            // Sync drawer's state after animation finished\n            // This shouldn't be necessary, but there seems to be an issue on iOS\n            this.toggleDrawer(this.props.open);\n          }\n        }),\n      ]),\n    ]);\n  };\n\n  private dragX = block([\n    onChange(\n      this.isOpen,\n      call([this.isOpen], ([value]: readonly Binary[]) => {\n        const open = Boolean(value);\n\n        this.currentOpenValue = open;\n\n        // Without this check, the drawer can go to an infinite update <-> animate loop for sync updates\n        if (open !== this.props.open) {\n          // If the mode changed, update state\n          if (open) {\n            this.props.onOpen();\n          } else {\n            this.props.onClose();\n          }\n\n          this.pendingOpenValue = open;\n\n          // Force componentDidUpdate to fire, whether user does a setState or not\n          // This allows us to detect when the user drops the update and revert back\n          // It's necessary to make sure that the state stays in sync\n          this.forceUpdate();\n        }\n      })\n    ),\n    onChange(\n      this.nextIsOpen,\n      cond(neq(this.nextIsOpen, UNSET), [\n        // Stop any running animations\n        cond(clockRunning(this.clock), stopClock(this.clock)),\n        // Update the open value to trigger the transition\n        set(this.isOpen, this.nextIsOpen),\n        set(this.gestureX, 0),\n        set(this.nextIsOpen, UNSET),\n      ])\n    ),\n    // This block must be after the this.isOpen listener since we check for current value\n    onChange(\n      this.isSwiping,\n      // Listen to updates for this value only when it changes\n      // Without `onChange`, this will fire even if the value didn't change\n      // We don't want to call the listeners if the value didn't change\n      call([this.isSwiping], ([value]: readonly Binary[]) => {\n        const { keyboardDismissMode } = this.props;\n\n        if (value === TRUE) {\n          if (keyboardDismissMode === 'on-drag') {\n            Keyboard.dismiss();\n          }\n\n          this.toggleStatusBar(true);\n        } else {\n          this.toggleStatusBar(this.currentOpenValue);\n        }\n      })\n    ),\n    onChange(\n      this.gestureState,\n      cond(\n        eq(this.gestureState, GestureState.ACTIVE),\n        call([], this.handleStartInteraction)\n      )\n    ),\n    cond(\n      eq(this.gestureState, GestureState.ACTIVE),\n      [\n        cond(this.isSwiping, NOOP, [\n          // We weren't dragging before, set it to true\n          set(this.isSwiping, TRUE),\n          // Also update the drag offset to the last position\n          set(this.offsetX, this.position),\n        ]),\n        // Update position with previous offset + gesture distance\n        set(\n          this.position,\n          add(this.offsetX, this.gestureX, this.touchDistanceFromDrawer)\n        ),\n        // Stop animations while we're dragging\n        stopClock(this.clock),\n      ],\n      [\n        set(this.isSwiping, FALSE),\n        set(this.touchX, 0),\n        this.transitionTo(\n          cond(\n            this.manuallyTriggerSpring,\n            this.isOpen,\n            cond(\n              or(\n                and(\n                  greaterThan(abs(this.gestureX), SWIPE_DISTANCE_MINIMUM),\n                  greaterThan(abs(this.velocityX), this.swipeVelocityThreshold)\n                ),\n                greaterThan(abs(this.gestureX), this.swipeDistanceThreshold)\n              ),\n              cond(\n                eq(this.drawerPosition, DIRECTION_LEFT),\n                // If swiped to right, open the drawer, otherwise close it\n                greaterThan(\n                  cond(eq(this.velocityX, 0), this.gestureX, this.velocityX),\n                  0\n                ),\n                // If swiped to left, open the drawer, otherwise close it\n                lessThan(\n                  cond(eq(this.velocityX, 0), this.gestureX, this.velocityX),\n                  0\n                )\n              ),\n              this.isOpen\n            )\n          )\n        ),\n      ]\n    ),\n    this.position,\n  ]);\n\n  private translateX = cond(\n    eq(this.drawerPosition, DIRECTION_RIGHT),\n    min(max(multiply(this.drawerWidth, -1), this.dragX), 0),\n    max(min(this.drawerWidth, this.dragX), 0)\n  );\n\n  private progress = cond(\n    // Check if the drawer width is available to avoid division by zero\n    eq(this.drawerWidth, 0),\n    0,\n    abs(divide(this.translateX, this.drawerWidth))\n  );\n\n  private handleGestureEvent = event([\n    {\n      nativeEvent: {\n        x: this.touchX,\n        translationX: this.gestureX,\n        velocityX: this.velocityX,\n      },\n    },\n  ]);\n\n  private handleGestureStateChange = event([\n    {\n      nativeEvent: {\n        state: (s: Animated.Value<number>) => set(this.gestureState, s),\n      },\n    },\n  ]);\n\n  private handleContainerLayout = (e: LayoutChangeEvent) =>\n    this.containerWidth.setValue(e.nativeEvent.layout.width);\n\n  private handleDrawerLayout = (e: LayoutChangeEvent) => {\n    this.drawerWidth.setValue(e.nativeEvent.layout.width);\n    this.toggleDrawer(this.props.open);\n\n    // Until layout is available, drawer is hidden with opacity: 0 by default\n    // Show it in the next frame when layout is available\n    // If we don't delay it until the next frame, there's a visible flicker\n    requestAnimationFrame(() =>\n      requestAnimationFrame(() => this.drawerOpacity.setValue(1))\n    );\n  };\n\n  private toggleDrawer = (open: boolean) => {\n    if (this.currentOpenValue !== open) {\n      this.nextIsOpen.setValue(open ? TRUE : FALSE);\n\n      // This value will also be set shortly after as changing this.nextIsOpen changes this.isOpen\n      // However, there's a race condition on Android, so we need to set a bit earlier\n      this.currentOpenValue = open;\n    }\n  };\n\n  private toggleStatusBar = (hidden: boolean) => {\n    const { hideStatusBarOnOpen: hideStatusBar, statusBarAnimation } =\n      this.props;\n\n    if (hideStatusBar && this.isStatusBarHidden !== hidden) {\n      this.isStatusBarHidden = hidden;\n      StatusBar.setHidden(hidden, statusBarAnimation);\n    }\n  };\n\n  render() {\n    const {\n      open,\n      swipeEnabled,\n      drawerPosition,\n      drawerType,\n      swipeEdgeWidth,\n      drawerStyle,\n      overlayStyle,\n      renderDrawerContent,\n      renderSceneContent,\n      gestureHandlerProps,\n    } = this.props;\n\n    const isOpen = drawerType === 'permanent' ? true : open;\n    const isRight = drawerPosition === 'right';\n\n    const contentTranslateX =\n      drawerType === 'front' ? ANIMATED_ZERO : this.translateX;\n\n    const drawerTranslateX =\n      drawerType === 'back'\n        ? I18nManager.isRTL\n          ? multiply(\n              sub(this.containerWidth, this.drawerWidth),\n              isRight ? 1 : -1\n            )\n          : ANIMATED_ZERO\n        : this.translateX;\n\n    const offset =\n      drawerType === 'back'\n        ? 0\n        : I18nManager.isRTL\n        ? '100%'\n        : multiply(this.drawerWidth, -1);\n\n    // FIXME: Currently hitSlop is broken when on Android when drawer is on right\n    // https://github.com/software-mansion/react-native-gesture-handler/issues/569\n    const hitSlop = isRight\n      ? // Extend hitSlop to the side of the screen when drawer is closed\n        // This lets the user drag the drawer from the side of the screen\n        { right: 0, width: isOpen ? undefined : swipeEdgeWidth }\n      : { left: 0, width: isOpen ? undefined : swipeEdgeWidth };\n\n    const progress = drawerType === 'permanent' ? ANIMATED_ONE : this.progress;\n\n    return (\n      <DrawerProgressContext.Provider value={progress}>\n        <PanGestureHandler\n          activeOffsetX={[-SWIPE_DISTANCE_MINIMUM, SWIPE_DISTANCE_MINIMUM]}\n          failOffsetY={[-SWIPE_DISTANCE_MINIMUM, SWIPE_DISTANCE_MINIMUM]}\n          onGestureEvent={this.handleGestureEvent}\n          onHandlerStateChange={this.handleGestureStateChange}\n          hitSlop={hitSlop}\n          enabled={drawerType !== 'permanent' && swipeEnabled}\n          {...gestureHandlerProps}\n        >\n          <Animated.View\n            onLayout={this.handleContainerLayout}\n            style={[\n              styles.main,\n              {\n                flexDirection:\n                  drawerType === 'permanent' && !isRight\n                    ? 'row-reverse'\n                    : 'row',\n              },\n            ]}\n          >\n            <Animated.View\n              style={[\n                styles.content,\n                {\n                  transform:\n                    drawerType === 'permanent'\n                      ? // Reanimated needs the property to be present, but it results in Browser bug\n                        // https://bugs.chromium.org/p/chromium/issues/detail?id=20574\n                        []\n                      : [{ translateX: contentTranslateX }],\n                },\n              ]}\n            >\n              <View\n                accessibilityElementsHidden={\n                  isOpen && drawerType !== 'permanent'\n                }\n                importantForAccessibility={\n                  isOpen && drawerType !== 'permanent'\n                    ? 'no-hide-descendants'\n                    : 'auto'\n                }\n                style={styles.content}\n              >\n                {renderSceneContent()}\n              </View>\n              {\n                // Disable overlay if sidebar is permanent\n                drawerType === 'permanent' ? null : (\n                  <Overlay\n                    progress={progress}\n                    onPress={() => this.toggleDrawer(false)}\n                    style={overlayStyle as any}\n                    accessibilityElementsHidden={!isOpen}\n                    importantForAccessibility={\n                      isOpen ? 'auto' : 'no-hide-descendants'\n                    }\n                  />\n                )\n              }\n            </Animated.View>\n            <Animated.Code\n              // This is needed to make sure that container width updates with `setValue`\n              // Without this, it won't update when not used in styles\n              exec={this.containerWidth}\n            />\n            {drawerType === 'permanent' ? null : (\n              <Animated.Code\n                exec={block([\n                  onChange(this.manuallyTriggerSpring, [\n                    cond(eq(this.manuallyTriggerSpring, TRUE), [\n                      set(this.nextIsOpen, FALSE),\n                      call([], () => (this.currentOpenValue = false)),\n                    ]),\n                  ]),\n                ])}\n              />\n            )}\n            <Animated.View\n              accessibilityViewIsModal={isOpen && drawerType !== 'permanent'}\n              removeClippedSubviews={Platform.OS !== 'ios'}\n              onLayout={this.handleDrawerLayout}\n              style={[\n                styles.container,\n                {\n                  transform:\n                    drawerType === 'permanent'\n                      ? // Reanimated needs the property to be present, but it results in Browser bug\n                        // https://bugs.chromium.org/p/chromium/issues/detail?id=20574\n                        []\n                      : [{ translateX: drawerTranslateX }],\n                  opacity: this.drawerOpacity,\n                },\n                drawerType === 'permanent'\n                  ? // Without this, the `left`/`right` values don't get reset\n                    isRight\n                    ? { right: 0 }\n                    : { left: 0 }\n                  : [\n                      styles.nonPermanent,\n                      isRight ? { right: offset } : { left: offset },\n                      { zIndex: drawerType === 'back' ? -1 : 0 },\n                    ],\n                drawerStyle as any,\n              ]}\n            >\n              {renderDrawerContent()}\n            </Animated.View>\n          </Animated.View>\n        </PanGestureHandler>\n      </DrawerProgressContext.Provider>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    backgroundColor: 'white',\n    maxWidth: '100%',\n  },\n  nonPermanent: {\n    position: 'absolute',\n    top: 0,\n    bottom: 0,\n    width: DEFAULT_DRAWER_WIDTH,\n  },\n  content: {\n    flex: 1,\n  },\n  main: {\n    flex: 1,\n    ...Platform.select({\n      // FIXME: We need to hide `overflowX` on Web so the translated content doesn't show offscreen.\n      // But adding `overflowX: 'hidden'` prevents content from collapsing the URL bar.\n      web: null,\n      default: { overflow: 'hidden' },\n    }),\n  },\n});\n"]}