aac3f2734bf9d94091d775195e4e5e78
"use strict";

var _interopRequireDefault2 = require("@babel/runtime/helpers/interopRequireDefault");

var _slicedToArray2 = _interopRequireDefault2(require("@babel/runtime/helpers/slicedToArray"));

var _extends3 = _interopRequireDefault2(require("@babel/runtime/helpers/extends"));

var _classCallCheck2 = _interopRequireDefault2(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault2(require("@babel/runtime/helpers/createClass"));

var _assertThisInitialized2 = _interopRequireDefault2(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault2(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault2(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault2(require("@babel/runtime/helpers/getPrototypeOf"));

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var React = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

var _reactNativeReanimated = _interopRequireDefault(require("react-native-reanimated"));

var _DrawerProgressContext = _interopRequireDefault(require("../../utils/DrawerProgressContext"));

var _GestureHandler = require("../GestureHandler");

var _Overlay = _interopRequireDefault(require("./Overlay"));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

function _getRequireWildcardCache(nodeInterop) {
  if (typeof WeakMap !== "function") return null;
  var cacheBabelInterop = new WeakMap();
  var cacheNodeInterop = new WeakMap();
  return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {
    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
  })(nodeInterop);
}

function _interopRequireWildcard(obj, nodeInterop) {
  if (!nodeInterop && obj && obj.__esModule) {
    return obj;
  }

  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }

  var cache = _getRequireWildcardCache(nodeInterop);

  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }

  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

  for (var key in obj) {
    if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }

  newObj.default = obj;

  if (cache) {
    cache.set(obj, newObj);
  }

  return newObj;
}

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

var _reactNativeReanimate = _reactNativeReanimated.default,
    Clock = _reactNativeReanimate.Clock,
    Value = _reactNativeReanimate.Value,
    onChange = _reactNativeReanimate.onChange,
    clockRunning = _reactNativeReanimate.clockRunning,
    startClock = _reactNativeReanimate.startClock,
    stopClock = _reactNativeReanimate.stopClock,
    spring = _reactNativeReanimate.spring,
    abs = _reactNativeReanimate.abs,
    add = _reactNativeReanimate.add,
    and = _reactNativeReanimate.and,
    block = _reactNativeReanimate.block,
    call = _reactNativeReanimate.call,
    cond = _reactNativeReanimate.cond,
    divide = _reactNativeReanimate.divide,
    eq = _reactNativeReanimate.eq,
    event = _reactNativeReanimate.event,
    greaterThan = _reactNativeReanimate.greaterThan,
    lessThan = _reactNativeReanimate.lessThan,
    max = _reactNativeReanimate.max,
    min = _reactNativeReanimate.min,
    multiply = _reactNativeReanimate.multiply,
    neq = _reactNativeReanimate.neq,
    or = _reactNativeReanimate.or,
    set = _reactNativeReanimate.set,
    sub = _reactNativeReanimate.sub;
var TRUE = 1;
var FALSE = 0;
var NOOP = 0;
var UNSET = -1;
var DIRECTION_LEFT = 1;
var DIRECTION_RIGHT = -1;
var SWIPE_DISTANCE_MINIMUM = 5;
var DEFAULT_DRAWER_WIDTH = '80%';
var SPRING_CONFIG = {
  stiffness: 1000,
  damping: 500,
  mass: 3,
  overshootClamping: true,
  restDisplacementThreshold: 0.01,
  restSpeedThreshold: 0.01
};
var ANIMATED_ZERO = new _reactNativeReanimated.default.Value(0);
var ANIMATED_ONE = new _reactNativeReanimated.default.Value(1);

var DrawerView = function (_React$Component) {
  (0, _inherits2.default)(DrawerView, _React$Component);

  var _super = _createSuper(DrawerView);

  function DrawerView() {
    var _this;

    (0, _classCallCheck2.default)(this, DrawerView);
    _this = _super.apply(this, arguments);

    _defineProperty((0, _assertThisInitialized2.default)(_this), "handleEndInteraction", function () {
      if (_this.interactionHandle !== undefined) {
        _reactNative.InteractionManager.clearInteractionHandle(_this.interactionHandle);

        _this.interactionHandle = undefined;
      }
    });

    _defineProperty((0, _assertThisInitialized2.default)(_this), "handleStartInteraction", function () {
      if (_this.interactionHandle === undefined) {
        _this.interactionHandle = _reactNative.InteractionManager.createInteractionHandle();
      }
    });

    _defineProperty((0, _assertThisInitialized2.default)(_this), "getDrawerWidth", function () {
      var _this$props = _this.props,
          drawerStyle = _this$props.drawerStyle,
          dimensions = _this$props.dimensions;

      var _ref4 = _reactNative.StyleSheet.flatten(drawerStyle) || {},
          _ref4$width = _ref4.width,
          width = _ref4$width === void 0 ? DEFAULT_DRAWER_WIDTH : _ref4$width;

      if (typeof width === 'string' && width.endsWith('%')) {
        var percentage = Number(width.replace(/%$/, ''));

        if (Number.isFinite(percentage)) {
          return dimensions.width * (percentage / 100);
        }
      }

      return typeof width === 'number' ? width : 0;
    });

    _defineProperty((0, _assertThisInitialized2.default)(_this), "clock", new Clock());

    _defineProperty((0, _assertThisInitialized2.default)(_this), "interactionHandle", void 0);

    _defineProperty((0, _assertThisInitialized2.default)(_this), "isDrawerTypeFront", new Value(_this.props.drawerType === 'front' ? TRUE : FALSE));

    _defineProperty((0, _assertThisInitialized2.default)(_this), "isOpen", new Value(_this.props.open ? TRUE : FALSE));

    _defineProperty((0, _assertThisInitialized2.default)(_this), "nextIsOpen", new Value(UNSET));

    _defineProperty((0, _assertThisInitialized2.default)(_this), "isSwiping", new Value(FALSE));

    _defineProperty((0, _assertThisInitialized2.default)(_this), "initialDrawerWidth", _this.getDrawerWidth());

    _defineProperty((0, _assertThisInitialized2.default)(_this), "gestureState", new Value(_GestureHandler.GestureState.UNDETERMINED));

    _defineProperty((0, _assertThisInitialized2.default)(_this), "touchX", new Value(0));

    _defineProperty((0, _assertThisInitialized2.default)(_this), "velocityX", new Value(0));

    _defineProperty((0, _assertThisInitialized2.default)(_this), "gestureX", new Value(0));

    _defineProperty((0, _assertThisInitialized2.default)(_this), "offsetX", new Value(0));

    _defineProperty((0, _assertThisInitialized2.default)(_this), "position", new Value(_this.props.open ? _this.initialDrawerWidth * (_this.props.drawerPosition === 'right' ? DIRECTION_RIGHT : DIRECTION_LEFT) : 0));

    _defineProperty((0, _assertThisInitialized2.default)(_this), "containerWidth", new Value(_this.props.dimensions.width));

    _defineProperty((0, _assertThisInitialized2.default)(_this), "drawerWidth", new Value(_this.initialDrawerWidth));

    _defineProperty((0, _assertThisInitialized2.default)(_this), "drawerOpacity", new Value(_this.props.drawerType === 'permanent' ? 1 : 0));

    _defineProperty((0, _assertThisInitialized2.default)(_this), "drawerPosition", new Value(_this.props.drawerPosition === 'right' ? DIRECTION_RIGHT : DIRECTION_LEFT));

    _defineProperty((0, _assertThisInitialized2.default)(_this), "touchDistanceFromDrawer", cond(_this.isDrawerTypeFront, cond(eq(_this.drawerPosition, DIRECTION_LEFT), max(sub(sub(_this.touchX, _this.gestureX), _this.drawerWidth), 0), min(multiply(sub(sub(_this.containerWidth, _this.drawerWidth), sub(_this.touchX, _this.gestureX)), DIRECTION_RIGHT), 0)), 0));

    _defineProperty((0, _assertThisInitialized2.default)(_this), "swipeDistanceThreshold", new Value(_this.props.swipeDistanceThreshold));

    _defineProperty((0, _assertThisInitialized2.default)(_this), "swipeVelocityThreshold", new Value(_this.props.swipeVelocityThreshold));

    _defineProperty((0, _assertThisInitialized2.default)(_this), "currentOpenValue", _this.props.open);

    _defineProperty((0, _assertThisInitialized2.default)(_this), "pendingOpenValue", void 0);

    _defineProperty((0, _assertThisInitialized2.default)(_this), "isStatusBarHidden", false);

    _defineProperty((0, _assertThisInitialized2.default)(_this), "manuallyTriggerSpring", new Value(FALSE));

    _defineProperty((0, _assertThisInitialized2.default)(_this), "transitionTo", function (isOpen) {
      var toValue = new Value(0);
      var frameTime = new Value(0);
      var state = {
        position: _this.position,
        time: new Value(0),
        finished: new Value(FALSE),
        velocity: new Value(0)
      };
      return block([cond(clockRunning(_this.clock), NOOP, [set(toValue, multiply(isOpen, _this.drawerWidth, _this.drawerPosition)), set(frameTime, 0), set(state.time, 0), set(state.finished, FALSE), set(state.velocity, _this.velocityX), set(_this.isOpen, isOpen), startClock(_this.clock), call([], _this.handleStartInteraction), set(_this.manuallyTriggerSpring, FALSE)]), spring(_this.clock, state, (0, _extends3.default)({}, SPRING_CONFIG, {
        toValue: toValue
      })), cond(state.finished, [set(_this.touchX, 0), set(_this.gestureX, 0), set(_this.velocityX, 0), set(_this.offsetX, 0), stopClock(_this.clock), call([_this.isOpen], function (_ref) {
        var _ref5 = (0, _slicedToArray2.default)(_ref, 1),
            value = _ref5[0];

        var open = Boolean(value);

        _this.handleEndInteraction();

        if (open !== _this.props.open) {
          _this.toggleDrawer(_this.props.open);
        }
      })])]);
    });

    _defineProperty((0, _assertThisInitialized2.default)(_this), "dragX", block([onChange(_this.isOpen, call([_this.isOpen], function (_ref2) {
      var _ref6 = (0, _slicedToArray2.default)(_ref2, 1),
          value = _ref6[0];

      var open = Boolean(value);
      _this.currentOpenValue = open;

      if (open !== _this.props.open) {
        if (open) {
          _this.props.onOpen();
        } else {
          _this.props.onClose();
        }

        _this.pendingOpenValue = open;

        _this.forceUpdate();
      }
    })), onChange(_this.nextIsOpen, cond(neq(_this.nextIsOpen, UNSET), [cond(clockRunning(_this.clock), stopClock(_this.clock)), set(_this.isOpen, _this.nextIsOpen), set(_this.gestureX, 0), set(_this.nextIsOpen, UNSET)])), onChange(_this.isSwiping, call([_this.isSwiping], function (_ref3) {
      var _ref7 = (0, _slicedToArray2.default)(_ref3, 1),
          value = _ref7[0];

      var keyboardDismissMode = _this.props.keyboardDismissMode;

      if (value === TRUE) {
        if (keyboardDismissMode === 'on-drag') {
          _reactNative.Keyboard.dismiss();
        }

        _this.toggleStatusBar(true);
      } else {
        _this.toggleStatusBar(_this.currentOpenValue);
      }
    })), onChange(_this.gestureState, cond(eq(_this.gestureState, _GestureHandler.GestureState.ACTIVE), call([], _this.handleStartInteraction))), cond(eq(_this.gestureState, _GestureHandler.GestureState.ACTIVE), [cond(_this.isSwiping, NOOP, [set(_this.isSwiping, TRUE), set(_this.offsetX, _this.position)]), set(_this.position, add(_this.offsetX, _this.gestureX, _this.touchDistanceFromDrawer)), stopClock(_this.clock)], [set(_this.isSwiping, FALSE), set(_this.touchX, 0), _this.transitionTo(cond(_this.manuallyTriggerSpring, _this.isOpen, cond(or(and(greaterThan(abs(_this.gestureX), SWIPE_DISTANCE_MINIMUM), greaterThan(abs(_this.velocityX), _this.swipeVelocityThreshold)), greaterThan(abs(_this.gestureX), _this.swipeDistanceThreshold)), cond(eq(_this.drawerPosition, DIRECTION_LEFT), greaterThan(cond(eq(_this.velocityX, 0), _this.gestureX, _this.velocityX), 0), lessThan(cond(eq(_this.velocityX, 0), _this.gestureX, _this.velocityX), 0)), _this.isOpen)))]), _this.position]));

    _defineProperty((0, _assertThisInitialized2.default)(_this), "translateX", cond(eq(_this.drawerPosition, DIRECTION_RIGHT), min(max(multiply(_this.drawerWidth, -1), _this.dragX), 0), max(min(_this.drawerWidth, _this.dragX), 0)));

    _defineProperty((0, _assertThisInitialized2.default)(_this), "progress", cond(eq(_this.drawerWidth, 0), 0, abs(divide(_this.translateX, _this.drawerWidth))));

    _defineProperty((0, _assertThisInitialized2.default)(_this), "handleGestureEvent", event([{
      nativeEvent: {
        x: _this.touchX,
        translationX: _this.gestureX,
        velocityX: _this.velocityX
      }
    }]));

    _defineProperty((0, _assertThisInitialized2.default)(_this), "handleGestureStateChange", event([{
      nativeEvent: {
        state: function state(s) {
          return set(_this.gestureState, s);
        }
      }
    }]));

    _defineProperty((0, _assertThisInitialized2.default)(_this), "handleContainerLayout", function (e) {
      return _this.containerWidth.setValue(e.nativeEvent.layout.width);
    });

    _defineProperty((0, _assertThisInitialized2.default)(_this), "handleDrawerLayout", function (e) {
      _this.drawerWidth.setValue(e.nativeEvent.layout.width);

      _this.toggleDrawer(_this.props.open);

      requestAnimationFrame(function () {
        return requestAnimationFrame(function () {
          return _this.drawerOpacity.setValue(1);
        });
      });
    });

    _defineProperty((0, _assertThisInitialized2.default)(_this), "toggleDrawer", function (open) {
      if (_this.currentOpenValue !== open) {
        _this.nextIsOpen.setValue(open ? TRUE : FALSE);

        _this.currentOpenValue = open;
      }
    });

    _defineProperty((0, _assertThisInitialized2.default)(_this), "toggleStatusBar", function (hidden) {
      var _this$props2 = _this.props,
          hideStatusBar = _this$props2.hideStatusBarOnOpen,
          statusBarAnimation = _this$props2.statusBarAnimation;

      if (hideStatusBar && _this.isStatusBarHidden !== hidden) {
        _this.isStatusBarHidden = hidden;

        _reactNative.StatusBar.setHidden(hidden, statusBarAnimation);
      }
    });

    return _this;
  }

  (0, _createClass2.default)(DrawerView, [{
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      var _this$props3 = this.props,
          open = _this$props3.open,
          drawerPosition = _this$props3.drawerPosition,
          drawerType = _this$props3.drawerType,
          swipeDistanceThreshold = _this$props3.swipeDistanceThreshold,
          swipeVelocityThreshold = _this$props3.swipeVelocityThreshold,
          hideStatusBar = _this$props3.hideStatusBarOnOpen;

      if (typeof this.pendingOpenValue !== 'boolean' || open !== this.pendingOpenValue) {
        this.toggleDrawer(open);
      }

      this.pendingOpenValue = undefined;

      if (open !== prevProps.open && hideStatusBar) {
        this.toggleStatusBar(open);
      }

      if (prevProps.drawerPosition !== drawerPosition) {
        this.drawerPosition.setValue(drawerPosition === 'right' ? DIRECTION_RIGHT : DIRECTION_LEFT);
      }

      if (prevProps.drawerType !== drawerType) {
        this.isDrawerTypeFront.setValue(drawerType === 'front' ? TRUE : FALSE);
      }

      if (prevProps.swipeDistanceThreshold !== swipeDistanceThreshold) {
        this.swipeDistanceThreshold.setValue(swipeDistanceThreshold);
      }

      if (prevProps.swipeVelocityThreshold !== swipeVelocityThreshold) {
        this.swipeVelocityThreshold.setValue(swipeVelocityThreshold);
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this.toggleStatusBar(false);
      this.handleEndInteraction();
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$props4 = this.props,
          open = _this$props4.open,
          swipeEnabled = _this$props4.swipeEnabled,
          drawerPosition = _this$props4.drawerPosition,
          drawerType = _this$props4.drawerType,
          swipeEdgeWidth = _this$props4.swipeEdgeWidth,
          drawerStyle = _this$props4.drawerStyle,
          overlayStyle = _this$props4.overlayStyle,
          renderDrawerContent = _this$props4.renderDrawerContent,
          renderSceneContent = _this$props4.renderSceneContent,
          gestureHandlerProps = _this$props4.gestureHandlerProps;
      var isOpen = drawerType === 'permanent' ? true : open;
      var isRight = drawerPosition === 'right';
      var contentTranslateX = drawerType === 'front' ? ANIMATED_ZERO : this.translateX;
      var drawerTranslateX = drawerType === 'back' ? _reactNative.I18nManager.isRTL ? multiply(sub(this.containerWidth, this.drawerWidth), isRight ? 1 : -1) : ANIMATED_ZERO : this.translateX;
      var offset = drawerType === 'back' ? 0 : _reactNative.I18nManager.isRTL ? '100%' : multiply(this.drawerWidth, -1);
      var hitSlop = isRight ? {
        right: 0,
        width: isOpen ? undefined : swipeEdgeWidth
      } : {
        left: 0,
        width: isOpen ? undefined : swipeEdgeWidth
      };
      var progress = drawerType === 'permanent' ? ANIMATED_ONE : this.progress;
      return React.createElement(_DrawerProgressContext.default.Provider, {
        value: progress
      }, React.createElement(_GestureHandler.PanGestureHandler, _extends({
        activeOffsetX: [-SWIPE_DISTANCE_MINIMUM, SWIPE_DISTANCE_MINIMUM],
        failOffsetY: [-SWIPE_DISTANCE_MINIMUM, SWIPE_DISTANCE_MINIMUM],
        onGestureEvent: this.handleGestureEvent,
        onHandlerStateChange: this.handleGestureStateChange,
        hitSlop: hitSlop,
        enabled: drawerType !== 'permanent' && swipeEnabled
      }, gestureHandlerProps), React.createElement(_reactNativeReanimated.default.View, {
        onLayout: this.handleContainerLayout,
        style: [styles.main, {
          flexDirection: drawerType === 'permanent' && !isRight ? 'row-reverse' : 'row'
        }]
      }, React.createElement(_reactNativeReanimated.default.View, {
        style: [styles.content, {
          transform: drawerType === 'permanent' ? [] : [{
            translateX: contentTranslateX
          }]
        }]
      }, React.createElement(_reactNative.View, {
        accessibilityElementsHidden: isOpen && drawerType !== 'permanent',
        importantForAccessibility: isOpen && drawerType !== 'permanent' ? 'no-hide-descendants' : 'auto',
        style: styles.content
      }, renderSceneContent()), drawerType === 'permanent' ? null : React.createElement(_Overlay.default, {
        progress: progress,
        onPress: function onPress() {
          return _this2.toggleDrawer(false);
        },
        style: overlayStyle,
        accessibilityElementsHidden: !isOpen,
        importantForAccessibility: isOpen ? 'auto' : 'no-hide-descendants'
      })), React.createElement(_reactNativeReanimated.default.Code, {
        exec: this.containerWidth
      }), drawerType === 'permanent' ? null : React.createElement(_reactNativeReanimated.default.Code, {
        exec: block([onChange(this.manuallyTriggerSpring, [cond(eq(this.manuallyTriggerSpring, TRUE), [set(this.nextIsOpen, FALSE), call([], function () {
          return _this2.currentOpenValue = false;
        })])])])
      }), React.createElement(_reactNativeReanimated.default.View, {
        accessibilityViewIsModal: isOpen && drawerType !== 'permanent',
        removeClippedSubviews: _reactNative.Platform.OS !== 'ios',
        onLayout: this.handleDrawerLayout,
        style: [styles.container, {
          transform: drawerType === 'permanent' ? [] : [{
            translateX: drawerTranslateX
          }],
          opacity: this.drawerOpacity
        }, drawerType === 'permanent' ? isRight ? {
          right: 0
        } : {
          left: 0
        } : [styles.nonPermanent, isRight ? {
          right: offset
        } : {
          left: offset
        }, {
          zIndex: drawerType === 'back' ? -1 : 0
        }], drawerStyle]
      }, renderDrawerContent()))));
    }
  }]);
  return DrawerView;
}(React.Component);

exports.default = DrawerView;

var styles = _reactNative.StyleSheet.create({
  container: {
    backgroundColor: 'white',
    maxWidth: '100%'
  },
  nonPermanent: {
    position: 'absolute',
    top: 0,
    bottom: 0,
    width: DEFAULT_DRAWER_WIDTH
  },
  content: {
    flex: 1
  },
  main: (0, _extends3.default)({
    flex: 1
  }, _reactNative.Platform.select({
    web: null,
    default: {
      overflow: 'hidden'
    }
  }))
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,