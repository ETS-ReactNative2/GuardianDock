{"version":3,"mappings":"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","names":["ANIMATION_DURATION","CheckboxAndroid","status","theme","disabled","onPress","testID","rest","React","useRef","Animated","Value","scaleAnim","current","isFirstRendering","scale","animation","useEffect","checked","sequence","timing","toValue","duration","useNativeDriver","start","indeterminate","checkedColor","color","colors","accent","uncheckedColor","text","alpha","dark","rgb","string","rippleColor","checkboxColor","fade","borderWidth","interpolate","inputRange","outputRange","icon","_TouchableRipple","borderless","accessibilityTraits","accessibilityComponentType","accessibilityRole","accessibilityState","accessibilityLiveRegion","style","styles","container","_reactNative","View","transform","_MaterialCommunityIcon","allowFontScaling","name","size","direction","StyleSheet","absoluteFill","fillContainer","fill","borderColor","displayName","create","borderRadius","width","height","padding","alignItems","justifyContent","CheckboxAndroidWithTheme"],"sources":["CheckboxAndroid.tsx"],"sourcesContent":["import * as React from 'react';\nimport { Animated, View, StyleSheet } from 'react-native';\nimport color from 'color';\nimport MaterialCommunityIcon from '../MaterialCommunityIcon';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport { withTheme } from '../../core/theming';\nimport type { $RemoveChildren } from '../../types';\n\ntype Props = $RemoveChildren<typeof TouchableRipple> & {\n  /**\n   * Status of checkbox.\n   */\n  status: 'checked' | 'unchecked' | 'indeterminate';\n  /**\n   * Whether checkbox is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Custom color for unchecked checkbox.\n   */\n  uncheckedColor?: string;\n  /**\n   * Custom color for checkbox.\n   */\n  color?: string;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n  /**\n   * testID to be used on tests.\n   */\n  testID?: string;\n};\n\n// From https://material.io/design/motion/speed.html#duration\nconst ANIMATION_DURATION = 100;\n\n/**\n * Checkboxes allow the selection of multiple options from a set.\n * This component follows platform guidelines for Android, but can be used\n * on any platform.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img src=\"screenshots/checkbox-enabled.android.png\" />\n *     <figcaption>Enabled</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/checkbox-disabled.android.png\" />\n *     <figcaption>Disabled</figcaption>\n *   </figure>\n * </div>\n */\nconst CheckboxAndroid = ({\n  status,\n  theme,\n  disabled,\n  onPress,\n  testID,\n  ...rest\n}: Props) => {\n  const { current: scaleAnim } = React.useRef<Animated.Value>(\n    new Animated.Value(1)\n  );\n  const isFirstRendering = React.useRef<boolean>(true);\n\n  const {\n    animation: { scale },\n  } = theme;\n\n  React.useEffect(() => {\n    // Do not run animation on very first rendering\n    if (isFirstRendering.current) {\n      isFirstRendering.current = false;\n      return;\n    }\n\n    const checked = status === 'checked';\n\n    Animated.sequence([\n      Animated.timing(scaleAnim, {\n        toValue: 0.85,\n        duration: checked ? ANIMATION_DURATION * scale : 0,\n        useNativeDriver: false,\n      }),\n      Animated.timing(scaleAnim, {\n        toValue: 1,\n        duration: checked\n          ? ANIMATION_DURATION * scale\n          : ANIMATION_DURATION * scale * 1.75,\n        useNativeDriver: false,\n      }),\n    ]).start();\n  }, [status, scaleAnim, scale]);\n\n  const checked = status === 'checked';\n  const indeterminate = status === 'indeterminate';\n  const checkedColor = rest.color || theme.colors.accent;\n  const uncheckedColor =\n    rest.uncheckedColor ||\n    color(theme.colors.text)\n      .alpha(theme.dark ? 0.7 : 0.54)\n      .rgb()\n      .string();\n\n  let rippleColor, checkboxColor;\n\n  if (disabled) {\n    rippleColor = color(theme.colors.text).alpha(0.16).rgb().string();\n    checkboxColor = theme.colors.disabled;\n  } else {\n    rippleColor = color(checkedColor).fade(0.32).rgb().string();\n    checkboxColor = checked ? checkedColor : uncheckedColor;\n  }\n\n  const borderWidth = scaleAnim.interpolate({\n    inputRange: [0.8, 1],\n    outputRange: [7, 0],\n  });\n\n  const icon = indeterminate\n    ? 'minus-box'\n    : checked\n    ? 'checkbox-marked'\n    : 'checkbox-blank-outline';\n\n  return (\n    <TouchableRipple\n      {...rest}\n      borderless\n      rippleColor={rippleColor}\n      onPress={onPress}\n      disabled={disabled}\n      // @ts-expect-error We keep old a11y props for backwards compat with old RN versions\n      accessibilityTraits={disabled ? ['button', 'disabled'] : 'button'}\n      accessibilityComponentType=\"button\"\n      accessibilityRole=\"checkbox\"\n      accessibilityState={{ disabled, checked }}\n      accessibilityLiveRegion=\"polite\"\n      style={styles.container}\n      testID={testID}\n    >\n      <Animated.View style={{ transform: [{ scale: scaleAnim }] }}>\n        <MaterialCommunityIcon\n          allowFontScaling={false}\n          name={icon}\n          size={24}\n          color={checkboxColor}\n          direction=\"ltr\"\n        />\n        <View style={[StyleSheet.absoluteFill, styles.fillContainer]}>\n          <Animated.View\n            style={[\n              styles.fill,\n              { borderColor: checkboxColor },\n              { borderWidth },\n            ]}\n          />\n        </View>\n      </Animated.View>\n    </TouchableRipple>\n  );\n};\n\nCheckboxAndroid.displayName = 'Checkbox.Android';\n\nconst styles = StyleSheet.create({\n  container: {\n    borderRadius: 18,\n    width: 36,\n    height: 36,\n    padding: 6,\n  },\n  fillContainer: {\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  fill: {\n    height: 14,\n    width: 14,\n  },\n});\n\nexport default withTheme(CheckboxAndroid);\n\n// @component-docs ignore-next-line\nconst CheckboxAndroidWithTheme = withTheme(CheckboxAndroid);\n// @component-docs ignore-next-line\nexport { CheckboxAndroidWithTheme as CheckboxAndroid };\n"]}