{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAYqBA,a;;;;;AAAqD;AAAA;;AAAA;;AAAA;AAAAC;AAAA;;AAAA;;AAAAC,0EACzD;AACbC,aAAO,EAAE;AADI,KADyD;;AAAAD,0EAKhE,UAACE,GAAD,EAAcC,QAAd,EAA4C;AAClD,YAAKC,QAAL,CAAeC,eAAD;AAAA,eAAY;AACxBJ,iBAAO,6CAAMI,KAAK,CAACJ,OAAZ,IAAqB;AAAEC,eAAF,EAAEA,GAAF;AAAOC;AAAP,WAArB;AADiB,SAAZ;AAAA,OAAd;AANsE;;AAAAH,2EAW/D,UAACE,GAAD,EAAcC,QAAd;AAAA,aACP,MAAKC,QAAL,CAAeC,eAAD;AAAA,eAAY;AACxBJ,iBAAO,EAAEI,KAAK,CAACJ,OAANI,CAAcC,GAAdD,CAAmBE,cAAD,EAAU;AACnC,gBAAIA,IAAI,CAACL,GAALK,KAAaL,GAAjB,EAAsB;AACpB,gDAAYK,IAAZ;AAAkBJ;AAAlB;AACD;;AACD,mBAAOI,IAAP;AAJO;AADe,SAAZ;AAAA,OAAd,CADO;AAAA,KAX+D;;AAAAP,4EAqB7DE,aAAD;AAAA,aACR,MAAKE,QAAL,CAAeC,eAAD;AAAA,eAAY;AACxBJ,iBAAO,EAAEI,KAAK,CAACJ,OAANI,CAAcG,MAAdH,CAAsBE,cAAD;AAAA,mBAAUA,IAAI,CAACL,GAALK,KAAaL,GAAvB;AAAA,WAArBG;AADe,SAAZ;AAAA,OAAd,CADQ;AAAA,KArB8D;;AAAA;AAAA;;;;WA0BxEI,kBAAS;AACP,aAAO,KAAKJ,KAAL,CAAWJ,OAAX,CAAmBK,GAAnB,CAAuB;AAAA,YAAGJ,GAAH,QAAGA,GAAH;AAAA,YAAQC,QAAR,QAAQA,QAAR;AAAA,eAC5BO,oBAACC,iBAAD;AACET,aAAG,EAAEA,GADP;AAEEU,qBAAW,EACT,KAHJ;AAKEC,uBAAa,EAAC,UALhB;AAMEC,eAAK,EAAEC,wBAAWC;AANpB,WAQGb,QARH,CAD4B;AAAA,OAAvB,CAAP;AAYD;;;EAvCwCO,KAAK,CAACO,a","names":["PortalManager","args","_defineProperty","portals","key","children","setState","state","map","item","filter","render","React","_reactNative","collapsable","pointerEvents","style","StyleSheet","absoluteFill","PureComponent"],"sources":["PortalManager.tsx"],"sourcesContent":["import * as React from 'react';\nimport { View, StyleSheet } from 'react-native';\n\ntype State = {\n  portals: Array<{\n    key: number;\n    children: React.ReactNode;\n  }>;\n};\n\n/**\n * Portal host is the component which actually renders all Portals.\n */\nexport default class PortalManager extends React.PureComponent<{}, State> {\n  state: State = {\n    portals: [],\n  };\n\n  mount = (key: number, children: React.ReactNode) => {\n    this.setState((state) => ({\n      portals: [...state.portals, { key, children }],\n    }));\n  };\n\n  update = (key: number, children: React.ReactNode) =>\n    this.setState((state) => ({\n      portals: state.portals.map((item) => {\n        if (item.key === key) {\n          return { ...item, children };\n        }\n        return item;\n      }),\n    }));\n\n  unmount = (key: number) =>\n    this.setState((state) => ({\n      portals: state.portals.filter((item) => item.key !== key),\n    }));\n\n  render() {\n    return this.state.portals.map(({ key, children }) => (\n      <View\n        key={key}\n        collapsable={\n          false /* Need collapsable=false here to clip the elevations, otherwise they appear above sibling components */\n        }\n        pointerEvents=\"box-none\"\n        style={StyleSheet.absoluteFill}\n      >\n        {children}\n      </View>\n    ));\n  }\n}\n"]}