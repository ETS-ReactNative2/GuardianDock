{"version":3,"mappings":";;;;;;;;;;;;;AAAA;;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAaA,IAAMA,2BAA2B,8CAC5BC,yCAD4B,IAE/B,uBAF+B,EAG/B,6BAH+B,EAAjC;;AAMe,SAASC,mBAAT,CACbC,SADa,EAGb;AAAA,MADAC,MACA,uEADkD,EAClD;;AAAA;;AACA,MAAMC,gBAAgB,GAAGC,KAAK,CAACC,UAAND,CAGvB,UAACE,KAAD,EAAQC,GAAR,EAAgB;AAEhB,QAAMC,mBAAmB,GAAGC,MAAM,CAACC,IAAPD,CAAYH,KAAZG,EAAmBE,MAAnBF,CAC1B,UAACG,GAAD,EAAMC,GAAN,EAAc;AAEZ,UAAMC,WAA8B,GAAGhB,2BAAvC;;AACA,UAAIgB,WAAW,CAACC,QAAZD,CAAqBD,GAArBC,CAAJ,EAA+B;AAE7BF,WAAG,CAACC,GAAD,CAAHD,GAAWN,KAAK,CAACO,GAAD,CAAhBD;AACD;;AACD,aAAOA,GAAP;AARwB,kCAUrBV,MAVqBO,EAA5B;;AAYA,QAAMO,IAAI,GAAG,mBAAb;;AACA,QAAMC,kBAAkB,GAAG,mBAA3B;;AACA,mCACEV,GADF,EAGE,YAAM;AACJ,UAAMW,IAAI,GAAGD,kBAAkB,CAACE,OAAhC;;AAEA,UAAIH,IAAI,CAACG,OAALH,IAAgBE,IAApB,EAA0B;AAExBF,YAAI,CAACG,OAALH,CAAaI,UAAbJ,GAA0BE,IAAI,CAACE,UAA/BJ;AACA,eAAOA,IAAI,CAACG,OAAZ;AACD;;AACD,aAAO,IAAP;AAXJ,OAaE,CAACH,IAAD,EAAOC,kBAAP,CAbF;AAeA,WACEb,oBAACiB,kDAAD,eACMb,mBADN;AAGED,SAAG,EAAEU;AAHP,QAIEb,oBAACH,SAAD,eAAeK,KAAf;AAAsBC,SAAG,EAAES;AAA3B,OAJF,CADF;AAlCuB,IAAzB;AA6CAb,kBAAgB,CAACmB,WAAjBnB,GACE,UAAS,SAATF,aAAS,WAATA,qBAAS,CAAEqB,WAAX,MAEArB,SAFA,SAEAA,aAFA,WAEAA,GAFA,MAEAA,GAFA,qBAEAA,SAAS,CAAEsB,MAFX,sDAEAC,kBAAmBC,IAFnB,KAGC,OAAOxB,SAAP,KAAqB,QAArB,IAAiCA,SAHlC,IAIA,kBALFE;AAOA,SAAOA,gBAAP;AACD","names":["NATIVE_WRAPPER_PROPS_FILTER","nativeViewProps","createNativeWrapper","Component","config","ComponentWrapper","React","forwardRef","props","ref","gestureHandlerProps","Object","keys","reduce","res","key","allowedKeys","includes","_ref","_gestureHandlerRef","node","current","handlerTag","_NativeViewGestureHandler","displayName","render","_Component$render","name"],"sources":["createNativeWrapper.tsx"],"sourcesContent":["import * as React from 'react';\nimport { useImperativeHandle, useRef } from 'react';\n\nimport {\n  NativeViewGestureHandler,\n  NativeViewGestureHandlerProps,\n  nativeViewProps,\n} from './NativeViewGestureHandler';\n\n/*\n * This array should consist of:\n *   - All keys in propTypes from NativeGestureHandler\n *     (and all keys in GestureHandlerPropTypes)\n *   - 'onGestureHandlerEvent'\n *   - 'onGestureHandlerStateChange'\n */\nconst NATIVE_WRAPPER_PROPS_FILTER = [\n  ...nativeViewProps,\n  'onGestureHandlerEvent',\n  'onGestureHandlerStateChange',\n] as const;\n\nexport default function createNativeWrapper<P>(\n  Component: React.ComponentType<P>,\n  config: Readonly<NativeViewGestureHandlerProps> = {}\n) {\n  const ComponentWrapper = React.forwardRef<\n    React.ComponentType<any>,\n    P & NativeViewGestureHandlerProps\n  >((props, ref) => {\n    // filter out props that should be passed to gesture handler wrapper\n    const gestureHandlerProps = Object.keys(props).reduce(\n      (res, key) => {\n        // TS being overly protective with it's types, see https://github.com/microsoft/TypeScript/issues/26255#issuecomment-458013731 for more info\n        const allowedKeys: readonly string[] = NATIVE_WRAPPER_PROPS_FILTER;\n        if (allowedKeys.includes(key)) {\n          // @ts-ignore FIXME(TS)\n          res[key] = props[key];\n        }\n        return res;\n      },\n      { ...config } // watch out not to modify config\n    );\n    const _ref = useRef<React.ComponentType<P>>();\n    const _gestureHandlerRef = useRef<React.ComponentType<P>>();\n    useImperativeHandle(\n      ref,\n      // @ts-ignore TODO(TS) decide how nulls work in this context\n      () => {\n        const node = _gestureHandlerRef.current;\n        // add handlerTag for relations config\n        if (_ref.current && node) {\n          // @ts-ignore FIXME(TS) think about createHandler return type\n          _ref.current.handlerTag = node.handlerTag;\n          return _ref.current;\n        }\n        return null;\n      },\n      [_ref, _gestureHandlerRef]\n    );\n    return (\n      <NativeViewGestureHandler\n        {...gestureHandlerProps}\n        // @ts-ignore TODO(TS)\n        ref={_gestureHandlerRef}>\n        <Component {...props} ref={_ref} />\n      </NativeViewGestureHandler>\n    );\n  });\n\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n  ComponentWrapper.displayName =\n    Component?.displayName ||\n    // @ts-ignore if render doesn't exist it will return undefined and go further\n    Component?.render?.name ||\n    (typeof Component === 'string' && Component) ||\n    'ComponentWrapper';\n\n  return ComponentWrapper;\n}\n"]}