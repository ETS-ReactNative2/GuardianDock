{"version":3,"mappings":"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","names":["serializableWarnings","duplicateNameWarnings","getPartialState","state","undefined","key","routeNames","partialState","stale","routes","map","route","BaseNavigationContainer","React","forwardRef","ref","initialState","onStateChange","onUnhandledAction","independent","children","parent","useContext","NavigationStateContext","isDefault","Error","getState","setState","scheduleUpdate","flushUpdates","isFirstMountRef","useRef","navigatorKeyRef","getKey","useCallback","current","setKey","listeners","addListener","keyedListeners","addKeyedListener","dispatch","action","focus","console","error","NOT_INITIALIZED_ERROR","navigation","canGoBack","result","handled","resetRoot","target","root","_keyedListeners$getSt","CommonActions","reset","getRootState","_keyedListeners$getSt3","getCurrentRoute","emitter","addOptionsGetter","getCurrentOptions","useMemo","Object","keys","reduce","acc","name","arguments","create","isFocused","getParent","stateRef","isReady","useImperativeHandle","onDispatchAction","noop","emit","type","data","stack","stackRef","lastEmittedOptionsRef","onOptionsChange","options","builderContext","scheduleContext","isInitialRef","getIsInitial","context","onStateChangeRef","useEffect","hydratedState","process","env","NODE_ENV","serializableResult","serializable","location","reason","path","pointer","params","i","length","curr","prev","_pointer","test","JSON","stringify","message","includes","push","warn","duplicateRouteNamesResult","locations","join","defaultOnUnhandledAction","payload","element","_NavigationContainerRefContext","Provider","value","_useScheduleUpdate","_NavigationBuilderContext","_NavigationStateContext","_UnhandledActionContext","_EnsureSingleNavigator","_NavigationRouteContext","_NavigationContext"],"sources":["BaseNavigationContainer.tsx"],"sourcesContent":["import {\n  CommonActions,\n  InitialState,\n  NavigationAction,\n  NavigationState,\n  ParamListBase,\n  PartialState,\n  Route,\n} from '@react-navigation/routers';\nimport * as React from 'react';\n\nimport checkDuplicateRouteNames from './checkDuplicateRouteNames';\nimport checkSerializable from './checkSerializable';\nimport { NOT_INITIALIZED_ERROR } from './createNavigationContainerRef';\nimport EnsureSingleNavigator from './EnsureSingleNavigator';\nimport findFocusedRoute from './findFocusedRoute';\nimport NavigationBuilderContext from './NavigationBuilderContext';\nimport NavigationContainerRefContext from './NavigationContainerRefContext';\nimport NavigationContext from './NavigationContext';\nimport NavigationRouteContext from './NavigationRouteContext';\nimport NavigationStateContext from './NavigationStateContext';\nimport type {\n  NavigationContainerEventMap,\n  NavigationContainerProps,\n  NavigationContainerRef,\n} from './types';\nimport UnhandledActionContext from './UnhandledActionContext';\nimport useChildListeners from './useChildListeners';\nimport useEventEmitter from './useEventEmitter';\nimport useKeyedChildListeners from './useKeyedChildListeners';\nimport useOptionsGetters from './useOptionsGetters';\nimport { ScheduleUpdateContext } from './useScheduleUpdate';\nimport useSyncState from './useSyncState';\n\ntype State = NavigationState | PartialState<NavigationState> | undefined;\n\nconst serializableWarnings: string[] = [];\nconst duplicateNameWarnings: string[] = [];\n\n/**\n * Remove `key` and `routeNames` from the state objects recursively to get partial state.\n *\n * @param state Initial state object.\n */\nconst getPartialState = (\n  state: InitialState | undefined\n): PartialState<NavigationState> | undefined => {\n  if (state === undefined) {\n    return;\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  const { key, routeNames, ...partialState } = state;\n\n  return {\n    ...partialState,\n    stale: true,\n    routes: state.routes.map((route) => {\n      if (route.state === undefined) {\n        return route as Route<string> & {\n          state?: PartialState<NavigationState>;\n        };\n      }\n\n      return { ...route, state: getPartialState(route.state) };\n    }),\n  };\n};\n\n/**\n * Container component which holds the navigation state.\n * This should be rendered at the root wrapping the whole app.\n *\n * @param props.initialState Initial state object for the navigation tree.\n * @param props.onStateChange Callback which is called with the latest navigation state when it changes.\n * @param props.children Child elements to render the content.\n * @param props.ref Ref object which refers to the navigation object containing helper methods.\n */\nconst BaseNavigationContainer = React.forwardRef(\n  function BaseNavigationContainer(\n    {\n      initialState,\n      onStateChange,\n      onUnhandledAction,\n      independent,\n      children,\n    }: NavigationContainerProps,\n    ref?: React.Ref<NavigationContainerRef<ParamListBase>>\n  ) {\n    const parent = React.useContext(NavigationStateContext);\n\n    if (!parent.isDefault && !independent) {\n      throw new Error(\n        \"Looks like you have nested a 'NavigationContainer' inside another. Normally you need only one container at the root of the app, so this was probably an error. If this was intentional, pass 'independent={true}' explicitly. Note that this will make the child navigators disconnected from the parent and you won't be able to navigate between them.\"\n      );\n    }\n\n    const [state, getState, setState, scheduleUpdate, flushUpdates] =\n      useSyncState<State>(() =>\n        getPartialState(initialState == null ? undefined : initialState)\n      );\n\n    const isFirstMountRef = React.useRef<boolean>(true);\n\n    const navigatorKeyRef = React.useRef<string | undefined>();\n\n    const getKey = React.useCallback(() => navigatorKeyRef.current, []);\n\n    const setKey = React.useCallback((key: string) => {\n      navigatorKeyRef.current = key;\n    }, []);\n\n    const { listeners, addListener } = useChildListeners();\n\n    const { keyedListeners, addKeyedListener } = useKeyedChildListeners();\n\n    const dispatch = React.useCallback(\n      (\n        action:\n          | NavigationAction\n          | ((state: NavigationState) => NavigationAction)\n      ) => {\n        if (listeners.focus[0] == null) {\n          console.error(NOT_INITIALIZED_ERROR);\n        } else {\n          listeners.focus[0]((navigation) => navigation.dispatch(action));\n        }\n      },\n      [listeners.focus]\n    );\n\n    const canGoBack = React.useCallback(() => {\n      if (listeners.focus[0] == null) {\n        return false;\n      }\n\n      const { result, handled } = listeners.focus[0]((navigation) =>\n        navigation.canGoBack()\n      );\n\n      if (handled) {\n        return result;\n      } else {\n        return false;\n      }\n    }, [listeners.focus]);\n\n    const resetRoot = React.useCallback(\n      (state?: PartialState<NavigationState> | NavigationState) => {\n        const target = state?.key ?? keyedListeners.getState.root?.().key;\n\n        if (target == null) {\n          console.error(NOT_INITIALIZED_ERROR);\n        } else {\n          listeners.focus[0]((navigation) =>\n            navigation.dispatch({\n              ...CommonActions.reset(state),\n              target,\n            })\n          );\n        }\n      },\n      [keyedListeners.getState, listeners.focus]\n    );\n\n    const getRootState = React.useCallback(() => {\n      return keyedListeners.getState.root?.();\n    }, [keyedListeners.getState]);\n\n    const getCurrentRoute = React.useCallback(() => {\n      const state = getRootState();\n\n      if (state == null) {\n        return undefined;\n      }\n\n      const route = findFocusedRoute(state);\n\n      return route as Route<string> | undefined;\n    }, [getRootState]);\n\n    const emitter = useEventEmitter<NavigationContainerEventMap>();\n\n    const { addOptionsGetter, getCurrentOptions } = useOptionsGetters({});\n\n    const navigation: NavigationContainerRef<ParamListBase> = React.useMemo(\n      () => ({\n        ...Object.keys(CommonActions).reduce<any>((acc, name) => {\n          acc[name] = (...args: any[]) =>\n            // @ts-expect-error: this is ok\n            dispatch(CommonActions[name](...args));\n          return acc;\n        }, {}),\n        ...emitter.create('root'),\n        dispatch,\n        resetRoot,\n        isFocused: () => true,\n        canGoBack,\n        getParent: () => undefined,\n        getState: () => stateRef.current,\n        getRootState,\n        getCurrentRoute,\n        getCurrentOptions,\n        isReady: () => listeners.focus[0] != null,\n      }),\n      [\n        canGoBack,\n        dispatch,\n        emitter,\n        getCurrentOptions,\n        getCurrentRoute,\n        getRootState,\n        listeners.focus,\n        resetRoot,\n      ]\n    );\n\n    React.useImperativeHandle(ref, () => navigation, [navigation]);\n\n    const onDispatchAction = React.useCallback(\n      (action: NavigationAction, noop: boolean) => {\n        emitter.emit({\n          type: '__unsafe_action__',\n          data: { action, noop, stack: stackRef.current },\n        });\n      },\n      [emitter]\n    );\n\n    const lastEmittedOptionsRef = React.useRef<object | undefined>();\n\n    const onOptionsChange = React.useCallback(\n      (options) => {\n        if (lastEmittedOptionsRef.current === options) {\n          return;\n        }\n\n        lastEmittedOptionsRef.current = options;\n\n        emitter.emit({\n          type: 'options',\n          data: { options },\n        });\n      },\n      [emitter]\n    );\n\n    const stackRef = React.useRef<string | undefined>();\n\n    const builderContext = React.useMemo(\n      () => ({\n        addListener,\n        addKeyedListener,\n        onDispatchAction,\n        onOptionsChange,\n        stackRef,\n      }),\n      [addListener, addKeyedListener, onDispatchAction, onOptionsChange]\n    );\n\n    const scheduleContext = React.useMemo(\n      () => ({ scheduleUpdate, flushUpdates }),\n      [scheduleUpdate, flushUpdates]\n    );\n\n    const isInitialRef = React.useRef(true);\n\n    const getIsInitial = React.useCallback(() => isInitialRef.current, []);\n\n    const context = React.useMemo(\n      () => ({\n        state,\n        getState,\n        setState,\n        getKey,\n        setKey,\n        getIsInitial,\n        addOptionsGetter,\n      }),\n      [\n        state,\n        getState,\n        setState,\n        getKey,\n        setKey,\n        getIsInitial,\n        addOptionsGetter,\n      ]\n    );\n\n    const onStateChangeRef = React.useRef(onStateChange);\n    const stateRef = React.useRef(state);\n\n    React.useEffect(() => {\n      isInitialRef.current = false;\n      onStateChangeRef.current = onStateChange;\n      stateRef.current = state;\n    });\n\n    React.useEffect(() => {\n      const hydratedState = getRootState();\n\n      if (process.env.NODE_ENV !== 'production') {\n        if (hydratedState !== undefined) {\n          const serializableResult = checkSerializable(hydratedState);\n\n          if (!serializableResult.serializable) {\n            const { location, reason } = serializableResult;\n\n            let path = '';\n            let pointer: Record<any, any> = hydratedState;\n            let params = false;\n\n            for (let i = 0; i < location.length; i++) {\n              const curr = location[i];\n              const prev = location[i - 1];\n\n              pointer = pointer[curr];\n\n              if (!params && curr === 'state') {\n                continue;\n              } else if (!params && curr === 'routes') {\n                if (path) {\n                  path += ' > ';\n                }\n              } else if (\n                !params &&\n                typeof curr === 'number' &&\n                prev === 'routes'\n              ) {\n                path += pointer?.name;\n              } else if (!params) {\n                path += ` > ${curr}`;\n                params = true;\n              } else {\n                if (typeof curr === 'number' || /^[0-9]+$/.test(curr)) {\n                  path += `[${curr}]`;\n                } else if (/^[a-z$_]+$/i.test(curr)) {\n                  path += `.${curr}`;\n                } else {\n                  path += `[${JSON.stringify(curr)}]`;\n                }\n              }\n            }\n\n            const message = `Non-serializable values were found in the navigation state. Check:\\n\\n${path} (${reason})\\n\\nThis can break usage such as persisting and restoring state. This might happen if you passed non-serializable values such as function, class instances etc. in params. If you need to use components with callbacks in your options, you can use 'navigation.setOptions' instead. See https://reactnavigation.org/docs/troubleshooting#i-get-the-warning-non-serializable-values-were-found-in-the-navigation-state for more details.`;\n\n            if (!serializableWarnings.includes(message)) {\n              serializableWarnings.push(message);\n              console.warn(message);\n            }\n          }\n\n          const duplicateRouteNamesResult =\n            checkDuplicateRouteNames(hydratedState);\n\n          if (duplicateRouteNamesResult.length) {\n            const message = `Found screens with the same name nested inside one another. Check:\\n${duplicateRouteNamesResult.map(\n              (locations) => `\\n${locations.join(', ')}`\n            )}\\n\\nThis can cause confusing behavior during navigation. Consider using unique names for each screen instead.`;\n\n            if (!duplicateNameWarnings.includes(message)) {\n              duplicateNameWarnings.push(message);\n              console.warn(message);\n            }\n          }\n        }\n      }\n\n      emitter.emit({ type: 'state', data: { state } });\n\n      if (!isFirstMountRef.current && onStateChangeRef.current) {\n        onStateChangeRef.current(hydratedState);\n      }\n\n      isFirstMountRef.current = false;\n    }, [getRootState, emitter, state]);\n\n    const defaultOnUnhandledAction = React.useCallback(\n      (action: NavigationAction) => {\n        if (process.env.NODE_ENV === 'production') {\n          return;\n        }\n\n        const payload: Record<string, any> | undefined = action.payload;\n\n        let message = `The action '${action.type}'${\n          payload ? ` with payload ${JSON.stringify(action.payload)}` : ''\n        } was not handled by any navigator.`;\n\n        switch (action.type) {\n          case 'NAVIGATE':\n          case 'PUSH':\n          case 'REPLACE':\n          case 'JUMP_TO':\n            if (payload?.name) {\n              message += `\\n\\nDo you have a screen named '${payload.name}'?\\n\\nIf you're trying to navigate to a screen in a nested navigator, see https://reactnavigation.org/docs/nesting-navigators#navigating-to-a-screen-in-a-nested-navigator.`;\n            } else {\n              message += `\\n\\nYou need to pass the name of the screen to navigate to.\\n\\nSee https://reactnavigation.org/docs/navigation-actions for usage.`;\n            }\n\n            break;\n          case 'GO_BACK':\n          case 'POP':\n          case 'POP_TO_TOP':\n            message += `\\n\\nIs there any screen to go back to?`;\n            break;\n          case 'OPEN_DRAWER':\n          case 'CLOSE_DRAWER':\n          case 'TOGGLE_DRAWER':\n            message += `\\n\\nIs your screen inside a Drawer navigator?`;\n            break;\n        }\n\n        message += `\\n\\nThis is a development-only warning and won't be shown in production.`;\n\n        console.error(message);\n      },\n      []\n    );\n\n    let element = (\n      <NavigationContainerRefContext.Provider value={navigation}>\n        <ScheduleUpdateContext.Provider value={scheduleContext}>\n          <NavigationBuilderContext.Provider value={builderContext}>\n            <NavigationStateContext.Provider value={context}>\n              <UnhandledActionContext.Provider\n                value={onUnhandledAction ?? defaultOnUnhandledAction}\n              >\n                <EnsureSingleNavigator>{children}</EnsureSingleNavigator>\n              </UnhandledActionContext.Provider>\n            </NavigationStateContext.Provider>\n          </NavigationBuilderContext.Provider>\n        </ScheduleUpdateContext.Provider>\n      </NavigationContainerRefContext.Provider>\n    );\n\n    if (independent) {\n      // We need to clear any existing contexts for nested independent container to work correctly\n      element = (\n        <NavigationRouteContext.Provider value={undefined}>\n          <NavigationContext.Provider value={undefined}>\n            {element}\n          </NavigationContext.Provider>\n        </NavigationRouteContext.Provider>\n      );\n    }\n\n    return element;\n  }\n);\n\nexport default BaseNavigationContainer;\n"]}