91cde19bb59a2070525b2d1a12fb8a11
"use strict";

var _interopRequireDefault2 = require("@babel/runtime/helpers/interopRequireDefault");

var _objectWithoutProperties2 = _interopRequireDefault2(require("@babel/runtime/helpers/objectWithoutProperties"));

var _excluded = ["value", "disabled", "onValueChange", "color", "theme"];
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var React = _interopRequireWildcard(require("react"));

var _colors = require("../styles/colors");

var _reactNative = require("react-native");

var _color = _interopRequireDefault(require("color"));

var _theming = require("../core/theming");

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

function _getRequireWildcardCache() {
  if (typeof WeakMap !== "function") return null;
  var cache = new WeakMap();

  _getRequireWildcardCache = function _getRequireWildcardCache() {
    return cache;
  };

  return cache;
}

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  }

  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }

  var cache = _getRequireWildcardCache();

  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }

  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }

  newObj.default = obj;

  if (cache) {
    cache.set(obj, newObj);
  }

  return newObj;
}

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

var version = _reactNative.NativeModules.PlatformConstants ? _reactNative.NativeModules.PlatformConstants.reactNativeVersion : undefined;

var Switch = function Switch(_ref) {
  var value = _ref.value,
      disabled = _ref.disabled,
      onValueChange = _ref.onValueChange,
      color = _ref.color,
      theme = _ref.theme,
      rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);
  var checkedColor = color || theme.colors.accent;
  var onTintColor = _reactNative.Platform.OS === 'ios' ? checkedColor : disabled ? theme.dark ? (0, _color.default)(_colors.white).alpha(0.1).rgb().string() : (0, _color.default)(_colors.black).alpha(0.12).rgb().string() : (0, _color.default)(checkedColor).alpha(0.5).rgb().string();
  var thumbTintColor = _reactNative.Platform.OS === 'ios' ? undefined : disabled ? theme.dark ? _colors.grey800 : _colors.grey400 : value ? checkedColor : theme.dark ? _colors.grey400 : _colors.grey50;
  var props = version && version.major === 0 && version.minor <= 56 ? {
    onTintColor: onTintColor,
    thumbTintColor: thumbTintColor
  } : _reactNative.Platform.OS === 'web' ? {
    activeTrackColor: onTintColor,
    thumbColor: thumbTintColor,
    activeThumbColor: checkedColor
  } : {
    thumbColor: thumbTintColor,
    trackColor: {
      true: onTintColor,
      false: ''
    }
  };
  return React.createElement(_reactNative.Switch, _extends({
    value: value,
    disabled: disabled,
    onValueChange: disabled ? undefined : onValueChange
  }, props, rest));
};

var _default = (0, _theming.withTheme)(Switch);

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBQUE7O0FBQ0E7O0FBQ0E7O0FBT0E7O0FBQ0E7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUVBLElBQU1BLE9BQU8sR0FBR0MsMkJBQWNDLGlCQUFkRCxHQUNaQSwyQkFBY0MsaUJBQWRELENBQWdDRSxrQkFEcEJGLEdBRVpHLFNBRko7O0FBa0VBLElBQU1DLE1BQU0sR0FBRyxTQUFUQSxNQUFTLE9BT0Y7QUFBQSxNQU5YQyxLQU1XLFFBTlhBLEtBTVc7QUFBQSxNQUxYQyxRQUtXLFFBTFhBLFFBS1c7QUFBQSxNQUpYQyxhQUlXLFFBSlhBLGFBSVc7QUFBQSxNQUhYQyxLQUdXLFFBSFhBLEtBR1c7QUFBQSxNQUZYQyxLQUVXLFFBRlhBLEtBRVc7QUFBQSxNQURSQyxJQUNRO0FBQ1gsTUFBTUMsWUFBWSxHQUFHSCxLQUFLLElBQUlDLEtBQUssQ0FBQ0csTUFBTkgsQ0FBYUksTUFBM0M7QUFFQSxNQUFNQyxXQUFXLEdBQ2ZDLHNCQUFTQyxFQUFURCxLQUFnQixLQUFoQkEsR0FDSUosWUFESkksR0FFSVQsUUFBUSxHQUNSRyxLQUFLLENBQUNRLElBQU5SLEdBQ0Usb0JBQVNTLGFBQVQsRUFBZ0JDLEtBQWhCLENBQXNCLEdBQXRCLEVBQTJCQyxHQUEzQixHQUFpQ0MsTUFBakMsRUFERlosR0FFRSxvQkFBU2EsYUFBVCxFQUFnQkgsS0FBaEIsQ0FBc0IsSUFBdEIsRUFBNEJDLEdBQTVCLEdBQWtDQyxNQUFsQyxFQUhNLEdBSVIsb0JBQVNWLFlBQVQsRUFBdUJRLEtBQXZCLENBQTZCLEdBQTdCLEVBQWtDQyxHQUFsQyxHQUF3Q0MsTUFBeEMsRUFQTjtBQVNBLE1BQU1FLGNBQWMsR0FDbEJSLHNCQUFTQyxFQUFURCxLQUFnQixLQUFoQkEsR0FDSVosU0FESlksR0FFSVQsUUFBUSxHQUNSRyxLQUFLLENBQUNRLElBQU5SLEdBQ0VlLGVBREZmLEdBRUVnQixlQUhNLEdBSVJwQixLQUFLLEdBQ0xNLFlBREssR0FFTEYsS0FBSyxDQUFDUSxJQUFOUixHQUNBZ0IsZUFEQWhCLEdBRUFpQixjQVhOO0FBYUEsTUFBTUMsS0FBSyxHQUNUNUIsT0FBTyxJQUFJQSxPQUFPLENBQUM2QixLQUFSN0IsS0FBa0IsQ0FBN0JBLElBQWtDQSxPQUFPLENBQUM4QixLQUFSOUIsSUFBaUIsRUFBbkRBLEdBQ0k7QUFDRWUsZUFERixFQUNFQSxXQURGO0FBRUVTO0FBRkYsR0FESnhCLEdBS0lnQixzQkFBU0MsRUFBVEQsS0FBZ0IsS0FBaEJBLEdBQ0E7QUFDRWUsb0JBQWdCLEVBQUVoQixXQURwQjtBQUVFaUIsY0FBVSxFQUFFUixjQUZkO0FBR0VTLG9CQUFnQixFQUFFckI7QUFIcEIsR0FEQUksR0FNQTtBQUNFZ0IsY0FBVSxFQUFFUixjQURkO0FBRUVVLGNBQVUsRUFBRTtBQUNWQyxVQUFJLEVBQUVwQixXQURJO0FBRVZxQixXQUFLLEVBQUU7QUFGRztBQUZkLEdBWk47QUFvQkEsU0FDRUMsb0JBQUNDLG1CQUFEO0FBQ0VoQyxTQUFLLEVBQUVBLEtBRFQ7QUFFRUMsWUFBUSxFQUFFQSxRQUZaO0FBR0VDLGlCQUFhLEVBQUVELFFBQVEsR0FBR0gsU0FBSCxHQUFlSTtBQUh4QyxLQUlNb0IsS0FKTixFQUtNakIsSUFMTixFQURGO0FBcERGOztlQStEZSx3QkFBVU4sTUFBViIsIm5hbWVzIjpbInZlcnNpb24iLCJOYXRpdmVNb2R1bGVzIiwiUGxhdGZvcm1Db25zdGFudHMiLCJyZWFjdE5hdGl2ZVZlcnNpb24iLCJ1bmRlZmluZWQiLCJTd2l0Y2giLCJ2YWx1ZSIsImRpc2FibGVkIiwib25WYWx1ZUNoYW5nZSIsImNvbG9yIiwidGhlbWUiLCJyZXN0IiwiY2hlY2tlZENvbG9yIiwiY29sb3JzIiwiYWNjZW50Iiwib25UaW50Q29sb3IiLCJQbGF0Zm9ybSIsIk9TIiwiZGFyayIsIndoaXRlIiwiYWxwaGEiLCJyZ2IiLCJzdHJpbmciLCJibGFjayIsInRodW1iVGludENvbG9yIiwiZ3JleTgwMCIsImdyZXk0MDAiLCJncmV5NTAiLCJwcm9wcyIsIm1ham9yIiwibWlub3IiLCJhY3RpdmVUcmFja0NvbG9yIiwidGh1bWJDb2xvciIsImFjdGl2ZVRodW1iQ29sb3IiLCJ0cmFja0NvbG9yIiwidHJ1ZSIsImZhbHNlIiwiUmVhY3QiLCJfcmVhY3ROYXRpdmUiXSwic291cmNlcyI6WyJTd2l0Y2gudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IGdyZXk0MDAsIGdyZXk4MDAsIGdyZXk1MCwgd2hpdGUsIGJsYWNrIH0gZnJvbSAnLi4vc3R5bGVzL2NvbG9ycyc7XG5pbXBvcnQge1xuICBOYXRpdmVNb2R1bGVzLFxuICBQbGF0Zm9ybSxcbiAgU3R5bGVQcm9wLFxuICBTd2l0Y2ggYXMgTmF0aXZlU3dpdGNoLFxuICBWaWV3U3R5bGUsXG59IGZyb20gJ3JlYWN0LW5hdGl2ZSc7XG5pbXBvcnQgc2V0Q29sb3IgZnJvbSAnY29sb3InO1xuaW1wb3J0IHsgd2l0aFRoZW1lIH0gZnJvbSAnLi4vY29yZS90aGVtaW5nJztcblxuY29uc3QgdmVyc2lvbiA9IE5hdGl2ZU1vZHVsZXMuUGxhdGZvcm1Db25zdGFudHNcbiAgPyBOYXRpdmVNb2R1bGVzLlBsYXRmb3JtQ29uc3RhbnRzLnJlYWN0TmF0aXZlVmVyc2lvblxuICA6IHVuZGVmaW5lZDtcblxudHlwZSBQcm9wcyA9IFJlYWN0LkNvbXBvbmVudFByb3BzV2l0aFJlZjx0eXBlb2YgTmF0aXZlU3dpdGNoPiAmIHtcbiAgLyoqXG4gICAqIERpc2FibGUgdG9nZ2xpbmcgdGhlIHN3aXRjaC5cbiAgICovXG4gIGRpc2FibGVkPzogYm9vbGVhbjtcbiAgLyoqXG4gICAqIFZhbHVlIG9mIHRoZSBzd2l0Y2gsIHRydWUgbWVhbnMgJ29uJywgZmFsc2UgbWVhbnMgJ29mZicuXG4gICAqL1xuICB2YWx1ZT86IGJvb2xlYW47XG4gIC8qKlxuICAgKiBDdXN0b20gY29sb3IgZm9yIHN3aXRjaC5cbiAgICovXG4gIGNvbG9yPzogc3RyaW5nO1xuICAvKipcbiAgICogQ2FsbGJhY2sgY2FsbGVkIHdpdGggdGhlIG5ldyB2YWx1ZSB3aGVuIGl0IGNoYW5nZXMuXG4gICAqL1xuICBvblZhbHVlQ2hhbmdlPzogRnVuY3Rpb247XG4gIHN0eWxlPzogU3R5bGVQcm9wPFZpZXdTdHlsZT47XG4gIC8qKlxuICAgKiBAb3B0aW9uYWxcbiAgICovXG4gIHRoZW1lOiBSZWFjdE5hdGl2ZVBhcGVyLlRoZW1lO1xufTtcblxuLyoqXG4gKiBTd2l0Y2ggaXMgYSB2aXN1YWwgdG9nZ2xlIGJldHdlZW4gdHdvIG11dHVhbGx5IGV4Y2x1c2l2ZSBzdGF0ZXMg4oCUIG9uIGFuZCBvZmYuXG4gKlxuICogPGRpdiBjbGFzcz1cInNjcmVlbnNob3RzXCI+XG4gKiAgIDxmaWd1cmU+XG4gKiAgICAgPGltZyBzcmM9XCJzY3JlZW5zaG90cy9zd2l0Y2gtZW5hYmxlZC5hbmRyb2lkLnBuZ1wiIC8+XG4gKiAgICAgPGZpZ2NhcHRpb24+QW5kcm9pZCAoZW5hYmxlZCk8L2ZpZ2NhcHRpb24+XG4gKiAgIDwvZmlndXJlPlxuICogICA8ZmlndXJlPlxuICogICAgIDxpbWcgc3JjPVwic2NyZWVuc2hvdHMvc3dpdGNoLWRpc2FibGVkLmFuZHJvaWQucG5nXCIgLz5cbiAqICAgICA8ZmlnY2FwdGlvbj5BbmRyb2lkIChkaXNhYmxlZCk8L2ZpZ2NhcHRpb24+XG4gKiAgIDwvZmlndXJlPlxuICogICA8ZmlndXJlPlxuICogICAgIDxpbWcgc3JjPVwic2NyZWVuc2hvdHMvc3dpdGNoLWVuYWJsZWQuaW9zLnBuZ1wiIC8+XG4gKiAgICAgPGZpZ2NhcHRpb24+aU9TIChlbmFibGVkKTwvZmlnY2FwdGlvbj5cbiAqICAgPC9maWd1cmU+XG4gKiAgIDxmaWd1cmU+XG4gKiAgICAgPGltZyBzcmM9XCJzY3JlZW5zaG90cy9zd2l0Y2gtZGlzYWJsZWQuaW9zLnBuZ1wiIC8+XG4gKiAgICAgPGZpZ2NhcHRpb24+aU9TIChkaXNhYmxlZCk8L2ZpZ2NhcHRpb24+XG4gKiAgIDwvZmlndXJlPlxuICogPC9kaXY+XG4gKlxuICogIyMgVXNhZ2VcbiAqIGBgYGpzXG4gKiBpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG4gKiBpbXBvcnQgeyBTd2l0Y2ggfSBmcm9tICdyZWFjdC1uYXRpdmUtcGFwZXInO1xuICpcbiAqIGNvbnN0IE15Q29tcG9uZW50ID0gKCkgPT4ge1xuICogICBjb25zdCBbaXNTd2l0Y2hPbiwgc2V0SXNTd2l0Y2hPbl0gPSBSZWFjdC51c2VTdGF0ZShmYWxzZSk7XG4gKlxuICogICBjb25zdCBvblRvZ2dsZVN3aXRjaCA9ICgpID0+IHNldElzU3dpdGNoT24oIWlzU3dpdGNoT24pO1xuICpcbiAqICAgcmV0dXJuIDxTd2l0Y2ggdmFsdWU9e2lzU3dpdGNoT259IG9uVmFsdWVDaGFuZ2U9e29uVG9nZ2xlU3dpdGNofSAvPjtcbiAqIH07XG4gKlxuICogZXhwb3J0IGRlZmF1bHQgTXlDb21wb25lbnQ7XG4gKiBgYGBcbiAqL1xuY29uc3QgU3dpdGNoID0gKHtcbiAgdmFsdWUsXG4gIGRpc2FibGVkLFxuICBvblZhbHVlQ2hhbmdlLFxuICBjb2xvcixcbiAgdGhlbWUsXG4gIC4uLnJlc3Rcbn06IFByb3BzKSA9PiB7XG4gIGNvbnN0IGNoZWNrZWRDb2xvciA9IGNvbG9yIHx8IHRoZW1lLmNvbG9ycy5hY2NlbnQ7XG5cbiAgY29uc3Qgb25UaW50Q29sb3IgPVxuICAgIFBsYXRmb3JtLk9TID09PSAnaW9zJ1xuICAgICAgPyBjaGVja2VkQ29sb3JcbiAgICAgIDogZGlzYWJsZWRcbiAgICAgID8gdGhlbWUuZGFya1xuICAgICAgICA/IHNldENvbG9yKHdoaXRlKS5hbHBoYSgwLjEpLnJnYigpLnN0cmluZygpXG4gICAgICAgIDogc2V0Q29sb3IoYmxhY2spLmFscGhhKDAuMTIpLnJnYigpLnN0cmluZygpXG4gICAgICA6IHNldENvbG9yKGNoZWNrZWRDb2xvcikuYWxwaGEoMC41KS5yZ2IoKS5zdHJpbmcoKTtcblxuICBjb25zdCB0aHVtYlRpbnRDb2xvciA9XG4gICAgUGxhdGZvcm0uT1MgPT09ICdpb3MnXG4gICAgICA/IHVuZGVmaW5lZFxuICAgICAgOiBkaXNhYmxlZFxuICAgICAgPyB0aGVtZS5kYXJrXG4gICAgICAgID8gZ3JleTgwMFxuICAgICAgICA6IGdyZXk0MDBcbiAgICAgIDogdmFsdWVcbiAgICAgID8gY2hlY2tlZENvbG9yXG4gICAgICA6IHRoZW1lLmRhcmtcbiAgICAgID8gZ3JleTQwMFxuICAgICAgOiBncmV5NTA7XG5cbiAgY29uc3QgcHJvcHMgPVxuICAgIHZlcnNpb24gJiYgdmVyc2lvbi5tYWpvciA9PT0gMCAmJiB2ZXJzaW9uLm1pbm9yIDw9IDU2XG4gICAgICA/IHtcbiAgICAgICAgICBvblRpbnRDb2xvcixcbiAgICAgICAgICB0aHVtYlRpbnRDb2xvcixcbiAgICAgICAgfVxuICAgICAgOiBQbGF0Zm9ybS5PUyA9PT0gJ3dlYidcbiAgICAgID8ge1xuICAgICAgICAgIGFjdGl2ZVRyYWNrQ29sb3I6IG9uVGludENvbG9yLFxuICAgICAgICAgIHRodW1iQ29sb3I6IHRodW1iVGludENvbG9yLFxuICAgICAgICAgIGFjdGl2ZVRodW1iQ29sb3I6IGNoZWNrZWRDb2xvcixcbiAgICAgICAgfVxuICAgICAgOiB7XG4gICAgICAgICAgdGh1bWJDb2xvcjogdGh1bWJUaW50Q29sb3IsXG4gICAgICAgICAgdHJhY2tDb2xvcjoge1xuICAgICAgICAgICAgdHJ1ZTogb25UaW50Q29sb3IsXG4gICAgICAgICAgICBmYWxzZTogJycsXG4gICAgICAgICAgfSxcbiAgICAgICAgfTtcblxuICByZXR1cm4gKFxuICAgIDxOYXRpdmVTd2l0Y2hcbiAgICAgIHZhbHVlPXt2YWx1ZX1cbiAgICAgIGRpc2FibGVkPXtkaXNhYmxlZH1cbiAgICAgIG9uVmFsdWVDaGFuZ2U9e2Rpc2FibGVkID8gdW5kZWZpbmVkIDogb25WYWx1ZUNoYW5nZX1cbiAgICAgIHsuLi5wcm9wc31cbiAgICAgIHsuLi5yZXN0fVxuICAgIC8+XG4gICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCB3aXRoVGhlbWUoU3dpdGNoKTtcbiJdfQ==