cd0440c86a092907482d0c9ddc8b7e9a
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.toArray = toArray;
exports.withPrevAndCurrent = withPrevAndCurrent;
exports.hasProperty = hasProperty;
exports.isJestEnv = isJestEnv;
exports.tagMessage = tagMessage;
exports.isFabric = isFabric;

function toArray(object) {
  if (!Array.isArray(object)) {
    return [object];
  }

  return object;
}

function withPrevAndCurrent(array, mapFn) {
  var previousArr = [null];
  var currentArr = (0, _toConsumableArray2.default)(array);
  var transformedArr = [];
  currentArr.forEach(function (current, i) {
    var previous = previousArr[i];
    var transformed = mapFn(previous, current);
    previousArr.push(transformed);
    transformedArr.push(transformed);
  });
  return transformedArr;
}

function hasProperty(object, key) {
  return Object.prototype.hasOwnProperty.call(object, key);
}

function isJestEnv() {
  return hasProperty(global, 'process') && !!process.env.JEST_WORKER_ID;
}

function tagMessage(msg) {
  return "[react-native-gesture-handler] " + msg;
}

function isFabric() {
  var _global;

  return !!((_global = global) !== null && _global !== void 0 && _global.nativeFabricUIManager);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7OztBQUFPLFNBQVNBLE9BQVQsQ0FBb0JDLE1BQXBCLEVBQTBDO0FBQy9DLE1BQUksQ0FBQ0MsS0FBSyxDQUFDQyxPQUFORCxDQUFjRCxNQUFkQyxDQUFMLEVBQTRCO0FBQzFCLFdBQU8sQ0FBQ0QsTUFBRCxDQUFQO0FBQ0Q7O0FBRUQsU0FBT0EsTUFBUDtBQUNEOztBQU1NLFNBQVNHLGtCQUFULENBQ0xDLEtBREssRUFFTEMsS0FGSyxFQUdVO0FBQ2YsTUFBTUMsV0FBbUMsR0FBRyxDQUFDLElBQUQsQ0FBNUM7QUFDQSxNQUFNQyxVQUFVLG9DQUFPSCxLQUFQLENBQWhCO0FBQ0EsTUFBTUksY0FBNkIsR0FBRyxFQUF0QztBQUNBRCxZQUFVLENBQUNFLE9BQVhGLENBQW1CLFVBQUNHLE9BQUQsRUFBVUMsQ0FBVixFQUFnQjtBQUNqQyxRQUFNQyxRQUFRLEdBQUdOLFdBQVcsQ0FBQ0ssQ0FBRCxDQUE1QjtBQUNBLFFBQU1FLFdBQVcsR0FBR1IsS0FBSyxDQUFDTyxRQUFELEVBQVdGLE9BQVgsQ0FBekI7QUFDQUosZUFBVyxDQUFDUSxJQUFaUixDQUFpQk8sV0FBakJQO0FBQ0FFLGtCQUFjLENBQUNNLElBQWZOLENBQW9CSyxXQUFwQkw7QUFKRjtBQU1BLFNBQU9BLGNBQVA7OztBQUlLLFNBQVNPLFdBQVQsQ0FBcUJmLE1BQXJCLEVBQXFDZ0IsR0FBckMsRUFBa0Q7QUFDdkQsU0FBT0MsTUFBTSxDQUFDQyxTQUFQRCxDQUFpQkUsY0FBakJGLENBQWdDRyxJQUFoQ0gsQ0FBcUNqQixNQUFyQ2lCLEVBQTZDRCxHQUE3Q0MsQ0FBUDtBQUNEOztBQUVNLFNBQVNJLFNBQVQsR0FBOEI7QUFDbkMsU0FBT04sV0FBVyxDQUFDTyxNQUFELEVBQVMsU0FBVCxDQUFYUCxJQUFrQyxDQUFDLENBQUNRLE9BQU8sQ0FBQ0MsR0FBUkQsQ0FBWUUsY0FBdkQ7QUFDRDs7QUFFTSxTQUFTQyxVQUFULENBQW9CQyxHQUFwQixFQUFpQztBQUN0Qyw2Q0FBeUNBLEdBQXpDO0FBQ0Q7O0FBRU0sU0FBU0MsUUFBVCxHQUE2QjtBQUFBOztBQUVsQyxTQUFPLENBQUMsYUFBQ04sTUFBRCxvQ0FBQ08sUUFBUUMscUJBQVQsQ0FBUjtBQUNEIiwibmFtZXMiOlsidG9BcnJheSIsIm9iamVjdCIsIkFycmF5IiwiaXNBcnJheSIsIndpdGhQcmV2QW5kQ3VycmVudCIsImFycmF5IiwibWFwRm4iLCJwcmV2aW91c0FyciIsImN1cnJlbnRBcnIiLCJ0cmFuc2Zvcm1lZEFyciIsImZvckVhY2giLCJjdXJyZW50IiwiaSIsInByZXZpb3VzIiwidHJhbnNmb3JtZWQiLCJwdXNoIiwiaGFzUHJvcGVydHkiLCJrZXkiLCJPYmplY3QiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJpc0plc3RFbnYiLCJnbG9iYWwiLCJwcm9jZXNzIiwiZW52IiwiSkVTVF9XT1JLRVJfSUQiLCJ0YWdNZXNzYWdlIiwibXNnIiwiaXNGYWJyaWMiLCJfZ2xvYmFsIiwibmF0aXZlRmFicmljVUlNYW5hZ2VyIl0sInNvdXJjZXMiOlsidXRpbHMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGZ1bmN0aW9uIHRvQXJyYXk8VD4ob2JqZWN0OiBUIHwgVFtdKTogVFtdIHtcbiAgaWYgKCFBcnJheS5pc0FycmF5KG9iamVjdCkpIHtcbiAgICByZXR1cm4gW29iamVjdF07XG4gIH1cblxuICByZXR1cm4gb2JqZWN0O1xufVxuXG5leHBvcnQgdHlwZSB3aXRoUHJldkFuZEN1cnJlbnRNYXBGbjxULCBUcmFuc2Zvcm1lZD4gPSAoXG4gIHByZXZpb3VzOiBUcmFuc2Zvcm1lZCB8IG51bGwsXG4gIGN1cnJlbnQ6IFRcbikgPT4gVHJhbnNmb3JtZWQ7XG5leHBvcnQgZnVuY3Rpb24gd2l0aFByZXZBbmRDdXJyZW50PFQsIFRyYW5zZm9ybWVkPihcbiAgYXJyYXk6IFRbXSxcbiAgbWFwRm46IHdpdGhQcmV2QW5kQ3VycmVudE1hcEZuPFQsIFRyYW5zZm9ybWVkPlxuKTogVHJhbnNmb3JtZWRbXSB7XG4gIGNvbnN0IHByZXZpb3VzQXJyOiAobnVsbCB8IFRyYW5zZm9ybWVkKVtdID0gW251bGxdO1xuICBjb25zdCBjdXJyZW50QXJyID0gWy4uLmFycmF5XTtcbiAgY29uc3QgdHJhbnNmb3JtZWRBcnI6IFRyYW5zZm9ybWVkW10gPSBbXTtcbiAgY3VycmVudEFyci5mb3JFYWNoKChjdXJyZW50LCBpKSA9PiB7XG4gICAgY29uc3QgcHJldmlvdXMgPSBwcmV2aW91c0FycltpXTtcbiAgICBjb25zdCB0cmFuc2Zvcm1lZCA9IG1hcEZuKHByZXZpb3VzLCBjdXJyZW50KTtcbiAgICBwcmV2aW91c0Fyci5wdXNoKHRyYW5zZm9ybWVkKTtcbiAgICB0cmFuc2Zvcm1lZEFyci5wdXNoKHRyYW5zZm9ybWVkKTtcbiAgfSk7XG4gIHJldHVybiB0cmFuc2Zvcm1lZEFycjtcbn1cblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9iYW4tdHlwZXNcbmV4cG9ydCBmdW5jdGlvbiBoYXNQcm9wZXJ0eShvYmplY3Q6IG9iamVjdCwga2V5OiBzdHJpbmcpIHtcbiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIGtleSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0plc3RFbnYoKTogYm9vbGVhbiB7XG4gIHJldHVybiBoYXNQcm9wZXJ0eShnbG9iYWwsICdwcm9jZXNzJykgJiYgISFwcm9jZXNzLmVudi5KRVNUX1dPUktFUl9JRDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHRhZ01lc3NhZ2UobXNnOiBzdHJpbmcpIHtcbiAgcmV0dXJuIGBbcmVhY3QtbmF0aXZlLWdlc3R1cmUtaGFuZGxlcl0gJHttc2d9YDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzRmFicmljKCk6IGJvb2xlYW4ge1xuICAvLyBAdHMtZXhwZWN0LWVycm9yIG5hdGl2ZUZhYnJpY1VJTWFuYWdlciBpcyBub3QgeWV0IGluY2x1ZGVkIGluIHRoZSBSTiB0eXBlc1xuICByZXR1cm4gISFnbG9iYWw/Lm5hdGl2ZUZhYnJpY1VJTWFuYWdlcjtcbn1cbiJdfQ==