359c5e4a8c05f6329ab898a5b30bb2fe
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _construct2 = _interopRequireDefault(require("@babel/runtime/helpers/construct"));

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.GestureObjects = void 0;

var _flingGesture = require("./flingGesture");

var _forceTouchGesture = require("./forceTouchGesture");

var _gestureComposition = require("./gestureComposition");

var _longPressGesture = require("./longPressGesture");

var _panGesture = require("./panGesture");

var _pinchGesture = require("./pinchGesture");

var _rotationGesture = require("./rotationGesture");

var _tapGesture = require("./tapGesture");

var _nativeGesture = require("./nativeGesture");

var _manualGesture = require("./manualGesture");

var GestureObjects = {
  Tap: function Tap() {
    return new _tapGesture.TapGesture();
  },
  Pan: function Pan() {
    return new _panGesture.PanGesture();
  },
  Pinch: function Pinch() {
    return new _pinchGesture.PinchGesture();
  },
  Rotation: function Rotation() {
    return new _rotationGesture.RotationGesture();
  },
  Fling: function Fling() {
    return new _flingGesture.FlingGesture();
  },
  LongPress: function LongPress() {
    return new _longPressGesture.LongPressGesture();
  },
  ForceTouch: function ForceTouch() {
    return new _forceTouchGesture.ForceTouchGesture();
  },
  Native: function Native() {
    return new _nativeGesture.NativeGesture();
  },
  Manual: function Manual() {
    return new _manualGesture.ManualGesture();
  },
  Race: function Race() {
    for (var _len = arguments.length, gestures = new Array(_len), _key = 0; _key < _len; _key++) {
      gestures[_key] = arguments[_key];
    }

    return (0, _construct2.default)(_gestureComposition.ComposedGesture, gestures);
  },
  Simultaneous: function Simultaneous() {
    for (var _len2 = arguments.length, gestures = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      gestures[_key2] = arguments[_key2];
    }

    return (0, _construct2.default)(_gestureComposition.SimultaneousGesture, gestures);
  },
  Exclusive: function Exclusive() {
    for (var _len3 = arguments.length, gestures = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
      gestures[_key3] = arguments[_key3];
    }

    return (0, _construct2.default)(_gestureComposition.ExclusiveGesture, gestures);
  }
};
exports.GestureObjects = GestureObjects;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFFQTs7QUFLQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFFTyxJQUFNQSxjQUFjLEdBQUc7QUFDNUJDLEtBQUcsRUFBRSxlQUFNO0FBQ1QsV0FBTyxJQUFJQyxzQkFBSixFQUFQO0FBRjBCO0FBSzVCQyxLQUFHLEVBQUUsZUFBTTtBQUNULFdBQU8sSUFBSUMsc0JBQUosRUFBUDtBQU4wQjtBQVM1QkMsT0FBSyxFQUFFLGlCQUFNO0FBQ1gsV0FBTyxJQUFJQywwQkFBSixFQUFQO0FBVjBCO0FBYTVCQyxVQUFRLEVBQUUsb0JBQU07QUFDZCxXQUFPLElBQUlDLGdDQUFKLEVBQVA7QUFkMEI7QUFpQjVCQyxPQUFLLEVBQUUsaUJBQU07QUFDWCxXQUFPLElBQUlDLDBCQUFKLEVBQVA7QUFsQjBCO0FBcUI1QkMsV0FBUyxFQUFFLHFCQUFNO0FBQ2YsV0FBTyxJQUFJQyxrQ0FBSixFQUFQO0FBdEIwQjtBQXlCNUJDLFlBQVUsRUFBRSxzQkFBTTtBQUNoQixXQUFPLElBQUlDLG9DQUFKLEVBQVA7QUExQjBCO0FBNkI1QkMsUUFBTSxFQUFFLGtCQUFNO0FBQ1osV0FBTyxJQUFJQyw0QkFBSixFQUFQO0FBOUIwQjtBQWlDNUJDLFFBQU0sRUFBRSxrQkFBTTtBQUNaLFdBQU8sSUFBSUMsNEJBQUosRUFBUDtBQWxDMEI7QUF5QzVCQyxNQUFJLEVBQUUsZ0JBQTRCO0FBQUEsc0NBQXhCQyxRQUF3QjtBQUF4QkEsY0FBd0I7QUFBQTs7QUFDaEMsb0NBQVdDLG1DQUFYLEVBQThCRCxRQUE5QjtBQTFDMEI7QUFnRDVCRSxjQWhENEIsMEJBZ0RTO0FBQUEsdUNBQXJCRixRQUFxQjtBQUFyQkEsY0FBcUI7QUFBQTs7QUFDbkMsb0NBQVdHLHVDQUFYLEVBQWtDSCxRQUFsQztBQWpEMEI7QUEyRDVCSSxXQTNENEIsdUJBMkRNO0FBQUEsdUNBQXJCSixRQUFxQjtBQUFyQkEsY0FBcUI7QUFBQTs7QUFDaEMsb0NBQVdLLG9DQUFYLEVBQStCTCxRQUEvQjtBQUNEO0FBN0QyQixDQUF2QiIsIm5hbWVzIjpbIkdlc3R1cmVPYmplY3RzIiwiVGFwIiwiVGFwR2VzdHVyZSIsIlBhbiIsIlBhbkdlc3R1cmUiLCJQaW5jaCIsIlBpbmNoR2VzdHVyZSIsIlJvdGF0aW9uIiwiUm90YXRpb25HZXN0dXJlIiwiRmxpbmciLCJGbGluZ0dlc3R1cmUiLCJMb25nUHJlc3MiLCJMb25nUHJlc3NHZXN0dXJlIiwiRm9yY2VUb3VjaCIsIkZvcmNlVG91Y2hHZXN0dXJlIiwiTmF0aXZlIiwiTmF0aXZlR2VzdHVyZSIsIk1hbnVhbCIsIk1hbnVhbEdlc3R1cmUiLCJSYWNlIiwiZ2VzdHVyZXMiLCJDb21wb3NlZEdlc3R1cmUiLCJTaW11bHRhbmVvdXMiLCJTaW11bHRhbmVvdXNHZXN0dXJlIiwiRXhjbHVzaXZlIiwiRXhjbHVzaXZlR2VzdHVyZSJdLCJzb3VyY2VzIjpbImdlc3R1cmVPYmplY3RzLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEZsaW5nR2VzdHVyZSB9IGZyb20gJy4vZmxpbmdHZXN0dXJlJztcbmltcG9ydCB7IEZvcmNlVG91Y2hHZXN0dXJlIH0gZnJvbSAnLi9mb3JjZVRvdWNoR2VzdHVyZSc7XG5pbXBvcnQgeyBHZXN0dXJlIH0gZnJvbSAnLi9nZXN0dXJlJztcbmltcG9ydCB7XG4gIENvbXBvc2VkR2VzdHVyZSxcbiAgRXhjbHVzaXZlR2VzdHVyZSxcbiAgU2ltdWx0YW5lb3VzR2VzdHVyZSxcbn0gZnJvbSAnLi9nZXN0dXJlQ29tcG9zaXRpb24nO1xuaW1wb3J0IHsgTG9uZ1ByZXNzR2VzdHVyZSB9IGZyb20gJy4vbG9uZ1ByZXNzR2VzdHVyZSc7XG5pbXBvcnQgeyBQYW5HZXN0dXJlIH0gZnJvbSAnLi9wYW5HZXN0dXJlJztcbmltcG9ydCB7IFBpbmNoR2VzdHVyZSB9IGZyb20gJy4vcGluY2hHZXN0dXJlJztcbmltcG9ydCB7IFJvdGF0aW9uR2VzdHVyZSB9IGZyb20gJy4vcm90YXRpb25HZXN0dXJlJztcbmltcG9ydCB7IFRhcEdlc3R1cmUgfSBmcm9tICcuL3RhcEdlc3R1cmUnO1xuaW1wb3J0IHsgTmF0aXZlR2VzdHVyZSB9IGZyb20gJy4vbmF0aXZlR2VzdHVyZSc7XG5pbXBvcnQgeyBNYW51YWxHZXN0dXJlIH0gZnJvbSAnLi9tYW51YWxHZXN0dXJlJztcblxuZXhwb3J0IGNvbnN0IEdlc3R1cmVPYmplY3RzID0ge1xuICBUYXA6ICgpID0+IHtcbiAgICByZXR1cm4gbmV3IFRhcEdlc3R1cmUoKTtcbiAgfSxcblxuICBQYW46ICgpID0+IHtcbiAgICByZXR1cm4gbmV3IFBhbkdlc3R1cmUoKTtcbiAgfSxcblxuICBQaW5jaDogKCkgPT4ge1xuICAgIHJldHVybiBuZXcgUGluY2hHZXN0dXJlKCk7XG4gIH0sXG5cbiAgUm90YXRpb246ICgpID0+IHtcbiAgICByZXR1cm4gbmV3IFJvdGF0aW9uR2VzdHVyZSgpO1xuICB9LFxuXG4gIEZsaW5nOiAoKSA9PiB7XG4gICAgcmV0dXJuIG5ldyBGbGluZ0dlc3R1cmUoKTtcbiAgfSxcblxuICBMb25nUHJlc3M6ICgpID0+IHtcbiAgICByZXR1cm4gbmV3IExvbmdQcmVzc0dlc3R1cmUoKTtcbiAgfSxcblxuICBGb3JjZVRvdWNoOiAoKSA9PiB7XG4gICAgcmV0dXJuIG5ldyBGb3JjZVRvdWNoR2VzdHVyZSgpO1xuICB9LFxuXG4gIE5hdGl2ZTogKCkgPT4ge1xuICAgIHJldHVybiBuZXcgTmF0aXZlR2VzdHVyZSgpO1xuICB9LFxuXG4gIE1hbnVhbDogKCkgPT4ge1xuICAgIHJldHVybiBuZXcgTWFudWFsR2VzdHVyZSgpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBCdWlsZHMgYSBjb21wb3NlZCBnZXN0dXJlIGNvbnNpc3Rpbmcgb2YgZ2VzdHVyZXMgcHJvdmlkZWQgYXMgcGFyYW1ldGVycy5cbiAgICogVGhlIGZpcnN0IG9uZSB0aGF0IGJlY29tZXMgYWN0aXZlIGNhbmNlbHMgdGhlIHJlc3Qgb2YgZ2VzdHVyZXMuXG4gICAqL1xuICBSYWNlOiAoLi4uZ2VzdHVyZXM6IEdlc3R1cmVbXSkgPT4ge1xuICAgIHJldHVybiBuZXcgQ29tcG9zZWRHZXN0dXJlKC4uLmdlc3R1cmVzKTtcbiAgfSxcblxuICAvKipcbiAgICogQnVpbGRzIGEgY29tcG9zZWQgZ2VzdHVyZSB0aGF0IGFsbG93cyBhbGwgYmFzZSBnZXN0dXJlcyB0byBydW4gc2ltdWx0YW5lb3VzbHkuXG4gICAqL1xuICBTaW11bHRhbmVvdXMoLi4uZ2VzdHVyZXM6IEdlc3R1cmVbXSkge1xuICAgIHJldHVybiBuZXcgU2ltdWx0YW5lb3VzR2VzdHVyZSguLi5nZXN0dXJlcyk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEJ1aWxkcyBhIGNvbXBvc2VkIGdlc3R1cmUgd2hlcmUgb25seSBvbmUgb2YgdGhlIHByb3ZpZGVkIGdlc3R1cmVzIGNhbiBiZWNvbWUgYWN0aXZlLlxuICAgKiBQcmlvcml0eSBpcyBkZWNpZGVkIHRocm91Z2ggdGhlIG9yZGVyIG9mIGdlc3R1cmVzOiB0aGUgZmlyc3Qgb25lIGhhcyBoaWdoZXIgcHJpb3JpdHlcbiAgICogdGhhbiB0aGUgc2Vjb25kIG9uZSwgc2Vjb25kIG9uZSBoYXMgaGlnaGVyIHByaW9yaXR5IHRoYW4gdGhlIHRoaXJkIG9uZSwgYW5kIHNvIG9uLlxuICAgKiBGb3IgZXhhbXBsZSwgdG8gbWFrZSBhIGdlc3R1cmUgdGhhdCByZWNvZ25pemVzIGJvdGggc2luZ2xlIGFuZCBkb3VibGUgdGFwIHlvdSBuZWVkXG4gICAqIHRvIGNhbGwgRXhjbHVzaXZlKGRvdWJsZVRhcCwgc2luZ2xlVGFwKS5cbiAgICovXG4gIEV4Y2x1c2l2ZSguLi5nZXN0dXJlczogR2VzdHVyZVtdKSB7XG4gICAgcmV0dXJuIG5ldyBFeGNsdXNpdmVHZXN0dXJlKC4uLmdlc3R1cmVzKTtcbiAgfSxcbn07XG4iXX0=