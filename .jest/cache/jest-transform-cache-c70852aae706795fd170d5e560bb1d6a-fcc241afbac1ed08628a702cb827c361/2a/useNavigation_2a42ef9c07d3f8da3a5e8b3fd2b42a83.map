{"version":3,"mappings":";;;;;;;AAAA;;AAEA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAQe,SAASA,aAAT,GAER;AACL,MAAMC,IAAI,GAAGC,KAAK,CAACC,UAAND,CAAiBE,sCAAjBF,CAAb;AACA,MAAMG,UAAU,GAAGH,KAAK,CAACC,UAAND,CAAiBI,0BAAjBJ,CAAnB;;AAEA,MAAIG,UAAU,KAAKE,SAAfF,IAA4BJ,IAAI,KAAKM,SAAzC,EAAoD;AAClD,UAAM,IAAIC,KAAJ,CACJ,kFADI,CAAN;AALG;;AAWL,SAAQH,UAAR,SAAQA,cAAR,WAAQA,gBAAcJ,IAAtB;AACD","names":["useNavigation","root","React","useContext","NavigationContainerRefContext","navigation","NavigationContext","undefined","Error"],"sources":["useNavigation.tsx"],"sourcesContent":["import * as React from 'react';\n\nimport NavigationContainerRefContext from './NavigationContainerRefContext';\nimport NavigationContext from './NavigationContext';\nimport type { NavigationProp } from './types';\n\n/**\n * Hook to access the navigation prop of the parent screen anywhere.\n *\n * @returns Navigation prop of the parent screen.\n */\nexport default function useNavigation<\n  T = NavigationProp<ReactNavigation.RootParamList>\n>(): T {\n  const root = React.useContext(NavigationContainerRefContext);\n  const navigation = React.useContext(NavigationContext);\n\n  if (navigation === undefined && root === undefined) {\n    throw new Error(\n      \"Couldn't find a navigation object. Is your component inside NavigationContainer?\"\n    );\n  }\n\n  // FIXME: Figure out a better way to do this\n  return (navigation ?? root) as unknown as T;\n}\n"]}