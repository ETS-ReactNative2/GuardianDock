{"version":3,"mappings":"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","names":["panGestureHandlerProps","panGestureHandlerCustomNativeProps","panHandlerName","PanGestureHandler","name","allowedProps","baseGestureHandlerProps","config","transformProps","managePanProps","customNativeProps","validatePanGestureHandlerProps","props","Array","isArray","activeOffsetX","Error","activeOffsetY","failOffsetX","failOffsetY","minDist","transformPanGestureHandlerProps","res","undefined","activeOffsetXStart","activeOffsetXEnd","activeOffsetYStart","activeOffsetYEnd","failOffsetXStart","failOffsetXEnd","failOffsetYStart","failOffsetYEnd","__DEV__"],"sources":["PanGestureHandler.ts"],"sourcesContent":["import createHandler from './createHandler';\nimport {\n  BaseGestureHandlerProps,\n  baseGestureHandlerProps,\n} from './gestureHandlerCommon';\n\nexport const panGestureHandlerProps = [\n  'activeOffsetY',\n  'activeOffsetX',\n  'failOffsetY',\n  'failOffsetX',\n  'minDist',\n  'minVelocity',\n  'minVelocityX',\n  'minVelocityY',\n  'minPointers',\n  'maxPointers',\n  'avgTouches',\n  'enableTrackpadTwoFingerGesture',\n] as const;\n\nexport const panGestureHandlerCustomNativeProps = [\n  'activeOffsetYStart',\n  'activeOffsetYEnd',\n  'activeOffsetXStart',\n  'activeOffsetXEnd',\n  'failOffsetYStart',\n  'failOffsetYEnd',\n  'failOffsetXStart',\n  'failOffsetXEnd',\n] as const;\n\nexport type PanGestureHandlerEventPayload = {\n  /**\n   * X coordinate of the current position of the pointer (finger or a leading\n   * pointer when there are multiple fingers placed) relative to the view\n   * attached to the handler. Expressed in point units.\n   */\n  x: number;\n\n  /**\n   * Y coordinate of the current position of the pointer (finger or a leading\n   * pointer when there are multiple fingers placed) relative to the view\n   * attached to the handler. Expressed in point units.\n   */\n  y: number;\n\n  /**\n   * X coordinate of the current position of the pointer (finger or a leading\n   * pointer when there are multiple fingers placed) relative to the window.\n   * The value is expressed in point units. It is recommended to use it instead\n   * of `x` in cases when the original view can be transformed as an effect of\n   * the gesture.\n   */\n  absoluteX: number;\n\n  /**\n   * Y coordinate of the current position of the pointer (finger or a leading\n   * pointer when there are multiple fingers placed) relative to the window.\n   * The value is expressed in point units. It is recommended to use it instead\n   * of `y` in cases when the original view can be transformed as an\n   * effect of the gesture.\n   */\n  absoluteY: number;\n\n  /**\n   * Translation of the pan gesture along X axis accumulated over the time of\n   * the gesture. The value is expressed in the point units.\n   */\n  translationX: number;\n\n  /**\n   * Translation of the pan gesture along Y axis accumulated over the time of\n   * the gesture. The value is expressed in the point units.\n   */\n  translationY: number;\n\n  /**\n   * Velocity of the pan gesture along the X axis in the current moment. The\n   * value is expressed in point units per second.\n   */\n  velocityX: number;\n\n  /**\n   * Velocity of the pan gesture along the Y axis in the current moment. The\n   * value is expressed in point units per second.\n   */\n  velocityY: number;\n};\n\ninterface CommonPanProperties {\n  /**\n   * Minimum distance the finger (or multiple finger) need to travel before the\n   * handler activates. Expressed in points.\n   */\n  minDist?: number;\n\n  /**\n   * Android only.\n   */\n  avgTouches?: boolean;\n\n  /**\n   * Enables two-finger gestures on supported devices, for example iPads with\n   * trackpads. If not enabled the gesture will require click + drag, with\n   * enableTrackpadTwoFingerGesture swiping with two fingers will also trigger\n   * the gesture.\n   */\n  enableTrackpadTwoFingerGesture?: boolean;\n\n  /**\n   * A number of fingers that is required to be placed before handler can\n   * activate. Should be a higher or equal to 0 integer.\n   */\n  minPointers?: number;\n\n  /**\n   * When the given number of fingers is placed on the screen and handler hasn't\n   * yet activated it will fail recognizing the gesture. Should be a higher or\n   * equal to 0 integer.\n   */\n  maxPointers?: number;\n\n  minVelocity?: number;\n  minVelocityX?: number;\n  minVelocityY?: number;\n}\n\nexport interface PanGestureConfig extends CommonPanProperties {\n  activeOffsetYStart?: number;\n  activeOffsetYEnd?: number;\n  activeOffsetXStart?: number;\n  activeOffsetXEnd?: number;\n  failOffsetYStart?: number;\n  failOffsetYEnd?: number;\n  failOffsetXStart?: number;\n  failOffsetXEnd?: number;\n}\n\nexport interface PanGestureHandlerProps\n  extends BaseGestureHandlerProps<PanGestureHandlerEventPayload>,\n    CommonPanProperties {\n  /**\n   * Range along X axis (in points) where fingers travels without activation of\n   * handler. Moving outside of this range implies activation of handler. Range\n   * can be given as an array or a single number. If range is set as an array,\n   * first value must be lower or equal to 0, a the second one higher or equal\n   * to 0. If only one number `p` is given a range of `(-inf, p)` will be used\n   * if `p` is higher or equal to 0 and `(-p, inf)` otherwise.\n   */\n  activeOffsetY?: number | number[];\n\n  /**\n   * Range along X axis (in points) where fingers travels without activation of\n   * handler. Moving outside of this range implies activation of handler. Range\n   * can be given as an array or a single number. If range is set as an array,\n   * first value must be lower or equal to 0, a the second one higher or equal\n   * to 0. If only one number `p` is given a range of `(-inf, p)` will be used\n   * if `p` is higher or equal to 0 and `(-p, inf)` otherwise.\n   */\n  activeOffsetX?: number | number[];\n\n  /**\n   * When the finger moves outside this range (in points) along Y axis and\n   * handler hasn't yet activated it will fail recognizing the gesture. Range\n   * can be given as an array or a single number. If range is set as an array,\n   * first value must be lower or equal to 0, a the second one higher or equal\n   * to 0. If only one number `p` is given a range of `(-inf, p)` will be used\n   * if `p` is higher or equal to 0 and `(-p, inf)` otherwise.\n   */\n  failOffsetY?: number | number[];\n\n  /**\n   * When the finger moves outside this range (in points) along X axis and\n   * handler hasn't yet activated it will fail recognizing the gesture. Range\n   * can be given as an array or a single number. If range is set as an array,\n   * first value must be lower or equal to 0, a the second one higher or equal\n   * to 0. If only one number `p` is given a range of `(-inf, p)` will be used\n   * if `p` is higher or equal to 0 and `(-p, inf)` otherwise.\n   */\n  failOffsetX?: number | number[];\n}\n\nexport const panHandlerName = 'PanGestureHandler';\n\nexport type PanGestureHandler = typeof PanGestureHandler;\n// eslint-disable-next-line @typescript-eslint/no-redeclare -- backward compatibility; see description on the top of gestureHandlerCommon.ts file\nexport const PanGestureHandler = createHandler<\n  PanGestureHandlerProps,\n  PanGestureHandlerEventPayload\n>({\n  name: panHandlerName,\n  allowedProps: [\n    ...baseGestureHandlerProps,\n    ...panGestureHandlerProps,\n  ] as const,\n  config: {},\n  transformProps: managePanProps,\n  customNativeProps: panGestureHandlerCustomNativeProps,\n});\n\nfunction validatePanGestureHandlerProps(props: PanGestureHandlerProps) {\n  if (\n    Array.isArray(props.activeOffsetX) &&\n    (props.activeOffsetX[0] > 0 || props.activeOffsetX[1] < 0)\n  ) {\n    throw new Error(\n      `First element of activeOffsetX should be negative, a the second one should be positive`\n    );\n  }\n\n  if (\n    Array.isArray(props.activeOffsetY) &&\n    (props.activeOffsetY[0] > 0 || props.activeOffsetY[1] < 0)\n  ) {\n    throw new Error(\n      `First element of activeOffsetY should be negative, a the second one should be positive`\n    );\n  }\n\n  if (\n    Array.isArray(props.failOffsetX) &&\n    (props.failOffsetX[0] > 0 || props.failOffsetX[1] < 0)\n  ) {\n    throw new Error(\n      `First element of failOffsetX should be negative, a the second one should be positive`\n    );\n  }\n\n  if (\n    Array.isArray(props.failOffsetY) &&\n    (props.failOffsetY[0] > 0 || props.failOffsetY[1] < 0)\n  ) {\n    throw new Error(\n      `First element of failOffsetY should be negative, a the second one should be positive`\n    );\n  }\n\n  if (props.minDist && (props.failOffsetX || props.failOffsetY)) {\n    throw new Error(\n      `It is not supported to use minDist with failOffsetX or failOffsetY, use activeOffsetX and activeOffsetY instead`\n    );\n  }\n\n  if (props.minDist && (props.activeOffsetX || props.activeOffsetY)) {\n    throw new Error(\n      `It is not supported to use minDist with activeOffsetX or activeOffsetY`\n    );\n  }\n}\n\nfunction transformPanGestureHandlerProps(props: PanGestureHandlerProps) {\n  type InternalPanGHKeys =\n    | 'activeOffsetXStart'\n    | 'activeOffsetXEnd'\n    | 'failOffsetXStart'\n    | 'failOffsetXEnd'\n    | 'activeOffsetYStart'\n    | 'activeOffsetYEnd'\n    | 'failOffsetYStart'\n    | 'failOffsetYEnd';\n  type PanGestureHandlerInternalProps = PanGestureHandlerProps &\n    Partial<Record<InternalPanGHKeys, number>>;\n\n  const res: PanGestureHandlerInternalProps = { ...props };\n\n  if (props.activeOffsetX !== undefined) {\n    delete res.activeOffsetX;\n    if (Array.isArray(props.activeOffsetX)) {\n      res.activeOffsetXStart = props.activeOffsetX[0];\n      res.activeOffsetXEnd = props.activeOffsetX[1];\n    } else if (props.activeOffsetX < 0) {\n      res.activeOffsetXStart = props.activeOffsetX;\n    } else {\n      res.activeOffsetXEnd = props.activeOffsetX;\n    }\n  }\n\n  if (props.activeOffsetY !== undefined) {\n    delete res.activeOffsetY;\n    if (Array.isArray(props.activeOffsetY)) {\n      res.activeOffsetYStart = props.activeOffsetY[0];\n      res.activeOffsetYEnd = props.activeOffsetY[1];\n    } else if (props.activeOffsetY < 0) {\n      res.activeOffsetYStart = props.activeOffsetY;\n    } else {\n      res.activeOffsetYEnd = props.activeOffsetY;\n    }\n  }\n\n  if (props.failOffsetX !== undefined) {\n    delete res.failOffsetX;\n    if (Array.isArray(props.failOffsetX)) {\n      res.failOffsetXStart = props.failOffsetX[0];\n      res.failOffsetXEnd = props.failOffsetX[1];\n    } else if (props.failOffsetX < 0) {\n      res.failOffsetXStart = props.failOffsetX;\n    } else {\n      res.failOffsetXEnd = props.failOffsetX;\n    }\n  }\n\n  if (props.failOffsetY !== undefined) {\n    delete res.failOffsetY;\n    if (Array.isArray(props.failOffsetY)) {\n      res.failOffsetYStart = props.failOffsetY[0];\n      res.failOffsetYEnd = props.failOffsetY[1];\n    } else if (props.failOffsetY < 0) {\n      res.failOffsetYStart = props.failOffsetY;\n    } else {\n      res.failOffsetYEnd = props.failOffsetY;\n    }\n  }\n\n  return res;\n}\n\nexport function managePanProps(props: PanGestureHandlerProps) {\n  if (__DEV__) {\n    validatePanGestureHandlerProps(props);\n  }\n  return transformPanGestureHandlerProps(props);\n}\n"]}