{"version":3,"sources":["index.js"],"names":["Object","defineProperty","exports","value","default","_chalk","data","_interopRequireDefault","require","_emittery","_throat","_jestUtil","_jestWorker","_runTest","obj","__esModule","_defineProperty","key","enumerable","configurable","writable","TEST_WORKER_PATH","resolve","TestRunner","globalConfig","context","_globalConfig","_context","tests","watcher","onStart","onResult","onFailure","options","serial","_createInBandTestRun","_createParallelTestRun","process","env","JEST_WORKER_ID","mutex","reduce","promise","test","then","isInterrupted","CancelRun","path","config","resolver","undefined","sendMessageToJest","eventName","args","eventEmitter","emit","deepCyclicCopy","keepPrototype","result","catch","err","Promise","resolvers","Map","has","name","set","serializableModuleMap","moduleMap","toJSON","worker","Worker","exposedMethods","forkOptions","stdio","maxRetries","numWorkers","maxWorkers","setupArgs","serializableResolvers","Array","from","values","getStdout","pipe","stdout","getStderr","stderr","runTestInWorker","reject","changedFiles","sourcesRelatedToTestsInChangedFiles","UNSTABLE_onCustomMessage","event","payload","onInterrupt","_","on","state","interrupted","runAllTests","all","map","error","cleanup","end","forceExited","console","yellow","race","listener","message","Error"],"mappings":"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","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.default = void 0;\n\nfunction _chalk() {\n  const data = _interopRequireDefault(require('chalk'));\n\n  _chalk = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _emittery() {\n  const data = _interopRequireDefault(require('emittery'));\n\n  _emittery = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _throat() {\n  const data = _interopRequireDefault(require('throat'));\n\n  _throat = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _jestUtil() {\n  const data = require('jest-util');\n\n  _jestUtil = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _jestWorker() {\n  const data = require('jest-worker');\n\n  _jestWorker = function () {\n    return data;\n  };\n\n  return data;\n}\n\nvar _runTest = _interopRequireDefault(require('./runTest'));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {default: obj};\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\n\nconst TEST_WORKER_PATH = require.resolve('./testWorker');\n\nclass TestRunner {\n  constructor(globalConfig, context) {\n    _defineProperty(this, '_globalConfig', void 0);\n\n    _defineProperty(this, '_context', void 0);\n\n    _defineProperty(this, 'eventEmitter', new (_emittery().default)());\n\n    _defineProperty(\n      this,\n      '__PRIVATE_UNSTABLE_API_supportsEventEmitters__',\n      true\n    );\n\n    _defineProperty(this, 'isSerial', void 0);\n\n    this._globalConfig = globalConfig;\n    this._context = context || {};\n  }\n\n  async runTests(tests, watcher, onStart, onResult, onFailure, options) {\n    return await (options.serial\n      ? this._createInBandTestRun(tests, watcher, onStart, onResult, onFailure)\n      : this._createParallelTestRun(\n          tests,\n          watcher,\n          onStart,\n          onResult,\n          onFailure\n        ));\n  }\n\n  async _createInBandTestRun(tests, watcher, onStart, onResult, onFailure) {\n    process.env.JEST_WORKER_ID = '1';\n    const mutex = (0, _throat().default)(1);\n    return tests.reduce(\n      (promise, test) =>\n        mutex(() =>\n          promise\n            .then(async () => {\n              if (watcher.isInterrupted()) {\n                throw new CancelRun();\n              } // Remove `if(onStart)` in Jest 27\n\n              if (onStart) {\n                await onStart(test);\n                return (0, _runTest.default)(\n                  test.path,\n                  this._globalConfig,\n                  test.context.config,\n                  test.context.resolver,\n                  this._context,\n                  undefined\n                );\n              } // `deepCyclicCopy` used here to avoid mem-leak\n\n              const sendMessageToJest = (eventName, args) =>\n                this.eventEmitter.emit(\n                  eventName,\n                  (0, _jestUtil().deepCyclicCopy)(args, {\n                    keepPrototype: false\n                  })\n                );\n\n              await this.eventEmitter.emit('test-file-start', [test]);\n              return (0, _runTest.default)(\n                test.path,\n                this._globalConfig,\n                test.context.config,\n                test.context.resolver,\n                this._context,\n                sendMessageToJest\n              );\n            })\n            .then(result => {\n              if (onResult) {\n                return onResult(test, result);\n              }\n\n              return this.eventEmitter.emit('test-file-success', [\n                test,\n                result\n              ]);\n            })\n            .catch(err => {\n              if (onFailure) {\n                return onFailure(test, err);\n              }\n\n              return this.eventEmitter.emit('test-file-failure', [test, err]);\n            })\n        ),\n      Promise.resolve()\n    );\n  }\n\n  async _createParallelTestRun(tests, watcher, onStart, onResult, onFailure) {\n    const resolvers = new Map();\n\n    for (const test of tests) {\n      if (!resolvers.has(test.context.config.name)) {\n        resolvers.set(test.context.config.name, {\n          config: test.context.config,\n          serializableModuleMap: test.context.moduleMap.toJSON()\n        });\n      }\n    }\n\n    const worker = new (_jestWorker().Worker)(TEST_WORKER_PATH, {\n      exposedMethods: ['worker'],\n      forkOptions: {\n        stdio: 'pipe'\n      },\n      maxRetries: 3,\n      numWorkers: this._globalConfig.maxWorkers,\n      setupArgs: [\n        {\n          serializableResolvers: Array.from(resolvers.values())\n        }\n      ]\n    });\n    if (worker.getStdout()) worker.getStdout().pipe(process.stdout);\n    if (worker.getStderr()) worker.getStderr().pipe(process.stderr);\n    const mutex = (0, _throat().default)(this._globalConfig.maxWorkers); // Send test suites to workers continuously instead of all at once to track\n    // the start time of individual tests.\n\n    const runTestInWorker = test =>\n      mutex(async () => {\n        if (watcher.isInterrupted()) {\n          return Promise.reject();\n        } // Remove `if(onStart)` in Jest 27\n\n        if (onStart) {\n          await onStart(test);\n        } else {\n          await this.eventEmitter.emit('test-file-start', [test]);\n        }\n\n        const promise = worker.worker({\n          config: test.context.config,\n          context: {\n            ...this._context,\n            changedFiles:\n              this._context.changedFiles &&\n              Array.from(this._context.changedFiles),\n            sourcesRelatedToTestsInChangedFiles:\n              this._context.sourcesRelatedToTestsInChangedFiles &&\n              Array.from(this._context.sourcesRelatedToTestsInChangedFiles)\n          },\n          globalConfig: this._globalConfig,\n          path: test.path\n        });\n\n        if (promise.UNSTABLE_onCustomMessage) {\n          // TODO: Get appropriate type for `onCustomMessage`\n          promise.UNSTABLE_onCustomMessage(([event, payload]) => {\n            this.eventEmitter.emit(event, payload);\n          });\n        }\n\n        return promise;\n      });\n\n    const onInterrupt = new Promise((_, reject) => {\n      watcher.on('change', state => {\n        if (state.interrupted) {\n          reject(new CancelRun());\n        }\n      });\n    });\n    const runAllTests = Promise.all(\n      tests.map(test =>\n        runTestInWorker(test)\n          .then(result => {\n            if (onResult) {\n              return onResult(test, result);\n            }\n\n            return this.eventEmitter.emit('test-file-success', [test, result]);\n          })\n          .catch(error => {\n            if (onFailure) {\n              return onFailure(test, error);\n            }\n\n            return this.eventEmitter.emit('test-file-failure', [test, error]);\n          })\n      )\n    );\n\n    const cleanup = async () => {\n      const {forceExited} = await worker.end();\n\n      if (forceExited) {\n        console.error(\n          _chalk().default.yellow(\n            'A worker process has failed to exit gracefully and has been force exited. ' +\n              'This is likely caused by tests leaking due to improper teardown. ' +\n              'Try running with --detectOpenHandles to find leaks. ' +\n              'Active timers can also cause this, ensure that .unref() was called on them.'\n          )\n        );\n      }\n    };\n\n    return Promise.race([runAllTests, onInterrupt]).then(cleanup, cleanup);\n  }\n\n  on(eventName, listener) {\n    return this.eventEmitter.on(eventName, listener);\n  }\n}\n\nexports.default = TestRunner;\n\nclass CancelRun extends Error {\n  constructor(message) {\n    super(message);\n    this.name = 'CancelRun';\n  }\n}\n"]}