{"version":3,"mappings":"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","names":["isPlatformSupported","Platform","OS","ENABLE_SCREENS","ENABLE_FABRIC","global","_global","nativeFabricUIManager","FabricComponents","require","enableScreens","shouldEnableScreens","UIManager","getViewManagerConfig","console","error","ENABLE_FREEZE","enableFreeze","shouldEnableReactFreeze","minor","parseInt","version","split","warn","shouldUseActivityState","screensEnabled","NativeScreenValue","NativeScreenContainerValue","NativeScreenNavigationContainerValue","NativeScreenStack","NativeScreenStackHeaderConfig","NativeScreenStackHeaderSubview","AnimatedNativeScreen","NativeSearchBar","NativeFullWindowOverlay","ScreensNativeModules","NativeScreen","Screen","NativeScreenContainer","NativeScreenNavigationContainer","ScreenStack","ScreenStackHeaderConfig","ScreenStackHeaderSubview","DelayedFreeze","freeze","children","React","useState","freezeState","setFreezeState","setImmediate","_react","_reactFreeze","MaybeFreeze","props","rest","size","Children","count","childrenWithFreeze","map","child","index","args","_defineProperty","Animated","Value","ref","onComponentRef","setNativeProps","render","enabled","createAnimatedComponent","active","activityState","isNativeStack","statusBarColor","undefined","processedColor","handleRef","viewConfig","_ref$viewConfig","validAttributes","_ref$viewConfig$valid","style","display","setRef","onTransitionProgress","event","nativeEvent","progress","closing","goingForward","useNativeDriver","_TransitionProgressContext","Provider","value","_reactNative","View","Component","ScreenContainer","hasTwoStates","styles","StyleSheet","create","headerSubview","position","top","right","flexDirection","alignItems","justifyContent","ScreenStackHeaderBackButtonImage","type","resizeMode","fadeDuration","ScreenStackHeaderRightView","ScreenStackHeaderLeftView","ScreenStackHeaderCenterView","ScreenStackHeaderSearchBarView","ScreenContext","createContext","module","exports","SearchBar","isSearchBarAvailableForCurrentPlatform","FullWindowOverlay","useTransitionProgress","executeNativeBackPress"],"sources":["index.native.tsx"],"sourcesContent":["import React from 'react';\nimport {\n  Animated,\n  Image,\n  ImageProps,\n  Platform,\n  requireNativeComponent,\n  StyleSheet,\n  UIManager,\n  View,\n  ViewProps,\n} from 'react-native';\nimport { Freeze } from 'react-freeze';\n// @ts-ignore Getting private component\n// eslint-disable-next-line import/default\nimport processColor from 'react-native/Libraries/StyleSheet/processColor';\nimport { version } from 'react-native/package.json';\n\nimport TransitionProgressContext from './TransitionProgressContext';\nimport useTransitionProgress from './useTransitionProgress';\nimport {\n  StackPresentationTypes,\n  StackAnimationTypes,\n  BlurEffectTypes,\n  ScreenReplaceTypes,\n  ScreenOrientationTypes,\n  HeaderSubviewTypes,\n  ScreenProps,\n  ScreenContainerProps,\n  ScreenStackProps,\n  ScreenStackHeaderConfigProps,\n  SearchBarProps,\n} from './types';\nimport {\n  isSearchBarAvailableForCurrentPlatform,\n  executeNativeBackPress,\n} from './utils';\n\n// web implementation is taken from `index.tsx`\nconst isPlatformSupported =\n  Platform.OS === 'ios' ||\n  Platform.OS === 'android' ||\n  Platform.OS === 'windows';\n\nlet ENABLE_SCREENS = isPlatformSupported;\n\n// @ts-expect-error nativeFabricUIManager is not yet included in the RN types\nconst ENABLE_FABRIC = !!global?.nativeFabricUIManager;\n\nconst FabricComponents = ENABLE_FABRIC ? require('./fabric') : {};\n\nfunction enableScreens(shouldEnableScreens = true): void {\n  ENABLE_SCREENS = isPlatformSupported && shouldEnableScreens;\n  if (ENABLE_SCREENS && !UIManager.getViewManagerConfig('RNSScreen')) {\n    console.error(\n      `Screen native module hasn't been linked. Please check the react-native-screens README for more details`\n    );\n  }\n}\n\nlet ENABLE_FREEZE = false;\n\nfunction enableFreeze(shouldEnableReactFreeze = true): void {\n  const minor = parseInt(version.split('.')[1]); // eg. takes 66 from '0.66.0'\n\n  // react-freeze requires react-native >=0.64, react-native from main is 0.0.0\n  if (!(minor === 0 || minor >= 64) && shouldEnableReactFreeze) {\n    console.warn(\n      'react-freeze library requires at least react-native 0.64. Please upgrade your react-native version in order to use this feature.'\n    );\n  }\n\n  ENABLE_FREEZE = shouldEnableReactFreeze;\n}\n\n// const that tells if the library should use new implementation, will be undefined for older versions\nconst shouldUseActivityState = true;\n\nfunction screensEnabled(): boolean {\n  return ENABLE_SCREENS;\n}\n\n// We initialize these lazily so that importing the module doesn't throw error when not linked\n// This is necessary coz libraries such as React Navigation import the library where it may not be enabled\nlet NativeScreenValue: React.ComponentType<ScreenProps>;\nlet NativeScreenContainerValue: React.ComponentType<ScreenContainerProps>;\nlet NativeScreenNavigationContainerValue: React.ComponentType<ScreenContainerProps>;\nlet NativeScreenStack: React.ComponentType<ScreenStackProps>;\nlet NativeScreenStackHeaderConfig: React.ComponentType<ScreenStackHeaderConfigProps>;\nlet NativeScreenStackHeaderSubview: React.ComponentType<React.PropsWithChildren<\n  ViewProps & { type?: HeaderSubviewTypes }\n>>;\nlet AnimatedNativeScreen: React.ComponentType<ScreenProps>;\nlet NativeSearchBar: React.ComponentType<SearchBarProps>;\nlet NativeFullWindowOverlay: React.ComponentType<View>;\n\nconst ScreensNativeModules = {\n  get NativeScreen() {\n    NativeScreenValue =\n      NativeScreenValue ||\n      FabricComponents.Screen ||\n      requireNativeComponent('RNSScreen');\n    return NativeScreenValue;\n  },\n\n  get NativeScreenContainer() {\n    NativeScreenContainerValue =\n      NativeScreenContainerValue ||\n      requireNativeComponent('RNSScreenContainer');\n    return NativeScreenContainerValue;\n  },\n\n  get NativeScreenNavigationContainer() {\n    NativeScreenNavigationContainerValue =\n      NativeScreenNavigationContainerValue ||\n      (Platform.OS === 'ios'\n        ? requireNativeComponent('RNSScreenNavigationContainer')\n        : this.NativeScreenContainer);\n    return NativeScreenNavigationContainerValue;\n  },\n\n  get NativeScreenStack() {\n    NativeScreenStack =\n      NativeScreenStack ||\n      FabricComponents.ScreenStack ||\n      requireNativeComponent('RNSScreenStack');\n    return NativeScreenStack;\n  },\n\n  get NativeScreenStackHeaderConfig() {\n    NativeScreenStackHeaderConfig =\n      NativeScreenStackHeaderConfig ||\n      FabricComponents.ScreenStackHeaderConfig ||\n      requireNativeComponent('RNSScreenStackHeaderConfig');\n    return NativeScreenStackHeaderConfig;\n  },\n\n  get NativeScreenStackHeaderSubview() {\n    NativeScreenStackHeaderSubview =\n      NativeScreenStackHeaderSubview ||\n      FabricComponents.ScreenStackHeaderSubview ||\n      requireNativeComponent('RNSScreenStackHeaderSubview');\n    return NativeScreenStackHeaderSubview;\n  },\n\n  get NativeSearchBar() {\n    NativeSearchBar = NativeSearchBar || requireNativeComponent('RNSSearchBar');\n    return NativeSearchBar;\n  },\n\n  get NativeFullWindowOverlay() {\n    NativeFullWindowOverlay =\n      NativeFullWindowOverlay || requireNativeComponent('RNSFullWindowOverlay');\n    return NativeFullWindowOverlay;\n  },\n};\n\ninterface FreezeWrapperProps {\n  freeze: boolean;\n  children: React.ReactNode;\n}\n\n// This component allows one more render before freezing the screen.\n// Allows activityState to reach the native side and useIsFocused to work correctly.\nfunction DelayedFreeze({ freeze, children }: FreezeWrapperProps) {\n  // flag used for determining whether freeze should be enabled\n  const [freezeState, setFreezeState] = React.useState(false);\n\n  if (freeze !== freezeState) {\n    // setImmediate is executed at the end of the JS execution block.\n    // Used here for changing the state right after the render.\n    setImmediate(() => {\n      setFreezeState(freeze);\n    });\n  }\n\n  return <Freeze freeze={freeze ? freezeState : false}>{children}</Freeze>;\n}\n\nfunction MaybeFreeze({ freeze, children }: FreezeWrapperProps) {\n  if (ENABLE_FREEZE) {\n    return <DelayedFreeze freeze={freeze}>{children}</DelayedFreeze>;\n  } else {\n    return <>{children}</>;\n  }\n}\n\nfunction ScreenStack(props: ScreenStackProps) {\n  if (ENABLE_FREEZE) {\n    const { children, ...rest } = props;\n    const size = React.Children.count(children);\n    // freezes all screens except the top one\n    const childrenWithFreeze = React.Children.map(children, (child, index) => (\n      <DelayedFreeze freeze={size - index > 1}>{child}</DelayedFreeze>\n    ));\n    return (\n      <ScreensNativeModules.NativeScreenStack {...rest}>\n        {childrenWithFreeze}\n      </ScreensNativeModules.NativeScreenStack>\n    );\n  }\n  return <ScreensNativeModules.NativeScreenStack {...props} />;\n}\n\n// Incomplete type, all accessible properties available at:\n// react-native/Libraries/Components/View/ReactNativeViewViewConfig.js\ninterface ViewConfig extends View {\n  viewConfig: {\n    validAttributes: {\n      style: {\n        display: boolean;\n      };\n    };\n  };\n}\n\nclass Screen extends React.Component<ScreenProps> {\n  private ref: React.ElementRef<typeof View> | null = null;\n  private closing = new Animated.Value(0);\n  private progress = new Animated.Value(0);\n  private goingForward = new Animated.Value(0);\n\n  setNativeProps(props: ScreenProps): void {\n    this.ref?.setNativeProps(props);\n  }\n\n  setRef = (ref: React.ElementRef<typeof View> | null): void => {\n    this.ref = ref;\n    this.props.onComponentRef?.(ref);\n  };\n\n  render() {\n    const { enabled = ENABLE_SCREENS, ...rest } = this.props;\n\n    if (enabled && isPlatformSupported) {\n      if (!AnimatedNativeScreen) {\n        if (ENABLE_FABRIC) {\n          AnimatedNativeScreen = ScreensNativeModules.NativeScreen;\n        } else {\n          AnimatedNativeScreen = Animated.createAnimatedComponent(\n            ScreensNativeModules.NativeScreen\n          ) as React.ComponentType<ScreenProps>;\n        }\n      }\n\n      let {\n        // Filter out active prop in this case because it is unused and\n        // can cause problems depending on react-native version:\n        // https://github.com/react-navigation/react-navigation/issues/4886\n        active,\n        activityState,\n        children,\n        isNativeStack,\n        statusBarColor,\n        ...props\n      } = rest;\n\n      if (active !== undefined && activityState === undefined) {\n        console.warn(\n          'It appears that you are using old version of react-navigation library. Please update @react-navigation/bottom-tabs, @react-navigation/stack and @react-navigation/drawer to version 5.10.0 or above to take full advantage of new functionality added to react-native-screens'\n        );\n        activityState = active !== 0 ? 2 : 0; // in the new version, we need one of the screens to have value of 2 after the transition\n      }\n\n      const processedColor = processColor(statusBarColor);\n\n      const handleRef = (ref: ViewConfig) => {\n        if (!ENABLE_FABRIC) {\n          if (ref?.viewConfig?.validAttributes?.style) {\n            ref.viewConfig.validAttributes.style = {\n              ...ref.viewConfig.validAttributes.style,\n              display: false,\n            };\n          }\n          this.setRef(ref);\n        }\n      };\n\n      return (\n        <MaybeFreeze freeze={activityState === 0}>\n          <AnimatedNativeScreen\n            {...props}\n            statusBarColor={processedColor}\n            activityState={activityState}\n            // This prevents showing blank screen when navigating between multiple screens with freezing\n            // https://github.com/software-mansion/react-native-screens/pull/1208\n            ref={handleRef}\n            onTransitionProgress={\n              !isNativeStack\n                ? undefined\n                : Animated.event(\n                    [\n                      {\n                        nativeEvent: {\n                          progress: this.progress,\n                          closing: this.closing,\n                          goingForward: this.goingForward,\n                        },\n                      },\n                    ],\n                    { useNativeDriver: true }\n                  )\n            }>\n            {!isNativeStack ? ( // see comment of this prop in types.tsx for information why it is needed\n              children\n            ) : (\n              <TransitionProgressContext.Provider\n                value={{\n                  progress: this.progress,\n                  closing: this.closing,\n                  goingForward: this.goingForward,\n                }}>\n                {children}\n              </TransitionProgressContext.Provider>\n            )}\n          </AnimatedNativeScreen>\n        </MaybeFreeze>\n      );\n    } else {\n      // same reason as above\n      let {\n        active,\n        activityState,\n        style,\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        onComponentRef,\n        ...props\n      } = rest;\n\n      if (active !== undefined && activityState === undefined) {\n        activityState = active !== 0 ? 2 : 0;\n      }\n      return (\n        <Animated.View\n          style={[style, { display: activityState !== 0 ? 'flex' : 'none' }]}\n          ref={this.setRef}\n          {...props}\n        />\n      );\n    }\n  }\n}\n\nfunction ScreenContainer(props: ScreenContainerProps) {\n  const { enabled = ENABLE_SCREENS, hasTwoStates, ...rest } = props;\n\n  if (enabled && isPlatformSupported) {\n    if (hasTwoStates) {\n      return <ScreensNativeModules.NativeScreenNavigationContainer {...rest} />;\n    }\n    return <ScreensNativeModules.NativeScreenContainer {...rest} />;\n  }\n  return <View {...rest} />;\n}\n\nconst styles = StyleSheet.create({\n  headerSubview: {\n    position: 'absolute',\n    top: 0,\n    right: 0,\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n});\n\nconst ScreenStackHeaderBackButtonImage = (props: ImageProps): JSX.Element => (\n  <ScreensNativeModules.NativeScreenStackHeaderSubview\n    type=\"back\"\n    style={styles.headerSubview}>\n    <Image resizeMode=\"center\" fadeDuration={0} {...props} />\n  </ScreensNativeModules.NativeScreenStackHeaderSubview>\n);\n\nconst ScreenStackHeaderRightView = (\n  props: React.PropsWithChildren<ViewProps>\n): JSX.Element => (\n  <ScreensNativeModules.NativeScreenStackHeaderSubview\n    {...props}\n    type=\"right\"\n    style={styles.headerSubview}\n  />\n);\n\nconst ScreenStackHeaderLeftView = (\n  props: React.PropsWithChildren<ViewProps>\n): JSX.Element => (\n  <ScreensNativeModules.NativeScreenStackHeaderSubview\n    {...props}\n    type=\"left\"\n    style={styles.headerSubview}\n  />\n);\n\nconst ScreenStackHeaderCenterView = (\n  props: React.PropsWithChildren<ViewProps>\n): JSX.Element => (\n  <ScreensNativeModules.NativeScreenStackHeaderSubview\n    {...props}\n    type=\"center\"\n    style={styles.headerSubview}\n  />\n);\n\nconst ScreenStackHeaderSearchBarView = (\n  props: React.PropsWithChildren<SearchBarProps>\n): JSX.Element => (\n  <ScreensNativeModules.NativeScreenStackHeaderSubview\n    {...props}\n    type=\"searchBar\"\n    style={styles.headerSubview}\n  />\n);\n\nexport type {\n  StackPresentationTypes,\n  StackAnimationTypes,\n  BlurEffectTypes,\n  ScreenReplaceTypes,\n  ScreenOrientationTypes,\n  HeaderSubviewTypes,\n  ScreenProps,\n  ScreenContainerProps,\n  ScreenStackProps,\n  ScreenStackHeaderConfigProps,\n  SearchBarProps,\n};\n\n// context to be used when the user wants to use enhanced implementation\n// e.g. to use `react-native-reanimated` (see `reanimated` folder in repo)\nconst ScreenContext = React.createContext(Screen);\n\nmodule.exports = {\n  // these are classes so they are not evaluated until used\n  // so no need to use getters for them\n  Screen,\n  ScreenContainer,\n  ScreenContext,\n  ScreenStack,\n\n  get NativeScreen() {\n    return ScreensNativeModules.NativeScreen;\n  },\n\n  get NativeScreenContainer() {\n    return ScreensNativeModules.NativeScreenContainer;\n  },\n\n  get NativeScreenNavigationContainer() {\n    return ScreensNativeModules.NativeScreenNavigationContainer;\n  },\n\n  get ScreenStackHeaderConfig() {\n    return ScreensNativeModules.NativeScreenStackHeaderConfig;\n  },\n  get ScreenStackHeaderSubview() {\n    return ScreensNativeModules.NativeScreenStackHeaderSubview;\n  },\n  get SearchBar() {\n    if (!isSearchBarAvailableForCurrentPlatform) {\n      console.warn(\n        'Importing SearchBar is only valid on iOS and Android devices.'\n      );\n      return View;\n    }\n\n    return ScreensNativeModules.NativeSearchBar;\n  },\n  get FullWindowOverlay() {\n    if (Platform.OS !== 'ios') {\n      console.warn('Importing FullWindowOverlay is only valid on iOS devices.');\n      return View;\n    }\n\n    return ScreensNativeModules.NativeFullWindowOverlay;\n  },\n  // these are functions and will not be evaluated until used\n  // so no need to use getters for them\n  ScreenStackHeaderBackButtonImage,\n  ScreenStackHeaderRightView,\n  ScreenStackHeaderLeftView,\n  ScreenStackHeaderCenterView,\n  ScreenStackHeaderSearchBarView,\n\n  enableScreens,\n  enableFreeze,\n  screensEnabled,\n  shouldUseActivityState,\n  useTransitionProgress,\n\n  isSearchBarAvailableForCurrentPlatform,\n  executeNativeBackPress,\n};\n"]}