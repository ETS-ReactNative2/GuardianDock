55603cc23d72ccb66c4c156ab2889910
"use strict";

var _interopRequireDefault2 = require("@babel/runtime/helpers/interopRequireDefault");

var _objectWithoutProperties2 = _interopRequireDefault2(require("@babel/runtime/helpers/objectWithoutProperties"));

var _extends3 = _interopRequireDefault2(require("@babel/runtime/helpers/extends"));

var _toConsumableArray2 = _interopRequireDefault2(require("@babel/runtime/helpers/toConsumableArray"));

var _slicedToArray2 = _interopRequireDefault2(require("@babel/runtime/helpers/slicedToArray"));

var _excluded = ["navigation"];
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = DrawerView;

var _elements = require("@react-navigation/elements");

var _native = require("@react-navigation/native");

var React = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

var Reanimated = _interopRequireWildcard(require("react-native-reanimated"));

var _reactNativeSafeAreaContext = require("react-native-safe-area-context");

var _DrawerPositionContext = _interopRequireDefault(require("../utils/DrawerPositionContext"));

var _DrawerStatusContext = _interopRequireDefault(require("../utils/DrawerStatusContext"));

var _getDrawerStatusFromState = _interopRequireDefault(require("../utils/getDrawerStatusFromState"));

var _DrawerContent = _interopRequireDefault(require("./DrawerContent"));

var _DrawerToggleButton = _interopRequireDefault(require("./DrawerToggleButton"));

var _GestureHandler = require("./GestureHandler");

var _ScreenFallback = require("./ScreenFallback");

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

function _getRequireWildcardCache(nodeInterop) {
  if (typeof WeakMap !== "function") return null;
  var cacheBabelInterop = new WeakMap();
  var cacheNodeInterop = new WeakMap();
  return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {
    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
  })(nodeInterop);
}

function _interopRequireWildcard(obj, nodeInterop) {
  if (!nodeInterop && obj && obj.__esModule) {
    return obj;
  }

  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }

  var cache = _getRequireWildcardCache(nodeInterop);

  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }

  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

  for (var key in obj) {
    if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }

  newObj.default = obj;

  if (cache) {
    cache.set(obj, newObj);
  }

  return newObj;
}

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

var getDefaultDrawerWidth = function getDefaultDrawerWidth(_ref) {
  var height = _ref.height,
      width = _ref.width;
  var smallerAxisSize = Math.min(height, width);
  var isLandscape = width > height;
  var isTablet = smallerAxisSize >= 600;
  var appBarHeight = _reactNative.Platform.OS === 'ios' ? isLandscape ? 32 : 44 : 56;
  var maxWidth = isTablet ? 320 : 280;
  return Math.min(smallerAxisSize - appBarHeight, maxWidth);
};

var GestureHandlerWrapper = _GestureHandler.GestureHandlerRootView !== null && _GestureHandler.GestureHandlerRootView !== void 0 ? _GestureHandler.GestureHandlerRootView : _reactNative.View;

function DrawerViewBase(_ref2) {
  var _Reanimated$isConfigu;

  var state = _ref2.state,
      navigation = _ref2.navigation,
      descriptors = _ref2.descriptors,
      defaultStatus = _ref2.defaultStatus,
      _ref2$drawerContent = _ref2.drawerContent,
      drawerContent = _ref2$drawerContent === void 0 ? function (props) {
    return React.createElement(_DrawerContent.default, props);
  } : _ref2$drawerContent,
      _ref2$detachInactiveS = _ref2.detachInactiveScreens,
      detachInactiveScreens = _ref2$detachInactiveS === void 0 ? _reactNative.Platform.OS === 'web' || _reactNative.Platform.OS === 'android' || _reactNative.Platform.OS === 'ios' : _ref2$detachInactiveS,
      _ref2$useLegacyImplem = _ref2.useLegacyImplementation,
      useLegacyImplementation = _ref2$useLegacyImplem === void 0 ? !global.nativeCallSyncHook || !((_Reanimated$isConfigu = Reanimated.isConfigured) !== null && _Reanimated$isConfigu !== void 0 && _Reanimated$isConfigu.call(Reanimated)) : _ref2$useLegacyImplem;
  var Drawer = useLegacyImplementation ? require('./legacy/Drawer').default : require('./modern/Drawer').default;
  var focusedRouteKey = state.routes[state.index].key;
  var _descriptors$focusedR = descriptors[focusedRouteKey].options,
      _descriptors$focusedR2 = _descriptors$focusedR.drawerHideStatusBarOnOpen,
      drawerHideStatusBarOnOpen = _descriptors$focusedR2 === void 0 ? false : _descriptors$focusedR2,
      _descriptors$focusedR3 = _descriptors$focusedR.drawerPosition,
      drawerPosition = _descriptors$focusedR3 === void 0 ? _reactNative.I18nManager.isRTL ? 'right' : 'left' : _descriptors$focusedR3,
      _descriptors$focusedR4 = _descriptors$focusedR.drawerStatusBarAnimation,
      drawerStatusBarAnimation = _descriptors$focusedR4 === void 0 ? 'slide' : _descriptors$focusedR4,
      drawerStyle = _descriptors$focusedR.drawerStyle,
      _descriptors$focusedR5 = _descriptors$focusedR.drawerType,
      drawerType = _descriptors$focusedR5 === void 0 ? _reactNative.Platform.select({
    ios: 'slide',
    default: 'front'
  }) : _descriptors$focusedR5,
      gestureHandlerProps = _descriptors$focusedR.gestureHandlerProps,
      _descriptors$focusedR6 = _descriptors$focusedR.keyboardDismissMode,
      keyboardDismissMode = _descriptors$focusedR6 === void 0 ? 'on-drag' : _descriptors$focusedR6,
      _descriptors$focusedR7 = _descriptors$focusedR.overlayColor,
      overlayColor = _descriptors$focusedR7 === void 0 ? 'rgba(0, 0, 0, 0.5)' : _descriptors$focusedR7,
      _descriptors$focusedR8 = _descriptors$focusedR.swipeEdgeWidth,
      swipeEdgeWidth = _descriptors$focusedR8 === void 0 ? 32 : _descriptors$focusedR8,
      _descriptors$focusedR9 = _descriptors$focusedR.swipeEnabled,
      swipeEnabled = _descriptors$focusedR9 === void 0 ? _reactNative.Platform.OS !== 'web' && _reactNative.Platform.OS !== 'windows' && _reactNative.Platform.OS !== 'macos' : _descriptors$focusedR9,
      _descriptors$focusedR10 = _descriptors$focusedR.swipeMinDistance,
      swipeMinDistance = _descriptors$focusedR10 === void 0 ? 60 : _descriptors$focusedR10;

  var _React$useState = React.useState([focusedRouteKey]),
      _React$useState2 = (0, _slicedToArray2.default)(_React$useState, 2),
      loaded = _React$useState2[0],
      setLoaded = _React$useState2[1];

  if (!loaded.includes(focusedRouteKey)) {
    setLoaded([].concat((0, _toConsumableArray2.default)(loaded), [focusedRouteKey]));
  }

  var dimensions = (0, _reactNativeSafeAreaContext.useSafeAreaFrame)();

  var _ref5 = (0, _native.useTheme)(),
      colors = _ref5.colors;

  var drawerStatus = (0, _getDrawerStatusFromState.default)(state);
  var handleDrawerOpen = React.useCallback(function () {
    navigation.dispatch((0, _extends3.default)({}, _native.DrawerActions.openDrawer(), {
      target: state.key
    }));
  }, [navigation, state.key]);
  var handleDrawerClose = React.useCallback(function () {
    navigation.dispatch((0, _extends3.default)({}, _native.DrawerActions.closeDrawer(), {
      target: state.key
    }));
  }, [navigation, state.key]);
  React.useEffect(function () {
    if (drawerStatus === defaultStatus || drawerType === 'permanent') {
      return;
    }

    var handleHardwareBack = function handleHardwareBack() {
      if (!navigation.isFocused()) {
        return false;
      }

      if (defaultStatus === 'open') {
        handleDrawerOpen();
      } else {
        handleDrawerClose();
      }

      return true;
    };

    var handleEscape = function handleEscape(e) {
      if (e.key === 'Escape') {
        handleHardwareBack();
      }
    };

    var subscription = _reactNative.BackHandler.addEventListener('hardwareBackPress', handleHardwareBack);

    if (_reactNative.Platform.OS === 'web') {
      var _document, _document$body, _document$body$addEve;

      (_document = document) === null || _document === void 0 ? void 0 : (_document$body = _document.body) === null || _document$body === void 0 ? void 0 : (_document$body$addEve = _document$body.addEventListener) === null || _document$body$addEve === void 0 ? void 0 : _document$body$addEve.call(_document$body, 'keyup', handleEscape);
    }

    return function () {
      subscription.remove();

      if (_reactNative.Platform.OS === 'web') {
        var _document2, _document2$body, _document2$body$remov;

        (_document2 = document) === null || _document2 === void 0 ? void 0 : (_document2$body = _document2.body) === null || _document2$body === void 0 ? void 0 : (_document2$body$remov = _document2$body.removeEventListener) === null || _document2$body$remov === void 0 ? void 0 : _document2$body$remov.call(_document2$body, 'keyup', handleEscape);
      }
    };
  }, [defaultStatus, drawerStatus, drawerType, handleDrawerClose, handleDrawerOpen, navigation]);

  var renderDrawerContent = function renderDrawerContent() {
    return React.createElement(_DrawerPositionContext.default.Provider, {
      value: drawerPosition
    }, drawerContent({
      state: state,
      navigation: navigation,
      descriptors: descriptors
    }));
  };

  var renderSceneContent = function renderSceneContent() {
    return React.createElement(_ScreenFallback.MaybeScreenContainer, {
      enabled: detachInactiveScreens,
      hasTwoStates: true,
      style: styles.content
    }, state.routes.map(function (route, index) {
      var descriptor = descriptors[route.key];
      var _descriptor$options = descriptor.options,
          _descriptor$options$l = _descriptor$options.lazy,
          lazy = _descriptor$options$l === void 0 ? true : _descriptor$options$l,
          unmountOnBlur = _descriptor$options.unmountOnBlur;
      var isFocused = state.index === index;

      if (unmountOnBlur && !isFocused) {
        return null;
      }

      if (lazy && !loaded.includes(route.key) && !isFocused) {
        return null;
      }

      var _descriptor$options2 = descriptor.options,
          _descriptor$options2$ = _descriptor$options2.header,
          header = _descriptor$options2$ === void 0 ? function (_ref3) {
        var _options$headerLeft;

        var layout = _ref3.layout,
            options = _ref3.options;
        return React.createElement(_elements.Header, _extends({}, options, {
          layout: layout,
          title: (0, _elements.getHeaderTitle)(options, route.name),
          headerLeft: (_options$headerLeft = options.headerLeft) !== null && _options$headerLeft !== void 0 ? _options$headerLeft : function (props) {
            return React.createElement(_DrawerToggleButton.default, props);
          }
        }));
      } : _descriptor$options2$,
          sceneContainerStyle = _descriptor$options2.sceneContainerStyle;
      return React.createElement(_ScreenFallback.MaybeScreen, {
        key: route.key,
        style: [_reactNative.StyleSheet.absoluteFill, {
          zIndex: isFocused ? 0 : -1
        }],
        visible: isFocused,
        enabled: detachInactiveScreens
      }, React.createElement(_elements.Screen, {
        focused: isFocused,
        route: descriptor.route,
        navigation: descriptor.navigation,
        headerShown: descriptor.options.headerShown,
        headerTransparent: descriptor.options.headerTransparent,
        headerStatusBarHeight: descriptor.options.headerStatusBarHeight,
        header: header({
          layout: dimensions,
          route: descriptor.route,
          navigation: descriptor.navigation,
          options: descriptor.options
        }),
        style: sceneContainerStyle
      }, descriptor.render()));
    }));
  };

  return React.createElement(_DrawerStatusContext.default.Provider, {
    value: drawerStatus
  }, React.createElement(Drawer, {
    open: drawerStatus !== 'closed',
    onOpen: handleDrawerOpen,
    onClose: handleDrawerClose,
    gestureHandlerProps: gestureHandlerProps,
    swipeEnabled: swipeEnabled,
    swipeEdgeWidth: swipeEdgeWidth,
    swipeVelocityThreshold: 500,
    swipeDistanceThreshold: swipeMinDistance,
    hideStatusBarOnOpen: drawerHideStatusBarOnOpen,
    statusBarAnimation: drawerStatusBarAnimation,
    keyboardDismissMode: keyboardDismissMode,
    drawerType: drawerType,
    drawerPosition: drawerPosition,
    drawerStyle: [{
      width: getDefaultDrawerWidth(dimensions),
      backgroundColor: colors.card
    }, drawerType === 'permanent' && (drawerPosition === 'left' ? {
      borderRightColor: colors.border,
      borderRightWidth: _reactNative.StyleSheet.hairlineWidth
    } : {
      borderLeftColor: colors.border,
      borderLeftWidth: _reactNative.StyleSheet.hairlineWidth
    }), drawerStyle],
    overlayStyle: {
      backgroundColor: overlayColor
    },
    renderDrawerContent: renderDrawerContent,
    renderSceneContent: renderSceneContent,
    dimensions: dimensions
  }));
}

function DrawerView(_ref4) {
  var navigation = _ref4.navigation,
      rest = (0, _objectWithoutProperties2.default)(_ref4, _excluded);
  return React.createElement(_elements.SafeAreaProviderCompat, null, React.createElement(GestureHandlerWrapper, {
    style: styles.content
  }, React.createElement(DrawerViewBase, _extends({
    navigation: navigation
  }, rest))));
}

var styles = _reactNative.StyleSheet.create({
  content: {
    flex: 1
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,