bd843e757d28fcfd28a6af914fedae69
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var NOOP = function NOOP() {};

var ID = function ID(t) {
  return t;
};

var IMMEDIATE_CB_INVOCATION = function IMMEDIATE_CB_INVOCATION(cb) {
  return cb();
};

var ReanimatedV2 = {
  useSharedValue: function useSharedValue(v) {
    return {
      value: v
    };
  },
  useDerivedValue: function useDerivedValue(a) {
    return {
      value: a()
    };
  },
  useAnimatedScrollHandler: function useAnimatedScrollHandler() {
    return NOOP;
  },
  useAnimatedGestureHandler: function useAnimatedGestureHandler() {
    return NOOP;
  },
  useAnimatedStyle: IMMEDIATE_CB_INVOCATION,
  useAnimatedRef: function useAnimatedRef() {
    return {
      current: null
    };
  },
  useAnimatedReaction: NOOP,
  useAnimatedProps: IMMEDIATE_CB_INVOCATION,
  withTiming: function withTiming(toValue, _, cb) {
    cb && cb(true);
    return toValue;
  },
  withSpring: function withSpring(toValue, _, cb) {
    cb && cb(true);
    return toValue;
  },
  withDecay: function withDecay(_, cb) {
    cb && cb(true);
    return 0;
  },
  withDelay: function withDelay(_, animationValue) {
    return animationValue;
  },
  withSequence: function withSequence() {
    return 0;
  },
  withRepeat: function withRepeat(animation) {
    return animation;
  },
  cancelAnimation: NOOP,
  measure: function measure() {
    return {
      x: 0,
      y: 0,
      width: 0,
      height: 0,
      pageX: 0,
      pageY: 0
    };
  },
  Easing: {
    linear: ID,
    ease: ID,
    quad: ID,
    cubic: ID,
    poly: ID,
    sin: ID,
    circle: ID,
    exp: ID,
    elastic: ID,
    back: ID,
    bounce: ID,
    bezier: function bezier() {
      return {
        factory: ID
      };
    },
    bezierFn: ID,
    in: ID,
    out: ID,
    inOut: ID
  },
  runOnJS: function runOnJS(fn) {
    return fn;
  }
};
module.exports = (0, _extends2.default)({}, ReanimatedV2);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1vY2sudHMiXSwibmFtZXMiOlsiTk9PUCIsIklEIiwidCIsIklNTUVESUFURV9DQl9JTlZPQ0FUSU9OIiwiY2IiLCJSZWFuaW1hdGVkVjIiLCJ1c2VTaGFyZWRWYWx1ZSIsInYiLCJ2YWx1ZSIsInVzZURlcml2ZWRWYWx1ZSIsImEiLCJ1c2VBbmltYXRlZFNjcm9sbEhhbmRsZXIiLCJ1c2VBbmltYXRlZEdlc3R1cmVIYW5kbGVyIiwidXNlQW5pbWF0ZWRTdHlsZSIsInVzZUFuaW1hdGVkUmVmIiwiY3VycmVudCIsInVzZUFuaW1hdGVkUmVhY3Rpb24iLCJ1c2VBbmltYXRlZFByb3BzIiwid2l0aFRpbWluZyIsInRvVmFsdWUiLCJfIiwid2l0aFNwcmluZyIsIndpdGhEZWNheSIsIndpdGhEZWxheSIsImFuaW1hdGlvblZhbHVlIiwid2l0aFNlcXVlbmNlIiwid2l0aFJlcGVhdCIsImFuaW1hdGlvbiIsImNhbmNlbEFuaW1hdGlvbiIsIm1lYXN1cmUiLCJ4IiwieSIsIndpZHRoIiwiaGVpZ2h0IiwicGFnZVgiLCJwYWdlWSIsIkVhc2luZyIsImxpbmVhciIsImVhc2UiLCJxdWFkIiwiY3ViaWMiLCJwb2x5Iiwic2luIiwiY2lyY2xlIiwiZXhwIiwiZWxhc3RpYyIsImJhY2siLCJib3VuY2UiLCJiZXppZXIiLCJmYWN0b3J5IiwiYmV6aWVyRm4iLCJpbiIsIm91dCIsImluT3V0IiwicnVuT25KUyIsImZuIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6Ijs7OztBQUdBLElBQU1BLElBQUksR0FBRyxTQUFQQSxJQUFPLEdBQU0sQ0FFbEIsQ0FGRDs7QUFHQSxJQUFNQyxFQUFFLEdBQUcsU0FBTEEsRUFBSyxDQUFDQyxDQUFEO0FBQUEsU0FBT0EsQ0FBUDtBQUFBLENBQVg7O0FBQ0EsSUFBTUMsdUJBQXVCLEdBQUcsU0FBMUJBLHVCQUEwQixDQUFDQyxFQUFEO0FBQUEsU0FBdUJBLEVBQUUsRUFBekI7QUFBQSxDQUFoQzs7QUFFQSxJQUFNQyxZQUFZ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ZEU7QUFlTm1ELElBQUFBLEdBQUcsRUFBRW5ELEVBZkM7QUFnQk5vRCxJQUFBQSxLQUFLLEVBQUVwRDtBQWhCRCxHQXhDVztBQTJEbkJxRCxFQUFBQSxPQUFPLEVBQUUsaUJBQUNDLEVBQUQ7QUFBQSxXQUFRQSxFQUFSO0FBQUE7QUEzRFUsQ0FBckI7QUE4REFDLE1BQU0sQ0FBQ0MsT0FBUCw4QkFDS3BELFlBREwiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBlc2xpbnQtZGlzYWJsZSBub2RlL25vLWNhbGxiYWNrLWxpdGVyYWwgKi9cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvYmFuLXRzLWNvbW1lbnRcbi8vIEB0cy1ub2NoZWNrXG5jb25zdCBOT09QID0gKCkgPT4ge1xuICAvLyBub29wXG59O1xuY29uc3QgSUQgPSAodCkgPT4gdDtcbmNvbnN0IElNTUVESUFURV9DQl9JTlZPQ0FUSU9OID0gKGNiOiAoKSA9PiB1bmtub3duKSA9PiBjYigpO1xuXG5jb25zdCBSZWFuaW1hdGVkVjIgPSB7XG4gIHVzZVNoYXJlZFZhbHVlOiAodikgPT4gKHsgdmFsdWU6IHYgfSksXG4gIHVzZURlcml2ZWRWYWx1ZTogKGEpID0+ICh7IHZhbHVlOiBhKCkgfSksXG4gIHVzZUFuaW1hdGVkU2Nyb2xsSGFuZGxlcjogKCkgPT4gTk9PUCxcbiAgdXNlQW5pbWF0ZWRHZXN0dXJlSGFuZGxlcjogKCkgPT4gTk9PUCxcbiAgdXNlQW5pbWF0ZWRTdHlsZTogSU1NRURJQVRFX0NCX0lOVk9DQVRJT04sXG4gIHVzZUFuaW1hdGVkUmVmOiAoKSA9PiAoeyBjdXJyZW50OiBudWxsIH0pLFxuICB1c2VBbmltYXRlZFJlYWN0aW9uOiBOT09QLFxuICB1c2VBbmltYXRlZFByb3BzOiBJTU1FRElBVEVfQ0JfSU5WT0NBVElPTixcblxuICB3aXRoVGltaW5nOiAodG9WYWx1ZSwgXywgY2IpID0+IHtcbiAgICBjYiAmJiBjYih0cnVlKTtcbiAgICByZXR1cm4gdG9WYWx1ZTtcbiAgfSxcbiAgd2l0aFNwcmluZzogKHRvVmFsdWUsIF8sIGNiKSA9PiB7XG4gICAgY2IgJiYgY2IodHJ1ZSk7XG4gICAgcmV0dXJuIHRvVmFsdWU7XG4gIH0sXG4gIHdpdGhEZWNheTogKF8sIGNiKSA9PiB7XG4gICAgY2IgJiYgY2IodHJ1ZSk7XG4gICAgcmV0dXJuIDA7XG4gIH0sXG4gIHdpdGhEZWxheTogKF8sIGFuaW1hdGlvblZhbHVlKSA9PiB7XG4gICAgcmV0dXJuIGFuaW1hdGlvblZhbHVlO1xuICB9LFxuICB3aXRoU2VxdWVuY2U6ICguLi5fYW5pbWF0aW9ucykgPT4ge1xuICAgIHJldHVybiAwO1xuICB9LFxuICB3aXRoUmVwZWF0OiAoYW5pbWF0aW9uKSA9PiB7XG4gICAgcmV0dXJuIGFuaW1hdGlvbjtcbiAgfSxcbiAgY2FuY2VsQW5pbWF0aW9uOiBOT09QLFxuICBtZWFzdXJlOiAoKSA9PiAoe1xuICAgIHg6IDAsXG4gICAgeTogMCxcbiAgICB3aWR0aDogMCxcbiAgICBoZWlnaHQ6IDAsXG4gICAgcGFnZVg6IDAsXG4gICAgcGFnZVk6IDAsXG4gIH0pLFxuICBFYXNpbmc6IHtcbiAgICBsaW5lYXI6IElELFxuICAgIGVhc2U6IElELFxuICAgIHF1YWQ6IElELFxuICAgIGN1YmljOiBJRCxcbiAgICBwb2x5OiBJRCxcbiAgICBzaW46IElELFxuICAgIGNpcmNsZTogSUQsXG4gICAgZXhwOiBJRCxcbiAgICBlbGFzdGljOiBJRCxcbiAgICBiYWNrOiBJRCxcbiAgICBib3VuY2U6IElELFxuICAgIGJlemllcjogKCkgPT4gKHsgZmFjdG9yeTogSUQgfSksXG4gICAgYmV6aWVyRm46IElELFxuICAgIGluOiBJRCxcbiAgICBvdXQ6IElELFxuICAgIGluT3V0OiBJRCxcbiAgfSxcblxuICBydW5PbkpTOiAoZm4pID0+IGZuLFxufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIC4uLlJlYW5pbWF0ZWRWMixcbn07XG4iXX0=