0dc784cf59ab220f193c3203678b3035
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _get2 = _interopRequireDefault(require("@babel/runtime/helpers/get"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

var AnimatedInterpolation = require("./AnimatedInterpolation");

var AnimatedNode = require("./AnimatedNode");

var AnimatedValue = require("./AnimatedValue");

var AnimatedWithChildren = require("./AnimatedWithChildren");

var AnimatedDivision = function (_AnimatedWithChildren) {
  (0, _inherits2.default)(AnimatedDivision, _AnimatedWithChildren);

  var _super = _createSuper(AnimatedDivision);

  function AnimatedDivision(a, b) {
    var _this;

    (0, _classCallCheck2.default)(this, AnimatedDivision);
    _this = _super.call(this);
    _this._warnedAboutDivideByZero = false;

    if (b === 0 || b instanceof AnimatedNode && b.__getValue() === 0) {
      console.error('Detected potential division by zero in AnimatedDivision');
    }

    _this._a = typeof a === 'number' ? new AnimatedValue(a) : a;
    _this._b = typeof b === 'number' ? new AnimatedValue(b) : b;
    return _this;
  }

  (0, _createClass2.default)(AnimatedDivision, [{
    key: "__makeNative",
    value: function __makeNative() {
      this._a.__makeNative();

      this._b.__makeNative();

      (0, _get2.default)((0, _getPrototypeOf2.default)(AnimatedDivision.prototype), "__makeNative", this).call(this);
    }
  }, {
    key: "__getValue",
    value: function __getValue() {
      var a = this._a.__getValue();

      var b = this._b.__getValue();

      if (b === 0) {
        if (!this._warnedAboutDivideByZero) {
          console.error('Detected division by zero in AnimatedDivision');
          this._warnedAboutDivideByZero = true;
        }

        return 0;
      }

      this._warnedAboutDivideByZero = false;
      return a / b;
    }
  }, {
    key: "interpolate",
    value: function interpolate(config) {
      return new AnimatedInterpolation(this, config);
    }
  }, {
    key: "__attach",
    value: function __attach() {
      this._a.__addChild(this);

      this._b.__addChild(this);
    }
  }, {
    key: "__detach",
    value: function __detach() {
      this._a.__removeChild(this);

      this._b.__removeChild(this);

      (0, _get2.default)((0, _getPrototypeOf2.default)(AnimatedDivision.prototype), "__detach", this).call(this);
    }
  }, {
    key: "__getNativeConfig",
    value: function __getNativeConfig() {
      return {
        type: 'division',
        input: [this._a.__getNativeTag(), this._b.__getNativeTag()]
      };
    }
  }]);
  return AnimatedDivision;
}(AnimatedWithChildren);

module.exports = AnimatedDivision;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkFuaW1hdGVkRGl2aXNpb24uanMiXSwibmFtZXMiOlsiQW5pbWF0ZWRJbnRlcnBvbGF0aW9uIiwicmVxdWlyZSIsIkFuaW1hdGVkTm9kZSIsIkFuaW1hdGVkVmFsdWUiLCJBbmltYXRlZFdpdGhDaGlsZHJlbiIsIkFuaW1hdGVkRGl2aXNpb24iLCJhIiwiYiIsIl93YXJuZWRBYm91dERpdmlkZUJ5WmVybyIsIl9fZ2V0VmFsdWUiLCJjb25zb2xlIiwiZXJyb3IiLCJfYSIsIl9iIiwiX19tYWtlTmF0aXZlIiwiY29uZmlnIiwiX19hZGRDaGlsZCIsIl9fcmVtb3ZlQ2hpbGQiLCJ0eXBlIiwiaW5wdXQiLCJfX2dldE5hdGl2ZVRhZyIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQVVBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUVBLElBQU1BLHFCQUFxQixHQUFHQyxPQUFPLDJCQUFyQzs7QUFDQSxJQUFNQyxZQUFZLEdBQUdELE9BQU8sa0JBQTVCOztBQUNBLElBQU1FLGFBQWEsR0FBR0YsT0FBTyxtQkFBN0I7O0FBQ0EsSUFBTUcsb0JBQW9CLEdBQUdILE9BQU8sMEJBQXBDOztJQUlNSSxnQjs7Ozs7QUFLSiw0QkFBWUMsQ0FBWixFQUFzQ0MsQ0FBdEMsRUFBZ0U7QUFBQTs7QUFBQTtBQUM5RDtBQUQ4RCxVQUZoRUMsd0JBRWdFLEdBRjVCLEtBRTRCOztBQUU5RCxRQUFJRCxDQUFDLEtBQUssQ0FBTixJQUFZQSxDQUFDLFlBQVlMLFlBQWIsSUFBNkJLLENBQUMsQ0FBQ0UsVUFBRixPQUFtQixDQUFoRSxFQUFvRTtBQUNsRUMsTUFBQUEsT0FBTyxDQUFDQyxLQUFSLENBQWMseURBQWQ7QUFDRDs7QUFDRCxVQUFLQyxFQUFMLEdBQVUsT0FBT04sQ0FBUCxLQUFhLFFBQWIsR0FBd0IsSUFBSUgsYUFBSixDQUFrQkcsQ0FBbEIsQ0FBeEIsR0FBK0NBLENBQXpEO0FBQ0EsVUFBS08sRUFBTCxHQUFVLE9BQU9OLENBQVAsS0FBYSxRQUFiLEdBQXdCLElBQUlKLGFBQUosQ0FBa0JJLENBQWxCLENBQXhCLEdBQStDQSxDQUF6RDtBQU44RDtBQU8vRDs7OztXQUVELHdCQUFlO0FBQ2IsV0FBS0ssRUFBTCxDQUFRRSxZQUFSOztBQUNBLFdBQUtELEVBQUwsQ0FBUUMsWUFBUjs7QUFDQTtBQUNEOzs7V0FFRCxzQkFBcUI7QUFDbkIsVUFBTVIsQ0FBQyxHQUFHLEtBQUtNLEVBQUwsQ0FBUUgsVUFBUixFQUFWOztBQUNBLFVBQU1GLENBQUMsR0FBRyxLQUFLTSxFQUFMLENBQVFKLFVBQVIsRUFBVjs7QUFDQSxVQUFJRixDQUFDLEtBQUssQ0FBVixFQUFhO0FBRVgsWUFBSSxDQUFDLEtBQUtDLHdCQUFWLEVBQW9DO0FBQ2xDRSxVQUFBQSxPQUFPLENBQUNDLEtBQVIsQ0FBYywrQ0FBZDtBQUNBLGVBQUtILHdCQUFMLEdBQWdDLElBQWhDO0FBQ0Q7O0FBRUQsZUFBTyxDQUFQO0FBQ0Q7O0FBQ0QsV0FBS0Esd0JBQUwsR0FBZ0MsS0FBaEM7QUFDQSxhQUFPRixDQUFDLEdBQUdDLENBQVg7QUFDRDs7O1dBRUQscUJBQVlRLE1BQVosRUFBb0U7QUFDbEUsYUFBTyxJQUFJZixxQkFBSixDQUEwQixJQUExQixFQUFnQ2UsTUFBaEMsQ0FBUDtBQUNEOzs7V0FFRCxvQkFBaUI7QUFDZixXQUFLSCxFQUFMLENBQVFJLFVBQVIsQ0FBbUIsSUFBbkI7O0FBQ0EsV0FBS0gsRUFBTCxDQUFRRyxVQUFSLENBQW1CLElBQW5CO0FBQ0Q7OztXQUVELG9CQUFpQjtBQUNmLFdBQUtKLEVBQUwsQ0FBUUssYUFBUixDQUFzQixJQUF0Qjs7QUFDQSxXQUFLSixFQUFMLENBQVFJLGFBQVIsQ0FBc0IsSUFBdEI7O0FBQ0E7QUFDRDs7O1dBRUQsNkJBQXlCO0FBQ3ZCLGFBQU87QUFDTEMsUUFBQUEsSUFBSSxFQUFFLFVBREQ7QUFFTEMsUUFBQUEsS0FBSyxFQUFFLENBQUMsS0FBS1AsRUFBTCxDQUFRUSxjQUFSLEVBQUQsRUFBMkIsS0FBS1AsRUFBTCxDQUFRTyxjQUFSLEVBQTNCO0FBRkYsT0FBUDtBQUlEOzs7RUF4RDRCaEIsb0I7O0FBMkQvQmlCLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQmpCLGdCQUFqQiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZsb3dcbiAqIEBmb3JtYXRcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbmNvbnN0IEFuaW1hdGVkSW50ZXJwb2xhdGlvbiA9IHJlcXVpcmUoJy4vQW5pbWF0ZWRJbnRlcnBvbGF0aW9uJyk7XG5jb25zdCBBbmltYXRlZE5vZGUgPSByZXF1aXJlKCcuL0FuaW1hdGVkTm9kZScpO1xuY29uc3QgQW5pbWF0ZWRWYWx1ZSA9IHJlcXVpcmUoJy4vQW5pbWF0ZWRWYWx1ZScpO1xuY29uc3QgQW5pbWF0ZWRXaXRoQ2hpbGRyZW4gPSByZXF1aXJlKCcuL0FuaW1hdGVkV2l0aENoaWxkcmVuJyk7XG5cbmltcG9ydCB0eXBlIHtJbnRlcnBvbGF0aW9uQ29uZmlnVHlwZX0gZnJvbSAnLi9BbmltYXRlZEludGVycG9sYXRpb24nO1xuXG5jbGFzcyBBbmltYXRlZERpdmlzaW9uIGV4dGVuZHMgQW5pbWF0ZWRXaXRoQ2hpbGRyZW4ge1xuICBfYTogQW5pbWF0ZWROb2RlO1xuICBfYjogQW5pbWF0ZWROb2RlO1xuICBfd2FybmVkQWJvdXREaXZpZGVCeVplcm86IGJvb2xlYW4gPSBmYWxzZTtcblxuICBjb25zdHJ1Y3RvcihhOiBBbmltYXRlZE5vZGUgfCBudW1iZXIsIGI6IEFuaW1hdGVkTm9kZSB8IG51bWJlcikge1xuICAgIHN1cGVyKCk7XG4gICAgaWYgKGIgPT09IDAgfHwgKGIgaW5zdGFuY2VvZiBBbmltYXRlZE5vZGUgJiYgYi5fX2dldFZhbHVlKCkgPT09IDApKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdEZXRlY3RlZCBwb3RlbnRpYWwgZGl2aXNpb24gYnkgemVybyBpbiBBbmltYXRlZERpdmlzaW9uJyk7XG4gICAgfVxuICAgIHRoaXMuX2EgPSB0eXBlb2YgYSA9PT0gJ251bWJlcicgPyBuZXcgQW5pbWF0ZWRWYWx1ZShhKSA6IGE7XG4gICAgdGhpcy5fYiA9IHR5cGVvZiBiID09PSAnbnVtYmVyJyA/IG5ldyBBbmltYXRlZFZhbHVlKGIpIDogYjtcbiAgfVxuXG4gIF9fbWFrZU5hdGl2ZSgpIHtcbiAgICB0aGlzLl9hLl9fbWFrZU5hdGl2ZSgpO1xuICAgIHRoaXMuX2IuX19tYWtlTmF0aXZlKCk7XG4gICAgc3VwZXIuX19tYWtlTmF0aXZlKCk7XG4gIH1cblxuICBfX2dldFZhbHVlKCk6IG51bWJlciB7XG4gICAgY29uc3QgYSA9IHRoaXMuX2EuX19nZXRWYWx1ZSgpO1xuICAgIGNvbnN0IGIgPSB0aGlzLl9iLl9fZ2V0VmFsdWUoKTtcbiAgICBpZiAoYiA9PT0gMCkge1xuICAgICAgLy8gUHJldmVudCBzcGFtbWluZyB0aGUgY29uc29sZS9Mb2dCb3hcbiAgICAgIGlmICghdGhpcy5fd2FybmVkQWJvdXREaXZpZGVCeVplcm8pIHtcbiAgICAgICAgY29uc29sZS5lcnJvcignRGV0ZWN0ZWQgZGl2aXNpb24gYnkgemVybyBpbiBBbmltYXRlZERpdmlzaW9uJyk7XG4gICAgICAgIHRoaXMuX3dhcm5lZEFib3V0RGl2aWRlQnlaZXJvID0gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIC8vIFBhc3NpbmcgaW5maW5pdHkvTmFOIHRvIEZhYnJpYyB3aWxsIGNhdXNlIGEgbmF0aXZlIGNyYXNoXG4gICAgICByZXR1cm4gMDtcbiAgICB9XG4gICAgdGhpcy5fd2FybmVkQWJvdXREaXZpZGVCeVplcm8gPSBmYWxzZTtcbiAgICByZXR1cm4gYSAvIGI7XG4gIH1cblxuICBpbnRlcnBvbGF0ZShjb25maWc6IEludGVycG9sYXRpb25Db25maWdUeXBlKTogQW5pbWF0ZWRJbnRlcnBvbGF0aW9uIHtcbiAgICByZXR1cm4gbmV3IEFuaW1hdGVkSW50ZXJwb2xhdGlvbih0aGlzLCBjb25maWcpO1xuICB9XG5cbiAgX19hdHRhY2goKTogdm9pZCB7XG4gICAgdGhpcy5fYS5fX2FkZENoaWxkKHRoaXMpO1xuICAgIHRoaXMuX2IuX19hZGRDaGlsZCh0aGlzKTtcbiAgfVxuXG4gIF9fZGV0YWNoKCk6IHZvaWQge1xuICAgIHRoaXMuX2EuX19yZW1vdmVDaGlsZCh0aGlzKTtcbiAgICB0aGlzLl9iLl9fcmVtb3ZlQ2hpbGQodGhpcyk7XG4gICAgc3VwZXIuX19kZXRhY2goKTtcbiAgfVxuXG4gIF9fZ2V0TmF0aXZlQ29uZmlnKCk6IGFueSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6ICdkaXZpc2lvbicsXG4gICAgICBpbnB1dDogW3RoaXMuX2EuX19nZXROYXRpdmVUYWcoKSwgdGhpcy5fYi5fX2dldE5hdGl2ZVRhZygpXSxcbiAgICB9O1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gQW5pbWF0ZWREaXZpc2lvbjtcbiJdfQ==