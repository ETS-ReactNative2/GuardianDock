{"version":3,"sources":["create-icon-set.js"],"names":["NativeIconAPI","NativeModules","RNVectorIconsManager","RNVectorIconsModule","DEFAULT_ICON_SIZE","DEFAULT_ICON_COLOR","createIconSet","glyphMap","fontFamily","fontFile","fontStyle","fontBasename","replace","fontReference","Platform","select","windows","android","web","default","IconNamePropType","PropTypes","oneOf","Object","keys","Icon","root","handleRef","ref","nativeProps","setNativeProps","props","name","size","color","style","children","glyph","String","fromCodePoint","styleDefaults","fontSize","styleOverrides","fontWeight","PureComponent","propTypes","allowFontScaling","bool","number","any","node","defaultProps","imageSourceCache","resolveGlyph","getImageSourceSync","processedColor","cacheKey","has","get","imagePath","getImageForFontSync","value","uri","scale","PixelRatio","setValue","error","setError","getImageSource","getImageForFont","loadFont","file","OS","Error","loadFontWithFileName","split","hasIcon","prototype","hasOwnProperty","call","getRawGlyphMap","getFontFamily","Button"],"mappings":"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","sourcesContent":["import React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  NativeModules,\n  Platform,\n  PixelRatio,\n  processColor,\n  Text,\n} from 'react-native';\n\nimport ensureNativeModuleAvailable from './ensure-native-module-available';\nimport createIconSourceCache from './create-icon-source-cache';\nimport createIconButtonComponent from './icon-button';\n\nexport const NativeIconAPI =\n  NativeModules.RNVectorIconsManager || NativeModules.RNVectorIconsModule;\n\nexport const DEFAULT_ICON_SIZE = 12;\nexport const DEFAULT_ICON_COLOR = 'black';\n\nexport default function createIconSet(\n  glyphMap,\n  fontFamily,\n  fontFile,\n  fontStyle\n) {\n  // Android doesn't care about actual fontFamily name, it will only look in fonts folder.\n  const fontBasename = fontFile\n    ? fontFile.replace(/\\.(otf|ttf)$/, '')\n    : fontFamily;\n\n  const fontReference = Platform.select({\n    windows: `/Assets/${fontFile}#${fontFamily}`,\n    android: fontBasename,\n    web: fontBasename,\n    default: fontFamily,\n  });\n\n  const IconNamePropType = PropTypes.oneOf(Object.keys(glyphMap));\n\n  class Icon extends PureComponent {\n    root = null;\n\n    static propTypes = {\n      allowFontScaling: PropTypes.bool,\n      name: IconNamePropType,\n      size: PropTypes.number,\n      color: PropTypes.any, // eslint-disable-line react/forbid-prop-types\n      children: PropTypes.node,\n      style: PropTypes.any, // eslint-disable-line react/forbid-prop-types\n    };\n\n    static defaultProps = {\n      size: DEFAULT_ICON_SIZE,\n      allowFontScaling: false,\n    };\n\n    setNativeProps(nativeProps) {\n      if (this.root) {\n        this.root.setNativeProps(nativeProps);\n      }\n    }\n\n    handleRef = ref => {\n      this.root = ref;\n    };\n\n    render() {\n      const { name, size, color, style, children, ...props } = this.props;\n\n      let glyph = name ? glyphMap[name] || '?' : '';\n      if (typeof glyph === 'number') {\n        glyph = String.fromCodePoint(glyph);\n      }\n\n      const styleDefaults = {\n        fontSize: size,\n        color,\n      };\n\n      const styleOverrides = {\n        fontFamily: fontReference,\n        fontWeight: 'normal',\n        fontStyle: 'normal',\n      };\n\n      props.style = [styleDefaults, style, styleOverrides, fontStyle || {}];\n      props.ref = this.handleRef;\n\n      return (\n        <Text selectable={false} {...props}>\n          {glyph}\n          {children}\n        </Text>\n      );\n    }\n  }\n\n  const imageSourceCache = createIconSourceCache();\n\n  function resolveGlyph(name) {\n    const glyph = glyphMap[name] || '?';\n    if (typeof glyph === 'number') {\n      return String.fromCodePoint(glyph);\n    }\n    return glyph;\n  }\n\n  function getImageSourceSync(\n    name,\n    size = DEFAULT_ICON_SIZE,\n    color = DEFAULT_ICON_COLOR\n  ) {\n    ensureNativeModuleAvailable();\n\n    const glyph = resolveGlyph(name);\n    const processedColor = processColor(color);\n    const cacheKey = `${glyph}:${size}:${processedColor}`;\n\n    if (imageSourceCache.has(cacheKey)) {\n      return imageSourceCache.get(cacheKey);\n    }\n    try {\n      const imagePath = NativeIconAPI.getImageForFontSync(\n        fontReference,\n        glyph,\n        size,\n        processedColor\n      );\n      const value = { uri: imagePath, scale: PixelRatio.get() };\n      imageSourceCache.setValue(cacheKey, value);\n      return value;\n    } catch (error) {\n      imageSourceCache.setError(cacheKey, error);\n      throw error;\n    }\n  }\n\n  async function getImageSource(\n    name,\n    size = DEFAULT_ICON_SIZE,\n    color = DEFAULT_ICON_COLOR\n  ) {\n    ensureNativeModuleAvailable();\n\n    const glyph = resolveGlyph(name);\n    const processedColor = processColor(color);\n    const cacheKey = `${glyph}:${size}:${processedColor}`;\n\n    if (imageSourceCache.has(cacheKey)) {\n      return imageSourceCache.get(cacheKey);\n    }\n    try {\n      const imagePath = await NativeIconAPI.getImageForFont(\n        fontReference,\n        glyph,\n        size,\n        processedColor\n      );\n      const value = { uri: imagePath, scale: PixelRatio.get() };\n      imageSourceCache.setValue(cacheKey, value);\n      return value;\n    } catch (error) {\n      imageSourceCache.setError(cacheKey, error);\n      throw error;\n    }\n  }\n\n  async function loadFont(file = fontFile) {\n    if (Platform.OS === 'ios') {\n      ensureNativeModuleAvailable();\n      if (!file) {\n        throw new Error('Unable to load font, because no file was specified. ');\n      }\n      await NativeIconAPI.loadFontWithFileName(...file.split('.'));\n    }\n  }\n\n  function hasIcon(name) {\n    return Object.prototype.hasOwnProperty.call(glyphMap, name);\n  }\n\n  function getRawGlyphMap() {\n    return glyphMap;\n  }\n\n  function getFontFamily() {\n    return fontReference;\n  }\n\n  Icon.Button = createIconButtonComponent(Icon);\n  Icon.getImageSource = getImageSource;\n  Icon.getImageSourceSync = getImageSourceSync;\n  Icon.loadFont = loadFont;\n  Icon.hasIcon = hasIcon;\n  Icon.getRawGlyphMap = getRawGlyphMap;\n  Icon.getFontFamily = getFontFamily;\n\n  return Icon;\n}\n"]}