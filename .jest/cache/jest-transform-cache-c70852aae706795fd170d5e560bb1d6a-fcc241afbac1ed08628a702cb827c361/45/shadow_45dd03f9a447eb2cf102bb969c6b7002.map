{"version":3,"mappings":";;;;;;;AAAA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,IAAMA,YAAY,GAAGC,MAAM,CAACC,KAA5B;AACA,IAAMC,cAAc,GAAG,IAAvB;;AAEe,SAASC,MAAT,GAAwD;AAAA,MAAxCC,SAAwC,uEAAH,CAAG;;AACrE,MAAIA,SAAS,YAAYC,sBAASC,KAAlC,EAAyC;AACvC,QAAMC,UAAU,GAAG,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,EAAhB,CAAnB;AAEA,WAAO;AACLC,iBAAW,EAAET,YADR;AAELU,kBAAY,EAAE;AACZC,aAAK,EAAE,IAAIL,sBAASC,KAAb,CAAmB,CAAnB,CADK;AAEZK,cAAM,EAAEP,SAAS,CAACQ,WAAVR,CAAsB;AAC5BG,oBAD4B,EAC5BA,UAD4B;AAE5BM,qBAAW,EAAE,CAAC,CAAD,EAAI,GAAJ,EAAS,IAAT,EAAe,CAAf,EAAkB,CAAlB,EAAqB,EAArB;AAFe,SAAtBT;AAFI,OAFT;AASLU,mBAAa,EAAEV,SAAS,CAACQ,WAAVR,CAAsB;AACnCG,kBAAU,EAAE,CAAC,CAAD,EAAI,CAAJ,CADuB;AAEnCM,mBAAW,EAAE,CAAC,CAAD,EAAIX,cAAJ,CAFsB;AAGnCa,mBAAW,EAAE;AAHsB,OAAtBX,CATV;AAcLY,kBAAY,EAAEZ,SAAS,CAACQ,WAAVR,CAAsB;AAClCG,kBADkC,EAClCA,UADkC;AAElCM,mBAAW,EAAE,CAAC,CAAD,EAAI,IAAJ,EAAU,GAAV,EAAe,CAAf,EAAkB,CAAlB,EAAqB,EAArB;AAFqB,OAAtBT;AAdT,KAAP;AAHF,SAsBO;AACL,QAAIA,SAAS,KAAK,CAAlB,EAAqB;AACnB,aAAO,EAAP;AACD;;AAED,QAAIO,MAAJ,EAAYM,MAAZ;;AACA,YAAQb,SAAR;AACE,WAAK,CAAL;AACEO,cAAM,GAAG,GAATA;AACAM,cAAM,GAAG,IAATA;AACA;;AACF,WAAK,CAAL;AACEN,cAAM,GAAG,IAATA;AACAM,cAAM,GAAG,GAATA;AACA;;AACF;AACEN,cAAM,GAAGP,SAAS,GAAG,CAArBO;AACAM,cAAM,GAAGb,SAATa;AAXJ;;AAcA,WAAO;AACLT,iBAAW,EAAET,YADR;AAELU,kBAAY,EAAE;AACZC,aAAK,EAAE,CADK;AAEZC;AAFY,OAFT;AAMLG,mBAAa,EAAEZ,cANV;AAOLc,kBAAY,EAAEC;AAPT,KAAP;AASD;AACF","names":["SHADOW_COLOR","Colors","black","SHADOW_OPACITY","shadow","elevation","Animated","Value","inputRange","shadowColor","shadowOffset","width","height","interpolate","outputRange","shadowOpacity","extrapolate","shadowRadius","radius"],"sources":["shadow.tsx"],"sourcesContent":["import * as Colors from './colors';\nimport { Animated } from 'react-native';\n\nconst SHADOW_COLOR = Colors.black;\nconst SHADOW_OPACITY = 0.24;\n\nexport default function shadow(elevation: number | Animated.Value = 0) {\n  if (elevation instanceof Animated.Value) {\n    const inputRange = [0, 1, 2, 3, 8, 24];\n\n    return {\n      shadowColor: SHADOW_COLOR,\n      shadowOffset: {\n        width: new Animated.Value(0),\n        height: elevation.interpolate({\n          inputRange,\n          outputRange: [0, 0.5, 0.75, 2, 7, 23],\n        }),\n      },\n      shadowOpacity: elevation.interpolate({\n        inputRange: [0, 1],\n        outputRange: [0, SHADOW_OPACITY],\n        extrapolate: 'clamp',\n      }),\n      shadowRadius: elevation.interpolate({\n        inputRange,\n        outputRange: [0, 0.75, 1.5, 3, 8, 24],\n      }),\n    };\n  } else {\n    if (elevation === 0) {\n      return {};\n    }\n\n    let height, radius;\n    switch (elevation) {\n      case 1:\n        height = 0.5;\n        radius = 0.75;\n        break;\n      case 2:\n        height = 0.75;\n        radius = 1.5;\n        break;\n      default:\n        height = elevation - 1;\n        radius = elevation;\n    }\n\n    return {\n      shadowColor: SHADOW_COLOR,\n      shadowOffset: {\n        width: 0,\n        height,\n      },\n      shadowOpacity: SHADOW_OPACITY,\n      shadowRadius: radius,\n    };\n  }\n}\n"]}