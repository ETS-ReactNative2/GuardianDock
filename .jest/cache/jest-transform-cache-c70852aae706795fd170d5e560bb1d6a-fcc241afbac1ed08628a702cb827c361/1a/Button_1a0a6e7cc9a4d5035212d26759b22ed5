49842696771a5b95e719465a7afbeee3
"use strict";

var _interopRequireDefault2 = require("@babel/runtime/helpers/interopRequireDefault");

var _extends3 = _interopRequireDefault2(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault2(require("@babel/runtime/helpers/objectWithoutProperties"));

var _excluded = ["disabled", "compact", "mode", "dark", "loading", "icon", "color", "children", "uppercase", "accessibilityLabel", "accessibilityHint", "onPress", "onLongPress", "style", "theme", "contentStyle", "labelStyle", "testID", "accessible"];
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var React = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

var _color = _interopRequireDefault(require("color"));

var _ActivityIndicator = _interopRequireDefault(require("./ActivityIndicator"));

var _Icon = _interopRequireDefault(require("./Icon"));

var _Surface = _interopRequireDefault(require("./Surface"));

var _Text = _interopRequireDefault(require("./Typography/Text"));

var _TouchableRipple = _interopRequireDefault(require("./TouchableRipple/TouchableRipple"));

var _colors = require("../styles/colors");

var _theming = require("../core/theming");

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

function _getRequireWildcardCache() {
  if (typeof WeakMap !== "function") return null;
  var cache = new WeakMap();

  _getRequireWildcardCache = function _getRequireWildcardCache() {
    return cache;
  };

  return cache;
}

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  }

  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }

  var cache = _getRequireWildcardCache();

  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }

  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }

  newObj.default = obj;

  if (cache) {
    cache.set(obj, newObj);
  }

  return newObj;
}

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

var Button = function Button(_ref) {
  var disabled = _ref.disabled,
      compact = _ref.compact,
      _ref$mode = _ref.mode,
      mode = _ref$mode === void 0 ? 'text' : _ref$mode,
      dark = _ref.dark,
      loading = _ref.loading,
      icon = _ref.icon,
      buttonColor = _ref.color,
      children = _ref.children,
      _ref$uppercase = _ref.uppercase,
      uppercase = _ref$uppercase === void 0 ? true : _ref$uppercase,
      accessibilityLabel = _ref.accessibilityLabel,
      accessibilityHint = _ref.accessibilityHint,
      onPress = _ref.onPress,
      onLongPress = _ref.onLongPress,
      style = _ref.style,
      theme = _ref.theme,
      contentStyle = _ref.contentStyle,
      labelStyle = _ref.labelStyle,
      testID = _ref.testID,
      accessible = _ref.accessible,
      rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);

  var _StyleSheet$flatten;

  var _React$useRef = React.useRef(new _reactNative.Animated.Value(mode === 'contained' ? 2 : 0)),
      elevation = _React$useRef.current;

  React.useEffect(function () {
    elevation.setValue(mode === 'contained' ? 2 : 0);
  }, [mode, elevation]);

  var handlePressIn = function handlePressIn() {
    if (mode === 'contained') {
      var scale = theme.animation.scale;

      _reactNative.Animated.timing(elevation, {
        toValue: 8,
        duration: 200 * scale,
        useNativeDriver: true
      }).start();
    }
  };

  var handlePressOut = function handlePressOut() {
    if (mode === 'contained') {
      var scale = theme.animation.scale;

      _reactNative.Animated.timing(elevation, {
        toValue: 2,
        duration: 150 * scale,
        useNativeDriver: true
      }).start();
    }
  };

  var colors = theme.colors,
      roundness = theme.roundness;
  var font = theme.fonts.medium;
  var backgroundColor, borderColor, textColor, borderWidth;

  if (mode === 'contained') {
    if (disabled) {
      backgroundColor = (0, _color.default)(theme.dark ? _colors.white : _colors.black).alpha(0.12).rgb().string();
    } else if (buttonColor) {
      backgroundColor = buttonColor;
    } else {
      backgroundColor = colors.primary;
    }
  } else {
    backgroundColor = 'transparent';
  }

  if (mode === 'outlined') {
    borderColor = (0, _color.default)(theme.dark ? _colors.white : _colors.black).alpha(0.29).rgb().string();
    borderWidth = _reactNative.StyleSheet.hairlineWidth;
  } else {
    borderColor = 'transparent';
    borderWidth = 0;
  }

  if (disabled) {
    textColor = (0, _color.default)(theme.dark ? _colors.white : _colors.black).alpha(0.32).rgb().string();
  } else if (mode === 'contained') {
    var isDark;

    if (typeof dark === 'boolean') {
      isDark = dark;
    } else {
      isDark = backgroundColor === 'transparent' ? false : !(0, _color.default)(backgroundColor).isLight();
    }

    textColor = isDark ? _colors.white : _colors.black;
  } else if (buttonColor) {
    textColor = buttonColor;
  } else {
    textColor = colors.primary;
  }

  var rippleColor = (0, _color.default)(textColor).alpha(0.32).rgb().string();
  var buttonStyle = {
    backgroundColor: backgroundColor,
    borderColor: borderColor,
    borderWidth: borderWidth,
    borderRadius: roundness
  };
  var touchableStyle = {
    borderRadius: style ? (_reactNative.StyleSheet.flatten(style) || {}).borderRadius || roundness : roundness
  };

  var _ref2 = _reactNative.StyleSheet.flatten(labelStyle) || {},
      customLabelColor = _ref2.color,
      customLabelSize = _ref2.fontSize;

  var textStyle = (0, _extends3.default)({
    color: textColor
  }, font);
  var elevationRes = disabled || mode !== 'contained' ? 0 : elevation;
  var iconStyle = ((_StyleSheet$flatten = _reactNative.StyleSheet.flatten(contentStyle)) === null || _StyleSheet$flatten === void 0 ? void 0 : _StyleSheet$flatten.flexDirection) === 'row-reverse' ? styles.iconReverse : styles.icon;
  return React.createElement(_Surface.default, _extends({}, rest, {
    style: [styles.button, compact && styles.compact, {
      elevation: elevationRes
    }, buttonStyle, style]
  }), React.createElement(_TouchableRipple.default, {
    borderless: true,
    delayPressIn: 0,
    onPress: onPress,
    onLongPress: onLongPress,
    onPressIn: handlePressIn,
    onPressOut: handlePressOut,
    accessibilityLabel: accessibilityLabel,
    accessibilityHint: accessibilityHint,
    accessibilityTraits: disabled ? ['button', 'disabled'] : 'button',
    accessibilityComponentType: "button",
    accessibilityRole: "button",
    accessibilityState: {
      disabled: disabled
    },
    accessible: accessible,
    disabled: disabled,
    rippleColor: rippleColor,
    style: touchableStyle,
    testID: testID
  }, React.createElement(_reactNative.View, {
    style: [styles.content, contentStyle]
  }, icon && loading !== true ? React.createElement(_reactNative.View, {
    style: iconStyle
  }, React.createElement(_Icon.default, {
    source: icon,
    size: customLabelSize !== null && customLabelSize !== void 0 ? customLabelSize : 16,
    color: typeof customLabelColor === 'string' ? customLabelColor : textColor
  })) : null, loading ? React.createElement(_ActivityIndicator.default, {
    size: customLabelSize !== null && customLabelSize !== void 0 ? customLabelSize : 16,
    color: typeof customLabelColor === 'string' ? customLabelColor : textColor,
    style: iconStyle
  }) : null, React.createElement(_Text.default, {
    selectable: false,
    numberOfLines: 1,
    style: [styles.label, compact && styles.compactLabel, uppercase && styles.uppercaseLabel, textStyle, font, labelStyle]
  }, children))));
};

var styles = _reactNative.StyleSheet.create({
  button: {
    minWidth: 64,
    borderStyle: 'solid'
  },
  compact: {
    minWidth: 'auto'
  },
  content: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center'
  },
  icon: {
    marginLeft: 12,
    marginRight: -4
  },
  iconReverse: {
    marginRight: 12,
    marginLeft: -4
  },
  label: {
    textAlign: 'center',
    letterSpacing: 1,
    marginVertical: 9,
    marginHorizontal: 16
  },
  compactLabel: {
    marginHorizontal: 8
  },
  uppercaseLabel: {
    textTransform: 'uppercase'
  }
});

var _default = (0, _theming.withTheme)(Button);

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,