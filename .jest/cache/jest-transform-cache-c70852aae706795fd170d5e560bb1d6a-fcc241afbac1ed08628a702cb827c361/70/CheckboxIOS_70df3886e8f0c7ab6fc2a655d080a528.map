{"version":3,"mappings":";;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8CA,IAAMA,WAAW,GAAG,SAAdA,WAAc,OAOP;AAAA,MANXC,MAMW,QANXA,MAMW;AAAA,MALXC,QAKW,QALXA,QAKW;AAAA,MAJXC,OAIW,QAJXA,OAIW;AAAA,MAHXC,KAGW,QAHXA,KAGW;AAAA,MAFXC,MAEW,QAFXA,MAEW;AAAA,MADRC,IACQ;AACX,MAAMC,OAAO,GAAGN,MAAM,KAAK,SAA3B;AACA,MAAMO,aAAa,GAAGP,MAAM,KAAK,eAAjC;AAEA,MAAMQ,YAAY,GAAGP,QAAQ,GACzBE,KAAK,CAACM,MAANN,CAAaF,QADY,GAEzBI,IAAI,CAACK,KAALL,IAAcF,KAAK,CAACM,MAANN,CAAaQ,MAF/B;AAIA,MAAIC,WAAJ;;AAEA,MAAIX,QAAJ,EAAc;AACZW,eAAW,GAAG,oBAAMT,KAAK,CAACM,MAANN,CAAaU,IAAnB,EAAyBC,KAAzB,CAA+B,IAA/B,EAAqCC,GAArC,GAA2CC,MAA3C,EAAdJ;AADF,SAEO;AACLA,eAAW,GAAG,oBAAMJ,YAAN,EAAoBS,IAApB,CAAyB,IAAzB,EAA+BF,GAA/B,GAAqCC,MAArC,EAAdJ;AACD;;AAED,MAAMM,IAAI,GAAGX,aAAa,GAAG,OAAH,GAAa,OAAvC;AAEA,SACEY,oBAACC,wBAAD,eACMf,IADN;AAEEgB,cAAU,MAFZ;AAGET,eAAW,EAAEA,WAHf;AAIEV,WAAO,EAAEA,OAJX;AAKED,YAAQ,EAAEA,QALZ;AAOEqB,uBAAmB,EAAErB,QAAQ,GAAG,CAAC,QAAD,EAAW,UAAX,CAAH,GAA4B,QAP3D;AAQEsB,8BAA0B,EAAC,QAR7B;AASEC,qBAAiB,EAAC,UATpB;AAUEC,sBAAkB,EAAE;AAAExB,cAAF,EAAEA,QAAF;AAAYK;AAAZ,KAVtB;AAWEoB,2BAAuB,EAAC,QAX1B;AAYEC,SAAK,EAAEC,MAAM,CAACC,SAZhB;AAaEzB,UAAM,EAAEA;AAbV,MAeEe,oBAACW,iBAAD;AAAMH,SAAK,EAAE;AAAEI,aAAO,EAAExB,aAAa,IAAID,OAAjBC,GAA2B,CAA3BA,GAA+B;AAA1C;AAAb,KACEY,oBAACa,8BAAD;AACEC,oBAAgB,EAAE,KADpB;AAEEC,QAAI,EAAEhB,IAFR;AAGEiB,QAAI,EAAE,EAHR;AAIEzB,SAAK,EAAEF,YAJT;AAKE4B,aAAS,EAAC;AALZ,IADF,CAfF,CADF;AAzBF;;AAsDArC,WAAW,CAACsC,WAAZtC,GAA0B,cAA1BA;;AAEA,IAAM6B,MAAM,GAAGU,wBAAWC,MAAXD,CAAkB;AAC/BT,WAAS,EAAE;AACTW,gBAAY,EAAE,EADL;AAETC,WAAO,EAAE;AAFA;AADoB,CAAlBH,CAAf;;eAOe,wBAAUvC,WAAV;;;AAGf,IAAM2C,oBAAoB,GAAG,wBAAU3C,WAAV,CAA7B","names":["CheckboxIOS","status","disabled","onPress","theme","testID","rest","checked","indeterminate","checkedColor","colors","color","accent","rippleColor","text","alpha","rgb","string","fade","icon","React","_TouchableRipple","borderless","accessibilityTraits","accessibilityComponentType","accessibilityRole","accessibilityState","accessibilityLiveRegion","style","styles","container","_reactNative","opacity","_MaterialCommunityIcon","allowFontScaling","name","size","direction","displayName","StyleSheet","create","borderRadius","padding","CheckboxIOSWithTheme"],"sources":["CheckboxIOS.tsx"],"sourcesContent":["import * as React from 'react';\nimport { StyleSheet, View } from 'react-native';\nimport color from 'color';\nimport MaterialCommunityIcon from '../MaterialCommunityIcon';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport { withTheme } from '../../core/theming';\nimport type { $RemoveChildren } from '../../types';\n\ntype Props = $RemoveChildren<typeof TouchableRipple> & {\n  /**\n   * Status of checkbox.\n   */\n  status: 'checked' | 'unchecked' | 'indeterminate';\n  /**\n   * Whether checkbox is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Custom color for checkbox.\n   */\n  color?: string;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n  /**\n   * testID to be used on tests.\n   */\n  testID?: string;\n};\n\n/**\n * Checkboxes allow the selection of multiple options from a set.\n * This component follows platform guidelines for iOS, but can be used\n * on any platform.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img src=\"screenshots/checkbox-enabled.ios.png\" />\n *     <figcaption>Enabled</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/checkbox-disabled.ios.png\" />\n *     <figcaption>Disabled</figcaption>\n *   </figure>\n * </div>\n */\nconst CheckboxIOS = ({\n  status,\n  disabled,\n  onPress,\n  theme,\n  testID,\n  ...rest\n}: Props) => {\n  const checked = status === 'checked';\n  const indeterminate = status === 'indeterminate';\n\n  const checkedColor = disabled\n    ? theme.colors.disabled\n    : rest.color || theme.colors.accent;\n\n  let rippleColor;\n\n  if (disabled) {\n    rippleColor = color(theme.colors.text).alpha(0.16).rgb().string();\n  } else {\n    rippleColor = color(checkedColor).fade(0.32).rgb().string();\n  }\n\n  const icon = indeterminate ? 'minus' : 'check';\n\n  return (\n    <TouchableRipple\n      {...rest}\n      borderless\n      rippleColor={rippleColor}\n      onPress={onPress}\n      disabled={disabled}\n      // @ts-expect-error We keep old a11y props for backwards compat with old RN versions\n      accessibilityTraits={disabled ? ['button', 'disabled'] : 'button'}\n      accessibilityComponentType=\"button\"\n      accessibilityRole=\"checkbox\"\n      accessibilityState={{ disabled, checked }}\n      accessibilityLiveRegion=\"polite\"\n      style={styles.container}\n      testID={testID}\n    >\n      <View style={{ opacity: indeterminate || checked ? 1 : 0 }}>\n        <MaterialCommunityIcon\n          allowFontScaling={false}\n          name={icon}\n          size={24}\n          color={checkedColor}\n          direction=\"ltr\"\n        />\n      </View>\n    </TouchableRipple>\n  );\n};\n\nCheckboxIOS.displayName = 'Checkbox.IOS';\n\nconst styles = StyleSheet.create({\n  container: {\n    borderRadius: 18,\n    padding: 6,\n  },\n});\n\nexport default withTheme(CheckboxIOS);\n\n// @component-docs ignore-next-line\nconst CheckboxIOSWithTheme = withTheme(CheckboxIOS);\n// @component-docs ignore-next-line\nexport { CheckboxIOSWithTheme as CheckboxIOS };\n"]}