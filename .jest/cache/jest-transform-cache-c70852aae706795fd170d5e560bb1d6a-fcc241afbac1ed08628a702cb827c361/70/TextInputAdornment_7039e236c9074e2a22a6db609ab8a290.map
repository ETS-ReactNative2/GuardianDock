{"version":3,"mappings":"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","names":["getAdornmentConfig","left","right","adornmentConfig","side","AdornmentSide","Left","adornment","Right","forEach","React","isValidElement","type","TextInputAffix","AdornmentType","Affix","TextInputIcon","Icon","push","getAdornmentStyleAdjustmentForNativeInput","leftAffixWidth","rightAffixWidth","paddingHorizontal","inputOffset","mode","length","adornmentStyleAdjustmentForNativeInput","map","isLeftSide","inputModeAdornemntOffset","InputMode","Outlined","ADORNMENT_OFFSET","OUTLINED_INPUT_OFFSET","paddingKey","captalize","affixWidth","padding","offset","isAffix","marginKey","allStyleAdjustmentsMerged","reduce","mergedStyles","currentStyle","text","charAt","toUpperCase","slice","TextInputAdornment","onAffixChange","textStyle","visible","topPosition","isTextInputFocused","forceFocus","_react","inputAdornmentComponent","commonProps","key","testID","_TextInputIcon","icon","_TextInputAffix","affix","onLayout"],"sources":["TextInputAdornment.tsx"],"sourcesContent":["import React from 'react';\nimport TextInputIcon, { IconAdornment } from './TextInputIcon';\nimport TextInputAffix, { AffixAdornment } from './TextInputAffix';\nimport { ADORNMENT_OFFSET, OUTLINED_INPUT_OFFSET } from '../constants';\nimport type {\n  LayoutChangeEvent,\n  TextStyle,\n  StyleProp,\n  Animated,\n} from 'react-native';\nimport type {\n  AdornmentConfig,\n  AdornmentStyleAdjustmentForNativeInput,\n} from './types';\nimport { AdornmentSide, AdornmentType, InputMode } from './enums';\n\nexport function getAdornmentConfig({\n  left,\n  right,\n}: {\n  left?: React.ReactNode;\n  right?: React.ReactNode;\n}): Array<AdornmentConfig> {\n  let adornmentConfig: any[] = [];\n  if (left || right) {\n    [\n      { side: AdornmentSide.Left, adornment: left },\n      { side: AdornmentSide.Right, adornment: right },\n    ].forEach(({ side, adornment }) => {\n      if (adornment && React.isValidElement(adornment)) {\n        let type;\n        if (adornment.type === TextInputAffix) {\n          type = AdornmentType.Affix;\n        } else if (adornment.type === TextInputIcon) {\n          type = AdornmentType.Icon;\n        }\n        adornmentConfig.push({\n          side,\n          type,\n        });\n      }\n    });\n  }\n\n  return adornmentConfig;\n}\n\nexport function getAdornmentStyleAdjustmentForNativeInput({\n  adornmentConfig,\n  leftAffixWidth,\n  rightAffixWidth,\n  paddingHorizontal,\n  inputOffset = 0,\n  mode,\n}: {\n  inputOffset?: number;\n  adornmentConfig: AdornmentConfig[];\n  leftAffixWidth: number;\n  rightAffixWidth: number;\n  mode?: 'outlined' | 'flat';\n  paddingHorizontal?: number | string;\n}): AdornmentStyleAdjustmentForNativeInput | {} {\n  if (adornmentConfig.length) {\n    const adornmentStyleAdjustmentForNativeInput = adornmentConfig.map(\n      ({ type, side }: AdornmentConfig) => {\n        const isLeftSide = side === AdornmentSide.Left;\n        const inputModeAdornemntOffset =\n          mode === InputMode.Outlined\n            ? ADORNMENT_OFFSET + OUTLINED_INPUT_OFFSET\n            : ADORNMENT_OFFSET;\n        const paddingKey = `padding${captalize(side)}`;\n        const affixWidth = isLeftSide ? leftAffixWidth : rightAffixWidth;\n        const padding =\n          typeof paddingHorizontal === 'number'\n            ? paddingHorizontal\n            : inputModeAdornemntOffset;\n        const offset = affixWidth + padding;\n\n        const isAffix = type === AdornmentType.Affix;\n        const marginKey = `margin${captalize(side)}`;\n\n        return {\n          [marginKey]: isAffix ? 0 : offset,\n          [paddingKey]: isAffix ? offset : inputOffset,\n        };\n      }\n    );\n    const allStyleAdjustmentsMerged = adornmentStyleAdjustmentForNativeInput.reduce(\n      (mergedStyles, currentStyle) => {\n        return {\n          ...mergedStyles,\n          ...currentStyle,\n        };\n      },\n      {}\n    );\n    return allStyleAdjustmentsMerged;\n  } else {\n    return [{}];\n  }\n}\n\nconst captalize = (text: string) =>\n  text.charAt(0).toUpperCase() + text.slice(1);\n\nexport interface TextInputAdornmentProps {\n  forceFocus: () => void;\n  adornmentConfig: AdornmentConfig[];\n  topPosition: {\n    [AdornmentType.Affix]: {\n      [AdornmentSide.Left]: number | null;\n      [AdornmentSide.Right]: number | null;\n    };\n    [AdornmentType.Icon]: number;\n  };\n  onAffixChange: {\n    [AdornmentSide.Left]: (event: LayoutChangeEvent) => void;\n    [AdornmentSide.Right]: (event: LayoutChangeEvent) => void;\n  };\n  left?: React.ReactNode;\n  right?: React.ReactNode;\n  textStyle?: StyleProp<TextStyle>;\n  visible?: Animated.Value;\n  isTextInputFocused: boolean;\n  paddingHorizontal?: number | string;\n}\n\nconst TextInputAdornment: React.FunctionComponent<TextInputAdornmentProps> = ({\n  adornmentConfig,\n  left,\n  right,\n  onAffixChange,\n  textStyle,\n  visible,\n  topPosition,\n  isTextInputFocused,\n  forceFocus,\n  paddingHorizontal,\n}) => {\n  if (adornmentConfig.length) {\n    return (\n      <>\n        {adornmentConfig.map(({ type, side }: AdornmentConfig) => {\n          let inputAdornmentComponent;\n          if (side === AdornmentSide.Left) {\n            inputAdornmentComponent = left;\n          } else if (side === AdornmentSide.Right) {\n            inputAdornmentComponent = right;\n          }\n\n          const commonProps = {\n            key: side,\n            side: side,\n            testID: `${side}-${type}-adornment`,\n            isTextInputFocused,\n            paddingHorizontal,\n          };\n          if (type === AdornmentType.Icon) {\n            return (\n              <IconAdornment\n                {...commonProps}\n                icon={inputAdornmentComponent}\n                topPosition={topPosition[AdornmentType.Icon]}\n                forceFocus={forceFocus}\n              />\n            );\n          } else if (type === AdornmentType.Affix) {\n            return (\n              <AffixAdornment\n                {...commonProps}\n                topPosition={topPosition[AdornmentType.Affix][side]}\n                affix={inputAdornmentComponent}\n                textStyle={textStyle}\n                onLayout={onAffixChange[side]}\n                visible={visible}\n              />\n            );\n          } else {\n            return null;\n          }\n        })}\n      </>\n    );\n  } else {\n    return null;\n  }\n};\n\nexport default TextInputAdornment;\n"]}