d2deaff2544e513512b9c41322e16992
"use strict";

var _interopRequireDefault2 = require("@babel/runtime/helpers/interopRequireDefault");

var _extends3 = _interopRequireDefault2(require("@babel/runtime/helpers/extends"));

var _defineProperty2 = _interopRequireDefault2(require("@babel/runtime/helpers/defineProperty"));

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getAdornmentConfig = getAdornmentConfig;
exports.getAdornmentStyleAdjustmentForNativeInput = getAdornmentStyleAdjustmentForNativeInput;
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _TextInputIcon = _interopRequireWildcard(require("./TextInputIcon"));

var _TextInputAffix = _interopRequireWildcard(require("./TextInputAffix"));

var _constants = require("../constants");

var _enums = require("./enums");

function _getRequireWildcardCache() {
  if (typeof WeakMap !== "function") return null;
  var cache = new WeakMap();

  _getRequireWildcardCache = function _getRequireWildcardCache() {
    return cache;
  };

  return cache;
}

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  }

  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }

  var cache = _getRequireWildcardCache();

  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }

  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }

  newObj.default = obj;

  if (cache) {
    cache.set(obj, newObj);
  }

  return newObj;
}

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

function getAdornmentConfig(_ref) {
  var left = _ref.left,
      right = _ref.right;
  var adornmentConfig = [];

  if (left || right) {
    [{
      side: _enums.AdornmentSide.Left,
      adornment: left
    }, {
      side: _enums.AdornmentSide.Right,
      adornment: right
    }].forEach(function (_ref2) {
      var side = _ref2.side,
          adornment = _ref2.adornment;

      if (adornment && _react.default.isValidElement(adornment)) {
        var type;

        if (adornment.type === _TextInputAffix.default) {
          type = _enums.AdornmentType.Affix;
        } else if (adornment.type === _TextInputIcon.default) {
          type = _enums.AdornmentType.Icon;
        }

        adornmentConfig.push({
          side: side,
          type: type
        });
      }
    });
  }

  return adornmentConfig;
}

function getAdornmentStyleAdjustmentForNativeInput(_ref3) {
  var adornmentConfig = _ref3.adornmentConfig,
      leftAffixWidth = _ref3.leftAffixWidth,
      rightAffixWidth = _ref3.rightAffixWidth,
      paddingHorizontal = _ref3.paddingHorizontal,
      _ref3$inputOffset = _ref3.inputOffset,
      inputOffset = _ref3$inputOffset === void 0 ? 0 : _ref3$inputOffset,
      mode = _ref3.mode;

  if (adornmentConfig.length) {
    var adornmentStyleAdjustmentForNativeInput = adornmentConfig.map(function (_ref4) {
      var _ref5;

      var type = _ref4.type,
          side = _ref4.side;
      var isLeftSide = side === _enums.AdornmentSide.Left;
      var inputModeAdornemntOffset = mode === _enums.InputMode.Outlined ? _constants.ADORNMENT_OFFSET + _constants.OUTLINED_INPUT_OFFSET : _constants.ADORNMENT_OFFSET;
      var paddingKey = "padding" + captalize(side);
      var affixWidth = isLeftSide ? leftAffixWidth : rightAffixWidth;
      var padding = typeof paddingHorizontal === 'number' ? paddingHorizontal : inputModeAdornemntOffset;
      var offset = affixWidth + padding;
      var isAffix = type === _enums.AdornmentType.Affix;
      var marginKey = "margin" + captalize(side);
      return _ref5 = {}, (0, _defineProperty2.default)(_ref5, marginKey, isAffix ? 0 : offset), (0, _defineProperty2.default)(_ref5, paddingKey, isAffix ? offset : inputOffset), _ref5;
    });
    var allStyleAdjustmentsMerged = adornmentStyleAdjustmentForNativeInput.reduce(function (mergedStyles, currentStyle) {
      return (0, _extends3.default)({}, mergedStyles, currentStyle);
    }, {});
    return allStyleAdjustmentsMerged;
  } else {
    return [{}];
  }
}

var captalize = function captalize(text) {
  return text.charAt(0).toUpperCase() + text.slice(1);
};

var TextInputAdornment = function TextInputAdornment(_ref6) {
  var adornmentConfig = _ref6.adornmentConfig,
      left = _ref6.left,
      right = _ref6.right,
      onAffixChange = _ref6.onAffixChange,
      textStyle = _ref6.textStyle,
      visible = _ref6.visible,
      topPosition = _ref6.topPosition,
      isTextInputFocused = _ref6.isTextInputFocused,
      forceFocus = _ref6.forceFocus,
      paddingHorizontal = _ref6.paddingHorizontal;

  if (adornmentConfig.length) {
    return _react.default.createElement(_react.default.Fragment, null, adornmentConfig.map(function (_ref7) {
      var type = _ref7.type,
          side = _ref7.side;
      var inputAdornmentComponent;

      if (side === _enums.AdornmentSide.Left) {
        inputAdornmentComponent = left;
      } else if (side === _enums.AdornmentSide.Right) {
        inputAdornmentComponent = right;
      }

      var commonProps = {
        key: side,
        side: side,
        testID: side + "-" + type + "-adornment",
        isTextInputFocused: isTextInputFocused,
        paddingHorizontal: paddingHorizontal
      };

      if (type === _enums.AdornmentType.Icon) {
        return _react.default.createElement(_TextInputIcon.IconAdornment, _extends({}, commonProps, {
          icon: inputAdornmentComponent,
          topPosition: topPosition[_enums.AdornmentType.Icon],
          forceFocus: forceFocus
        }));
      } else if (type === _enums.AdornmentType.Affix) {
        return _react.default.createElement(_TextInputAffix.AffixAdornment, _extends({}, commonProps, {
          topPosition: topPosition[_enums.AdornmentType.Affix][side],
          affix: inputAdornmentComponent,
          textStyle: textStyle,
          onLayout: onAffixChange[side],
          visible: visible
        }));
      } else {
        return null;
      }
    }));
  } else {
    return null;
  }
};

var _default = TextInputAdornment;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,