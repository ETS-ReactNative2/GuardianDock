{"version":3,"mappings":"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","names":["useOnAction","router","getState","setState","key","actionListeners","beforeRemoveListeners","routerConfigOptions","emitter","React","useContext","NavigationBuilderContext","onActionParent","onAction","onRouteFocusParent","onRouteFocus","addListenerParent","addListener","onDispatchAction","routerConfigOptionsRef","useRef","useEffect","current","useCallback","action","visitedNavigators","Set","state","has","add","target","result","getStateForAction","isPrevented","routes","undefined","shouldFocus","shouldActionChangeFocus","i","length","listener"],"sources":["useOnAction.tsx"],"sourcesContent":["import type {\n  NavigationAction,\n  NavigationState,\n  PartialState,\n  Router,\n  RouterConfigOptions,\n} from '@react-navigation/routers';\nimport * as React from 'react';\n\nimport NavigationBuilderContext, {\n  ChildActionListener,\n  ChildBeforeRemoveListener,\n} from './NavigationBuilderContext';\nimport type { EventMapCore } from './types';\nimport type { NavigationEventEmitter } from './useEventEmitter';\nimport useOnPreventRemove, { shouldPreventRemove } from './useOnPreventRemove';\n\ntype Options = {\n  router: Router<NavigationState, NavigationAction>;\n  key?: string;\n  getState: () => NavigationState;\n  setState: (state: NavigationState | PartialState<NavigationState>) => void;\n  actionListeners: ChildActionListener[];\n  beforeRemoveListeners: Record<string, ChildBeforeRemoveListener | undefined>;\n  routerConfigOptions: RouterConfigOptions;\n  emitter: NavigationEventEmitter<EventMapCore<any>>;\n};\n\n/**\n * Hook to handle actions for a navigator, including state updates and bubbling.\n *\n * Bubbling an action is achieved in 2 ways:\n * 1. To bubble action to parent, we expose the action handler in context and then access the parent context\n * 2. To bubble action to child, child adds event listeners subscribing to actions from parent\n *\n * When the action handler handles as action, it returns `true`, otherwise `false`.\n */\nexport default function useOnAction({\n  router,\n  getState,\n  setState,\n  key,\n  actionListeners,\n  beforeRemoveListeners,\n  routerConfigOptions,\n  emitter,\n}: Options) {\n  const {\n    onAction: onActionParent,\n    onRouteFocus: onRouteFocusParent,\n    addListener: addListenerParent,\n    onDispatchAction,\n  } = React.useContext(NavigationBuilderContext);\n\n  const routerConfigOptionsRef =\n    React.useRef<RouterConfigOptions>(routerConfigOptions);\n\n  React.useEffect(() => {\n    routerConfigOptionsRef.current = routerConfigOptions;\n  });\n\n  const onAction = React.useCallback(\n    (\n      action: NavigationAction,\n      visitedNavigators: Set<string> = new Set<string>()\n    ) => {\n      const state = getState();\n\n      // Since actions can bubble both up and down, they could come to the same navigator again\n      // We keep track of navigators which have already tried to handle the action and return if it's already visited\n      if (visitedNavigators.has(state.key)) {\n        return false;\n      }\n\n      visitedNavigators.add(state.key);\n\n      if (typeof action.target !== 'string' || action.target === state.key) {\n        let result = router.getStateForAction(\n          state,\n          action,\n          routerConfigOptionsRef.current\n        );\n\n        // If a target is specified and set to current navigator, the action shouldn't bubble\n        // So instead of `null`, we use the state object for such cases to signal that action was handled\n        result =\n          result === null && action.target === state.key ? state : result;\n\n        if (result !== null) {\n          onDispatchAction(action, state === result);\n\n          if (state !== result) {\n            const isPrevented = shouldPreventRemove(\n              emitter,\n              beforeRemoveListeners,\n              state.routes,\n              result.routes,\n              action\n            );\n\n            if (isPrevented) {\n              return true;\n            }\n\n            setState(result);\n          }\n\n          if (onRouteFocusParent !== undefined) {\n            // Some actions such as `NAVIGATE` also want to bring the navigated route to focus in the whole tree\n            // This means we need to focus all of the parent navigators of this navigator as well\n            const shouldFocus = router.shouldActionChangeFocus(action);\n\n            if (shouldFocus && key !== undefined) {\n              onRouteFocusParent(key);\n            }\n          }\n\n          return true;\n        }\n      }\n\n      if (onActionParent !== undefined) {\n        // Bubble action to the parent if the current navigator didn't handle it\n        if (onActionParent(action, visitedNavigators)) {\n          return true;\n        }\n      }\n\n      // If the action wasn't handled by current navigator or a parent navigator, let children handle it\n      for (let i = actionListeners.length - 1; i >= 0; i--) {\n        const listener = actionListeners[i];\n\n        if (listener(action, visitedNavigators)) {\n          return true;\n        }\n      }\n\n      return false;\n    },\n    [\n      actionListeners,\n      beforeRemoveListeners,\n      emitter,\n      getState,\n      key,\n      onActionParent,\n      onDispatchAction,\n      onRouteFocusParent,\n      router,\n      setState,\n    ]\n  );\n\n  useOnPreventRemove({\n    getState,\n    emitter,\n    beforeRemoveListeners,\n  });\n\n  React.useEffect(\n    () => addListenerParent?.('action', onAction),\n    [addListenerParent, onAction]\n  );\n\n  return onAction;\n}\n"]}