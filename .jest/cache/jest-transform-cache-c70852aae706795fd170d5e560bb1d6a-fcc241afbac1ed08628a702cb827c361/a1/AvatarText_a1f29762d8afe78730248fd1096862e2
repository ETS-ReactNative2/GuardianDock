49cd1bd2212e1f36de97b6be727849a8
"use strict";

var _interopRequireDefault2 = require("@babel/runtime/helpers/interopRequireDefault");

var _objectWithoutProperties2 = _interopRequireDefault2(require("@babel/runtime/helpers/objectWithoutProperties"));

var _excluded = ["label", "size", "style", "theme", "labelStyle", "color"],
    _excluded2 = ["backgroundColor"];
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var React = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

var _Text = _interopRequireDefault(require("../Typography/Text"));

var _theming = require("../../core/theming");

var _colors = require("../../styles/colors");

var _getContrastingColor = _interopRequireDefault(require("../../utils/getContrastingColor"));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

function _getRequireWildcardCache() {
  if (typeof WeakMap !== "function") return null;
  var cache = new WeakMap();

  _getRequireWildcardCache = function _getRequireWildcardCache() {
    return cache;
  };

  return cache;
}

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  }

  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }

  var cache = _getRequireWildcardCache();

  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }

  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }

  newObj.default = obj;

  if (cache) {
    cache.set(obj, newObj);
  }

  return newObj;
}

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

var defaultSize = 64;

var AvatarText = function AvatarText(_ref) {
  var label = _ref.label,
      _ref$size = _ref.size,
      size = _ref$size === void 0 ? defaultSize : _ref$size,
      style = _ref.style,
      theme = _ref.theme,
      labelStyle = _ref.labelStyle,
      customColor = _ref.color,
      rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);

  var _ref2 = _reactNative.StyleSheet.flatten(style) || {},
      _ref2$backgroundColor = _ref2.backgroundColor,
      backgroundColor = _ref2$backgroundColor === void 0 ? theme.colors.primary : _ref2$backgroundColor,
      restStyle = (0, _objectWithoutProperties2.default)(_ref2, _excluded2);

  var textColor = customColor !== null && customColor !== void 0 ? customColor : (0, _getContrastingColor.default)(backgroundColor, _colors.white, 'rgba(0, 0, 0, .54)');
  return React.createElement(_reactNative.View, _extends({
    style: [{
      width: size,
      height: size,
      borderRadius: size / 2,
      backgroundColor: backgroundColor
    }, styles.container, restStyle]
  }, rest), React.createElement(_Text.default, {
    style: [styles.text, {
      color: textColor,
      fontSize: size / 2,
      lineHeight: size
    }, labelStyle],
    numberOfLines: 1
  }, label));
};

AvatarText.displayName = 'Avatar.Text';

var styles = _reactNative.StyleSheet.create({
  container: {
    justifyContent: 'center',
    alignItems: 'center'
  },
  text: {
    textAlign: 'center',
    textAlignVertical: 'center'
  }
});

var _default = (0, _theming.withTheme)(AvatarText);

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztBQUFBOztBQUNBOztBQU9BOztBQUNBOztBQUNBOztBQUNBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFFQSxJQUFNQSxXQUFXLEdBQUcsRUFBcEI7O0FBZ0RBLElBQU1DLFVBQVUsR0FBRyxTQUFiQSxVQUFhLE9BUU47QUFBQSxNQVBYQyxLQU9XLFFBUFhBLEtBT1c7QUFBQSx1QkFOWEMsSUFNVztBQUFBLE1BTlhBLElBTVcsMEJBTkpILFdBTUk7QUFBQSxNQUxYSSxLQUtXLFFBTFhBLEtBS1c7QUFBQSxNQUpYQyxLQUlXLFFBSlhBLEtBSVc7QUFBQSxNQUhYQyxVQUdXLFFBSFhBLFVBR1c7QUFBQSxNQUZKQyxXQUVJLFFBRlhDLEtBRVc7QUFBQSxNQURSQyxJQUNROztBQUNYLGNBQ0VDLHdCQUFXQyxPQUFYRCxDQUFtQk4sS0FBbkJNLEtBQTZCLEVBRC9CO0FBQUEsb0NBQVFFLGVBQVI7QUFBQSxNQUFRQSxlQUFSLHNDQUEwQlAsS0FBSyxDQUFDUSxNQUFOUixDQUFhUyxPQUF2QztBQUFBLE1BQW1EQyxTQUFuRDs7QUFFQSxNQUFNQyxTQUFTLEdBQ2JULFdBRGEsU0FDYkEsZUFEYSxXQUNiQSxpQkFDQSxrQ0FBb0JLLGVBQXBCLEVBQXFDSyxhQUFyQyxFQUE0QyxvQkFBNUMsQ0FGRjtBQUlBLFNBQ0VDLG9CQUFDQyxpQkFBRDtBQUNFZixTQUFLLEVBQUUsQ0FDTDtBQUNFZ0IsV0FBSyxFQUFFakIsSUFEVDtBQUVFa0IsWUFBTSxFQUFFbEIsSUFGVjtBQUdFbUIsa0JBQVksRUFBRW5CLElBQUksR0FBRyxDQUh2QjtBQUlFUztBQUpGLEtBREssRUFPTFcsTUFBTSxDQUFDQyxTQVBGLEVBUUxULFNBUks7QUFEVCxLQVdNTixJQVhOLEdBYUVTLG9CQUFDTyxhQUFEO0FBQ0VyQixTQUFLLEVBQUUsQ0FDTG1CLE1BQU0sQ0FBQ0csSUFERixFQUVMO0FBQ0VsQixXQUFLLEVBQUVRLFNBRFQ7QUFFRVcsY0FBUSxFQUFFeEIsSUFBSSxHQUFHLENBRm5CO0FBR0V5QixnQkFBVSxFQUFFekI7QUFIZCxLQUZLLEVBT0xHLFVBUEssQ0FEVDtBQVVFdUIsaUJBQWEsRUFBRTtBQVZqQixLQVlHM0IsS0FaSCxDQWJGLENBREY7QUFmRjs7QUErQ0FELFVBQVUsQ0FBQzZCLFdBQVg3QixHQUF5QixhQUF6QkE7O0FBRUEsSUFBTXNCLE1BQU0sR0FBR2Isd0JBQVdxQixNQUFYckIsQ0FBa0I7QUFDL0JjLFdBQVMsRUFBRTtBQUNUUSxrQkFBYyxFQUFFLFFBRFA7QUFFVEMsY0FBVSxFQUFFO0FBRkgsR0FEb0I7QUFLL0JQLE1BQUksRUFBRTtBQUNKUSxhQUFTLEVBQUUsUUFEUDtBQUVKQyxxQkFBaUIsRUFBRTtBQUZmO0FBTHlCLENBQWxCekIsQ0FBZjs7ZUFXZSx3QkFBVVQsVUFBViIsIm5hbWVzIjpbImRlZmF1bHRTaXplIiwiQXZhdGFyVGV4dCIsImxhYmVsIiwic2l6ZSIsInN0eWxlIiwidGhlbWUiLCJsYWJlbFN0eWxlIiwiY3VzdG9tQ29sb3IiLCJjb2xvciIsInJlc3QiLCJTdHlsZVNoZWV0IiwiZmxhdHRlbiIsImJhY2tncm91bmRDb2xvciIsImNvbG9ycyIsInByaW1hcnkiLCJyZXN0U3R5bGUiLCJ0ZXh0Q29sb3IiLCJ3aGl0ZSIsIlJlYWN0IiwiX3JlYWN0TmF0aXZlIiwid2lkdGgiLCJoZWlnaHQiLCJib3JkZXJSYWRpdXMiLCJzdHlsZXMiLCJjb250YWluZXIiLCJfVGV4dCIsInRleHQiLCJmb250U2l6ZSIsImxpbmVIZWlnaHQiLCJudW1iZXJPZkxpbmVzIiwiZGlzcGxheU5hbWUiLCJjcmVhdGUiLCJqdXN0aWZ5Q29udGVudCIsImFsaWduSXRlbXMiLCJ0ZXh0QWxpZ24iLCJ0ZXh0QWxpZ25WZXJ0aWNhbCJdLCJzb3VyY2VzIjpbIkF2YXRhclRleHQudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7XG4gIFZpZXcsXG4gIFZpZXdTdHlsZSxcbiAgU3R5bGVTaGVldCxcbiAgU3R5bGVQcm9wLFxuICBUZXh0U3R5bGUsXG59IGZyb20gJ3JlYWN0LW5hdGl2ZSc7XG5pbXBvcnQgVGV4dCBmcm9tICcuLi9UeXBvZ3JhcGh5L1RleHQnO1xuaW1wb3J0IHsgd2l0aFRoZW1lIH0gZnJvbSAnLi4vLi4vY29yZS90aGVtaW5nJztcbmltcG9ydCB7IHdoaXRlIH0gZnJvbSAnLi4vLi4vc3R5bGVzL2NvbG9ycyc7XG5pbXBvcnQgZ2V0Q29udHJhc3RpbmdDb2xvciBmcm9tICcuLi8uLi91dGlscy9nZXRDb250cmFzdGluZ0NvbG9yJztcblxuY29uc3QgZGVmYXVsdFNpemUgPSA2NDtcblxudHlwZSBQcm9wcyA9IFJlYWN0LkNvbXBvbmVudFByb3BzV2l0aFJlZjx0eXBlb2YgVmlldz4gJiB7XG4gIC8qKlxuICAgKiBJbml0aWFscyB0byBzaG93IGFzIHRoZSB0ZXh0IGluIHRoZSBgQXZhdGFyYC5cbiAgICovXG4gIGxhYmVsOiBzdHJpbmc7XG4gIC8qKlxuICAgKiBTaXplIG9mIHRoZSBhdmF0YXIuXG4gICAqL1xuICBzaXplPzogbnVtYmVyO1xuICAvKipcbiAgICogQ3VzdG9tIGNvbG9yIGZvciB0aGUgdGV4dC5cbiAgICovXG4gIGNvbG9yPzogc3RyaW5nO1xuICAvKipcbiAgICogU3R5bGUgZm9yIHRleHQgY29udGFpbmVyXG4gICAqL1xuICBzdHlsZT86IFN0eWxlUHJvcDxWaWV3U3R5bGU+O1xuICAvKipcbiAgICogU3R5bGUgZm9yIHRoZSB0aXRsZS5cbiAgICovXG4gIGxhYmVsU3R5bGU/OiBTdHlsZVByb3A8VGV4dFN0eWxlPjtcbiAgLyoqXG4gICAqIEBvcHRpb25hbFxuICAgKi9cbiAgdGhlbWU6IFJlYWN0TmF0aXZlUGFwZXIuVGhlbWU7XG59O1xuXG4vKipcbiAqIEF2YXRhcnMgY2FuIGJlIHVzZWQgdG8gcmVwcmVzZW50IHBlb3BsZSBpbiBhIGdyYXBoaWNhbCB3YXkuXG4gKlxuICogPGRpdiBjbGFzcz1cInNjcmVlbnNob3RzXCI+XG4gKiAgIDxmaWd1cmU+XG4gKiAgICAgPGltZyBjbGFzcz1cIm1lZGl1bVwiIHNyYz1cInNjcmVlbnNob3RzL2F2YXRhci10ZXh0LnBuZ1wiIC8+XG4gKiAgIDwvZmlndXJlPlxuICogPC9kaXY+XG4gKlxuICogIyMgVXNhZ2VcbiAqIGBgYGpzXG4gKiBpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG4gKiBpbXBvcnQgeyBBdmF0YXIgfSBmcm9tICdyZWFjdC1uYXRpdmUtcGFwZXInO1xuICpcbiAqIGNvbnN0IE15Q29tcG9uZW50ID0gKCkgPT4gKFxuICogICA8QXZhdGFyLlRleHQgc2l6ZT17MjR9IGxhYmVsPVwiWERcIiAvPlxuICogKTtcbiAqIGBgYFxuICovXG5jb25zdCBBdmF0YXJUZXh0ID0gKHtcbiAgbGFiZWwsXG4gIHNpemUgPSBkZWZhdWx0U2l6ZSxcbiAgc3R5bGUsXG4gIHRoZW1lLFxuICBsYWJlbFN0eWxlLFxuICBjb2xvcjogY3VzdG9tQ29sb3IsXG4gIC4uLnJlc3Rcbn06IFByb3BzKSA9PiB7XG4gIGNvbnN0IHsgYmFja2dyb3VuZENvbG9yID0gdGhlbWUuY29sb3JzLnByaW1hcnksIC4uLnJlc3RTdHlsZSB9ID1cbiAgICBTdHlsZVNoZWV0LmZsYXR0ZW4oc3R5bGUpIHx8IHt9O1xuICBjb25zdCB0ZXh0Q29sb3IgPVxuICAgIGN1c3RvbUNvbG9yID8/XG4gICAgZ2V0Q29udHJhc3RpbmdDb2xvcihiYWNrZ3JvdW5kQ29sb3IsIHdoaXRlLCAncmdiYSgwLCAwLCAwLCAuNTQpJyk7XG5cbiAgcmV0dXJuIChcbiAgICA8Vmlld1xuICAgICAgc3R5bGU9e1tcbiAgICAgICAge1xuICAgICAgICAgIHdpZHRoOiBzaXplLFxuICAgICAgICAgIGhlaWdodDogc2l6ZSxcbiAgICAgICAgICBib3JkZXJSYWRpdXM6IHNpemUgLyAyLFxuICAgICAgICAgIGJhY2tncm91bmRDb2xvcixcbiAgICAgICAgfSxcbiAgICAgICAgc3R5bGVzLmNvbnRhaW5lcixcbiAgICAgICAgcmVzdFN0eWxlLFxuICAgICAgXX1cbiAgICAgIHsuLi5yZXN0fVxuICAgID5cbiAgICAgIDxUZXh0XG4gICAgICAgIHN0eWxlPXtbXG4gICAgICAgICAgc3R5bGVzLnRleHQsXG4gICAgICAgICAge1xuICAgICAgICAgICAgY29sb3I6IHRleHRDb2xvcixcbiAgICAgICAgICAgIGZvbnRTaXplOiBzaXplIC8gMixcbiAgICAgICAgICAgIGxpbmVIZWlnaHQ6IHNpemUsXG4gICAgICAgICAgfSxcbiAgICAgICAgICBsYWJlbFN0eWxlLFxuICAgICAgICBdfVxuICAgICAgICBudW1iZXJPZkxpbmVzPXsxfVxuICAgICAgPlxuICAgICAgICB7bGFiZWx9XG4gICAgICA8L1RleHQ+XG4gICAgPC9WaWV3PlxuICApO1xufTtcblxuQXZhdGFyVGV4dC5kaXNwbGF5TmFtZSA9ICdBdmF0YXIuVGV4dCc7XG5cbmNvbnN0IHN0eWxlcyA9IFN0eWxlU2hlZXQuY3JlYXRlKHtcbiAgY29udGFpbmVyOiB7XG4gICAganVzdGlmeUNvbnRlbnQ6ICdjZW50ZXInLFxuICAgIGFsaWduSXRlbXM6ICdjZW50ZXInLFxuICB9LFxuICB0ZXh0OiB7XG4gICAgdGV4dEFsaWduOiAnY2VudGVyJyxcbiAgICB0ZXh0QWxpZ25WZXJ0aWNhbDogJ2NlbnRlcicsXG4gIH0sXG59KTtcblxuZXhwb3J0IGRlZmF1bHQgd2l0aFRoZW1lKEF2YXRhclRleHQpO1xuIl19