{"version":3,"mappings":"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","names":["Card","elevation","cardElevation","onLongPress","onPress","mode","cardMode","children","style","theme","testID","accessible","rest","React","useRef","Animated","Value","current","animation","dark","roundness","handlePressIn","scale","timing","toValue","duration","useNativeDriver","start","handlePressOut","total","Children","count","siblings","map","child","isValidElement","type","displayName","borderColor","white","black","alpha","rgb","string","_Surface","borderRadius","styles","outlined","_reactNative","delayPressIn","disabled","onPressIn","undefined","onPressOut","innerContainer","index","cloneElement","Content","CardContent","Actions","CardActions","Cover","CardCover","Title","CardTitle","StyleSheet","create","flexGrow","flexShrink","borderWidth"],"sources":["Card.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  StyleProp,\n  StyleSheet,\n  Animated,\n  TouchableWithoutFeedback,\n  View,\n  ViewStyle,\n} from 'react-native';\nimport color from 'color';\nimport { white, black } from '../../styles/colors';\nimport CardContent from './CardContent';\nimport CardActions from './CardActions';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport CardCover, { CardCover as _CardCover } from './CardCover';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport CardTitle, { CardTitle as _CardTitle } from './CardTitle';\nimport Surface from '../Surface';\nimport { withTheme } from '../../core/theming';\n\ntype OutlinedCardProps = {\n  mode: 'outlined';\n  elevation?: never;\n};\n\ntype ElevatedCardProps = {\n  mode?: 'elevated';\n  elevation?: number;\n};\n\ntype Props = React.ComponentProps<typeof Surface> & {\n  /**\n   * Resting elevation of the card which controls the drop shadow.\n   */\n  elevation?: never | number;\n  /**\n   * Function to execute on long press.\n   */\n  onLongPress?: () => void;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Mode of the Card.\n   * - `elevated` - Card with elevation.\n   * - `outlined` - Card with an outline.\n   */\n  mode?: 'elevated' | 'outlined';\n  /**\n   * Content of the `Card`.\n   */\n  children: React.ReactNode;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n  /**\n   * Pass down testID from card props to touchable\n   */\n  testID?: string;\n  /**\n   * Pass down accessible from card props to touchable\n   */\n  accessible?: boolean;\n};\n\n/**\n * A card is a sheet of material that serves as an entry point to more detailed information.\n *\n * <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/card-1.png\" />\n *   <img class=\"medium\" src=\"screenshots/card-2.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Avatar, Button, Card, Title, Paragraph } from 'react-native-paper';\n *\n * const LeftContent = props => <Avatar.Icon {...props} icon=\"folder\" />\n *\n * const MyComponent = () => (\n *   <Card>\n *     <Card.Title title=\"Card Title\" subtitle=\"Card Subtitle\" left={LeftContent} />\n *     <Card.Content>\n *       <Title>Card title</Title>\n *       <Paragraph>Card content</Paragraph>\n *     </Card.Content>\n *     <Card.Cover source={{ uri: 'https://picsum.photos/700' }} />\n *     <Card.Actions>\n *       <Button>Cancel</Button>\n *       <Button>Ok</Button>\n *     </Card.Actions>\n *   </Card>\n * );\n *\n * export default MyComponent;\n * ```\n */\nconst Card = ({\n  elevation: cardElevation = 1,\n  onLongPress,\n  onPress,\n  mode: cardMode = 'elevated',\n  children,\n  style,\n  theme,\n  testID,\n  accessible,\n  ...rest\n}: (OutlinedCardProps | ElevatedCardProps) & Props) => {\n  const { current: elevation } = React.useRef<Animated.Value>(\n    new Animated.Value(cardElevation)\n  );\n  const { animation, dark, mode, roundness } = theme;\n\n  const handlePressIn = () => {\n    const {\n      dark,\n      mode,\n      animation: { scale },\n    } = theme;\n    Animated.timing(elevation, {\n      toValue: 8,\n      duration: 150 * scale,\n      useNativeDriver: !dark || mode === 'exact',\n    }).start();\n  };\n\n  const handlePressOut = () => {\n    Animated.timing(elevation, {\n      toValue: cardElevation,\n      duration: 150 * animation.scale,\n      useNativeDriver: !dark || mode === 'exact',\n    }).start();\n  };\n\n  const total = React.Children.count(children);\n  const siblings = React.Children.map(children, (child) =>\n    React.isValidElement(child) && child.type\n      ? (child.type as any).displayName\n      : null\n  );\n  const borderColor = color(theme.dark ? white : black)\n    .alpha(0.12)\n    .rgb()\n    .string();\n\n  return (\n    <Surface\n      style={[\n        { borderRadius: roundness, elevation, borderColor },\n        cardMode === 'outlined' ? styles.outlined : {},\n        style,\n      ]}\n      theme={theme}\n      {...rest}\n    >\n      <TouchableWithoutFeedback\n        delayPressIn={0}\n        disabled={!(onPress || onLongPress)}\n        onLongPress={onLongPress}\n        onPress={onPress}\n        onPressIn={onPress || onLongPress ? handlePressIn : undefined}\n        onPressOut={onPress || onLongPress ? handlePressOut : undefined}\n        testID={testID}\n        accessible={accessible}\n      >\n        <View style={styles.innerContainer}>\n          {React.Children.map(children, (child, index) =>\n            React.isValidElement(child)\n              ? React.cloneElement(child, {\n                  index,\n                  total,\n                  siblings,\n                })\n              : child\n          )}\n        </View>\n      </TouchableWithoutFeedback>\n    </Surface>\n  );\n};\n\n// @component ./CardContent.tsx\nCard.Content = CardContent;\n// @component ./CardActions.tsx\nCard.Actions = CardActions;\n// @component ./CardCover.tsx\nCard.Cover = CardCover;\n// @component ./CardTitle.tsx\nCard.Title = CardTitle;\n\nconst styles = StyleSheet.create({\n  innerContainer: {\n    flexGrow: 1,\n    flexShrink: 1,\n  },\n  outlined: {\n    elevation: 0,\n    borderWidth: 1,\n  },\n});\n\nexport default withTheme(Card);\n"]}