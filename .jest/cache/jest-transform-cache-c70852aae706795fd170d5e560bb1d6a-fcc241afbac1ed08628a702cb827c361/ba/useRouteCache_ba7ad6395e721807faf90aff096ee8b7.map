{"version":3,"mappings":";;;;;;;;;;;;;AAKA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAWO,IAAMA,WAAW,GAAGC,MAAM,CAAC,aAAD,CAA1B;;;AAMQ,SAASC,aAAT,CACbC,MADa,EAEb;AAEA,MAAMC,KAAK,GAAGC,KAAK,CAACC,OAAND,CAAc;AAAA,WAAO;AAAEE,aAAO,EAAE,IAAIC,GAAJ;AAAX,KAAP;AAAA,GAAdH,EAA4D,EAA5DA,CAAd;;AAEA,MAAII,OAAO,CAACC,GAARD,CAAYE,QAAZF,KAAyB,YAA7B,EAA2C;AAEzC,WAAON,MAAP;AACD;;AAEDC,OAAK,CAACG,OAANH,GAAgBD,MAAM,CAACS,MAAPT,CAAc,UAACU,GAAD,EAAMC,KAAN,EAAgB;AAC5C,QAAMC,QAAQ,GAAGX,KAAK,CAACG,OAANH,CAAcY,GAAdZ,CAAkBU,KAAlBV,CAAjB;;AAEA,QAAIW,QAAJ,EAAc;AAEZF,SAAG,CAACI,GAAJJ,CAAQC,KAARD,EAAeE,QAAfF;AAFF,WAGO;AACL,UAAQK,KAAR,GAA4BJ,KAA5B,CAAQI,KAAR;AAAA,UAAkBC,KAAlB,0CAA4BL,KAA5B;AAEAM,YAAM,CAACC,cAAPD,CAAsBD,KAAtBC,EAA6BpB,WAA7BoB,EAA0C;AACxCE,kBAAU,EAAE,KAD4B;AAExCC,aAAK,EAAEL;AAFiC,OAA1CE;AAKAP,SAAG,CAACI,GAAJJ,CAAQC,KAARD,EAAeM,KAAfN;AACD;;AAED,WAAOA,GAAP;AAjBc,KAkBb,IAAIL,GAAJ,EAlBaL,CAAhBC;AAoBA,SAAOoB,KAAK,CAACC,IAAND,CAAWpB,KAAK,CAACG,OAANH,CAAcsB,MAAdtB,EAAXoB,CAAP;AACD","names":["CHILD_STATE","Symbol","useRouteCache","routes","cache","React","useMemo","current","Map","process","env","NODE_ENV","reduce","acc","route","previous","get","set","state","proxy","Object","defineProperty","enumerable","value","Array","from","values"],"sources":["useRouteCache.tsx"],"sourcesContent":["import type {\n  NavigationState,\n  ParamListBase,\n  Route,\n} from '@react-navigation/routers';\nimport * as React from 'react';\n\nimport type { RouteProp } from './types';\n\ntype RouteCache = Map<Route<string>, RouteProp<ParamListBase>>;\n\n/**\n * Utilites such as `getFocusedRouteNameFromRoute` need to access state.\n * So we need a way to suppress the warning for those use cases.\n * This is fine since they are internal utilities and this is not public API.\n */\nexport const CHILD_STATE = Symbol('CHILD_STATE');\n\n/**\n * Hook to cache route props for each screen in the navigator.\n * This lets add warnings and modifications to the route object but keep references between renders.\n */\nexport default function useRouteCache<State extends NavigationState>(\n  routes: State['routes']\n) {\n  // Cache object which holds route objects for each screen\n  const cache = React.useMemo(() => ({ current: new Map() as RouteCache }), []);\n\n  if (process.env.NODE_ENV === 'production') {\n    // We don't want the overhead of creating extra maps every render in prod\n    return routes;\n  }\n\n  cache.current = routes.reduce((acc, route) => {\n    const previous = cache.current.get(route);\n\n    if (previous) {\n      // If a cached route object already exists, reuse it\n      acc.set(route, previous);\n    } else {\n      const { state, ...proxy } = route;\n\n      Object.defineProperty(proxy, CHILD_STATE, {\n        enumerable: false,\n        value: state,\n      });\n\n      acc.set(route, proxy);\n    }\n\n    return acc;\n  }, new Map() as RouteCache);\n\n  return Array.from(cache.current.values());\n}\n"]}