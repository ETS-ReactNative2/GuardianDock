944369eda5679c37c0bfb55d3c483978
"use strict";

var _interopRequireDefault2 = require("@babel/runtime/helpers/interopRequireDefault");

var _toConsumableArray2 = _interopRequireDefault2(require("@babel/runtime/helpers/toConsumableArray"));

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TapGestureHandler = exports.tapHandlerName = exports.tapGestureHandlerProps = void 0;

var _createHandler = _interopRequireDefault(require("./createHandler"));

var _gestureHandlerCommon = require("./gestureHandlerCommon");

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

var tapGestureHandlerProps = ['maxDurationMs', 'maxDelayMs', 'numberOfTaps', 'maxDeltaX', 'maxDeltaY', 'maxDist', 'minPointers'];
exports.tapGestureHandlerProps = tapGestureHandlerProps;
var tapHandlerName = 'TapGestureHandler';
exports.tapHandlerName = tapHandlerName;
var TapGestureHandler = (0, _createHandler.default)({
  name: tapHandlerName,
  allowedProps: [].concat((0, _toConsumableArray2.default)(_gestureHandlerCommon.baseGestureHandlerProps), tapGestureHandlerProps),
  config: {}
});
exports.TapGestureHandler = TapGestureHandler;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQTs7QUFDQTs7Ozs7Ozs7QUFLTyxJQUFNQSxzQkFBc0IsR0FBRyxDQUNwQyxlQURvQyxFQUVwQyxZQUZvQyxFQUdwQyxjQUhvQyxFQUlwQyxXQUpvQyxFQUtwQyxXQUxvQyxFQU1wQyxTQU5vQyxFQU9wQyxhQVBvQyxDQUEvQjs7QUF1RUEsSUFBTUMsY0FBYyxHQUFHLG1CQUF2Qjs7QUFJQSxJQUFNQyxpQkFBaUIsR0FBRyw0QkFHL0I7QUFDQUMsTUFBSSxFQUFFRixjQUROO0FBRUFHLGNBQVksNkNBQ1BDLDZDQURPLEdBRVBMLHNCQUZPLENBRlo7QUFNQU0sUUFBTSxFQUFFO0FBTlIsQ0FIK0IsQ0FBMUIiLCJuYW1lcyI6WyJ0YXBHZXN0dXJlSGFuZGxlclByb3BzIiwidGFwSGFuZGxlck5hbWUiLCJUYXBHZXN0dXJlSGFuZGxlciIsIm5hbWUiLCJhbGxvd2VkUHJvcHMiLCJiYXNlR2VzdHVyZUhhbmRsZXJQcm9wcyIsImNvbmZpZyJdLCJzb3VyY2VzIjpbIlRhcEdlc3R1cmVIYW5kbGVyLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBjcmVhdGVIYW5kbGVyIGZyb20gJy4vY3JlYXRlSGFuZGxlcic7XG5pbXBvcnQge1xuICBCYXNlR2VzdHVyZUhhbmRsZXJQcm9wcyxcbiAgYmFzZUdlc3R1cmVIYW5kbGVyUHJvcHMsXG59IGZyb20gJy4vZ2VzdHVyZUhhbmRsZXJDb21tb24nO1xuXG5leHBvcnQgY29uc3QgdGFwR2VzdHVyZUhhbmRsZXJQcm9wcyA9IFtcbiAgJ21heER1cmF0aW9uTXMnLFxuICAnbWF4RGVsYXlNcycsXG4gICdudW1iZXJPZlRhcHMnLFxuICAnbWF4RGVsdGFYJyxcbiAgJ21heERlbHRhWScsXG4gICdtYXhEaXN0JyxcbiAgJ21pblBvaW50ZXJzJyxcbl0gYXMgY29uc3Q7XG5cbmV4cG9ydCB0eXBlIFRhcEdlc3R1cmVIYW5kbGVyRXZlbnRQYXlsb2FkID0ge1xuICB4OiBudW1iZXI7XG4gIHk6IG51bWJlcjtcbiAgYWJzb2x1dGVYOiBudW1iZXI7XG4gIGFic29sdXRlWTogbnVtYmVyO1xufTtcbmV4cG9ydCBpbnRlcmZhY2UgVGFwR2VzdHVyZUNvbmZpZyB7XG4gIC8qKlxuICAgKiBNaW5pbXVtIG51bWJlciBvZiBwb2ludGVycyAoZmluZ2VycykgcmVxdWlyZWQgdG8gYmUgcGxhY2VkIGJlZm9yZSB0aGVcbiAgICogaGFuZGxlciBhY3RpdmF0ZXMuIFNob3VsZCBiZSBhIHBvc2l0aXZlIGludGVnZXIuXG4gICAqIFRoZSBkZWZhdWx0IHZhbHVlIGlzIDEuXG4gICAqL1xuICBtaW5Qb2ludGVycz86IG51bWJlcjtcblxuICAvKipcbiAgICogTWF4aW11bSB0aW1lLCBleHByZXNzZWQgaW4gbWlsbGlzZWNvbmRzLCB0aGF0IGRlZmluZXMgaG93IGZhc3QgYSBmaW5nZXJcbiAgICogbXVzdCBiZSByZWxlYXNlZCBhZnRlciBhIHRvdWNoLiBUaGUgZGVmYXVsdCB2YWx1ZSBpcyA1MDAuXG4gICAqL1xuICBtYXhEdXJhdGlvbk1zPzogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBNYXhpbXVtIHRpbWUsIGV4cHJlc3NlZCBpbiBtaWxsaXNlY29uZHMsIHRoYXQgY2FuIHBhc3MgYmVmb3JlIHRoZSBuZXh0IHRhcFxuICAgKiBpZiBtYW55IHRhcHMgYXJlIHJlcXVpcmVkLiBUaGUgZGVmYXVsdCB2YWx1ZSBpcyA1MDAuXG4gICAqL1xuICBtYXhEZWxheU1zPzogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBOdW1iZXIgb2YgdGFwIGdlc3R1cmVzIHJlcXVpcmVkIHRvIGFjdGl2YXRlIHRoZSBoYW5kbGVyLiBUaGUgZGVmYXVsdCB2YWx1ZVxuICAgKiBpcyAxLlxuICAgKi9cbiAgbnVtYmVyT2ZUYXBzPzogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBNYXhpbXVtIGRpc3RhbmNlLCBleHByZXNzZWQgaW4gcG9pbnRzLCB0aGF0IGRlZmluZXMgaG93IGZhciB0aGUgZmluZ2VyIGlzXG4gICAqIGFsbG93ZWQgdG8gdHJhdmVsIGFsb25nIHRoZSBYIGF4aXMgZHVyaW5nIGEgdGFwIGdlc3R1cmUuIElmIHRoZSBmaW5nZXJcbiAgICogdHJhdmVscyBmdXJ0aGVyIHRoYW4gdGhlIGRlZmluZWQgZGlzdGFuY2UgYWxvbmcgdGhlIFggYXhpcyBhbmQgdGhlIGhhbmRsZXJcbiAgICogaGFzbid0IHlldCBhY3RpdmF0ZWQsIGl0IHdpbGwgZmFpbCB0byByZWNvZ25pemUgdGhlIGdlc3R1cmUuXG4gICAqL1xuICBtYXhEZWx0YVg/OiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIE1heGltdW0gZGlzdGFuY2UsIGV4cHJlc3NlZCBpbiBwb2ludHMsIHRoYXQgZGVmaW5lcyBob3cgZmFyIHRoZSBmaW5nZXIgaXNcbiAgICogYWxsb3dlZCB0byB0cmF2ZWwgYWxvbmcgdGhlIFkgYXhpcyBkdXJpbmcgYSB0YXAgZ2VzdHVyZS4gSWYgdGhlIGZpbmdlclxuICAgKiB0cmF2ZWxzIGZ1cnRoZXIgdGhhbiB0aGUgZGVmaW5lZCBkaXN0YW5jZSBhbG9uZyB0aGUgWSBheGlzIGFuZCB0aGUgaGFuZGxlclxuICAgKiBoYXNuJ3QgeWV0IGFjdGl2YXRlZCwgaXQgd2lsbCBmYWlsIHRvIHJlY29nbml6ZSB0aGUgZ2VzdHVyZS5cbiAgICovXG4gIG1heERlbHRhWT86IG51bWJlcjtcblxuICAvKipcbiAgICogTWF4aW11bSBkaXN0YW5jZSwgZXhwcmVzc2VkIGluIHBvaW50cywgdGhhdCBkZWZpbmVzIGhvdyBmYXIgdGhlIGZpbmdlciBpc1xuICAgKiBhbGxvd2VkIHRvIHRyYXZlbCBkdXJpbmcgYSB0YXAgZ2VzdHVyZS4gSWYgdGhlIGZpbmdlciB0cmF2ZWxzIGZ1cnRoZXIgdGhhblxuICAgKiB0aGUgZGVmaW5lZCBkaXN0YW5jZSBhbmQgdGhlIGhhbmRsZXIgaGFzbid0IHlldFxuICAgKiBhY3RpdmF0ZWQsIGl0IHdpbGwgZmFpbCB0byByZWNvZ25pemUgdGhlIGdlc3R1cmUuXG4gICAqL1xuICBtYXhEaXN0PzogbnVtYmVyO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFRhcEdlc3R1cmVIYW5kbGVyUHJvcHNcbiAgZXh0ZW5kcyBCYXNlR2VzdHVyZUhhbmRsZXJQcm9wczxUYXBHZXN0dXJlSGFuZGxlckV2ZW50UGF5bG9hZD4sXG4gICAgVGFwR2VzdHVyZUNvbmZpZyB7fVxuXG5leHBvcnQgY29uc3QgdGFwSGFuZGxlck5hbWUgPSAnVGFwR2VzdHVyZUhhbmRsZXInO1xuXG5leHBvcnQgdHlwZSBUYXBHZXN0dXJlSGFuZGxlciA9IHR5cGVvZiBUYXBHZXN0dXJlSGFuZGxlcjtcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tcmVkZWNsYXJlIC0tIGJhY2t3YXJkIGNvbXBhdGliaWxpdHk7IHNlZSBkZXNjcmlwdGlvbiBvbiB0aGUgdG9wIG9mIGdlc3R1cmVIYW5kbGVyQ29tbW9uLnRzIGZpbGVcbmV4cG9ydCBjb25zdCBUYXBHZXN0dXJlSGFuZGxlciA9IGNyZWF0ZUhhbmRsZXI8XG4gIFRhcEdlc3R1cmVIYW5kbGVyUHJvcHMsXG4gIFRhcEdlc3R1cmVIYW5kbGVyRXZlbnRQYXlsb2FkXG4+KHtcbiAgbmFtZTogdGFwSGFuZGxlck5hbWUsXG4gIGFsbG93ZWRQcm9wczogW1xuICAgIC4uLmJhc2VHZXN0dXJlSGFuZGxlclByb3BzLFxuICAgIC4uLnRhcEdlc3R1cmVIYW5kbGVyUHJvcHMsXG4gIF0gYXMgY29uc3QsXG4gIGNvbmZpZzoge30sXG59KTtcbiJdfQ==