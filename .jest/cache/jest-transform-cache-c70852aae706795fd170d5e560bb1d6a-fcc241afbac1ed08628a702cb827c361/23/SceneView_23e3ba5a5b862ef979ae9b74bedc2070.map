{"version":3,"mappings":"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","names":["SceneView","screen","route","navigation","routeState","getState","setState","options","clearOptions","navigatorKeyRef","React","useRef","getKey","useCallback","current","key","addOptionsGetter","setKey","getCurrentState","state","currentRoute","routes","find","r","undefined","setCurrentState","child","map","isInitialRef","useEffect","getIsInitial","context","useMemo","ScreenComponent","getComponent","component","_NavigationStateContext","Provider","value","_EnsureSingleNavigator","_StaticContainer","name","render","children"],"sources":["SceneView.tsx"],"sourcesContent":["import type {\n  NavigationState,\n  ParamListBase,\n  PartialState,\n  Route,\n} from '@react-navigation/routers';\nimport * as React from 'react';\n\nimport EnsureSingleNavigator from './EnsureSingleNavigator';\nimport NavigationStateContext from './NavigationStateContext';\nimport StaticContainer from './StaticContainer';\nimport type { NavigationProp, RouteConfigComponent } from './types';\nimport useOptionsGetters from './useOptionsGetters';\n\ntype Props<State extends NavigationState, ScreenOptions extends {}> = {\n  screen: RouteConfigComponent<ParamListBase, string> & { name: string };\n  navigation: NavigationProp<ParamListBase, string, State, ScreenOptions>;\n  route: Route<string>;\n  routeState: NavigationState | PartialState<NavigationState> | undefined;\n  getState: () => State;\n  setState: (state: State) => void;\n  options: object;\n  clearOptions: () => void;\n};\n\n/**\n * Component which takes care of rendering the screen for a route.\n * It provides all required contexts and applies optimizations when applicable.\n */\nexport default function SceneView<\n  State extends NavigationState,\n  ScreenOptions extends {}\n>({\n  screen,\n  route,\n  navigation,\n  routeState,\n  getState,\n  setState,\n  options,\n  clearOptions,\n}: Props<State, ScreenOptions>) {\n  const navigatorKeyRef = React.useRef<string | undefined>();\n  const getKey = React.useCallback(() => navigatorKeyRef.current, []);\n\n  const { addOptionsGetter } = useOptionsGetters({\n    key: route.key,\n    options,\n    navigation,\n  });\n\n  const setKey = React.useCallback((key: string) => {\n    navigatorKeyRef.current = key;\n  }, []);\n\n  const getCurrentState = React.useCallback(() => {\n    const state = getState();\n    const currentRoute = state.routes.find((r) => r.key === route.key);\n\n    return currentRoute ? currentRoute.state : undefined;\n  }, [getState, route.key]);\n\n  const setCurrentState = React.useCallback(\n    (child: NavigationState | PartialState<NavigationState> | undefined) => {\n      const state = getState();\n\n      setState({\n        ...state,\n        routes: state.routes.map((r) =>\n          r.key === route.key ? { ...r, state: child } : r\n        ),\n      });\n    },\n    [getState, route.key, setState]\n  );\n\n  const isInitialRef = React.useRef(true);\n\n  React.useEffect(() => {\n    isInitialRef.current = false;\n  });\n\n  // Clear options set by this screen when it is unmounted\n  React.useEffect(() => {\n    return clearOptions;\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const getIsInitial = React.useCallback(() => isInitialRef.current, []);\n\n  const context = React.useMemo(\n    () => ({\n      state: routeState,\n      getState: getCurrentState,\n      setState: setCurrentState,\n      getKey,\n      setKey,\n      getIsInitial,\n      addOptionsGetter,\n    }),\n    [\n      routeState,\n      getCurrentState,\n      setCurrentState,\n      getKey,\n      setKey,\n      getIsInitial,\n      addOptionsGetter,\n    ]\n  );\n\n  const ScreenComponent = screen.getComponent\n    ? screen.getComponent()\n    : screen.component;\n\n  return (\n    <NavigationStateContext.Provider value={context}>\n      <EnsureSingleNavigator>\n        <StaticContainer\n          name={screen.name}\n          render={ScreenComponent || screen.children}\n          navigation={navigation}\n          route={route}\n        >\n          {ScreenComponent !== undefined ? (\n            <ScreenComponent navigation={navigation} route={route} />\n          ) : screen.children !== undefined ? (\n            screen.children({ navigation, route })\n          ) : null}\n        </StaticContainer>\n      </EnsureSingleNavigator>\n    </NavigationStateContext.Provider>\n  );\n}\n"]}