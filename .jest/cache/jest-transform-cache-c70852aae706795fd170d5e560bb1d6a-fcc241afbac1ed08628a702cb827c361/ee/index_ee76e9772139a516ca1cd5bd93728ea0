6a731019f89d1caa17cbd4e7a60f8d2c
var conversions = require("./conversions");

var route = require("./route");

var convert = {};
var models = Object.keys(conversions);

function wrapRaw(fn) {
  var wrappedFn = function wrappedFn(args) {
    if (args === undefined || args === null) {
      return args;
    }

    if (arguments.length > 1) {
      args = Array.prototype.slice.call(arguments);
    }

    return fn(args);
  };

  if ('conversion' in fn) {
    wrappedFn.conversion = fn.conversion;
  }

  return wrappedFn;
}

function wrapRounded(fn) {
  var wrappedFn = function wrappedFn(args) {
    if (args === undefined || args === null) {
      return args;
    }

    if (arguments.length > 1) {
      args = Array.prototype.slice.call(arguments);
    }

    var result = fn(args);

    if (typeof result === 'object') {
      for (var len = result.length, i = 0; i < len; i++) {
        result[i] = Math.round(result[i]);
      }
    }

    return result;
  };

  if ('conversion' in fn) {
    wrappedFn.conversion = fn.conversion;
  }

  return wrappedFn;
}

models.forEach(function (fromModel) {
  convert[fromModel] = {};
  Object.defineProperty(convert[fromModel], 'channels', {
    value: conversions[fromModel].channels
  });
  Object.defineProperty(convert[fromModel], 'labels', {
    value: conversions[fromModel].labels
  });
  var routes = route(fromModel);
  var routeModels = Object.keys(routes);
  routeModels.forEach(function (toModel) {
    var fn = routes[toModel];
    convert[fromModel][toModel] = wrapRounded(fn);
    convert[fromModel][toModel].raw = wrapRaw(fn);
  });
});
module.exports = convert;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sIm5hbWVzIjpbImNvbnZlcnNpb25zIiwicmVxdWlyZSIsInJvdXRlIiwiY29udmVydCIsIm1vZGVscyIsIk9iamVjdCIsImtleXMiLCJ3cmFwUmF3IiwiZm4iLCJ3cmFwcGVkRm4iLCJhcmdzIiwidW5kZWZpbmVkIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwiQXJyYXkiLCJwcm90b3R5cGUiLCJzbGljZSIsImNhbGwiLCJjb252ZXJzaW9uIiwid3JhcFJvdW5kZWQiLCJyZXN1bHQiLCJsZW4iLCJpIiwiTWF0aCIsInJvdW5kIiwiZm9yRWFjaCIsImZyb21Nb2RlbCIsImRlZmluZVByb3BlcnR5IiwidmFsdWUiLCJjaGFubmVscyIsImxhYmVscyIsInJvdXRlcyIsInJvdXRlTW9kZWxzIiwidG9Nb2RlbCIsInJhdyIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBLElBQUlBLFdBQVcsR0FBR0MsT0FBTyxpQkFBekI7O0FBQ0EsSUFBSUMsS0FBSyxHQUFHRCxPQUFPLFdBQW5COztBQUVBLElBQUlFLE9BQU8sR0FBRyxFQUFkO0FBRUEsSUFBSUMsTUFBTSxHQUFHQyxNQUFNLENBQUNDLElBQVAsQ0FBWU4sV0FBWixDQUFiOztBQUVBLFNBQVNPLE9BQVQsQ0FBaUJDLEVBQWpCLEVBQXFCO0FBQ3BCLE1BQUlDLFNBQVMsR0FBRyxTQUFaQSxTQUFZLENBQVVDLElBQVYsRUFBZ0I7QUFDL0IsUUFBSUEsSUFBSSxLQUFLQyxTQUFULElBQXNCRCxJQUFJLEtBQUssSUFBbkMsRUFBeUM7QUFDeEMsYUFBT0EsSUFBUDtBQUNBOztBQUVELFFBQUlFLFNBQVMsQ0FBQ0MsTUFBVixHQUFtQixDQUF2QixFQUEwQjtBQUN6QkgsTUFBQUEsSUFBSSxHQUFHSSxLQUFLLENBQUNDLFNBQU4sQ0FBZ0JDLEtBQWhCLENBQXNCQyxJQUF0QixDQUEyQkwsU0FBM0IsQ0FBUDtBQUNBOztBQUVELFdBQU9KLEVBQUUsQ0FBQ0UsSUFBRCxDQUFUO0FBQ0EsR0FWRDs7QUFhQSxNQUFJLGdCQUFnQkYsRUFBcEIsRUFBd0I7QUFDdkJDLElBQUFBLFNBQVMsQ0FBQ1MsVUFBVixHQUF1QlYsRUFBRSxDQUFDVSxVQUExQjtBQUNBOztBQUVELFNBQU9ULFNBQVA7QUFDQTs7QUFFRCxTQUFTVSxXQUFULENBQXFCWCxFQUFyQixFQUF5QjtBQUN4QixNQUFJQyxTQUFTLEdBQUcsU0FBWkEsU0FBWSxDQUFVQyxJQUFWLEVBQWdCO0FBQy9CLFFBQUlBLElBQUksS0FBS0MsU0FBVCxJQUFzQkQsSUFBSSxLQUFLLElBQW5DLEVBQXlDO0FBQ3hDLGFBQU9BLElBQVA7QUFDQTs7QUFFRCxRQUFJRSxTQUFTLENBQUNDLE1BQVYsR0FBbUIsQ0FBdkIsRUFBMEI7QUFDekJILE1BQUFBLElBQUksR0FBR0ksS0FBSyxDQUFDQyxTQUFOLENBQWdCQyxLQUFoQixDQUFzQkMsSUFBdEIsQ0FBMkJMLFNBQTNCLENBQVA7QUFDQTs7QUFFRCxRQUFJUSxNQUFNLEdBQUdaLEVBQUUsQ0FBQ0UsSUFBRCxDQUFmOztBQUtBLFFBQUksT0FBT1UsTUFBUCxLQUFrQixRQUF0QixFQUFnQztBQUMvQixXQUFLLElBQUlDLEdBQUcsR0FBR0QsTUFBTSxDQUFDUCxNQUFqQixFQUF5QlMsQ0FBQyxHQUFHLENBQWxDLEVBQXFDQSxDQUFDLEdBQUdELEdBQXpDLEVBQThDQyxDQUFDLEVBQS9DLEVBQW1EO0FBQ2xERixRQUFBQSxNQUFNLENBQUNFLENBQUQsQ0FBTixHQUFZQyxJQUFJLENBQUNDLEtBQUwsQ0FBV0osTUFBTSxDQUFDRSxDQUFELENBQWpCLENBQVo7QUFDQTtBQUNEOztBQUVELFdBQU9GLE1BQVA7QUFDQSxHQXJCRDs7QUF3QkEsTUFBSSxnQkFBZ0JaLEVBQXBCLEVBQXdCO0FBQ3ZCQyxJQUFBQSxTQUFTLENBQUNTLFVBQVYsR0FBdUJWLEVBQUUsQ0FBQ1UsVUFBMUI7QUFDQTs7QUFFRCxTQUFPVCxTQUFQO0FBQ0E7O0FBRURMLE1BQU0sQ0FBQ3FCLE9BQVAsQ0FBZSxVQUFVQyxTQUFWLEVBQXFCO0FBQ25DdkIsRUFBQUEsT0FBTyxDQUFDdUIsU0FBRCxDQUFQLEdBQXFCLEVBQXJCO0FBRUFyQixFQUFBQSxNQUFNLENBQUNzQixjQUFQLENBQXNCeEIsT0FBTyxDQUFDdUIsU0FBRCxDQUE3QixFQUEwQyxVQUExQyxFQUFzRDtBQUFDRSxJQUFBQSxLQUFLLEVBQUU1QixXQUFXLENBQUMwQixTQUFELENBQVgsQ0FBdUJHO0FBQS9CLEdBQXREO0FBQ0F4QixFQUFBQSxNQUFNLENBQUNzQixjQUFQLENBQXNCeEIsT0FBTyxDQUFDdUIsU0FBRCxDQUE3QixFQUEwQyxRQUExQyxFQUFvRDtBQUFDRSxJQUFBQSxLQUFLLEVBQUU1QixXQUFXLENBQUMwQixTQUFELENBQVgsQ0FBdUJJO0FBQS9CLEdBQXBEO0FBRUEsTUFBSUMsTUFBTSxHQUFHN0IsS0FBSyxDQUFDd0IsU0FBRCxDQUFsQjtBQUNBLE1BQUlNLFdBQVcsR0FBRzNCLE1BQU0sQ0FBQ0MsSUFBUCxDQUFZeUIsTUFBWixDQUFsQjtBQUVBQyxFQUFBQSxXQUFXLENBQUNQLE9BQVosQ0FBb0IsVUFBVVEsT0FBVixFQUFtQjtBQUN0QyxRQUFJekIsRUFBRSxHQUFHdUIsTUFBTSxDQUFDRSxPQUFELENBQWY7QUFFQTlCLElBQUFBLE9BQU8sQ0FBQ3VCLFNBQUQsQ0FBUCxDQUFtQk8sT0FBbkIsSUFBOEJkLFdBQVcsQ0FBQ1gsRUFBRCxDQUF6QztBQUNBTCxJQUFBQSxPQUFPLENBQUN1QixTQUFELENBQVAsQ0FBbUJPLE9BQW5CLEVBQTRCQyxHQUE1QixHQUFrQzNCLE9BQU8sQ0FBQ0MsRUFBRCxDQUF6QztBQUNBLEdBTEQ7QUFNQSxDQWZEO0FBaUJBMkIsTUFBTSxDQUFDQyxPQUFQLEdBQWlCakMsT0FBakIiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgY29udmVyc2lvbnMgPSByZXF1aXJlKCcuL2NvbnZlcnNpb25zJyk7XG52YXIgcm91dGUgPSByZXF1aXJlKCcuL3JvdXRlJyk7XG5cbnZhciBjb252ZXJ0ID0ge307XG5cbnZhciBtb2RlbHMgPSBPYmplY3Qua2V5cyhjb252ZXJzaW9ucyk7XG5cbmZ1bmN0aW9uIHdyYXBSYXcoZm4pIHtcblx0dmFyIHdyYXBwZWRGbiA9IGZ1bmN0aW9uIChhcmdzKSB7XG5cdFx0aWYgKGFyZ3MgPT09IHVuZGVmaW5lZCB8fCBhcmdzID09PSBudWxsKSB7XG5cdFx0XHRyZXR1cm4gYXJncztcblx0XHR9XG5cblx0XHRpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpIHtcblx0XHRcdGFyZ3MgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMpO1xuXHRcdH1cblxuXHRcdHJldHVybiBmbihhcmdzKTtcblx0fTtcblxuXHQvLyBwcmVzZXJ2ZSAuY29udmVyc2lvbiBwcm9wZXJ0eSBpZiB0aGVyZSBpcyBvbmVcblx0aWYgKCdjb252ZXJzaW9uJyBpbiBmbikge1xuXHRcdHdyYXBwZWRGbi5jb252ZXJzaW9uID0gZm4uY29udmVyc2lvbjtcblx0fVxuXG5cdHJldHVybiB3cmFwcGVkRm47XG59XG5cbmZ1bmN0aW9uIHdyYXBSb3VuZGVkKGZuKSB7XG5cdHZhciB3cmFwcGVkRm4gPSBmdW5jdGlvbiAoYXJncykge1xuXHRcdGlmIChhcmdzID09PSB1bmRlZmluZWQgfHwgYXJncyA9PT0gbnVsbCkge1xuXHRcdFx0cmV0dXJuIGFyZ3M7XG5cdFx0fVxuXG5cdFx0aWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSB7XG5cdFx0XHRhcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzKTtcblx0XHR9XG5cblx0XHR2YXIgcmVzdWx0ID0gZm4oYXJncyk7XG5cblx0XHQvLyB3ZSdyZSBhc3N1bWluZyB0aGUgcmVzdWx0IGlzIGFuIGFycmF5IGhlcmUuXG5cdFx0Ly8gc2VlIG5vdGljZSBpbiBjb252ZXJzaW9ucy5qczsgZG9uJ3QgdXNlIGJveCB0eXBlc1xuXHRcdC8vIGluIGNvbnZlcnNpb24gZnVuY3Rpb25zLlxuXHRcdGlmICh0eXBlb2YgcmVzdWx0ID09PSAnb2JqZWN0Jykge1xuXHRcdFx0Zm9yICh2YXIgbGVuID0gcmVzdWx0Lmxlbmd0aCwgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuXHRcdFx0XHRyZXN1bHRbaV0gPSBNYXRoLnJvdW5kKHJlc3VsdFtpXSk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHJlc3VsdDtcblx0fTtcblxuXHQvLyBwcmVzZXJ2ZSAuY29udmVyc2lvbiBwcm9wZXJ0eSBpZiB0aGVyZSBpcyBvbmVcblx0aWYgKCdjb252ZXJzaW9uJyBpbiBmbikge1xuXHRcdHdyYXBwZWRGbi5jb252ZXJzaW9uID0gZm4uY29udmVyc2lvbjtcblx0fVxuXG5cdHJldHVybiB3cmFwcGVkRm47XG59XG5cbm1vZGVscy5mb3JFYWNoKGZ1bmN0aW9uIChmcm9tTW9kZWwpIHtcblx0Y29udmVydFtmcm9tTW9kZWxdID0ge307XG5cblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGNvbnZlcnRbZnJvbU1vZGVsXSwgJ2NoYW5uZWxzJywge3ZhbHVlOiBjb252ZXJzaW9uc1tmcm9tTW9kZWxdLmNoYW5uZWxzfSk7XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShjb252ZXJ0W2Zyb21Nb2RlbF0sICdsYWJlbHMnLCB7dmFsdWU6IGNvbnZlcnNpb25zW2Zyb21Nb2RlbF0ubGFiZWxzfSk7XG5cblx0dmFyIHJvdXRlcyA9IHJvdXRlKGZyb21Nb2RlbCk7XG5cdHZhciByb3V0ZU1vZGVscyA9IE9iamVjdC5rZXlzKHJvdXRlcyk7XG5cblx0cm91dGVNb2RlbHMuZm9yRWFjaChmdW5jdGlvbiAodG9Nb2RlbCkge1xuXHRcdHZhciBmbiA9IHJvdXRlc1t0b01vZGVsXTtcblxuXHRcdGNvbnZlcnRbZnJvbU1vZGVsXVt0b01vZGVsXSA9IHdyYXBSb3VuZGVkKGZuKTtcblx0XHRjb252ZXJ0W2Zyb21Nb2RlbF1bdG9Nb2RlbF0ucmF3ID0gd3JhcFJhdyhmbik7XG5cdH0pO1xufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gY29udmVydDtcbiJdfQ==