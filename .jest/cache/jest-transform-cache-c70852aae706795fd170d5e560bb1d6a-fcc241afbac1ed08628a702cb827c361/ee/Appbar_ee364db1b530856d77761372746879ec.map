{"version":3,"mappings":"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","names":["DEFAULT_APPBAR_HEIGHT","Appbar","children","dark","style","theme","rest","colors","isDarkTheme","mode","StyleSheet","flatten","customBackground","backgroundColor","elevation","restStyle","isDark","surface","primary","isLight","shouldCenterContent","shouldAddLeftSpacing","shouldAddRightSpacing","Platform","OS","hasAppbarContent","leftItemsCount","rightItemsCount","React","Children","forEach","child","isValidElement","type","AppbarContent","_Surface","styles","appbar","_reactNative","spacing","toArray","filter","map","i","AppbarAction","AppbarBackAction","includes","props","color","white","black","marginLeft","alignItems","cloneElement","create","height","flexDirection","paddingHorizontal","width","AppbarWithTheme"],"sources":["Appbar.tsx"],"sourcesContent":["import * as React from 'react';\nimport { View, ViewStyle, Platform, StyleSheet, StyleProp } from 'react-native';\nimport color from 'color';\n\nimport AppbarContent from './AppbarContent';\nimport AppbarAction from './AppbarAction';\nimport AppbarBackAction from './AppbarBackAction';\nimport Surface from '../Surface';\nimport { withTheme } from '../../core/theming';\nimport { black, white } from '../../styles/colors';\nimport overlay from '../../styles/overlay';\n\ntype Props = Partial<React.ComponentPropsWithRef<typeof View>> & {\n  /**\n   * Whether the background color is a dark color. A dark appbar will render light text and vice-versa.\n   */\n  dark?: boolean;\n  /**\n   * Content of the `Appbar`.\n   */\n  children: React.ReactNode;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n  style?: StyleProp<ViewStyle>;\n};\n\nexport const DEFAULT_APPBAR_HEIGHT = 56;\n\n/**\n * A component to display action items in a bar. It can be placed at the top or bottom.\n * The top bar usually contains the screen title, controls such as navigation buttons, menu button etc.\n * The bottom bar usually provides access to a drawer and up to four actions.\n *\n * By default Appbar uses primary color as a background, in dark theme with `adaptive` mode it will use surface colour instead.\n * See [Dark Theme](https://callstack.github.io/react-native-paper/theming.html#dark-theme) for more informations\n *\n * <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/appbar.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Appbar } from 'react-native-paper';\n * import { StyleSheet } from 'react-native';\n *\n * const MyComponent = () => (\n *  <Appbar style={styles.bottom}>\n *    <Appbar.Action\n *      icon=\"archive\"\n *      onPress={() => console.log('Pressed archive')}\n *     />\n *     <Appbar.Action icon=\"mail\" onPress={() => console.log('Pressed mail')} />\n *     <Appbar.Action icon=\"label\" onPress={() => console.log('Pressed label')} />\n *     <Appbar.Action\n *       icon=\"delete\"\n *       onPress={() => console.log('Pressed delete')}\n *     />\n *   </Appbar>\n *  );\n *\n * export default MyComponent\n *\n * const styles = StyleSheet.create({\n *   bottom: {\n *     position: 'absolute',\n *     left: 0,\n *     right: 0,\n *     bottom: 0,\n *   },\n * });\n * ```\n */\nconst Appbar = ({ children, dark, style, theme, ...rest }: Props) => {\n  const { colors, dark: isDarkTheme, mode } = theme;\n  const {\n    backgroundColor: customBackground,\n    elevation = 4,\n    ...restStyle\n  }: ViewStyle = StyleSheet.flatten(style) || {};\n\n  let isDark: boolean;\n\n  const backgroundColor = customBackground\n    ? customBackground\n    : isDarkTheme && mode === 'adaptive'\n    ? overlay(elevation, colors.surface)\n    : colors.primary;\n  if (typeof dark === 'boolean') {\n    isDark = dark;\n  } else {\n    isDark =\n      backgroundColor === 'transparent'\n        ? false\n        : typeof backgroundColor === 'string'\n        ? !color(backgroundColor).isLight()\n        : true;\n  }\n\n  let shouldCenterContent = false;\n  let shouldAddLeftSpacing = false;\n  let shouldAddRightSpacing = false;\n  if (Platform.OS === 'ios') {\n    let hasAppbarContent = false;\n    let leftItemsCount = 0;\n    let rightItemsCount = 0;\n\n    React.Children.forEach(children, (child) => {\n      if (React.isValidElement(child)) {\n        if (child.type === AppbarContent) {\n          hasAppbarContent = true;\n        } else if (hasAppbarContent) {\n          rightItemsCount++;\n        } else {\n          leftItemsCount++;\n        }\n      }\n    });\n\n    shouldCenterContent =\n      hasAppbarContent && leftItemsCount < 2 && rightItemsCount < 2;\n    shouldAddLeftSpacing = shouldCenterContent && leftItemsCount === 0;\n    shouldAddRightSpacing = shouldCenterContent && rightItemsCount === 0;\n  }\n  return (\n    <Surface\n      style={[{ backgroundColor }, styles.appbar, { elevation }, restStyle]}\n      {...rest}\n    >\n      {shouldAddLeftSpacing ? <View style={styles.spacing} /> : null}\n      {React.Children.toArray(children)\n        .filter((child) => child != null && typeof child !== 'boolean')\n        .map((child, i) => {\n          if (\n            !React.isValidElement(child) ||\n            ![AppbarContent, AppbarAction, AppbarBackAction].includes(\n              // @ts-expect-error: TypeScript complains about the type of type but it doesn't matter\n              child.type\n            )\n          ) {\n            return child;\n          }\n\n          const props: { color?: string; style?: StyleProp<ViewStyle> } = {\n            color:\n              typeof child.props.color !== 'undefined'\n                ? child.props.color\n                : isDark\n                ? white\n                : black,\n          };\n\n          if (child.type === AppbarContent) {\n            props.style = [\n              // Since content is not first item, add extra left margin\n              i !== 0 && { marginLeft: 8 },\n              shouldCenterContent && { alignItems: 'center' },\n              child.props.style,\n            ];\n          }\n          return React.cloneElement(child, props);\n        })}\n      {shouldAddRightSpacing ? <View style={styles.spacing} /> : null}\n    </Surface>\n  );\n};\n\nconst styles = StyleSheet.create({\n  appbar: {\n    height: DEFAULT_APPBAR_HEIGHT,\n    flexDirection: 'row',\n    alignItems: 'center',\n    paddingHorizontal: 4,\n    elevation: 4,\n  },\n  spacing: {\n    width: 48,\n  },\n});\n\nexport default withTheme(Appbar);\n\n// @component-docs ignore-next-line\nconst AppbarWithTheme = withTheme(Appbar);\n// @component-docs ignore-next-line\nexport { AppbarWithTheme as Appbar };\n"]}