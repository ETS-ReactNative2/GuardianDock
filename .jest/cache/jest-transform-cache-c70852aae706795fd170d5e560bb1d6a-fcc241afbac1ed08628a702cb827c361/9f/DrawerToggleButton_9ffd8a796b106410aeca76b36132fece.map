{"version":3,"mappings":";;;;;;;;;;;;AAAA;;AACA;;AAKA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAWe,SAASA,kBAAT,OAA2D;AAAA,MAA7BC,SAA6B,QAA7BA,SAA6B;AAAA,MAAfC,IAAe;AACxE,MAAMC,UAAU,GAAG,4BAAnB;AAEA,SACEC,oBAACC,2BAAD,eACMH,IADN;AAEEI,cAAU,MAFZ;AAGEC,qBAAiB,EAAC,QAHpB;AAIEC,kBAAc,EAAE;AAAEC,gBAAU,EAAE;AAAd,KAJlB;AAKEC,WAAO,EAAE;AAAA,aAAMP,UAAU,CAACQ,QAAXR,CAAoBS,sBAAcC,YAAdD,EAApBT,CAAN;AAAA,KALX;AAMEW,SAAK,EAAEC,MAAM,CAACC,SANhB;AAOEC,WAAO,EAAEC,sBAASC,MAATD,CAAgB;AACvBE,SAAG,EAAEC,SADkB;AAEvBC,aAAO,EAAE;AAAEC,WAAG,EAAE,EAAP;AAAWC,aAAK,EAAE,EAAlB;AAAsBC,cAAM,EAAE,EAA9B;AAAkCC,YAAI,EAAE;AAAxC;AAFc,KAAhBR;AAPX,MAYEd,oBAACuB,kBAAD;AACEb,SAAK,EAAE,CAACC,MAAM,CAACa,IAAR,EAAc3B,SAAS,GAAG;AAAEA;AAAF,KAAH,GAAmB,IAA1C,CADT;AAEE4B,UAAM,EAAEC,OAAO,mCAFjB;AAGEC,gBAAY,EAAE;AAHhB,IAZF,CADF;AAoBD;;AAED,IAAMhB,MAAM,GAAGiB,wBAAWC,MAAXD,CAAkB;AAC/BJ,MAAI,EAAE;AACJM,UAAM,EAAE,EADJ;AAEJC,SAAK,EAAE,EAFH;AAGJC,UAAM,EAAE,CAHJ;AAIJC,cAAU,EAAE;AAJR,GADyB;AAO/BrB,WAAS,EAAE;AACTsB,oBAAgB,EAAE;AADT;AAPoB,CAAlBN,CAAf","names":["DrawerToggleButton","tintColor","rest","navigation","React","_elements","accessible","accessibilityRole","android_ripple","borderless","onPress","dispatch","DrawerActions","toggleDrawer","style","styles","touchable","hitSlop","Platform","select","ios","undefined","default","top","right","bottom","left","_reactNative","icon","source","require","fadeDuration","StyleSheet","create","height","width","margin","resizeMode","marginHorizontal"],"sources":["DrawerToggleButton.tsx"],"sourcesContent":["import { PlatformPressable } from '@react-navigation/elements';\nimport {\n  DrawerActions,\n  ParamListBase,\n  useNavigation,\n} from '@react-navigation/native';\nimport * as React from 'react';\nimport { Image, Platform, StyleSheet } from 'react-native';\n\nimport type { DrawerNavigationProp } from '../types';\n\ntype Props = {\n  accessibilityLabel?: string;\n  pressColor?: string;\n  pressOpacity?: number;\n  tintColor?: string;\n};\n\nexport default function DrawerToggleButton({ tintColor, ...rest }: Props) {\n  const navigation = useNavigation<DrawerNavigationProp<ParamListBase>>();\n\n  return (\n    <PlatformPressable\n      {...rest}\n      accessible\n      accessibilityRole=\"button\"\n      android_ripple={{ borderless: true }}\n      onPress={() => navigation.dispatch(DrawerActions.toggleDrawer())}\n      style={styles.touchable}\n      hitSlop={Platform.select({\n        ios: undefined,\n        default: { top: 16, right: 16, bottom: 16, left: 16 },\n      })}\n    >\n      <Image\n        style={[styles.icon, tintColor ? { tintColor } : null]}\n        source={require('./assets/toggle-drawer-icon.png')}\n        fadeDuration={0}\n      />\n    </PlatformPressable>\n  );\n}\n\nconst styles = StyleSheet.create({\n  icon: {\n    height: 24,\n    width: 24,\n    margin: 3,\n    resizeMode: 'contain',\n  },\n  touchable: {\n    marginHorizontal: 11,\n  },\n});\n"]}