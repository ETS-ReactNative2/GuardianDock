{"version":3,"mappings":";;;;;;;AAAA;;AACA;;AACA;;AASA,IAAMA,cAAc,GAAG,uBACrB,kFADqB,CAAvB;AAIO,IAAMC,mBAAmB,GAAG;AACjCC,QADiC;AAAA,yBAC1BC,UAD0B,EACmB;AAElD,aAAO;AACLC,aAAK;AAAA,iCAAQ;AAEX,gBAAIC,6BAAJ,EAAgB;AACdA,4CAAWC,eAAXD,CAA2BF,UAA3BE,EAAuCE,aAAMC,KAA7CH;AADF,mBAEO;AACLI,qBAAO,CAACC,IAARD,CAAaT,cAAbS;AACD;AAPE,WACA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA,WADA;AAULE,gBAAQ;AAAA,iCAAQ;AAEd,gBAAIN,6BAAJ,EAAgB;AACdA,4CAAWC,eAAXD,CAA2BF,UAA3BE,EAAuCE,aAAMK,MAA7CP;AADF,mBAEO;AACLI,qBAAO,CAACC,IAARD,CAAaT,cAAbS;AACD;AAhBE,WAUG;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA,WAVH;AAmBLI,YAAI;AAAA,iCAAQ;AAEV,gBAAIR,6BAAJ,EAAgB;AACdA,4CAAWC,eAAXD,CAA2BF,UAA3BE,EAAuCE,aAAMO,MAA7CT;AADF,mBAEO;AACLI,qBAAO,CAACC,IAARD,CAAaT,cAAbS;AACD;AAzBE,WAmBD;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA,WAnBC;AA4BLM,WAAG;AAAA,iCAAQ;AAET,gBAAIV,6BAAJ,EAAgB;AACdA,4CAAWC,eAAXD,CAA2BF,UAA3BE,EAAuCE,aAAMS,GAA7CX;AADF,mBAEO;AACLI,qBAAO,CAACC,IAARD,CAAaT,cAAbS;AACD;AACF,WAPE;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AA5BE,OAAP;AAqCD,KAxCgC;;AAAA;AAAA;AAAA,oBAe3BQ,kBAEO;AAjBoB;AAAA;AAAA;AAAA,iBAfnCC,kBAemC;AAAA,kBAE/BA,mBAF+B;AAAA,kBASzBA,mBATyB;AAAA,eAkBzBA;AAlByB;AAAA;AAAA,sBAGxBlB;AAHwB;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA,CAA5B","names":["warningMessage","GestureStateManager","create","handlerTag","begin","Reanimated","setGestureState","State","BEGAN","console","warn","activate","ACTIVE","fail","FAILED","end","END","_reanimatedWrapper","_State"],"sources":["gestureStateManager.ts"],"sourcesContent":["import { Reanimated } from './reanimatedWrapper';\nimport { State } from '../../State';\nimport { tagMessage } from '../../utils';\n\nexport interface GestureStateManagerType {\n  begin: () => void;\n  activate: () => void;\n  fail: () => void;\n  end: () => void;\n}\n\nconst warningMessage = tagMessage(\n  'react-native-reanimated is required in order to use synchronous state management'\n);\n\nexport const GestureStateManager = {\n  create(handlerTag: number): GestureStateManagerType {\n    'worklet';\n    return {\n      begin: () => {\n        'worklet';\n        if (Reanimated) {\n          Reanimated.setGestureState(handlerTag, State.BEGAN);\n        } else {\n          console.warn(warningMessage);\n        }\n      },\n\n      activate: () => {\n        'worklet';\n        if (Reanimated) {\n          Reanimated.setGestureState(handlerTag, State.ACTIVE);\n        } else {\n          console.warn(warningMessage);\n        }\n      },\n\n      fail: () => {\n        'worklet';\n        if (Reanimated) {\n          Reanimated.setGestureState(handlerTag, State.FAILED);\n        } else {\n          console.warn(warningMessage);\n        }\n      },\n\n      end: () => {\n        'worklet';\n        if (Reanimated) {\n          Reanimated.setGestureState(handlerTag, State.END);\n        } else {\n          console.warn(warningMessage);\n        }\n      },\n    };\n  },\n};\n"]}