{"version":3,"sources":["Pressable.js"],"names":["Pressable","props","forwardedRef","accessible","android_disableSound","android_ripple","cancelable","children","delayLongPress","disabled","focusable","onLongPress","onPress","onPressIn","onPressOut","pressRetentionOffset","style","testOnly_pressed","unstable_pressDelay","restProps","viewRef","current","android_rippleConfig","usePressState","pressed","setPressed","hitSlop","accessibilityState","restPropsWithDefaults","viewProps","config","pressRectOffset","delayPressIn","event","onPressMove","eventHandlers","__DEV__","forcePressed","MemoedPressable","React","memo","forwardRef","displayName"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\nimport * as React from 'react';\nimport {useMemo, useState, useRef, useImperativeHandle} from 'react';\nimport useAndroidRippleForView, {\n  type RippleConfig,\n} from './useAndroidRippleForView';\nimport type {\n  AccessibilityActionEvent,\n  AccessibilityActionInfo,\n  AccessibilityRole,\n  AccessibilityState,\n  AccessibilityValue,\n} from '../View/ViewAccessibility';\nimport {PressabilityDebugView} from '../../Pressability/PressabilityDebug';\nimport usePressability from '../../Pressability/usePressability';\nimport {normalizeRect, type RectOrSize} from '../../StyleSheet/Rect';\nimport type {LayoutEvent, PressEvent} from '../../Types/CoreEventTypes';\nimport View from '../View/View';\n\ntype ViewStyleProp = $ElementType<React.ElementConfig<typeof View>, 'style'>;\n\nexport type StateCallbackType = $ReadOnly<{|\n  pressed: boolean,\n|}>;\n\ntype Props = $ReadOnly<{|\n  /**\n   * Accessibility.\n   */\n  accessibilityActions?: ?$ReadOnlyArray<AccessibilityActionInfo>,\n  accessibilityElementsHidden?: ?boolean,\n  accessibilityHint?: ?Stringish,\n  accessibilityIgnoresInvertColors?: ?boolean,\n  accessibilityLabel?: ?Stringish,\n  accessibilityLiveRegion?: ?('none' | 'polite' | 'assertive'),\n  accessibilityRole?: ?AccessibilityRole,\n  accessibilityState?: ?AccessibilityState,\n  accessibilityValue?: ?AccessibilityValue,\n  accessibilityViewIsModal?: ?boolean,\n  accessible?: ?boolean,\n  focusable?: ?boolean,\n  importantForAccessibility?: ?('auto' | 'yes' | 'no' | 'no-hide-descendants'),\n  onAccessibilityAction?: ?(event: AccessibilityActionEvent) => mixed,\n\n  /**\n   * Whether a press gesture can be interrupted by a parent gesture such as a\n   * scroll event. Defaults to true.\n   */\n  cancelable?: ?boolean,\n\n  /**\n   * Either children or a render prop that receives a boolean reflecting whether\n   * the component is currently pressed.\n   */\n  children: React.Node | ((state: StateCallbackType) => React.Node),\n\n  /**\n   * Duration (in milliseconds) from `onPressIn` before `onLongPress` is called.\n   */\n  delayLongPress?: ?number,\n\n  /**\n   * Whether the press behavior is disabled.\n   */\n  disabled?: ?boolean,\n\n  /**\n   * Additional distance outside of this view in which a press is detected.\n   */\n  hitSlop?: ?RectOrSize,\n\n  /**\n   * Additional distance outside of this view in which a touch is considered a\n   * press before `onPressOut` is triggered.\n   */\n  pressRetentionOffset?: ?RectOrSize,\n\n  /**\n   * Called when this view's layout changes.\n   */\n  onLayout?: ?(event: LayoutEvent) => mixed,\n\n  /**\n   * Called when a long-tap gesture is detected.\n   */\n  onLongPress?: ?(event: PressEvent) => mixed,\n\n  /**\n   * Called when a single tap gesture is detected.\n   */\n  onPress?: ?(event: PressEvent) => mixed,\n\n  /**\n   * Called when a touch is engaged before `onPress`.\n   */\n  onPressIn?: ?(event: PressEvent) => mixed,\n\n  /**\n   * Called when a touch is released before `onPress`.\n   */\n  onPressOut?: ?(event: PressEvent) => mixed,\n\n  /**\n   * Either view styles or a function that receives a boolean reflecting whether\n   * the component is currently pressed and returns view styles.\n   */\n  style?: ViewStyleProp | ((state: StateCallbackType) => ViewStyleProp),\n\n  /**\n   * Identifier used to find this view in tests.\n   */\n  testID?: ?string,\n\n  /**\n   * If true, doesn't play system sound on touch.\n   */\n  android_disableSound?: ?boolean,\n\n  /**\n   * Enables the Android ripple effect and configures its color.\n   */\n  android_ripple?: ?RippleConfig,\n\n  /**\n   * Used only for documentation or testing (e.g. snapshot testing).\n   */\n  testOnly_pressed?: ?boolean,\n\n  /**\n   * Duration to wait after press down before calling `onPressIn`.\n   */\n  unstable_pressDelay?: ?number,\n|}>;\n\n/**\n * Component used to build display components that should respond to whether the\n * component is currently pressed or not.\n */\nfunction Pressable(props: Props, forwardedRef): React.Node {\n  const {\n    accessible,\n    android_disableSound,\n    android_ripple,\n    cancelable,\n    children,\n    delayLongPress,\n    disabled,\n    focusable,\n    onLongPress,\n    onPress,\n    onPressIn,\n    onPressOut,\n    pressRetentionOffset,\n    style,\n    testOnly_pressed,\n    unstable_pressDelay,\n    ...restProps\n  } = props;\n\n  const viewRef = useRef<React.ElementRef<typeof View> | null>(null);\n  useImperativeHandle(forwardedRef, () => viewRef.current);\n\n  const android_rippleConfig = useAndroidRippleForView(android_ripple, viewRef);\n\n  const [pressed, setPressed] = usePressState(testOnly_pressed === true);\n\n  const hitSlop = normalizeRect(props.hitSlop);\n\n  const accessibilityState =\n    disabled != null\n      ? {...props.accessibilityState, disabled}\n      : props.accessibilityState;\n\n  const restPropsWithDefaults: React.ElementConfig<typeof View> = {\n    ...restProps,\n    ...android_rippleConfig?.viewProps,\n    accessible: accessible !== false,\n    accessibilityState,\n    focusable: focusable !== false,\n    hitSlop,\n  };\n\n  const config = useMemo(\n    () => ({\n      cancelable,\n      disabled,\n      hitSlop,\n      pressRectOffset: pressRetentionOffset,\n      android_disableSound,\n      delayLongPress,\n      delayPressIn: unstable_pressDelay,\n      onLongPress,\n      onPress,\n      onPressIn(event: PressEvent): void {\n        if (android_rippleConfig != null) {\n          android_rippleConfig.onPressIn(event);\n        }\n        setPressed(true);\n        if (onPressIn != null) {\n          onPressIn(event);\n        }\n      },\n      onPressMove: android_rippleConfig?.onPressMove,\n      onPressOut(event: PressEvent): void {\n        if (android_rippleConfig != null) {\n          android_rippleConfig.onPressOut(event);\n        }\n        setPressed(false);\n        if (onPressOut != null) {\n          onPressOut(event);\n        }\n      },\n    }),\n    [\n      android_disableSound,\n      android_rippleConfig,\n      cancelable,\n      delayLongPress,\n      disabled,\n      hitSlop,\n      onLongPress,\n      onPress,\n      onPressIn,\n      onPressOut,\n      pressRetentionOffset,\n      setPressed,\n      unstable_pressDelay,\n    ],\n  );\n  const eventHandlers = usePressability(config);\n\n  return (\n    <View\n      {...restPropsWithDefaults}\n      {...eventHandlers}\n      ref={viewRef}\n      style={typeof style === 'function' ? style({pressed}) : style}\n      collapsable={false}>\n      {typeof children === 'function' ? children({pressed}) : children}\n      {__DEV__ ? <PressabilityDebugView color=\"red\" hitSlop={hitSlop} /> : null}\n    </View>\n  );\n}\n\nfunction usePressState(forcePressed: boolean): [boolean, (boolean) => void] {\n  const [pressed, setPressed] = useState(false);\n  return [pressed || forcePressed, setPressed];\n}\n\nconst MemoedPressable = React.memo(React.forwardRef(Pressable));\nMemoedPressable.displayName = 'Pressable';\n\nexport default (MemoedPressable: React.AbstractComponent<\n  Props,\n  React.ElementRef<typeof View>,\n>);\n"]}