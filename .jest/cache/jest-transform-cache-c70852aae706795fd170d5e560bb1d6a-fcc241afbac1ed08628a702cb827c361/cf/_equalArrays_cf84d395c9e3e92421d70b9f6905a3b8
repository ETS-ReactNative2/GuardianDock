cd000be22125872632993acf32761579
var SetCache = require("./_SetCache"),
    arraySome = require("./_arraySome"),
    cacheHas = require("./_cacheHas");

var COMPARE_PARTIAL_FLAG = 1,
    COMPARE_UNORDERED_FLAG = 2;

function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
      arrLength = array.length,
      othLength = other.length;

  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
    return false;
  }

  var arrStacked = stack.get(array);
  var othStacked = stack.get(other);

  if (arrStacked && othStacked) {
    return arrStacked == other && othStacked == array;
  }

  var index = -1,
      result = true,
      seen = bitmask & COMPARE_UNORDERED_FLAG ? new SetCache() : undefined;
  stack.set(array, other);
  stack.set(other, array);

  while (++index < arrLength) {
    var arrValue = array[index],
        othValue = other[index];

    if (customizer) {
      var compared = isPartial ? customizer(othValue, arrValue, index, other, array, stack) : customizer(arrValue, othValue, index, array, other, stack);
    }

    if (compared !== undefined) {
      if (compared) {
        continue;
      }

      result = false;
      break;
    }

    if (seen) {
      if (!arraySome(other, function (othValue, othIndex) {
        if (!cacheHas(seen, othIndex) && (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
          return seen.push(othIndex);
        }
      })) {
        result = false;
        break;
      }
    } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
      result = false;
      break;
    }
  }

  stack['delete'](array);
  stack['delete'](other);
  return result;
}

module.exports = equalArrays;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIl9lcXVhbEFycmF5cy5qcyJdLCJuYW1lcyI6WyJTZXRDYWNoZSIsInJlcXVpcmUiLCJhcnJheVNvbWUiLCJjYWNoZUhhcyIsIkNPTVBBUkVfUEFSVElBTF9GTEFHIiwiQ09NUEFSRV9VTk9SREVSRURfRkxBRyIsImVxdWFsQXJyYXlzIiwiYXJyYXkiLCJvdGhlciIsImJpdG1hc2siLCJjdXN0b21pemVyIiwiZXF1YWxGdW5jIiwic3RhY2siLCJpc1BhcnRpYWwiLCJhcnJMZW5ndGgiLCJsZW5ndGgiLCJvdGhMZW5ndGgiLCJhcnJTdGFja2VkIiwiZ2V0Iiwib3RoU3RhY2tlZCIsImluZGV4IiwicmVzdWx0Iiwic2VlbiIsInVuZGVmaW5lZCIsInNldCIsImFyclZhbHVlIiwib3RoVmFsdWUiLCJjb21wYXJlZCIsIm90aEluZGV4IiwicHVzaCIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBLElBQUlBLFFBQVEsR0FBR0MsT0FBTyxlQUF0QjtBQUFBLElBQ0lDLFNBQVMsR0FBR0QsT0FBTyxnQkFEdkI7QUFBQSxJQUVJRSxRQUFRLEdBQUdGLE9BQU8sZUFGdEI7O0FBS0EsSUFBSUcsb0JBQW9CLEdBQUcsQ0FBM0I7QUFBQSxJQUNJQyxzQkFBc0IsR0FBRyxDQUQ3Qjs7QUFnQkEsU0FBU0MsV0FBVCxDQUFxQkMsS0FBckIsRUFBNEJDLEtBQTVCLEVBQW1DQyxPQUFuQyxFQUE0Q0MsVUFBNUMsRUFBd0RDLFNBQXhELEVBQW1FQyxLQUFuRSxFQUEwRTtBQUN4RSxNQUFJQyxTQUFTLEdBQUdKLE9BQU8sR0FBR0wsb0JBQTFCO0FBQUEsTUFDSVUsU0FBUyxHQUFHUCxLQUFLLENBQUNRLE1BRHRCO0FBQUEsTUFFSUMsU0FBUyxHQUFHUixLQUFLLENBQUNPLE1BRnRCOztBQUlBLE1BQUlELFNBQVMsSUFBSUUsU0FBYixJQUEwQixFQUFFSCxTQUFTLElBQUlHLFNBQVMsR0FBR0YsU0FBM0IsQ0FBOUIsRUFBcUU7QUFDbkUsV0FBTyxLQUFQO0FBQ0Q7O0FBRUQsTUFBSUcsVUFBVSxHQUFHTCxLQUFLLENBQUNNLEdBQU4sQ0FBVVgsS0FBVixDQUFqQjtBQUNBLE1BQUlZLFVBQVUsR0FBR1AsS0FBSyxDQUFDTSxHQUFOLENBQVVWLEtBQVYsQ0FBakI7O0FBQ0EsTUFBSVMsVUFBVSxJQUFJRSxVQUFsQixFQUE4QjtBQUM1QixXQUFPRixVQUFVLElBQUlULEtBQWQsSUFBdUJXLFVBQVUsSUFBSVosS0FBNUM7QUFDRDs7QUFDRCxNQUFJYSxLQUFLLEdBQUcsQ0FBQyxDQUFiO0FBQUEsTUFDSUMsTUFBTSxHQUFHLElBRGI7QUFBQSxNQUVJQyxJQUFJLEdBQUliLE9BQU8sR0FBR0osc0JBQVgsR0FBcUMsSUFBSUwsUUFBSixFQUFyQyxHQUFvRHVCLFNBRi9EO0FBSUFYLEVBQUFBLEtBQUssQ0FBQ1ksR0FBTixDQUFVakIsS0FBVixFQUFpQkMsS0FBakI7QUFDQUksRUFBQUEsS0FBSyxDQUFDWSxHQUFOLENBQVVoQixLQUFWLEVBQWlCRCxLQUFqQjs7QUFHQSxTQUFPLEVBQUVhLEtBQUYsR0FBVU4sU0FBakIsRUFBNEI7QUFDMUIsUUFBSVcsUUFBUSxHQUFHbEIsS0FBSyxDQUFDYSxLQUFELENBQXBCO0FBQUEsUUFDSU0sUUFBUSxHQUFHbEIsS0FBSyxDQUFDWSxLQUFELENBRHBCOztBQUdBLFFBQUlWLFVBQUosRUFBZ0I7QUFDZCxVQUFJaUIsUUFBUSxHQUFHZCxTQUFTLEdBQ3BCSCxVQUFVLENBQUNnQixRQUFELEVBQVdELFFBQVgsRUFBcUJMLEtBQXJCLEVBQTRCWixLQUE1QixFQUFtQ0QsS0FBbkMsRUFBMENLLEtBQTFDLENBRFUsR0FFcEJGLFVBQVUsQ0FBQ2UsUUFBRCxFQUFXQyxRQUFYLEVBQXFCTixLQUFyQixFQUE0QmIsS0FBNUIsRUFBbUNDLEtBQW5DLEVBQTBDSSxLQUExQyxDQUZkO0FBR0Q7O0FBQ0QsUUFBSWUsUUFBUSxLQUFLSixTQUFqQixFQUE0QjtBQUMxQixVQUFJSSxRQUFKLEVBQWM7QUFDWjtBQUNEOztBQUNETixNQUFBQSxNQUFNLEdBQUcsS0FBVDtBQUNBO0FBQ0Q7O0FBRUQsUUFBSUMsSUFBSixFQUFVO0FBQ1IsVUFBSSxDQUFDcEIsU0FBUyxDQUFDTSxLQUFELEVBQVEsVUFBU2tCLFFBQVQsRUFBbUJFLFFBQW5CLEVBQTZCO0FBQzdDLFlBQUksQ0FBQ3pCLFFBQVEsQ0FBQ21CLElBQUQsRUFBT00sUUFBUCxDQUFULEtBQ0NILFFBQVEsS0FBS0MsUUFBYixJQUF5QmYsU0FBUyxDQUFDYyxRQUFELEVBQVdDLFFBQVgsRUFBcUJqQixPQUFyQixFQUE4QkMsVUFBOUIsRUFBMENFLEtBQTFDLENBRG5DLENBQUosRUFDMEY7QUFDeEYsaUJBQU9VLElBQUksQ0FBQ08sSUFBTCxDQUFVRCxRQUFWLENBQVA7QUFDRDtBQUNGLE9BTFMsQ0FBZCxFQUtRO0FBQ05QLFFBQUFBLE1BQU0sR0FBRyxLQUFUO0FBQ0E7QUFDRDtBQUNGLEtBVkQsTUFVTyxJQUFJLEVBQ0xJLFFBQVEsS0FBS0MsUUFBYixJQUNFZixTQUFTLENBQUNjLFFBQUQsRUFBV0MsUUFBWCxFQUFxQmpCLE9BQXJCLEVBQThCQyxVQUE5QixFQUEwQ0UsS0FBMUMsQ0FGTixDQUFKLEVBR0E7QUFDTFMsTUFBQUEsTUFBTSxHQUFHLEtBQVQ7QUFDQTtBQUNEO0FBQ0Y7O0FBQ0RULEVBQUFBLEtBQUssQ0FBQyxRQUFELENBQUwsQ0FBZ0JMLEtBQWhCO0FBQ0FLLEVBQUFBLEtBQUssQ0FBQyxRQUFELENBQUwsQ0FBZ0JKLEtBQWhCO0FBQ0EsU0FBT2EsTUFBUDtBQUNEOztBQUVEUyxNQUFNLENBQUNDLE9BQVAsR0FBaUJ6QixXQUFqQiIsInNvdXJjZXNDb250ZW50IjpbInZhciBTZXRDYWNoZSA9IHJlcXVpcmUoJy4vX1NldENhY2hlJyksXG4gICAgYXJyYXlTb21lID0gcmVxdWlyZSgnLi9fYXJyYXlTb21lJyksXG4gICAgY2FjaGVIYXMgPSByZXF1aXJlKCcuL19jYWNoZUhhcycpO1xuXG4vKiogVXNlZCB0byBjb21wb3NlIGJpdG1hc2tzIGZvciB2YWx1ZSBjb21wYXJpc29ucy4gKi9cbnZhciBDT01QQVJFX1BBUlRJQUxfRkxBRyA9IDEsXG4gICAgQ09NUEFSRV9VTk9SREVSRURfRkxBRyA9IDI7XG5cbi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlSXNFcXVhbERlZXBgIGZvciBhcnJheXMgd2l0aCBzdXBwb3J0IGZvclxuICogcGFydGlhbCBkZWVwIGNvbXBhcmlzb25zLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7QXJyYXl9IG90aGVyIFRoZSBvdGhlciBhcnJheSB0byBjb21wYXJlLlxuICogQHBhcmFtIHtudW1iZXJ9IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuIFNlZSBgYmFzZUlzRXF1YWxgIGZvciBtb3JlIGRldGFpbHMuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjdXN0b21pemVyIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY29tcGFyaXNvbnMuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBlcXVhbEZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGRldGVybWluZSBlcXVpdmFsZW50cyBvZiB2YWx1ZXMuXG4gKiBAcGFyYW0ge09iamVjdH0gc3RhY2sgVHJhY2tzIHRyYXZlcnNlZCBgYXJyYXlgIGFuZCBgb3RoZXJgIG9iamVjdHMuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGFycmF5cyBhcmUgZXF1aXZhbGVudCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBlcXVhbEFycmF5cyhhcnJheSwgb3RoZXIsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGVxdWFsRnVuYywgc3RhY2spIHtcbiAgdmFyIGlzUGFydGlhbCA9IGJpdG1hc2sgJiBDT01QQVJFX1BBUlRJQUxfRkxBRyxcbiAgICAgIGFyckxlbmd0aCA9IGFycmF5Lmxlbmd0aCxcbiAgICAgIG90aExlbmd0aCA9IG90aGVyLmxlbmd0aDtcblxuICBpZiAoYXJyTGVuZ3RoICE9IG90aExlbmd0aCAmJiAhKGlzUGFydGlhbCAmJiBvdGhMZW5ndGggPiBhcnJMZW5ndGgpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIC8vIENoZWNrIHRoYXQgY3ljbGljIHZhbHVlcyBhcmUgZXF1YWwuXG4gIHZhciBhcnJTdGFja2VkID0gc3RhY2suZ2V0KGFycmF5KTtcbiAgdmFyIG90aFN0YWNrZWQgPSBzdGFjay5nZXQob3RoZXIpO1xuICBpZiAoYXJyU3RhY2tlZCAmJiBvdGhTdGFja2VkKSB7XG4gICAgcmV0dXJuIGFyclN0YWNrZWQgPT0gb3RoZXIgJiYgb3RoU3RhY2tlZCA9PSBhcnJheTtcbiAgfVxuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIHJlc3VsdCA9IHRydWUsXG4gICAgICBzZWVuID0gKGJpdG1hc2sgJiBDT01QQVJFX1VOT1JERVJFRF9GTEFHKSA/IG5ldyBTZXRDYWNoZSA6IHVuZGVmaW5lZDtcblxuICBzdGFjay5zZXQoYXJyYXksIG90aGVyKTtcbiAgc3RhY2suc2V0KG90aGVyLCBhcnJheSk7XG5cbiAgLy8gSWdub3JlIG5vbi1pbmRleCBwcm9wZXJ0aWVzLlxuICB3aGlsZSAoKytpbmRleCA8IGFyckxlbmd0aCkge1xuICAgIHZhciBhcnJWYWx1ZSA9IGFycmF5W2luZGV4XSxcbiAgICAgICAgb3RoVmFsdWUgPSBvdGhlcltpbmRleF07XG5cbiAgICBpZiAoY3VzdG9taXplcikge1xuICAgICAgdmFyIGNvbXBhcmVkID0gaXNQYXJ0aWFsXG4gICAgICAgID8gY3VzdG9taXplcihvdGhWYWx1ZSwgYXJyVmFsdWUsIGluZGV4LCBvdGhlciwgYXJyYXksIHN0YWNrKVxuICAgICAgICA6IGN1c3RvbWl6ZXIoYXJyVmFsdWUsIG90aFZhbHVlLCBpbmRleCwgYXJyYXksIG90aGVyLCBzdGFjayk7XG4gICAgfVxuICAgIGlmIChjb21wYXJlZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBpZiAoY29tcGFyZWQpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICByZXN1bHQgPSBmYWxzZTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICAvLyBSZWN1cnNpdmVseSBjb21wYXJlIGFycmF5cyAoc3VzY2VwdGlibGUgdG8gY2FsbCBzdGFjayBsaW1pdHMpLlxuICAgIGlmIChzZWVuKSB7XG4gICAgICBpZiAoIWFycmF5U29tZShvdGhlciwgZnVuY3Rpb24ob3RoVmFsdWUsIG90aEluZGV4KSB7XG4gICAgICAgICAgICBpZiAoIWNhY2hlSGFzKHNlZW4sIG90aEluZGV4KSAmJlxuICAgICAgICAgICAgICAgIChhcnJWYWx1ZSA9PT0gb3RoVmFsdWUgfHwgZXF1YWxGdW5jKGFyclZhbHVlLCBvdGhWYWx1ZSwgYml0bWFzaywgY3VzdG9taXplciwgc3RhY2spKSkge1xuICAgICAgICAgICAgICByZXR1cm4gc2Vlbi5wdXNoKG90aEluZGV4KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KSkge1xuICAgICAgICByZXN1bHQgPSBmYWxzZTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICghKFxuICAgICAgICAgIGFyclZhbHVlID09PSBvdGhWYWx1ZSB8fFxuICAgICAgICAgICAgZXF1YWxGdW5jKGFyclZhbHVlLCBvdGhWYWx1ZSwgYml0bWFzaywgY3VzdG9taXplciwgc3RhY2spXG4gICAgICAgICkpIHtcbiAgICAgIHJlc3VsdCA9IGZhbHNlO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG4gIHN0YWNrWydkZWxldGUnXShhcnJheSk7XG4gIHN0YWNrWydkZWxldGUnXShvdGhlcik7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZXF1YWxBcnJheXM7XG4iXX0=