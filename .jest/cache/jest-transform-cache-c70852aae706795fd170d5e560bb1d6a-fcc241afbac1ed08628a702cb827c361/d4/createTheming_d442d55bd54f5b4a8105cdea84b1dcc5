ab597fc52a3fa3e8c259386915be64ab
"use strict";

exports.__esModule = true;
exports.default = createTheming;

var React = _interopRequireWildcard(require("react"));

var _deepmerge = _interopRequireDefault(require("deepmerge"));

var _createThemeProvider = _interopRequireDefault(require("./createThemeProvider"));

var _createWithTheme = _interopRequireDefault(require("./createWithTheme"));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  } else {
    var newObj = {};

    if (obj != null) {
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) {
          var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};

          if (desc.get || desc.set) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
    }

    newObj.default = obj;
    return newObj;
  }
}

function createTheming(defaultTheme) {
  var ThemeContext = React.createContext(defaultTheme);
  var ThemeProvider = (0, _createThemeProvider.default)(defaultTheme, ThemeContext);
  var withTheme = (0, _createWithTheme.default)(ThemeProvider, ThemeContext);

  var useTheme = function useTheme(overrides) {
    var theme = React.useContext(ThemeContext);
    var result = React.useMemo(function () {
      return theme && overrides ? (0, _deepmerge.default)(theme, overrides) : theme || overrides;
    }, [theme, overrides]);
    return result;
  };

  return {
    ThemeContext: ThemeContext,
    ThemeProvider: ThemeProvider,
    withTheme: withTheme,
    useTheme: useTheme
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJtYXBwaW5ncyI6Ijs7Ozs7QUFFQTs7QUFDQTs7QUFDQTs7QUFDQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBV2UsU0FBU0EsYUFBVCxDQUNiQyxZQURhLEVBRUc7QUFDaEIsTUFBTUMsWUFBOEIsR0FBR0MsS0FBSyxDQUFDQyxhQUFORCxDQUFvQkYsWUFBcEJFLENBQXZDO0FBRUEsTUFBTUUsYUFBbUMsR0FBRyxrQ0FDMUNKLFlBRDBDLEVBRTFDQyxZQUYwQyxDQUE1QztBQUtBLE1BQU1JLFNBQTJCLEdBQUcsOEJBQ2xDRCxhQURrQyxFQUVsQ0gsWUFGa0MsQ0FBcEM7O0FBS0EsTUFBTUssUUFBUSxHQUFHLFNBQVhBLFFBQVcsQ0FBQ0MsU0FBRCxFQUFrQztBQUNqRCxRQUFNQyxLQUFLLEdBQUdOLEtBQUssQ0FBQ08sVUFBTlAsQ0FBaUJELFlBQWpCQyxDQUFkO0FBQ0EsUUFBTVEsTUFBTSxHQUFHUixLQUFLLENBQUNTLE9BQU5ULENBQ2I7QUFBQSxhQUNFTSxLQUFLLElBQUlELFNBQVRDLEdBQXFCLHdCQUFVQSxLQUFWLEVBQWlCRCxTQUFqQixDQUFyQkMsR0FBbURBLEtBQUssSUFBSUQsU0FEOUQ7QUFEYSxPQUdiLENBQUNDLEtBQUQsRUFBUUQsU0FBUixDQUhhTCxDQUFmO0FBTUEsV0FBT1EsTUFBUDtBQVJGOztBQVdBLFNBQU87QUFDTFQsZ0JBQVksRUFBWkEsWUFESztBQUVMRyxpQkFBYSxFQUFiQSxhQUZLO0FBR0xDLGFBQVMsRUFBVEEsU0FISztBQUlMQyxZQUFRLEVBQVJBO0FBSkssR0FBUDtBQU1EIiwibmFtZXMiOlsiY3JlYXRlVGhlbWluZyIsImRlZmF1bHRUaGVtZSIsIlRoZW1lQ29udGV4dCIsIlJlYWN0IiwiY3JlYXRlQ29udGV4dCIsIlRoZW1lUHJvdmlkZXIiLCJ3aXRoVGhlbWUiLCJ1c2VUaGVtZSIsIm92ZXJyaWRlcyIsInRoZW1lIiwidXNlQ29udGV4dCIsInJlc3VsdCIsInVzZU1lbW8iXSwic291cmNlcyI6WyIuLi9zcmMvY3JlYXRlVGhlbWluZy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiBAZmxvdyAqL1xuXG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgZGVlcG1lcmdlIGZyb20gJ2RlZXBtZXJnZSc7XG5pbXBvcnQgY3JlYXRlVGhlbWVQcm92aWRlciBmcm9tICcuL2NyZWF0ZVRoZW1lUHJvdmlkZXInO1xuaW1wb3J0IGNyZWF0ZVdpdGhUaGVtZSBmcm9tICcuL2NyZWF0ZVdpdGhUaGVtZSc7XG5pbXBvcnQgdHlwZSB7IFdpdGhUaGVtZVR5cGUgfSBmcm9tICcuL2NyZWF0ZVdpdGhUaGVtZSc7XG5pbXBvcnQgdHlwZSB7IFRoZW1lUHJvdmlkZXJUeXBlIH0gZnJvbSAnLi9jcmVhdGVUaGVtZVByb3ZpZGVyJztcbmltcG9ydCB0eXBlIHsgJERlZXBTaGFwZSB9IGZyb20gJy4vdHlwZXMnO1xuXG5leHBvcnQgdHlwZSBUaGVtaW5nVHlwZTxUPiA9IHtcbiAgVGhlbWVQcm92aWRlcjogVGhlbWVQcm92aWRlclR5cGU8VD4sXG4gIHdpdGhUaGVtZTogV2l0aFRoZW1lVHlwZTxUPixcbiAgdXNlVGhlbWUob3ZlcnJpZGVzPzogJERlZXBTaGFwZTxUPik6IFQsXG59O1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjcmVhdGVUaGVtaW5nPFQ6IE9iamVjdD4oXG4gIGRlZmF1bHRUaGVtZTogVFxuKTogVGhlbWluZ1R5cGU8VD4ge1xuICBjb25zdCBUaGVtZUNvbnRleHQ6IFJlYWN0LkNvbnRleHQ8VD4gPSBSZWFjdC5jcmVhdGVDb250ZXh0KGRlZmF1bHRUaGVtZSk7XG5cbiAgY29uc3QgVGhlbWVQcm92aWRlcjogVGhlbWVQcm92aWRlclR5cGU8VD4gPSBjcmVhdGVUaGVtZVByb3ZpZGVyKFxuICAgIGRlZmF1bHRUaGVtZSxcbiAgICBUaGVtZUNvbnRleHRcbiAgKTtcblxuICBjb25zdCB3aXRoVGhlbWU6IFdpdGhUaGVtZVR5cGU8VD4gPSBjcmVhdGVXaXRoVGhlbWUoXG4gICAgVGhlbWVQcm92aWRlcixcbiAgICBUaGVtZUNvbnRleHRcbiAgKTtcblxuICBjb25zdCB1c2VUaGVtZSA9IChvdmVycmlkZXM/OiAkRGVlcFNoYXBlPFQ+KTogVCA9PiB7XG4gICAgY29uc3QgdGhlbWUgPSBSZWFjdC51c2VDb250ZXh0KFRoZW1lQ29udGV4dCk7XG4gICAgY29uc3QgcmVzdWx0ID0gUmVhY3QudXNlTWVtbyhcbiAgICAgICgpID0+XG4gICAgICAgIHRoZW1lICYmIG92ZXJyaWRlcyA/IGRlZXBtZXJnZSh0aGVtZSwgb3ZlcnJpZGVzKSA6IHRoZW1lIHx8IG92ZXJyaWRlcyxcbiAgICAgIFt0aGVtZSwgb3ZlcnJpZGVzXVxuICAgICk7XG5cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuXG4gIHJldHVybiB7XG4gICAgVGhlbWVDb250ZXh0LFxuICAgIFRoZW1lUHJvdmlkZXIsXG4gICAgd2l0aFRoZW1lLFxuICAgIHVzZVRoZW1lLFxuICB9O1xufVxuIl19