{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;IAQSA,qB;uBACPC,O,EACAC,Q,EACA;AAEA,QAAIC,aAAJ;;AACA,QAAID,QAAQ,KAAKE,SAAjB,EAA4B;AAC1BD,mBAAa,GAAG;AACdE,sBAAc,EAAEJ,OAAO,CAACK;AADV,OAAhBH;AADF,WAIO;AACLA,mBAAa,GAAG;AACdE,sBAAc,EAAEJ,OAAO,CAACK,QAARL,GAAmBC,QAAQ,CAACI;AAD9B,OAAhBH;AAGD;;AAED,sCAAYF,OAAZ,EAAwBE,aAAxB;AACD,G;;;;;;;;;;;;IAEYI,e;;;;;AAIXC,6BAAc;AAAA;;AAAA;AACZ;AAEA,UAAKC,WAAL,GAAmB,wBAAnB;AAHY;AAIb;;;;WAEDC,kBACEC,QADFD,EAME;AAEA,WAAKE,QAAL,CAAcZ,qBAAd,GAAsCA,qBAAtC;AACA,uHAAsBW,QAAtB;AACD;;;EApBkCE,6B","names":["changeEventCalculator","current","previous","changePayload","undefined","rotationChange","rotation","RotationGesture","constructor","handlerName","onChange","callback","handlers","ContinousBaseGesture"],"sources":["rotationGesture.ts"],"sourcesContent":["import { ContinousBaseGesture } from './gesture';\nimport { RotationGestureHandlerEventPayload } from '../RotationGestureHandler';\nimport { GestureUpdateEvent } from '../gestureHandlerCommon';\n\ntype RotationGestureChangeEventPayload = {\n  rotationChange: number;\n};\n\nfunction changeEventCalculator(\n  current: GestureUpdateEvent<RotationGestureHandlerEventPayload>,\n  previous?: GestureUpdateEvent<RotationGestureHandlerEventPayload>\n) {\n  'worklet';\n  let changePayload: RotationGestureChangeEventPayload;\n  if (previous === undefined) {\n    changePayload = {\n      rotationChange: current.rotation,\n    };\n  } else {\n    changePayload = {\n      rotationChange: current.rotation - previous.rotation,\n    };\n  }\n\n  return { ...current, ...changePayload };\n}\n\nexport class RotationGesture extends ContinousBaseGesture<\n  RotationGestureHandlerEventPayload,\n  RotationGestureChangeEventPayload\n> {\n  constructor() {\n    super();\n\n    this.handlerName = 'RotationGestureHandler';\n  }\n\n  onChange(\n    callback: (\n      event: GestureUpdateEvent<\n        RotationGestureHandlerEventPayload & RotationGestureChangeEventPayload\n      >\n    ) => void\n  ) {\n    // @ts-ignore TS being overprotective, RotationGestureHandlerEventPayload is Record\n    this.handlers.changeEventCalculator = changeEventCalculator;\n    return super.onChange(callback);\n  }\n}\n\nexport type RotationGestureType = InstanceType<typeof RotationGesture>;\n"]}