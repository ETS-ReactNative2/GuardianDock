{"version":3,"sources":["_EventSubscription.js"],"names":["_EventSubscription","subscriber","removeSubscription","module","exports"],"mappings":"AAUA;;;;;;;;IASMA,kB;AAYJ,8BAAYC,UAAZ,EAAmE;AAAA;AACjE,SAAKA,UAAL,GAAkBA,UAAlB;AACD;;;;WAKD,kBAAe;AACb,WAAKA,UAAL,CAAgBC,kBAAhB,CAAmC,IAAnC;AACD;;;;;AAGHC,MAAM,CAACC,OAAP,GAAiBJ,kBAAjB","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow strict\n */\n\n'use strict';\n\nimport {type EventSubscription} from './EventSubscription';\nimport type EventSubscriptionVendor from './_EventSubscriptionVendor';\n\n/**\n * EventSubscription represents a subscription to a particular event. It can\n * remove its own subscription.\n */\nclass _EventSubscription<EventDefinitions: {...}, K: $Keys<EventDefinitions>>\n  implements EventSubscription {\n  eventType: K;\n  key: number;\n  subscriber: EventSubscriptionVendor<EventDefinitions>;\n  listener: ?(...$ElementType<EventDefinitions, K>) => mixed;\n  context: ?$FlowFixMe;\n\n  /**\n   * @param {EventSubscriptionVendor} subscriber the subscriber that controls\n   *   this subscription.\n   */\n  constructor(subscriber: EventSubscriptionVendor<EventDefinitions>) {\n    this.subscriber = subscriber;\n  }\n\n  /**\n   * Removes this subscription from the subscriber that controls it.\n   */\n  remove(): void {\n    this.subscriber.removeSubscription(this);\n  }\n}\n\nmodule.exports = _EventSubscription;\n"]}