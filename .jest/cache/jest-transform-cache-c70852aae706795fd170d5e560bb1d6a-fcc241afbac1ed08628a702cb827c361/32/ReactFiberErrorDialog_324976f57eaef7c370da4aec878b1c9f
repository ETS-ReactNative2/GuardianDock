99fe2fad383f3e618e1e57b136b37c14
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _ExceptionsManager = require("./ExceptionsManager");

var ReactFiberErrorDialog = {
  showErrorDialog: function showErrorDialog(_ref) {
    var componentStack = _ref.componentStack,
        errorValue = _ref.error;
    var error;

    if (errorValue instanceof Error) {
      error = errorValue;
    } else if (typeof errorValue === 'string') {
      error = new _ExceptionsManager.SyntheticError(errorValue);
    } else {
      error = new _ExceptionsManager.SyntheticError('Unspecified error');
    }

    try {
      error.componentStack = componentStack;
      error.isComponentError = true;
    } catch (_unused) {}

    (0, _ExceptionsManager.handleException)(error, false);
    return false;
  }
};
var _default = ReactFiberErrorDialog;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlJlYWN0RmliZXJFcnJvckRpYWxvZy5qcyJdLCJuYW1lcyI6WyJSZWFjdEZpYmVyRXJyb3JEaWFsb2ciLCJzaG93RXJyb3JEaWFsb2ciLCJjb21wb25lbnRTdGFjayIsImVycm9yVmFsdWUiLCJlcnJvciIsIkVycm9yIiwiU3ludGhldGljRXJyb3IiLCJpc0NvbXBvbmVudEVycm9yIl0sIm1hcHBpbmdzIjoiOzs7OztBQVVBOztBQVdBLElBQU1BLHFCQUFxQixHQUFHO0FBSzVCQyxFQUFBQSxlQUw0QixpQ0FLaUQ7QUFBQSxRQUE1REMsY0FBNEQsUUFBNURBLGNBQTREO0FBQUEsUUFBckNDLFVBQXFDLFFBQTVDQyxLQUE0QztBQUMzRSxRQUFJQSxLQUFKOztBQUlBLFFBQUlELFVBQVUsWUFBWUUsS0FBMUIsRUFBaUM7QUFHL0JELE1BQUFBLEtBQUssR0FBSUQsVUFBVDtBQUNELEtBSkQsTUFJTyxJQUFJLE9BQU9BLFVBQVAsS0FBc0IsUUFBMUIsRUFBb0M7QUFHekNDLE1BQUFBLEtBQUssR0FBSSxJQUFJRSxpQ0FBSixDQUFtQkgsVUFBbkIsQ0FBVDtBQUNELEtBSk0sTUFJQTtBQUdMQyxNQUFBQSxLQUFLLEdBQUksSUFBSUUsaUNBQUosQ0FBbUIsbUJBQW5CLENBQVQ7QUFDRDs7QUFDRCxRQUFJO0FBQ0ZGLE1BQUFBLEtBQUssQ0FBQ0YsY0FBTixHQUF1QkEsY0FBdkI7QUFDQUUsTUFBQUEsS0FBSyxDQUFDRyxnQkFBTixHQUF5QixJQUF6QjtBQUNELEtBSEQsQ0FHRSxnQkFBTSxDQUVQOztBQUVELDRDQUFnQkgsS0FBaEIsRUFBdUIsS0FBdkI7QUFNQSxXQUFPLEtBQVA7QUFDRDtBQXJDMkIsQ0FBOUI7ZUF3Q2VKLHFCIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZm9ybWF0XG4gKiBAZmxvdyBzdHJpY3QtbG9jYWxcbiAqL1xuXG5pbXBvcnQge2hhbmRsZUV4Y2VwdGlvbiwgU3ludGhldGljRXJyb3J9IGZyb20gJy4vRXhjZXB0aW9uc01hbmFnZXInO1xuXG5pbXBvcnQgdHlwZSB7RXh0ZW5kZWRFcnJvcn0gZnJvbSAnLi9FeHRlbmRlZEVycm9yJztcblxuZXhwb3J0IHR5cGUgQ2FwdHVyZWRFcnJvciA9IHtcbiAgK2NvbXBvbmVudFN0YWNrOiBzdHJpbmcsXG4gICtlcnJvcjogbWl4ZWQsXG4gICtlcnJvckJvdW5kYXJ5OiA/ey4uLn0sXG4gIC4uLlxufTtcblxuY29uc3QgUmVhY3RGaWJlckVycm9yRGlhbG9nID0ge1xuICAvKipcbiAgICogSW50ZXJjZXB0IGxpZmVjeWNsZSBlcnJvcnMgYW5kIGVuc3VyZSB0aGV5IGFyZSBzaG93biB3aXRoIHRoZSBjb3JyZWN0IHN0YWNrXG4gICAqIHRyYWNlIHdpdGhpbiB0aGUgbmF0aXZlIHJlZGJveCBjb21wb25lbnQuXG4gICAqL1xuICBzaG93RXJyb3JEaWFsb2coe2NvbXBvbmVudFN0YWNrLCBlcnJvcjogZXJyb3JWYWx1ZX06IENhcHR1cmVkRXJyb3IpOiBib29sZWFuIHtcbiAgICBsZXQgZXJyb3I6ID9FeHRlbmRlZEVycm9yO1xuXG4gICAgLy8gVHlwaWNhbGx5LCBgZXJyb3JWYWx1ZWAgc2hvdWxkIGJlIGFuIGVycm9yLiBIb3dldmVyLCBvdGhlciB2YWx1ZXMgc3VjaCBhc1xuICAgIC8vIHN0cmluZ3MgKG9yIGV2ZW4gbnVsbCkgYXJlIHNvbWV0aW1lcyB0aHJvd24uXG4gICAgaWYgKGVycm9yVmFsdWUgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgICAgLyogJEZsb3dGaXhNZVtjbGFzcy1vYmplY3Qtc3VidHlwaW5nXSBhZGRlZCB3aGVuIGltcHJvdmluZyB0eXBpbmcgZm9yXG4gICAgICAgKiB0aGlzIHBhcmFtZXRlcnMgKi9cbiAgICAgIGVycm9yID0gKGVycm9yVmFsdWU6IEV4dGVuZGVkRXJyb3IpO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIGVycm9yVmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAvKiAkRmxvd0ZpeE1lW2NsYXNzLW9iamVjdC1zdWJ0eXBpbmddIGFkZGVkIHdoZW4gaW1wcm92aW5nIHR5cGluZyBmb3JcbiAgICAgICAqIHRoaXMgcGFyYW1ldGVycyAqL1xuICAgICAgZXJyb3IgPSAobmV3IFN5bnRoZXRpY0Vycm9yKGVycm9yVmFsdWUpOiBFeHRlbmRlZEVycm9yKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLyogJEZsb3dGaXhNZVtjbGFzcy1vYmplY3Qtc3VidHlwaW5nXSBhZGRlZCB3aGVuIGltcHJvdmluZyB0eXBpbmcgZm9yXG4gICAgICAgKiB0aGlzIHBhcmFtZXRlcnMgKi9cbiAgICAgIGVycm9yID0gKG5ldyBTeW50aGV0aWNFcnJvcignVW5zcGVjaWZpZWQgZXJyb3InKTogRXh0ZW5kZWRFcnJvcik7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICBlcnJvci5jb21wb25lbnRTdGFjayA9IGNvbXBvbmVudFN0YWNrO1xuICAgICAgZXJyb3IuaXNDb21wb25lbnRFcnJvciA9IHRydWU7XG4gICAgfSBjYXRjaCB7XG4gICAgICAvLyBJZ25vcmVkLlxuICAgIH1cblxuICAgIGhhbmRsZUV4Y2VwdGlvbihlcnJvciwgZmFsc2UpO1xuXG4gICAgLy8gUmV0dXJuIGZhbHNlIGhlcmUgdG8gcHJldmVudCBSZWFjdEZpYmVyRXJyb3JMb2dnZXIgZGVmYXVsdCBiZWhhdmlvciBvZlxuICAgIC8vIGxvZ2dpbmcgZXJyb3IgZGV0YWlscyB0byBjb25zb2xlLmVycm9yLiBDYWxscyB0byBjb25zb2xlLmVycm9yIGFyZVxuICAgIC8vIGF1dG9tYXRpY2FsbHkgcm91dGVkIHRvIHRoZSBuYXRpdmUgcmVkYm94IGNvbnRyb2xsZXIsIHdoaWNoIHdlJ3ZlIGFscmVhZHlcbiAgICAvLyBkb25lIGFib3ZlIGJ5IGNhbGxpbmcgRXhjZXB0aW9uc01hbmFnZXIuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9LFxufTtcblxuZXhwb3J0IGRlZmF1bHQgUmVhY3RGaWJlckVycm9yRGlhbG9nO1xuIl19