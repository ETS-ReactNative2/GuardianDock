57560af80ccd9ab8a5f96367bede8530
"use strict";

var _interopRequireDefault2 = require("@babel/runtime/helpers/interopRequireDefault");

var _extends3 = _interopRequireDefault2(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault2(require("@babel/runtime/helpers/objectWithoutProperties"));

var _excluded = ["clearAccessibilityLabel", "clearIcon", "icon", "iconColor", "inputStyle", "onIconPress", "placeholder", "searchAccessibilityLabel", "style", "theme", "value"];
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var React = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

var _color = _interopRequireDefault(require("color"));

var _IconButton = _interopRequireDefault(require("./IconButton"));

var _Surface = _interopRequireDefault(require("./Surface"));

var _theming = require("../core/theming");

var _MaterialCommunityIcon = _interopRequireDefault(require("./MaterialCommunityIcon"));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

function _getRequireWildcardCache() {
  if (typeof WeakMap !== "function") return null;
  var cache = new WeakMap();

  _getRequireWildcardCache = function _getRequireWildcardCache() {
    return cache;
  };

  return cache;
}

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  }

  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }

  var cache = _getRequireWildcardCache();

  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }

  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }

  newObj.default = obj;

  if (cache) {
    cache.set(obj, newObj);
  }

  return newObj;
}

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

var Searchbar = React.forwardRef(function (_ref, ref) {
  var _ref$clearAccessibili = _ref.clearAccessibilityLabel,
      clearAccessibilityLabel = _ref$clearAccessibili === void 0 ? 'clear' : _ref$clearAccessibili,
      clearIcon = _ref.clearIcon,
      icon = _ref.icon,
      customIconColor = _ref.iconColor,
      inputStyle = _ref.inputStyle,
      onIconPress = _ref.onIconPress,
      placeholder = _ref.placeholder,
      _ref$searchAccessibil = _ref.searchAccessibilityLabel,
      searchAccessibilityLabel = _ref$searchAccessibil === void 0 ? 'search' : _ref$searchAccessibil,
      style = _ref.style,
      theme = _ref.theme,
      value = _ref.value,
      rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);
  var root = React.useRef(null);
  React.useImperativeHandle(ref, function () {
    var input = root.current;

    if (input) {
      return {
        focus: function focus() {
          return input.focus();
        },
        clear: function clear() {
          return input.clear();
        },
        setNativeProps: function setNativeProps(args) {
          return input.setNativeProps(args);
        },
        isFocused: function isFocused() {
          return input.isFocused();
        },
        blur: function blur() {
          return input.blur();
        }
      };
    }

    var noop = function noop() {
      throw new Error('TextInput is not available');
    };

    return {
      focus: noop,
      clear: noop,
      setNativeProps: noop,
      isFocused: noop,
      blur: noop
    };
  });

  var handleClearPress = function handleClearPress() {
    var _root$current, _rest$onChangeText;

    (_root$current = root.current) === null || _root$current === void 0 ? void 0 : _root$current.clear();
    (_rest$onChangeText = rest.onChangeText) === null || _rest$onChangeText === void 0 ? void 0 : _rest$onChangeText.call(rest, '');
  };

  var colors = theme.colors,
      roundness = theme.roundness,
      dark = theme.dark,
      fonts = theme.fonts;
  var textColor = colors.text;
  var font = fonts.regular;
  var iconColor = customIconColor || (dark ? textColor : (0, _color.default)(textColor).alpha(0.54).rgb().string());
  var rippleColor = (0, _color.default)(textColor).alpha(0.32).rgb().string();
  return React.createElement(_Surface.default, {
    style: [{
      borderRadius: roundness,
      elevation: 4
    }, styles.container, style]
  }, React.createElement(_IconButton.default, {
    accessibilityTraits: "button",
    accessibilityComponentType: "button",
    accessibilityRole: "button",
    borderless: true,
    rippleColor: rippleColor,
    onPress: onIconPress,
    color: iconColor,
    icon: icon || function (_ref2) {
      var size = _ref2.size,
          color = _ref2.color;
      return React.createElement(_MaterialCommunityIcon.default, {
        name: "magnify",
        color: color,
        size: size,
        direction: _reactNative.I18nManager.isRTL ? 'rtl' : 'ltr'
      });
    },
    accessibilityLabel: searchAccessibilityLabel
  }), React.createElement(_reactNative.TextInput, _extends({
    style: [styles.input, (0, _extends3.default)({
      color: textColor
    }, font, _reactNative.Platform.select({
      web: {
        outline: 'none'
      }
    })), inputStyle],
    placeholder: placeholder || '',
    placeholderTextColor: colors.placeholder,
    selectionColor: colors.primary,
    underlineColorAndroid: "transparent",
    returnKeyType: "search",
    keyboardAppearance: dark ? 'dark' : 'light',
    accessibilityTraits: "search",
    accessibilityRole: "search",
    ref: root,
    value: value
  }, rest)), React.createElement(_IconButton.default, {
    borderless: true,
    disabled: !value,
    accessibilityLabel: clearAccessibilityLabel,
    color: value ? iconColor : 'rgba(255, 255, 255, 0)',
    rippleColor: rippleColor,
    onPress: handleClearPress,
    icon: clearIcon || function (_ref3) {
      var size = _ref3.size,
          color = _ref3.color;
      return React.createElement(_MaterialCommunityIcon.default, {
        name: "close",
        color: color,
        size: size,
        direction: _reactNative.I18nManager.isRTL ? 'rtl' : 'ltr'
      });
    },
    accessibilityTraits: "button",
    accessibilityComponentType: "button",
    accessibilityRole: "button"
  }));
});

var styles = _reactNative.StyleSheet.create({
  container: {
    flexDirection: 'row',
    alignItems: 'center'
  },
  input: {
    flex: 1,
    fontSize: 18,
    paddingLeft: 8,
    alignSelf: 'stretch',
    textAlign: _reactNative.I18nManager.isRTL ? 'right' : 'left',
    minWidth: 0
  }
});

var _default = (0, _theming.withTheme)(Searchbar);

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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a0I7QUFDL0IzQixXQUFTLEVBQUU7QUFDVDZCLGlCQUFhLEVBQUUsS0FETjtBQUVUQyxjQUFVLEVBQUU7QUFGSCxHQURvQjtBQUsvQjFELE9BQUssRUFBRTtBQUNMMkQsUUFBSSxFQUFFLENBREQ7QUFFTEMsWUFBUSxFQUFFLEVBRkw7QUFHTEMsZUFBVyxFQUFFLENBSFI7QUFJTEMsYUFBUyxFQUFFLFNBSk47QUFLTEMsYUFBUyxFQUFFdkIseUJBQVlDLEtBQVpELEdBQW9CLE9BQXBCQSxHQUE4QixNQUxwQztBQU1Md0IsWUFBUSxFQUFFO0FBTkw7QUFMd0IsQ0FBbEJULENBQWY7O2VBZWUsd0JBQVUzRSxTQUFWIiwibmFtZXMiOlsiU2VhcmNoYmFyIiwiUmVhY3QiLCJmb3J3YXJkUmVmIiwicmVmIiwiY2xlYXJBY2Nlc3NpYmlsaXR5TGFiZWwiLCJjbGVhckljb24iLCJpY29uIiwiY3VzdG9tSWNvbkNvbG9yIiwiaWNvbkNvbG9yIiwiaW5wdXRTdHlsZSIsIm9uSWNvblByZXNzIiwicGxhY2Vob2xkZXIiLCJzZWFyY2hBY2Nlc3NpYmlsaXR5TGFiZWwiLCJzdHlsZSIsInRoZW1lIiwidmFsdWUiLCJyZXN0Iiwicm9vdCIsInVzZVJlZiIsInVzZUltcGVyYXRpdmVIYW5kbGUiLCJpbnB1dCIsImN1cnJlbnQiLCJmb2N1cyIsImNsZWFyIiwic2V0TmF0aXZlUHJvcHMiLCJhcmdzIiwiaXNGb2N1c2VkIiwiYmx1ciIsIm5vb3AiLCJFcnJvciIsImhhbmRsZUNsZWFyUHJlc3MiLCJvbkNoYW5nZVRleHQiLCJjb2xvcnMiLCJyb3VuZG5lc3MiLCJkYXJrIiwiZm9udHMiLCJ0ZXh0Q29sb3IiLCJ0ZXh0IiwiZm9udCIsInJlZ3VsYXIiLCJhbHBoYSIsInJnYiIsInN0cmluZyIsInJpcHBsZUNvbG9yIiwiX1N1cmZhY2UiLCJib3JkZXJSYWRpdXMiLCJlbGV2YXRpb24iLCJzdHlsZXMiLCJjb250YWluZXIiLCJfSWNvbkJ1dHRvbiIsImFjY2Vzc2liaWxpdHlUcmFpdHMiLCJhY2Nlc3NpYmlsaXR5Q29tcG9uZW50VHlwZSIsImFjY2Vzc2liaWxpdHlSb2xlIiwiYm9yZGVybGVzcyIsIm9uUHJlc3MiLCJjb2xvciIsInNpemUiLCJfTWF0ZXJpYWxDb21tdW5pdHlJY29uIiwibmFtZSIsImRpcmVjdGlvbiIsIkkxOG5NYW5hZ2VyIiwiaXNSVEwiLCJhY2Nlc3NpYmlsaXR5TGFiZWwiLCJfcmVhY3ROYXRpdmUiLCJQbGF0Zm9ybSIsInNlbGVjdCIsIndlYiIsIm91dGxpbmUiLCJwbGFjZWhvbGRlclRleHRDb2xvciIsInNlbGVjdGlvbkNvbG9yIiwicHJpbWFyeSIsInVuZGVybGluZUNvbG9yQW5kcm9pZCIsInJldHVybktleVR5cGUiLCJrZXlib2FyZEFwcGVhcmFuY2UiLCJkaXNhYmxlZCIsIlN0eWxlU2hlZXQiLCJjcmVhdGUiLCJmbGV4RGlyZWN0aW9uIiwiYWxpZ25JdGVtcyIsImZsZXgiLCJmb250U2l6ZSIsInBhZGRpbmdMZWZ0IiwiYWxpZ25TZWxmIiwidGV4dEFsaWduIiwibWluV2lkdGgiXSwic291cmNlcyI6WyJTZWFyY2hiYXIudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7XG4gIFBsYXRmb3JtLFxuICBTdHlsZVNoZWV0LFxuICBTdHlsZVByb3AsXG4gIFRleHRJbnB1dCxcbiAgSTE4bk1hbmFnZXIsXG4gIFRleHRJbnB1dFByb3BzLFxuICBWaWV3U3R5bGUsXG4gIFRleHRTdHlsZSxcbn0gZnJvbSAncmVhY3QtbmF0aXZlJztcblxuaW1wb3J0IGNvbG9yIGZyb20gJ2NvbG9yJztcbmltcG9ydCBJY29uQnV0dG9uIGZyb20gJy4vSWNvbkJ1dHRvbic7XG5pbXBvcnQgU3VyZmFjZSBmcm9tICcuL1N1cmZhY2UnO1xuaW1wb3J0IHsgd2l0aFRoZW1lIH0gZnJvbSAnLi4vY29yZS90aGVtaW5nJztcbmltcG9ydCB0eXBlIHsgSWNvblNvdXJjZSB9IGZyb20gJy4vSWNvbic7XG5pbXBvcnQgTWF0ZXJpYWxDb21tdW5pdHlJY29uIGZyb20gJy4vTWF0ZXJpYWxDb21tdW5pdHlJY29uJztcblxudHlwZSBQcm9wcyA9IFJlYWN0LkNvbXBvbmVudFByb3BzV2l0aFJlZjx0eXBlb2YgVGV4dElucHV0PiAmIHtcbiAgLyoqXG4gICAqIEFjY2Vzc2liaWxpdHkgbGFiZWwgZm9yIHRoZSBidXR0b24uIFRoaXMgaXMgcmVhZCBieSB0aGUgc2NyZWVuIHJlYWRlciB3aGVuIHRoZSB1c2VyIHRhcHMgdGhlIGJ1dHRvbi5cbiAgICovXG4gIGNsZWFyQWNjZXNzaWJpbGl0eUxhYmVsPzogc3RyaW5nO1xuICAvKipcbiAgICogQWNjZXNzaWJpbGl0eSBsYWJlbCBmb3IgdGhlIGJ1dHRvbi4gVGhpcyBpcyByZWFkIGJ5IHRoZSBzY3JlZW4gcmVhZGVyIHdoZW4gdGhlIHVzZXIgdGFwcyB0aGUgYnV0dG9uLlxuICAgKi9cbiAgc2VhcmNoQWNjZXNzaWJpbGl0eUxhYmVsPzogc3RyaW5nO1xuICAvKipcbiAgICogSGludCB0ZXh0IHNob3duIHdoZW4gdGhlIGlucHV0IGlzIGVtcHR5LlxuICAgKi9cbiAgcGxhY2Vob2xkZXI/OiBzdHJpbmc7XG4gIC8qKlxuICAgKiBUaGUgdmFsdWUgb2YgdGhlIHRleHQgaW5wdXQuXG4gICAqL1xuICB2YWx1ZTogc3RyaW5nO1xuICAvKipcbiAgICogSWNvbiBuYW1lIGZvciB0aGUgbGVmdCBpY29uIGJ1dHRvbiAoc2VlIGBvbkljb25QcmVzc2ApLlxuICAgKi9cbiAgaWNvbj86IEljb25Tb3VyY2U7XG4gIC8qKlxuICAgKiBDYWxsYmFjayB0aGF0IGlzIGNhbGxlZCB3aGVuIHRoZSB0ZXh0IGlucHV0J3MgdGV4dCBjaGFuZ2VzLlxuICAgKi9cbiAgb25DaGFuZ2VUZXh0PzogKHF1ZXJ5OiBzdHJpbmcpID0+IHZvaWQ7XG4gIC8qKlxuICAgKiBDYWxsYmFjayB0byBleGVjdXRlIGlmIHdlIHdhbnQgdGhlIGxlZnQgaWNvbiB0byBhY3QgYXMgYnV0dG9uLlxuICAgKi9cbiAgb25JY29uUHJlc3M/OiAoKSA9PiB2b2lkO1xuICAvKipcbiAgICogU2V0IHN0eWxlIG9mIHRoZSBUZXh0SW5wdXQgY29tcG9uZW50IGluc2lkZSB0aGUgc2VhcmNoYmFyXG4gICAqL1xuICBpbnB1dFN0eWxlPzogU3R5bGVQcm9wPFRleHRTdHlsZT47XG4gIHN0eWxlPzogU3R5bGVQcm9wPFZpZXdTdHlsZT47XG5cbiAgLyoqXG4gICAqIEBvcHRpb25hbFxuICAgKi9cbiAgdGhlbWU6IFJlYWN0TmF0aXZlUGFwZXIuVGhlbWU7XG4gIC8qKlxuICAgKiBDdXN0b20gY29sb3IgZm9yIGljb24sIGRlZmF1bHQgd2lsbCBiZSBkZXJpdmVkIGZyb20gdGhlbWVcbiAgICovXG4gIGljb25Db2xvcj86IHN0cmluZztcbiAgLyoqXG4gICAqIEN1c3RvbSBpY29uIGZvciBjbGVhciBidXR0b24sIGRlZmF1bHQgd2lsbCBiZSBpY29uIGNsb3NlXG4gICAqL1xuICBjbGVhckljb24/OiBJY29uU291cmNlO1xufTtcblxudHlwZSBUZXh0SW5wdXRIYW5kbGVzID0gUGljazxcbiAgVGV4dElucHV0LFxuICAnc2V0TmF0aXZlUHJvcHMnIHwgJ2lzRm9jdXNlZCcgfCAnY2xlYXInIHwgJ2JsdXInIHwgJ2ZvY3VzJ1xuPjtcblxuLyoqXG4gKiBTZWFyY2hiYXIgaXMgYSBzaW1wbGUgaW5wdXQgYm94IHdoZXJlIHVzZXJzIGNhbiB0eXBlIHNlYXJjaCBxdWVyaWVzLlxuICpcbiAqIDxkaXYgY2xhc3M9XCJzY3JlZW5zaG90c1wiPlxuICogICA8aW1nIGNsYXNzPVwibWVkaXVtXCIgc3JjPVwic2NyZWVuc2hvdHMvc2VhcmNoYmFyLnBuZ1wiIC8+XG4gKiA8L2Rpdj5cbiAqXG4gKiAjIyBVc2FnZVxuICogYGBganNcbiAqIGltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbiAqIGltcG9ydCB7IFNlYXJjaGJhciB9IGZyb20gJ3JlYWN0LW5hdGl2ZS1wYXBlcic7XG4gKlxuICogY29uc3QgTXlDb21wb25lbnQgPSAoKSA9PiB7XG4gKiAgIGNvbnN0IFtzZWFyY2hRdWVyeSwgc2V0U2VhcmNoUXVlcnldID0gUmVhY3QudXNlU3RhdGUoJycpO1xuICpcbiAqICAgY29uc3Qgb25DaGFuZ2VTZWFyY2ggPSBxdWVyeSA9PiBzZXRTZWFyY2hRdWVyeShxdWVyeSk7XG4gKlxuICogICByZXR1cm4gKFxuICogICAgIDxTZWFyY2hiYXJcbiAqICAgICAgIHBsYWNlaG9sZGVyPVwiU2VhcmNoXCJcbiAqICAgICAgIG9uQ2hhbmdlVGV4dD17b25DaGFuZ2VTZWFyY2h9XG4gKiAgICAgICB2YWx1ZT17c2VhcmNoUXVlcnl9XG4gKiAgICAgLz5cbiAqICAgKTtcbiAqIH07XG4gKlxuICogZXhwb3J0IGRlZmF1bHQgTXlDb21wb25lbnQ7XG5cbiAqIGBgYFxuICovXG5jb25zdCBTZWFyY2hiYXIgPSBSZWFjdC5mb3J3YXJkUmVmPFRleHRJbnB1dEhhbmRsZXMsIFByb3BzPihcbiAgKFxuICAgIHtcbiAgICAgIGNsZWFyQWNjZXNzaWJpbGl0eUxhYmVsID0gJ2NsZWFyJyxcbiAgICAgIGNsZWFySWNvbixcbiAgICAgIGljb24sXG4gICAgICBpY29uQ29sb3I6IGN1c3RvbUljb25Db2xvcixcbiAgICAgIGlucHV0U3R5bGUsXG4gICAgICBvbkljb25QcmVzcyxcbiAgICAgIHBsYWNlaG9sZGVyLFxuICAgICAgc2VhcmNoQWNjZXNzaWJpbGl0eUxhYmVsID0gJ3NlYXJjaCcsXG4gICAgICBzdHlsZSxcbiAgICAgIHRoZW1lLFxuICAgICAgdmFsdWUsXG4gICAgICAuLi5yZXN0XG4gICAgfTogUHJvcHMsXG4gICAgcmVmXG4gICkgPT4ge1xuICAgIGNvbnN0IHJvb3QgPSBSZWFjdC51c2VSZWY8VGV4dElucHV0PihudWxsKTtcblxuICAgIFJlYWN0LnVzZUltcGVyYXRpdmVIYW5kbGUocmVmLCAoKSA9PiB7XG4gICAgICBjb25zdCBpbnB1dCA9IHJvb3QuY3VycmVudDtcblxuICAgICAgaWYgKGlucHV0KSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgZm9jdXM6ICgpID0+IGlucHV0LmZvY3VzKCksXG4gICAgICAgICAgY2xlYXI6ICgpID0+IGlucHV0LmNsZWFyKCksXG4gICAgICAgICAgc2V0TmF0aXZlUHJvcHM6IChhcmdzOiBUZXh0SW5wdXRQcm9wcykgPT4gaW5wdXQuc2V0TmF0aXZlUHJvcHMoYXJncyksXG4gICAgICAgICAgaXNGb2N1c2VkOiAoKSA9PiBpbnB1dC5pc0ZvY3VzZWQoKSxcbiAgICAgICAgICBibHVyOiAoKSA9PiBpbnB1dC5ibHVyKCksXG4gICAgICAgIH07XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IG5vb3AgPSAoKSA9PiB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignVGV4dElucHV0IGlzIG5vdCBhdmFpbGFibGUnKTtcbiAgICAgIH07XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIGZvY3VzOiBub29wLFxuICAgICAgICBjbGVhcjogbm9vcCxcbiAgICAgICAgc2V0TmF0aXZlUHJvcHM6IG5vb3AsXG4gICAgICAgIGlzRm9jdXNlZDogbm9vcCxcbiAgICAgICAgYmx1cjogbm9vcCxcbiAgICAgIH07XG4gICAgfSk7XG5cbiAgICBjb25zdCBoYW5kbGVDbGVhclByZXNzID0gKCkgPT4ge1xuICAgICAgcm9vdC5jdXJyZW50Py5jbGVhcigpO1xuICAgICAgcmVzdC5vbkNoYW5nZVRleHQ/LignJyk7XG4gICAgfTtcblxuICAgIGNvbnN0IHsgY29sb3JzLCByb3VuZG5lc3MsIGRhcmssIGZvbnRzIH0gPSB0aGVtZTtcbiAgICBjb25zdCB0ZXh0Q29sb3IgPSBjb2xvcnMudGV4dDtcbiAgICBjb25zdCBmb250ID0gZm9udHMucmVndWxhcjtcbiAgICBjb25zdCBpY29uQ29sb3IgPVxuICAgICAgY3VzdG9tSWNvbkNvbG9yIHx8XG4gICAgICAoZGFyayA/IHRleHRDb2xvciA6IGNvbG9yKHRleHRDb2xvcikuYWxwaGEoMC41NCkucmdiKCkuc3RyaW5nKCkpO1xuICAgIGNvbnN0IHJpcHBsZUNvbG9yID0gY29sb3IodGV4dENvbG9yKS5hbHBoYSgwLjMyKS5yZ2IoKS5zdHJpbmcoKTtcblxuICAgIHJldHVybiAoXG4gICAgICA8U3VyZmFjZVxuICAgICAgICBzdHlsZT17W1xuICAgICAgICAgIHsgYm9yZGVyUmFkaXVzOiByb3VuZG5lc3MsIGVsZXZhdGlvbjogNCB9LFxuICAgICAgICAgIHN0eWxlcy5jb250YWluZXIsXG4gICAgICAgICAgc3R5bGUsXG4gICAgICAgIF19XG4gICAgICA+XG4gICAgICAgIDxJY29uQnV0dG9uXG4gICAgICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvciBXZSBrZWVwIG9sZCBhMTF5IHByb3BzIGZvciBiYWNrd2FyZHMgY29tcGF0IHdpdGggb2xkIFJOIHZlcnNpb25zXG4gICAgICAgICAgYWNjZXNzaWJpbGl0eVRyYWl0cz1cImJ1dHRvblwiXG4gICAgICAgICAgYWNjZXNzaWJpbGl0eUNvbXBvbmVudFR5cGU9XCJidXR0b25cIlxuICAgICAgICAgIGFjY2Vzc2liaWxpdHlSb2xlPVwiYnV0dG9uXCJcbiAgICAgICAgICBib3JkZXJsZXNzXG4gICAgICAgICAgcmlwcGxlQ29sb3I9e3JpcHBsZUNvbG9yfVxuICAgICAgICAgIG9uUHJlc3M9e29uSWNvblByZXNzfVxuICAgICAgICAgIGNvbG9yPXtpY29uQ29sb3J9XG4gICAgICAgICAgaWNvbj17XG4gICAgICAgICAgICBpY29uIHx8XG4gICAgICAgICAgICAoKHsgc2l6ZSwgY29sb3IgfSkgPT4gKFxuICAgICAgICAgICAgICA8TWF0ZXJpYWxDb21tdW5pdHlJY29uXG4gICAgICAgICAgICAgICAgbmFtZT1cIm1hZ25pZnlcIlxuICAgICAgICAgICAgICAgIGNvbG9yPXtjb2xvcn1cbiAgICAgICAgICAgICAgICBzaXplPXtzaXplfVxuICAgICAgICAgICAgICAgIGRpcmVjdGlvbj17STE4bk1hbmFnZXIuaXNSVEwgPyAncnRsJyA6ICdsdHInfVxuICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgKSlcbiAgICAgICAgICB9XG4gICAgICAgICAgYWNjZXNzaWJpbGl0eUxhYmVsPXtzZWFyY2hBY2Nlc3NpYmlsaXR5TGFiZWx9XG4gICAgICAgIC8+XG4gICAgICAgIDxUZXh0SW5wdXRcbiAgICAgICAgICBzdHlsZT17W1xuICAgICAgICAgICAgc3R5bGVzLmlucHV0LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBjb2xvcjogdGV4dENvbG9yLFxuICAgICAgICAgICAgICAuLi5mb250LFxuICAgICAgICAgICAgICAuLi5QbGF0Zm9ybS5zZWxlY3QoeyB3ZWI6IHsgb3V0bGluZTogJ25vbmUnIH0gfSksXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgaW5wdXRTdHlsZSxcbiAgICAgICAgICBdfVxuICAgICAgICAgIHBsYWNlaG9sZGVyPXtwbGFjZWhvbGRlciB8fCAnJ31cbiAgICAgICAgICBwbGFjZWhvbGRlclRleHRDb2xvcj17Y29sb3JzLnBsYWNlaG9sZGVyfVxuICAgICAgICAgIHNlbGVjdGlvbkNvbG9yPXtjb2xvcnMucHJpbWFyeX1cbiAgICAgICAgICB1bmRlcmxpbmVDb2xvckFuZHJvaWQ9XCJ0cmFuc3BhcmVudFwiXG4gICAgICAgICAgcmV0dXJuS2V5VHlwZT1cInNlYXJjaFwiXG4gICAgICAgICAga2V5Ym9hcmRBcHBlYXJhbmNlPXtkYXJrID8gJ2RhcmsnIDogJ2xpZ2h0J31cbiAgICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yIFdlIGtlZXAgb2xkIGExMXkgcHJvcHMgZm9yIGJhY2t3YXJkcyBjb21wYXQgd2l0aCBvbGQgUk4gdmVyc2lvbnNcbiAgICAgICAgICBhY2Nlc3NpYmlsaXR5VHJhaXRzPVwic2VhcmNoXCJcbiAgICAgICAgICBhY2Nlc3NpYmlsaXR5Um9sZT1cInNlYXJjaFwiXG4gICAgICAgICAgcmVmPXtyb290fVxuICAgICAgICAgIHZhbHVlPXt2YWx1ZX1cbiAgICAgICAgICB7Li4ucmVzdH1cbiAgICAgICAgLz5cbiAgICAgICAgPEljb25CdXR0b25cbiAgICAgICAgICBib3JkZXJsZXNzXG4gICAgICAgICAgZGlzYWJsZWQ9eyF2YWx1ZX1cbiAgICAgICAgICBhY2Nlc3NpYmlsaXR5TGFiZWw9e2NsZWFyQWNjZXNzaWJpbGl0eUxhYmVsfVxuICAgICAgICAgIGNvbG9yPXt2YWx1ZSA/IGljb25Db2xvciA6ICdyZ2JhKDI1NSwgMjU1LCAyNTUsIDApJ31cbiAgICAgICAgICByaXBwbGVDb2xvcj17cmlwcGxlQ29sb3J9XG4gICAgICAgICAgb25QcmVzcz17aGFuZGxlQ2xlYXJQcmVzc31cbiAgICAgICAgICBpY29uPXtcbiAgICAgICAgICAgIGNsZWFySWNvbiB8fFxuICAgICAgICAgICAgKCh7IHNpemUsIGNvbG9yIH0pID0+IChcbiAgICAgICAgICAgICAgPE1hdGVyaWFsQ29tbXVuaXR5SWNvblxuICAgICAgICAgICAgICAgIG5hbWU9XCJjbG9zZVwiXG4gICAgICAgICAgICAgICAgY29sb3I9e2NvbG9yfVxuICAgICAgICAgICAgICAgIHNpemU9e3NpemV9XG4gICAgICAgICAgICAgICAgZGlyZWN0aW9uPXtJMThuTWFuYWdlci5pc1JUTCA/ICdydGwnIDogJ2x0cid9XG4gICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICApKVxuICAgICAgICAgIH1cbiAgICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yIFdlIGtlZXAgb2xkIGExMXkgcHJvcHMgZm9yIGJhY2t3YXJkcyBjb21wYXQgd2l0aCBvbGQgUk4gdmVyc2lvbnNcbiAgICAgICAgICBhY2Nlc3NpYmlsaXR5VHJhaXRzPVwiYnV0dG9uXCJcbiAgICAgICAgICBhY2Nlc3NpYmlsaXR5Q29tcG9uZW50VHlwZT1cImJ1dHRvblwiXG4gICAgICAgICAgYWNjZXNzaWJpbGl0eVJvbGU9XCJidXR0b25cIlxuICAgICAgICAvPlxuICAgICAgPC9TdXJmYWNlPlxuICAgICk7XG4gIH1cbik7XG5cbmNvbnN0IHN0eWxlcyA9IFN0eWxlU2hlZXQuY3JlYXRlKHtcbiAgY29udGFpbmVyOiB7XG4gICAgZmxleERpcmVjdGlvbjogJ3JvdycsXG4gICAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gIH0sXG4gIGlucHV0OiB7XG4gICAgZmxleDogMSxcbiAgICBmb250U2l6ZTogMTgsXG4gICAgcGFkZGluZ0xlZnQ6IDgsXG4gICAgYWxpZ25TZWxmOiAnc3RyZXRjaCcsXG4gICAgdGV4dEFsaWduOiBJMThuTWFuYWdlci5pc1JUTCA/ICdyaWdodCcgOiAnbGVmdCcsXG4gICAgbWluV2lkdGg6IDAsXG4gIH0sXG59KTtcblxuZXhwb3J0IGRlZmF1bHQgd2l0aFRoZW1lKFNlYXJjaGJhcik7XG4iXX0=