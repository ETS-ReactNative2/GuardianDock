{"version":3,"mappings":"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","names":["Searchbar","React","forwardRef","ref","clearAccessibilityLabel","clearIcon","icon","customIconColor","iconColor","inputStyle","onIconPress","placeholder","searchAccessibilityLabel","style","theme","value","rest","root","useRef","useImperativeHandle","input","current","focus","clear","setNativeProps","args","isFocused","blur","noop","Error","handleClearPress","onChangeText","colors","roundness","dark","fonts","textColor","text","font","regular","alpha","rgb","string","rippleColor","_Surface","borderRadius","elevation","styles","container","_IconButton","accessibilityTraits","accessibilityComponentType","accessibilityRole","borderless","onPress","color","size","_MaterialCommunityIcon","name","direction","I18nManager","isRTL","accessibilityLabel","_reactNative","Platform","select","web","outline","placeholderTextColor","selectionColor","primary","underlineColorAndroid","returnKeyType","keyboardAppearance","disabled","StyleSheet","create","flexDirection","alignItems","flex","fontSize","paddingLeft","alignSelf","textAlign","minWidth"],"sources":["Searchbar.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  Platform,\n  StyleSheet,\n  StyleProp,\n  TextInput,\n  I18nManager,\n  TextInputProps,\n  ViewStyle,\n  TextStyle,\n} from 'react-native';\n\nimport color from 'color';\nimport IconButton from './IconButton';\nimport Surface from './Surface';\nimport { withTheme } from '../core/theming';\nimport type { IconSource } from './Icon';\nimport MaterialCommunityIcon from './MaterialCommunityIcon';\n\ntype Props = React.ComponentPropsWithRef<typeof TextInput> & {\n  /**\n   * Accessibility label for the button. This is read by the screen reader when the user taps the button.\n   */\n  clearAccessibilityLabel?: string;\n  /**\n   * Accessibility label for the button. This is read by the screen reader when the user taps the button.\n   */\n  searchAccessibilityLabel?: string;\n  /**\n   * Hint text shown when the input is empty.\n   */\n  placeholder?: string;\n  /**\n   * The value of the text input.\n   */\n  value: string;\n  /**\n   * Icon name for the left icon button (see `onIconPress`).\n   */\n  icon?: IconSource;\n  /**\n   * Callback that is called when the text input's text changes.\n   */\n  onChangeText?: (query: string) => void;\n  /**\n   * Callback to execute if we want the left icon to act as button.\n   */\n  onIconPress?: () => void;\n  /**\n   * Set style of the TextInput component inside the searchbar\n   */\n  inputStyle?: StyleProp<TextStyle>;\n  style?: StyleProp<ViewStyle>;\n\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n  /**\n   * Custom color for icon, default will be derived from theme\n   */\n  iconColor?: string;\n  /**\n   * Custom icon for clear button, default will be icon close\n   */\n  clearIcon?: IconSource;\n};\n\ntype TextInputHandles = Pick<\n  TextInput,\n  'setNativeProps' | 'isFocused' | 'clear' | 'blur' | 'focus'\n>;\n\n/**\n * Searchbar is a simple input box where users can type search queries.\n *\n * <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/searchbar.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Searchbar } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [searchQuery, setSearchQuery] = React.useState('');\n *\n *   const onChangeSearch = query => setSearchQuery(query);\n *\n *   return (\n *     <Searchbar\n *       placeholder=\"Search\"\n *       onChangeText={onChangeSearch}\n *       value={searchQuery}\n *     />\n *   );\n * };\n *\n * export default MyComponent;\n\n * ```\n */\nconst Searchbar = React.forwardRef<TextInputHandles, Props>(\n  (\n    {\n      clearAccessibilityLabel = 'clear',\n      clearIcon,\n      icon,\n      iconColor: customIconColor,\n      inputStyle,\n      onIconPress,\n      placeholder,\n      searchAccessibilityLabel = 'search',\n      style,\n      theme,\n      value,\n      ...rest\n    }: Props,\n    ref\n  ) => {\n    const root = React.useRef<TextInput>(null);\n\n    React.useImperativeHandle(ref, () => {\n      const input = root.current;\n\n      if (input) {\n        return {\n          focus: () => input.focus(),\n          clear: () => input.clear(),\n          setNativeProps: (args: TextInputProps) => input.setNativeProps(args),\n          isFocused: () => input.isFocused(),\n          blur: () => input.blur(),\n        };\n      }\n\n      const noop = () => {\n        throw new Error('TextInput is not available');\n      };\n\n      return {\n        focus: noop,\n        clear: noop,\n        setNativeProps: noop,\n        isFocused: noop,\n        blur: noop,\n      };\n    });\n\n    const handleClearPress = () => {\n      root.current?.clear();\n      rest.onChangeText?.('');\n    };\n\n    const { colors, roundness, dark, fonts } = theme;\n    const textColor = colors.text;\n    const font = fonts.regular;\n    const iconColor =\n      customIconColor ||\n      (dark ? textColor : color(textColor).alpha(0.54).rgb().string());\n    const rippleColor = color(textColor).alpha(0.32).rgb().string();\n\n    return (\n      <Surface\n        style={[\n          { borderRadius: roundness, elevation: 4 },\n          styles.container,\n          style,\n        ]}\n      >\n        <IconButton\n          // @ts-expect-error We keep old a11y props for backwards compat with old RN versions\n          accessibilityTraits=\"button\"\n          accessibilityComponentType=\"button\"\n          accessibilityRole=\"button\"\n          borderless\n          rippleColor={rippleColor}\n          onPress={onIconPress}\n          color={iconColor}\n          icon={\n            icon ||\n            (({ size, color }) => (\n              <MaterialCommunityIcon\n                name=\"magnify\"\n                color={color}\n                size={size}\n                direction={I18nManager.isRTL ? 'rtl' : 'ltr'}\n              />\n            ))\n          }\n          accessibilityLabel={searchAccessibilityLabel}\n        />\n        <TextInput\n          style={[\n            styles.input,\n            {\n              color: textColor,\n              ...font,\n              ...Platform.select({ web: { outline: 'none' } }),\n            },\n            inputStyle,\n          ]}\n          placeholder={placeholder || ''}\n          placeholderTextColor={colors.placeholder}\n          selectionColor={colors.primary}\n          underlineColorAndroid=\"transparent\"\n          returnKeyType=\"search\"\n          keyboardAppearance={dark ? 'dark' : 'light'}\n          // @ts-expect-error We keep old a11y props for backwards compat with old RN versions\n          accessibilityTraits=\"search\"\n          accessibilityRole=\"search\"\n          ref={root}\n          value={value}\n          {...rest}\n        />\n        <IconButton\n          borderless\n          disabled={!value}\n          accessibilityLabel={clearAccessibilityLabel}\n          color={value ? iconColor : 'rgba(255, 255, 255, 0)'}\n          rippleColor={rippleColor}\n          onPress={handleClearPress}\n          icon={\n            clearIcon ||\n            (({ size, color }) => (\n              <MaterialCommunityIcon\n                name=\"close\"\n                color={color}\n                size={size}\n                direction={I18nManager.isRTL ? 'rtl' : 'ltr'}\n              />\n            ))\n          }\n          // @ts-expect-error We keep old a11y props for backwards compat with old RN versions\n          accessibilityTraits=\"button\"\n          accessibilityComponentType=\"button\"\n          accessibilityRole=\"button\"\n        />\n      </Surface>\n    );\n  }\n);\n\nconst styles = StyleSheet.create({\n  container: {\n    flexDirection: 'row',\n    alignItems: 'center',\n  },\n  input: {\n    flex: 1,\n    fontSize: 18,\n    paddingLeft: 8,\n    alignSelf: 'stretch',\n    textAlign: I18nManager.isRTL ? 'right' : 'left',\n    minWidth: 0,\n  },\n});\n\nexport default withTheme(Searchbar);\n"]}