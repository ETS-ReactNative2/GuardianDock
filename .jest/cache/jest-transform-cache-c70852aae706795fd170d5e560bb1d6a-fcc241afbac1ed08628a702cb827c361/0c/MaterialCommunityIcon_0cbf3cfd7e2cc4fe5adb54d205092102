101eb09f9bae9740a1f6701b7b0369cb
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _excluded = ["name", "color", "size"];
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.accessibilityProps = void 0;

var React = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

function _getRequireWildcardCache() {
  if (typeof WeakMap !== "function") return null;
  var cache = new WeakMap();

  _getRequireWildcardCache = function _getRequireWildcardCache() {
    return cache;
  };

  return cache;
}

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  }

  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }

  var cache = _getRequireWildcardCache();

  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }

  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }

  newObj.default = obj;

  if (cache) {
    cache.set(obj, newObj);
  }

  return newObj;
}

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

var MaterialCommunityIcons;

try {
  MaterialCommunityIcons = require('react-native-vector-icons/MaterialCommunityIcons').default;
} catch (e) {
  var isErrorLogged = false;

  MaterialCommunityIcons = function MaterialCommunityIcons(_ref) {
    var name = _ref.name,
        color = _ref.color,
        size = _ref.size,
        rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);

    if (!isErrorLogged) {
      if (!/(Cannot find module|Module not found|Cannot resolve module)/.test(e.message)) {
        console.error(e);
      }

      console.warn("Tried to use the icon '" + name + "' in a component from 'react-native-paper', but 'react-native-vector-icons/MaterialCommunityIcons' could not be loaded.", "To remove this warning, try installing 'react-native-vector-icons' or use another method to specify icon: https://callstack.github.io/react-native-paper/icons.html.");
      isErrorLogged = true;
    }

    return React.createElement(_reactNative.Text, _extends({}, rest, {
      style: [styles.icon, {
        color: color,
        fontSize: size
      }],
      pointerEvents: "none",
      selectable: false
    }), "\u25A1");
  };
}

var accessibilityProps = _reactNative.Platform.OS === 'web' ? {
  role: 'img',
  focusable: false
} : {
  accessibilityElementsHidden: true,
  importantForAccessibility: 'no-hide-descendants'
};
exports.accessibilityProps = accessibilityProps;

var defaultIcon = function defaultIcon(_ref2) {
  var name = _ref2.name,
      color = _ref2.color,
      size = _ref2.size,
      direction = _ref2.direction,
      allowFontScaling = _ref2.allowFontScaling;
  return React.createElement(MaterialCommunityIcons, _extends({
    allowFontScaling: allowFontScaling,
    name: name,
    color: color,
    size: size,
    style: [{
      transform: [{
        scaleX: direction === 'rtl' ? -1 : 1
      }],
      lineHeight: size
    }, styles.icon],
    pointerEvents: "none",
    selectable: false
  }, accessibilityProps));
};

var styles = _reactNative.StyleSheet.create({
  icon: {
    backgroundColor: 'transparent'
  }
});

var _default = defaultIcon;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBQUE7O0FBQ0E7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQVVBLElBQUlBLHNCQUFKOztBQVNBLElBQUk7QUFFRkEsd0JBQXNCLEdBQUdDLE9BQU8sQ0FBQyxrREFBRCxDQUFQQSxDQUN0QkMsT0FESEY7QUFGRixFQUlFLE9BQU9HLENBQVAsRUFBVTtBQUNWLE1BQUlDLGFBQWEsR0FBRyxLQUFwQjs7QUFHQUosd0JBQXNCLEdBQUcsc0NBQW9DO0FBQUEsUUFBakNLLElBQWlDLFFBQWpDQSxJQUFpQztBQUFBLFFBQTNCQyxLQUEyQixRQUEzQkEsS0FBMkI7QUFBQSxRQUFwQkMsSUFBb0IsUUFBcEJBLElBQW9CO0FBQUEsUUFBWEMsSUFBVzs7QUFFM0QsUUFBSSxDQUFDSixhQUFMLEVBQW9CO0FBQ2xCLFVBQ0UsQ0FBQyw4REFBOERLLElBQTlELENBQ0NOLENBQUMsQ0FBQ08sT0FESCxDQURILEVBSUU7QUFDQUMsZUFBTyxDQUFDQyxLQUFSRCxDQUFjUixDQUFkUTtBQUNEOztBQUVEQSxhQUFPLENBQUNFLElBQVJGLDZCQUM0Qk4sSUFENUJNO0FBS0FQLG1CQUFhLEdBQUcsSUFBaEJBO0FBQ0Q7O0FBRUQsV0FDRVUsb0JBQUNDLGlCQUFELGVBQ01QLElBRE47QUFFRVEsV0FBSyxFQUFFLENBQUNDLE1BQU0sQ0FBQ0MsSUFBUixFQUFjO0FBQUVaLGFBQUYsRUFBRUEsS0FBRjtBQUFTYSxnQkFBUSxFQUFFWjtBQUFuQixPQUFkLENBRlQ7QUFJRWEsbUJBQWEsRUFBQyxNQUpoQjtBQUtFQyxnQkFBVSxFQUFFO0FBTGQsaUJBREY7QUFuQkY7QUErQkQ7O0FBRU0sSUFBTUMsa0JBQWtCLEdBQzdCQyxzQkFBU0MsRUFBVEQsS0FBZ0IsS0FBaEJBLEdBQ0k7QUFDRUUsTUFBSSxFQUFFLEtBRFI7QUFFRUMsV0FBUyxFQUFFO0FBRmIsQ0FESkgsR0FLSTtBQUNFSSw2QkFBMkIsRUFBRSxJQUQvQjtBQUVFQywyQkFBeUIsRUFBRTtBQUY3QixDQU5DOzs7QUFXUCxJQUFNQyxXQUFXLEdBQUcsU0FBZEEsV0FBYztBQUFBLE1BQ2xCeEIsSUFEa0IsU0FDbEJBLElBRGtCO0FBQUEsTUFFbEJDLEtBRmtCLFNBRWxCQSxLQUZrQjtBQUFBLE1BR2xCQyxJQUhrQixTQUdsQkEsSUFIa0I7QUFBQSxNQUlsQnVCLFNBSmtCLFNBSWxCQSxTQUprQjtBQUFBLE1BS2xCQyxnQkFMa0IsU0FLbEJBLGdCQUxrQjtBQUFBLFNBT2xCakIsb0JBQUNkLHNCQUFEO0FBQ0UrQixvQkFBZ0IsRUFBRUEsZ0JBRHBCO0FBRUUxQixRQUFJLEVBQUVBLElBRlI7QUFHRUMsU0FBSyxFQUFFQSxLQUhUO0FBSUVDLFFBQUksRUFBRUEsSUFKUjtBQUtFUyxTQUFLLEVBQUUsQ0FDTDtBQUNFZ0IsZUFBUyxFQUFFLENBQUM7QUFBRUMsY0FBTSxFQUFFSCxTQUFTLEtBQUssS0FBZEEsR0FBc0IsQ0FBQyxDQUF2QkEsR0FBMkI7QUFBckMsT0FBRCxDQURiO0FBRUVJLGdCQUFVLEVBQUUzQjtBQUZkLEtBREssRUFLTFUsTUFBTSxDQUFDQyxJQUxGLENBTFQ7QUFZRUUsaUJBQWEsRUFBQyxNQVpoQjtBQWFFQyxjQUFVLEVBQUU7QUFiZCxLQWNNQyxrQkFkTixFQVBrQjtBQUFBLENBQXBCOztBQXlCQSxJQUFNTCxNQUFNLEdBQUdrQix3QkFBV0MsTUFBWEQsQ0FBa0I7QUFDL0JqQixNQUFJLEVBQUU7QUFDSm1CLG1CQUFlLEVBQUU7QUFEYjtBQUR5QixDQUFsQkYsQ0FBZjs7ZUFNZU4iLCJuYW1lcyI6WyJNYXRlcmlhbENvbW11bml0eUljb25zIiwicmVxdWlyZSIsImRlZmF1bHQiLCJlIiwiaXNFcnJvckxvZ2dlZCIsIm5hbWUiLCJjb2xvciIsInNpemUiLCJyZXN0IiwidGVzdCIsIm1lc3NhZ2UiLCJjb25zb2xlIiwiZXJyb3IiLCJ3YXJuIiwiUmVhY3QiLCJfcmVhY3ROYXRpdmUiLCJzdHlsZSIsInN0eWxlcyIsImljb24iLCJmb250U2l6ZSIsInBvaW50ZXJFdmVudHMiLCJzZWxlY3RhYmxlIiwiYWNjZXNzaWJpbGl0eVByb3BzIiwiUGxhdGZvcm0iLCJPUyIsInJvbGUiLCJmb2N1c2FibGUiLCJhY2Nlc3NpYmlsaXR5RWxlbWVudHNIaWRkZW4iLCJpbXBvcnRhbnRGb3JBY2Nlc3NpYmlsaXR5IiwiZGVmYXVsdEljb24iLCJkaXJlY3Rpb24iLCJhbGxvd0ZvbnRTY2FsaW5nIiwidHJhbnNmb3JtIiwic2NhbGVYIiwibGluZUhlaWdodCIsIlN0eWxlU2hlZXQiLCJjcmVhdGUiLCJiYWNrZ3JvdW5kQ29sb3IiXSwic291cmNlcyI6WyJNYXRlcmlhbENvbW11bml0eUljb24udHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IFN0eWxlU2hlZXQsIFRleHQsIFBsYXRmb3JtLCBUZXh0UHJvcHMsIFZpZXdQcm9wcyB9IGZyb20gJ3JlYWN0LW5hdGl2ZSc7XG5cbmV4cG9ydCB0eXBlIEljb25Qcm9wcyA9IHtcbiAgbmFtZTogc3RyaW5nO1xuICBjb2xvcjogc3RyaW5nO1xuICBzaXplOiBudW1iZXI7XG4gIGRpcmVjdGlvbjogJ3J0bCcgfCAnbHRyJztcbiAgYWxsb3dGb250U2NhbGluZz86IGJvb2xlYW47XG59O1xuXG5sZXQgTWF0ZXJpYWxDb21tdW5pdHlJY29uczogUmVhY3QuQ29tcG9uZW50VHlwZTxcbiAgVGV4dFByb3BzICYge1xuICAgIG5hbWU6IHN0cmluZztcbiAgICBjb2xvcjogc3RyaW5nO1xuICAgIHNpemU6IG51bWJlcjtcbiAgICBwb2ludGVyRXZlbnRzPzogVmlld1Byb3BzWydwb2ludGVyRXZlbnRzJ107XG4gIH1cbj47XG5cbnRyeSB7XG4gIC8vIE9wdGlvbmFsbHkgcmVxdWlyZSB2ZWN0b3ItaWNvbnNcbiAgTWF0ZXJpYWxDb21tdW5pdHlJY29ucyA9IHJlcXVpcmUoJ3JlYWN0LW5hdGl2ZS12ZWN0b3ItaWNvbnMvTWF0ZXJpYWxDb21tdW5pdHlJY29ucycpXG4gICAgLmRlZmF1bHQ7XG59IGNhdGNoIChlKSB7XG4gIGxldCBpc0Vycm9yTG9nZ2VkID0gZmFsc2U7XG5cbiAgLy8gRmFsbGJhY2sgY29tcG9uZW50IGZvciBpY29uc1xuICBNYXRlcmlhbENvbW11bml0eUljb25zID0gKHsgbmFtZSwgY29sb3IsIHNpemUsIC4uLnJlc3QgfSkgPT4ge1xuICAgIC8qIGVzbGludC1kaXNhYmxlIG5vLWNvbnNvbGUgKi9cbiAgICBpZiAoIWlzRXJyb3JMb2dnZWQpIHtcbiAgICAgIGlmIChcbiAgICAgICAgIS8oQ2Fubm90IGZpbmQgbW9kdWxlfE1vZHVsZSBub3QgZm91bmR8Q2Fubm90IHJlc29sdmUgbW9kdWxlKS8udGVzdChcbiAgICAgICAgICBlLm1lc3NhZ2VcbiAgICAgICAgKVxuICAgICAgKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoZSk7XG4gICAgICB9XG5cbiAgICAgIGNvbnNvbGUud2FybihcbiAgICAgICAgYFRyaWVkIHRvIHVzZSB0aGUgaWNvbiAnJHtuYW1lfScgaW4gYSBjb21wb25lbnQgZnJvbSAncmVhY3QtbmF0aXZlLXBhcGVyJywgYnV0ICdyZWFjdC1uYXRpdmUtdmVjdG9yLWljb25zL01hdGVyaWFsQ29tbXVuaXR5SWNvbnMnIGNvdWxkIG5vdCBiZSBsb2FkZWQuYCxcbiAgICAgICAgYFRvIHJlbW92ZSB0aGlzIHdhcm5pbmcsIHRyeSBpbnN0YWxsaW5nICdyZWFjdC1uYXRpdmUtdmVjdG9yLWljb25zJyBvciB1c2UgYW5vdGhlciBtZXRob2QgdG8gc3BlY2lmeSBpY29uOiBodHRwczovL2NhbGxzdGFjay5naXRodWIuaW8vcmVhY3QtbmF0aXZlLXBhcGVyL2ljb25zLmh0bWwuYFxuICAgICAgKTtcblxuICAgICAgaXNFcnJvckxvZ2dlZCA9IHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIChcbiAgICAgIDxUZXh0XG4gICAgICAgIHsuLi5yZXN0fVxuICAgICAgICBzdHlsZT17W3N0eWxlcy5pY29uLCB7IGNvbG9yLCBmb250U2l6ZTogc2l6ZSB9XX1cbiAgICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvcjogVGV4dCBkb2Vzbid0IHN1cHBvcnQgdGhpcywgYnV0IGl0IHNlZW1zIHRvIGFmZmVjdCBUb3VjaGFibGVOYXRpdmVGZWVkYmFja1xuICAgICAgICBwb2ludGVyRXZlbnRzPVwibm9uZVwiXG4gICAgICAgIHNlbGVjdGFibGU9e2ZhbHNlfVxuICAgICAgPlxuICAgICAgICDilqFcbiAgICAgIDwvVGV4dD5cbiAgICApO1xuICB9O1xufVxuXG5leHBvcnQgY29uc3QgYWNjZXNzaWJpbGl0eVByb3BzID1cbiAgUGxhdGZvcm0uT1MgPT09ICd3ZWInXG4gICAgPyB7XG4gICAgICAgIHJvbGU6ICdpbWcnLFxuICAgICAgICBmb2N1c2FibGU6IGZhbHNlLFxuICAgICAgfVxuICAgIDoge1xuICAgICAgICBhY2Nlc3NpYmlsaXR5RWxlbWVudHNIaWRkZW46IHRydWUsXG4gICAgICAgIGltcG9ydGFudEZvckFjY2Vzc2liaWxpdHk6ICduby1oaWRlLWRlc2NlbmRhbnRzJyBhcyAnbm8taGlkZS1kZXNjZW5kYW50cycsXG4gICAgICB9O1xuXG5jb25zdCBkZWZhdWx0SWNvbiA9ICh7XG4gIG5hbWUsXG4gIGNvbG9yLFxuICBzaXplLFxuICBkaXJlY3Rpb24sXG4gIGFsbG93Rm9udFNjYWxpbmcsXG59OiBJY29uUHJvcHMpID0+IChcbiAgPE1hdGVyaWFsQ29tbXVuaXR5SWNvbnNcbiAgICBhbGxvd0ZvbnRTY2FsaW5nPXthbGxvd0ZvbnRTY2FsaW5nfVxuICAgIG5hbWU9e25hbWV9XG4gICAgY29sb3I9e2NvbG9yfVxuICAgIHNpemU9e3NpemV9XG4gICAgc3R5bGU9e1tcbiAgICAgIHtcbiAgICAgICAgdHJhbnNmb3JtOiBbeyBzY2FsZVg6IGRpcmVjdGlvbiA9PT0gJ3J0bCcgPyAtMSA6IDEgfV0sXG4gICAgICAgIGxpbmVIZWlnaHQ6IHNpemUsXG4gICAgICB9LFxuICAgICAgc3R5bGVzLmljb24sXG4gICAgXX1cbiAgICBwb2ludGVyRXZlbnRzPVwibm9uZVwiXG4gICAgc2VsZWN0YWJsZT17ZmFsc2V9XG4gICAgey4uLmFjY2Vzc2liaWxpdHlQcm9wc31cbiAgLz5cbik7XG5cbmNvbnN0IHN0eWxlcyA9IFN0eWxlU2hlZXQuY3JlYXRlKHtcbiAgaWNvbjoge1xuICAgIGJhY2tncm91bmRDb2xvcjogJ3RyYW5zcGFyZW50JyxcbiAgfSxcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBkZWZhdWx0SWNvbjtcbiJdfQ==