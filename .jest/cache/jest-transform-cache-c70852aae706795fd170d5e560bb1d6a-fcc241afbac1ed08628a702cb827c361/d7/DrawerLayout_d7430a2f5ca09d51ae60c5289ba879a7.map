{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAQA;;AAEA;;AACA;;AAkBA;;AAIA;;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,IAAMA,SAAS,GAAG,IAAlB;AAEA,IAAMC,IAAiB,GAAG,MAA1B;AACA,IAAMC,QAAqB,GAAG,UAA9B;AACA,IAAMC,QAAqB,GAAG,UAA9B;;IAwHqBC,Y;;;;;AAgBnBC,wBAAYC,MAAZD,EAAsC;AAAA;;AAAA;AACpC,8BAAMC,MAAN;;AADoCC;;AAAAA;;AAAAA,6FAmCHC,KAAK,CAACC,SAAND,EAnCG;;AAAAD,sFAoCVC,KAAK,CAACC,SAAND,EApCU;;AAAAD,sFAqCVC,KAAK,CAACC,SAAND,EArCU;;AAAAD,gFAsChB,KAtCgB;;AAAAA,wFA6CR,UAC5BD,KAD4B,EAE5BI,KAF4B,EAGzB;AAEH,UAAQC,cAAR,GAAoDL,KAApD,CAAQK,cAAR;AAAA,UAAwBC,WAAxB,GAAoDN,KAApD,CAAwBM,WAAxB;AAAA,UAAqCC,UAArC,GAAoDP,KAApD,CAAqCO,UAArC;AACA,UACSC,UADT,GAKIJ,KALJ,CACEK,KADF;AAAA,UAEUC,WAFV,GAKIN,KALJ,CAEEO,MAFF;AAAA,UAGEC,iBAHF,GAKIR,KALJ,CAGEQ,iBAHF;AAAA,UAIEC,cAJF,GAKIT,KALJ,CAIES,cAJF;AAOA,UAAIJ,KAAK,GAAGD,UAAZ;AACA,UAAIG,MAAM,GAAGD,WAAb;;AAEA,UAAIL,cAAc,KAAK,MAAvB,EAA+B;AAO7BI,aAAK,GAAGK,sBAASC,QAATD,CACN,IAAIA,sBAASE,KAAb,CAAmB,CAAC,CAApB,CADMF,EAENN,UAFMM,CAARL;AAIAE,cAAM,GAAGG,sBAASG,GAATH,CACP,IAAIA,sBAASE,KAAb,CAAmBH,cAAnB,CADOC,EAEPA,sBAASC,QAATD,CAAkB,IAAIA,sBAASE,KAAb,CAAmB,CAAC,CAApB,CAAlBF,EAA0CJ,WAA1CI,CAFOA,CAATH;AAIAD,mBAAW,CAACQ,QAAZR,CAAqBG,cAArBH;AAfF,aAgBO;AACLA,mBAAW,CAACQ,QAAZR,CAAqB,CAArBA;AA9BC;;AA0DH,UAAIS,YAAY,GAAGV,KAAnB;;AACA,UAAIF,UAAU,KAAK,OAAnB,EAA4B;AAC1B,YAAMa,cAAc,GAAGN,sBAASG,GAATH,CACrBH,MADqBG,EAErBA,sBAASC,QAATD,CAAkB,IAAIA,sBAASE,KAAb,CAAmB,CAAC,CAApB,CAAlBF,EAA0CL,KAA1CK,CAFqBA,CAAvB;;AAKA,YAAMO,6BAA6B,GAAGD,cAAc,CAACE,WAAfF,CAA2B;AAC/DG,oBAAU,EAAE,CAACjB,WAAW,GAAI,CAAhB,EAAmBA,WAAnB,EAAiCA,WAAW,GAAI,CAAhD,CADmD;AAE/DkB,qBAAW,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP;AAFkD,SAA3BJ,CAAtC;AAIAD,oBAAY,GAAGL,sBAASG,GAATH,CACbL,KADaK,EAEbO,6BAFaP,CAAfK;AAID;;AAED,YAAKM,SAAL,GAAiBX,sBAASG,GAATH,CAAaK,YAAbL,EAA2BF,iBAA3BE,EAA8CQ,WAA9CR,CAA0D;AACzES,kBAAU,EAAE,CAAC,CAAD,EAAIjB,WAAJ,CAD6D;AAEzEkB,mBAAW,EAAE,CAAC,CAAD,EAAI,CAAJ,CAF4D;AAGzEE,mBAAW,EAAE;AAH4D,OAA1DZ,CAAjB;AAMA,UAAMa,cAML,GAAG;AACFC,uBAAe,EAAE5B,KAAK,CAAC6B;AADrB,OANJ;;AAUA,UAAI,MAAK7B,KAAL,CAAW8B,aAAf,EAA8B;AAC5BH,sBAAc,CAACI,QAAfJ,GAA2BK,YAAD,EAAQ;AAAA;;AAChC,cAAMb,YAAY,GAAGc,IAAI,CAACC,KAALD,CAAWA,IAAI,CAACE,GAALF,CAASD,EAAE,CAACI,WAAHJ,CAAeb,YAAxBc,CAAXA,CAArB;AACA,cAAMI,QAAQ,GAAGlB,YAAY,GAAG,MAAKf,KAAL,CAAWS,cAA3C;AAEA,wDAAKb,KAAL,EAAW8B,aAAX,kGAA2BO,QAA3B;AAJF;AAMD;;AAED,YAAKC,cAAL,GAAsBxB,sBAASyB,KAATzB,CACpB,CAAC;AAAEsB,mBAAW,EAAE;AAAEjB,sBAAY,EAAEX,UAAhB;AAA4BgC,WAAC,EAAE9B;AAA/B;AAAf,OAAD,CADoBI,EAEpBa,cAFoBb,CAAtB;AApJoC;;AAAAb,0FA0JN,gBAAwC;AAAA,UAArCmC,WAAqC,QAArCA,WAAqC;;AACtE,YAAKK,QAAL,CAAc;AAAE5B,sBAAc,EAAEuB,WAAW,CAACM,MAAZN,CAAmBO;AAArC,OAAd;AA3JoC;;AAAA1C,qFA8JX,UACzB2C,QADyB,EAEzBC,cAFyB,EAGtB;AAAA;;AACH,sDAAK7C,KAAL,EAAW8C,oBAAX,qGAAkCF,QAAlC,EAA4CC,cAA5C;AAlKoC;;AAAA5C,8FAqKF,iBAE0B;AAAA,UAD5DmC,WAC4D,SAD5DA,WAC4D;;AAC5D,UAAIA,WAAW,CAACW,QAAZX,KAAyBY,aAAMC,MAAnC,EAA2C;AACzC,cAAKC,aAAL,CAAmB;AAAEd;AAAF,SAAnB;AADF,aAEO,IAAIA,WAAW,CAAChC,KAAZgC,KAAsBY,aAAMC,MAAhC,EAAwC;AAC7C,cAAKE,gBAAL,CAAsBvD,QAAtB,EAAgC,KAAhC;;AACA,YAAI,MAAKI,KAAL,CAAWoD,mBAAX,KAAmC,SAAvC,EAAkD;AAChDC,gCAASC,OAATD;AACD;;AACD,YAAI,MAAKrD,KAAL,CAAWuD,aAAf,EAA8B;AAC5BC,iCAAUC,SAAVD,CAAoB,IAApBA,EAA0B,MAAKxD,KAAL,CAAW0D,kBAAX,IAAiC,OAA3DF;AACD;AACF;AAlLmC;;AAAAvD,4FAqLJ,iBAE4B;AAAA,UAD5DmC,WAC4D,SAD5DA,WAC4D;;AAC5D,UACE,MAAKuB,WAAL,IACAvB,WAAW,CAACW,QAAZX,KAAyBY,aAAMC,MAD/B,IAEA,MAAKjD,KAAL,CAAW4D,cAAX,KAA8B,aAHhC,EAIE;AACA,cAAKC,WAAL;AACD;AA9LmC;;AAAA5D,kFAiMd,iBAEsC;AAAA,UAD5DmC,WAC4D,SAD5DA,WAC4D;AAC5D,yBAAoD,MAAKpC,KAAzD;AAAA,UAAQM,WAAR,gBAAQA,WAAR;AAAA,UAAqBD,cAArB,gBAAqBA,cAArB;AAAA,UAAqCE,UAArC,gBAAqCA,UAArC;AACA,UAAQM,cAAR,GAA2B,MAAKT,KAAhC,CAAQS,cAAR;AACA,UAAoBJ,KAApB,GAAoD2B,WAApD,CAAMjB,YAAN;AAAA,UAA2B2C,SAA3B,GAAoD1B,WAApD,CAA2B0B,SAA3B;AAAA,UAAyCnD,MAAzC,GAAoDyB,WAApD,CAAsCI,CAAtC;;AAEA,UAAInC,cAAc,KAAK,MAAvB,EAA+B;AAG7BI,aAAK,GAAG,CAACA,KAATA;AACAE,cAAM,GAAGE,cAAc,GAAGF,MAA1BA;AACAmD,iBAAS,GAAG,CAACA,SAAbA;AACD;;AAED,UAAMC,aAAa,GAAGpD,MAAM,GAAGF,KAA/B;AACA,UAAIuD,sBAAsB,GAAG,CAA7B;;AAEA,UAAIzD,UAAU,KAAK,OAAnB,EAA4B;AAC1ByD,8BAAsB,GACpBD,aAAa,GAAGzD,WAAhByD,GAA+BA,aAAa,GAAGzD,WAA/CyD,GAA8D,CADhEC;AAED;;AAED,UAAMC,YAAY,GAChBxD,KAAK,GAAGuD,sBAARvD,IAAkC,MAAKkD,WAAL,GAAmBrD,WAAnB,GAAkC,CAApEG,CADF;AAEA,UAAMyD,WAAW,GAAGD,YAAY,GAAGvE,SAAS,GAAGoE,SAA/C;AAEA,UAAMK,UAAU,GAAGD,WAAW,GAAG5D,WAAW,GAAI,CAAhD;;AAEA,UAAI6D,UAAJ,EAAgB;AACd,cAAKC,aAAL,CAAmBH,YAAnB,EAAiC3D,WAAjC,EAA+CwD,SAA/C;AADF,aAEO;AACL,cAAKM,aAAL,CAAmBH,YAAnB,EAAiC,CAAjC,EAAoCH,SAApC;AACD;AAlOmC;;AAAA7D,kFAqOboE,iBAAD,EAAsB;AAAA;;AAC5C,YAAKV,WAAL,GAAmBU,OAAnB;AACA,qCAAKC,wBAAL,CAA8BC,OAA9B,gFAAuCC,cAAvC,CAAsD;AACpDC,gCAAwB,EAAEJ;AAD0B,OAAtD;AAGA,qCAAKK,iBAAL,CAAuBH,OAAvB,gFAAgCC,cAAhC,CAA+C;AAC7CG,qBAAa,EAAEN,OAAO,GAAG,MAAH,GAAY;AADW,OAA/C;AAGA,yBAAwD,MAAKrE,KAA7D;AAAA,UAAQK,cAAR,gBAAQA,cAAR;AAAA,UAAwBuE,gBAAxB,gBAAwBA,gBAAxB;AAAA,UAA0CC,SAA1C,gBAA0CA,SAA1C;AACA,UAAMC,QAAQ,GAAGzE,cAAc,KAAK,MAApC;AAIA,UAAM0E,kBAAkB,GACtB,CAACD,QAAQ,GAAG,CAAH,GAAO,CAAC,CAAjB,KAAuB,MAAKnB,WAAL,GAAmB,CAAC,CAApB,GAAwB,CAA/C,CADF;AAKA,UAAMqB,OAAO,GAAGF,QAAQ,GACpB;AAAEG,YAAI,EAAE,CAAR;AAAWtC,aAAK,EAAE0B,OAAO,GAAGa,SAAH,GAAeL;AAAxC,OADoB,GAEpB;AAAEM,aAAK,EAAE,CAAT;AAAYxC,aAAK,EAAE0B,OAAO,GAAGa,SAAH,GAAeL;AAAzC,OAFJ;AAIA,qCAAKO,iBAAL,CAAuBb,OAAvB,gFAAgCC,cAAhC,CAA+C;AAC7CQ,eAD6C,EAC7CA,OAD6C;AAE7CK,qBAAa,EAAEN,kBAAkB,GAAGH;AAFS,OAA/C;AA3PoC;;AAAA3E,kFAiQd,UACtBqF,SADsB,EAEtBC,OAFsB,EAGtBC,QAHsB,EAItBC,KAJsB,EAKnB;AACH,YAAKrF,KAAL,CAAWK,KAAX,CAAiBS,QAAjB,CAA0B,CAA1B;;AACA,YAAKd,KAAL,CAAWO,MAAX,CAAkBO,QAAlB,CACE,MAAKlB,KAAL,CAAWK,cAAX,KAA8B,MAA9B,GAAuC,CAAvC,GAA2C,MAAKD,KAAL,CAAWS,cADxD;;AAIA,UAAIyE,SAAS,IAAI,IAAjB,EAAuB;AACrB,YAAII,iBAAiB,GAAGJ,SAAxB;;AACA,YAAI,MAAKtF,KAAL,CAAW6B,mBAAf,EAAoC;AAKlC,cAAIyD,SAAS,GAAGC,OAAZD,IAAuBE,QAAQ,GAAG,CAAtC,EAAyC;AACvCE,6BAAiB,GAAGzD,IAAI,CAAC0D,GAAL1D,CAASqD,SAAS,GAAGE,QAAQ,GAAG,IAAhCvD,EAAsCsD,OAAtCtD,CAApByD;AADF,iBAEO,IAAIJ,SAAS,GAAGC,OAAZD,IAAuBE,QAAQ,GAAG,CAAtC,EAAyC;AAC9CE,6BAAiB,GAAGzD,IAAI,CAAC2D,GAAL3D,CAASqD,SAAS,GAAGE,QAAQ,GAAG,IAAhCvD,EAAsCsD,OAAtCtD,CAApByD;AACD;AACF;;AACD,cAAKtF,KAAL,CAAWQ,iBAAX,CAA6BM,QAA7B,CAAsCwE,iBAAtC;AACD;;AAED,UAAMG,QAAQ,GAAGN,OAAO,KAAK,CAA7B;;AACA,YAAKO,aAAL,CAAmBD,QAAnB;;AACA,YAAK1C,gBAAL,CAAsBtD,QAAtB,EAAgCgG,QAAhC;;AACA,UAAI,MAAK7F,KAAL,CAAWuD,aAAf,EAA8B;AAC5BC,+BAAUC,SAAVD,CAAoBqC,QAApBrC,EAA8B,MAAKxD,KAAL,CAAW0D,kBAAX,IAAiC,OAA/DF;AACD;;AACD1C,4BAASiF,MAATjF,CAAgB,MAAKV,KAAL,CAAWQ,iBAA3BE,EAA8C;AAC5C0E,gBAD4C,EAC5CA,QAD4C;AAE5CQ,kBAAU,EAAE,CAFgC;AAG5CT,eAH4C,EAG5CA,OAH4C;AAI5C3D,uBAAe,EAAE,MAAK5B,KAAL,CAAW6B,mBAJgB;AAK5C4D,aAAK,EAAEA,KAAF,SAAEA,SAAF,WAAEA,WAASP;AAL4B,OAA9CpE,EAMGmF,KANHnF,CAMS,iBAAkB;AAAA,YAAfoF,QAAe,SAAfA,QAAe;;AACzB,YAAIA,QAAJ,EAAc;AACZ,gBAAK/C,gBAAL,CAAsBxD,IAAtB,EAA4BkG,QAA5B;;AACA,cAAIA,QAAJ,EAAc;AAAA;;AACZ,2DAAK7F,KAAL,EAAWmG,YAAX;AADF,iBAEO;AAAA;;AACL,2DAAKnG,KAAL,EAAWoG,aAAX;AACD;AACF;AAdH;AAlSoC;;AAAAnG,+EAoTzB,YAAwC;AAAA,UAAvCoG,OAAuC,uEAAP,EAAO;;AACnD,YAAKjC,aAAL,CAEEc,SAFF,EAGE,MAAKlF,KAAL,CAAWM,WAHb,EAIE+F,OAAO,CAACb,QAARa,GAAmBA,OAAO,CAACb,QAA3Ba,GAAsC,CAJxC,EAKEA,OAAO,CAACZ,KALV;;AAUA,YAAKa,WAAL;AA/ToC;;AAAArG,gFAkUxB,YAAwC;AAAA,UAAvCoG,OAAuC,uEAAP,EAAO;;AAEpD,YAAKjC,aAAL,CACEc,SADF,EAEE,CAFF,EAGEmB,OAAO,CAACb,QAARa,GAAmBA,OAAO,CAACb,QAA3Ba,GAAsC,CAHxC,EAIEA,OAAO,CAACZ,KAJV;;AASA,YAAKa,WAAL;AA7UoC;;AAAArG,kFAgVd,YAAM;AAE5B,8BAAU,MAAKwB,SAAf,EAA0B,eAA1B;;AACA,UAAM8E,cAAc,GAAG,MAAK9E,SAAL,CAAeH,WAAf,CAA2B;AAChDC,kBAAU,EAAE,CAAC,CAAD,EAAI,CAAJ,CADoC;AAEhDC,mBAAW,EAAE,CAAC,CAAD,EAAI,CAAJ,CAFmC;AAGhDE,mBAAW,EAAE;AAHmC,OAA3B,CAAvB;;AAKA,UAAM8E,oBAAoB,GAAG;AAC3BC,eAAO,EAAEF,cADkB;AAE3BG,uBAAe,EAAE,MAAK1G,KAAL,CAAW2G;AAFD,OAA7B;AAKA,aACEzG,oBAAC0G,oCAAD;AAAmBC,4BAAoB,EAAE,MAAKC;AAA9C,SACE5G,oBAAC6G,sBAASC,IAAV;AACErC,qBAAa,EAAE,MAAKhB,WAAL,GAAmB,MAAnB,GAA4B,MAD7C;AAEEsD,WAAG,EAAE,MAAKvC,iBAFZ;AAGEwC,aAAK,EAAE,CAACC,MAAM,CAACC,OAAR,EAAiBZ,oBAAjB;AAHT,QADF,CADF;AA7VoC;;AAAAvG,iFAwWf,YAAM;AAC3B,yBAOI,MAAKD,KAPT;AAAA,UACEqH,qBADF,gBACEA,qBADF;AAAA,UAEE/G,WAFF,gBAEEA,WAFF;AAAA,UAGED,cAHF,gBAGEA,cAHF;AAAA,UAIEE,UAJF,gBAIEA,UAJF;AAAA,UAKE+G,oBALF,gBAKEA,oBALF;AAAA,UAMEC,qBANF,gBAMEA,qBANF;AASA,UAAMzC,QAAQ,GAAGzE,cAAc,KAAK,MAApC;AACA,UAAMmH,WAAW,GAAGjH,UAAU,KAAK,MAAnC;AACA,UAAMkH,cAAc,GAAGlH,UAAU,KAAK,OAAtC;AAMA,UAAMmH,uBAAuB,GAAGC,yBAAYC,KAAZD,GAAoB7C,QAApB6C,GAA+B,CAAC7C,QAAhE;AAEA,UAAM+C,mBAAmB,GAAG;AAC1BnB,uBAAe,EAAEW,qBADS;AAE1B1E,aAAK,EAAErC;AAFmB,OAA5B;AAIA,UAAMmB,SAAS,GAAG,MAAKA,SAAvB;AACA,8BAAUA,SAAV,EAAqB,eAArB;AAEA,UAAIqG,eAAJ;;AACA,UAAIL,cAAJ,EAAoB;AAClB,YAAMM,mBAAmB,GAAGtG,SAAS,CAACH,WAAVG,CAAsB;AAChDF,oBAAU,EAAE,CAAC,CAAD,EAAI,CAAJ,CADoC;AAEhDC,qBAAW,EAAEsD,QAAQ,GAAG,CAAC,CAAD,EAAIxE,WAAJ,CAAH,GAAuB,CAAC,CAAD,EAAI,CAACA,WAAL,CAFI;AAGhDoB,qBAAW,EAAE;AAHmC,SAAtBD,CAA5B;AAKAqG,uBAAe,GAAG;AAChBE,mBAAS,EAAE,CAAC;AAAEC,sBAAU,EAAEF;AAAd,WAAD;AADK,SAAlBD;AAGD;;AAED,UAAII,gBAAyD,GAAG,CAAhE;;AACA,UAAIV,WAAJ,EAAiB;AACf,YAAMW,kBAAkB,GAAGrD,QAAQ,GAAG,CAACxE,WAAJ,GAAmBA,WAAtD;AACA4H,wBAAgB,GAAGzG,SAAS,CAACH,WAAVG,CAAsB;AACvCF,oBAAU,EAAE,CAAC,CAAD,EAAI,CAAJ,CAD2B;AAEvCC,qBAAW,EAAE,CAAC2G,kBAAD,EAAqB,CAArB,CAF0B;AAGvCzG,qBAAW,EAAE;AAH0B,SAAtBD,CAAnByG;AAKD;;AACD,UAAME,YAGL,GAAG;AACFJ,iBAAS,EAAE,CAAC;AAAEC,oBAAU,EAAEC;AAAd,SAAD,CADT;AAEFG,qBAAa,EAAEX,uBAAuB,GAAG,aAAH,GAAmB;AAFvD,OAHJ;AAQA,aACExH,oBAAC6G,sBAASC,IAAV;AAAeE,aAAK,EAAEC,MAAM,CAACmB,IAA7B;AAAmCC,gBAAQ,EAAE,MAAKC;AAAlD,SACEtI,oBAAC6G,sBAASC,IAAV;AACEE,aAAK,EAAE,CACL3G,UAAU,KAAK,OAAfA,GACI4G,MAAM,CAACsB,eADXlI,GAEI4G,MAAM,CAACuB,gBAHN,EAILZ,eAJK,EAKLP,qBALK,CADT;AAQEoB,iCAAyB,EACvB,MAAKhF,WAAL,GAAmB,qBAAnB,GAA2C;AAT/C,SAWG,OAAO,MAAK3D,KAAL,CAAW4I,QAAlB,KAA+B,UAA/B,GACG,MAAK5I,KAAL,CAAW4I,QAAX,CAAoB,MAAKnH,SAAzB,CADH,GAEG,MAAKzB,KAAL,CAAW4I,QAbjB,EAcG,MAAKC,aAAL,EAdH,CADF,EAiBE3I,oBAAC6G,sBAASC,IAAV;AACErC,qBAAa,EAAC,UADhB;AAEEsC,WAAG,EAAE,MAAK3C,wBAFZ;AAGEG,gCAAwB,EAAE,MAAKd,WAHjC;AAIEuD,aAAK,EAAE,CAACC,MAAM,CAAC2B,eAAR,EAAyBV,YAAzB,EAAuCd,oBAAvC;AAJT,SAKEpH,oBAAC6G,iBAAD;AAAMG,aAAK,EAAEW;AAAb,SACG,MAAK7H,KAAL,CAAW+I,oBAAX,CAAgC,MAAKtH,SAArC,CADH,CALF,CAjBF,CADF;AAhaoC;;AAAAxB,qFA+bVgH,aAAD,EAA4B;AAAA;;AAGpD,YACE7B,iBADF,CACkEb,OADlE,GAC4E0C,GAD5E;AAED,qDAAKjH,KAAL,EAAWgJ,YAAX,mGAA0B/B,GAA1B;AApcoC;;AAGpC,QAAMxG,MAAK,GAAG,IAAIK,sBAASE,KAAb,CAAmB,CAAnB,CAAd;;AACA,QAAML,OAAM,GAAG,IAAIG,sBAASE,KAAb,CAAmB,CAAnB,CAAf;;AACA,QAAMJ,kBAAiB,GAAG,IAAIE,sBAASE,KAAb,CAAmB,CAAnB,CAA1B;;AAEA,UAAKZ,KAAL,GAAa;AACXK,WAAK,EAALA,MADW;AAEXE,YAAM,EAANA,OAFW;AAGXC,uBAAiB,EAAjBA,kBAHW;AAIXC,oBAAc,EAAE;AAJL,KAAb;;AAOA,UAAKoI,mBAAL,CAAyBjJ,MAAzB,EAAgC,MAAKI,KAArC;;AAdoC;AAerC;;;;WAED8I,oCACElJ,KADFkJ,EAEE9I,KAFF8I,EAGE;AACA,UACE,KAAKlJ,KAAL,CAAWK,cAAX,KAA8BL,KAAK,CAACK,cAApC,IACA,KAAKL,KAAL,CAAWM,WAAX,KAA2BN,KAAK,CAACM,WADjC,IAEA,KAAKN,KAAL,CAAWO,UAAX,KAA0BP,KAAK,CAACO,UAFhC,IAGA,KAAKH,KAAL,CAAWS,cAAX,KAA8BT,KAAK,CAACS,cAJtC,EAKE;AACA,aAAKoI,mBAAL,CAAyBjJ,KAAzB,EAAgCI,KAAhC;AACD;AACF;;;WA0aD+I,kBAAS;AACP,yBAKI,KAAKnJ,KALT;AAAA,UACEK,cADF,gBACEA,cADF;AAAA,UAEEuD,cAFF,gBAEEA,cAFF;AAAA,UAGEiB,SAHF,gBAGEA,SAHF;AAAA,UAIED,gBAJF,gBAIEA,gBAJF;AAOA,UAAME,QAAQ,GAAGzE,cAAc,KAAK,MAApC;AAKA,UAAM0E,kBAAkB,GACtB,CAACD,QAAQ,GAAG,CAAH,GAAO,CAAC,CAAjB,KAAuB,KAAKnB,WAAL,GAAmB,CAAC,CAApB,GAAwB,CAA/C,CADF;AAMA,UAAMqB,OAAO,GAAGF,QAAQ,GACpB;AAAEG,YAAI,EAAE,CAAR;AAAWtC,aAAK,EAAE,KAAKgB,WAAL,GAAmBuB,SAAnB,GAA+BL;AAAjD,OADoB,GAEpB;AAAEM,aAAK,EAAE,CAAT;AAAYxC,aAAK,EAAE,KAAKgB,WAAL,GAAmBuB,SAAnB,GAA+BL;AAAlD,OAFJ;AAIA,aACE3E,oBAACkJ,oCAAD;AAEEnC,WAAG,EAAE,KAAKoC,gBAFZ;AAGErE,eAAO,EAAEA,OAHX;AAIEK,qBAAa,EAAEN,kBAAkB,GAAGH,gBAJtC;AAKE0E,mBAAW,EAAE,CAAC,CAAC,EAAF,EAAM,EAAN,CALf;AAMEhH,sBAAc,EAAE,KAAKA,cANvB;AAOEuE,4BAAoB,EAAE,KAAK0C,yBAP7B;AAQEC,sCAA8B,EAC5B,KAAKxJ,KAAL,CAAWwJ,8BATf;AAWEC,eAAO,EACL7F,cAAc,KAAK,eAAnBA,IAAsCA,cAAc,KAAK;AAZ7D,SAcG,KAAK8F,YAAL,EAdH,CADF;AAkBD;;;EAhgBuCC,e;;;;gBAArB7J,c,gBAIG;AACpBQ,aAAW,EAAE,GADO;AAEpBD,gBAAc,EAAE,MAFI;AAGpBwB,qBAAmB,EAAE,IAHD;AAIpBtB,YAAU,EAAE,OAJQ;AAKpBsE,WAAS,EAAE,EALS;AAMpBD,kBAAgB,EAAE,CANE;AAOpB+B,cAAY,EAAE,oBAPM;AAQpB/C,gBAAc,EAAE,UARI;AASpB4F,gCAA8B,EAAE;AATZ;;gBAJH1J,c,aAwDA;AACjB8J,MAAI,EAAE,MADW;AAEjBC,OAAK,EAAE;AAFU;;AA2crB,IAAM1C,MAAM,GAAG2C,wBAAWC,MAAXD,CAAkB;AAC/BhB,iBAAe,6BACVgB,wBAAWE,kBADD;AAEbC,UAAM,EAAE,IAFK;AAGb5B,iBAAa,EAAE;AAHF,IADgB;AAM/BK,kBAAgB,6BACXoB,wBAAWE,kBADA;AAEdC,UAAM,EAAE;AAFM,IANe;AAU/BxB,iBAAe,6BACVqB,wBAAWE,kBADD,CAVgB;AAa/B1B,MAAI,EAAE;AACJ4B,QAAI,EAAE,CADF;AAEJD,UAAM,EAAE,CAFJ;AAGJE,YAAQ,EAAE;AAHN,GAbyB;AAkB/B/C,SAAO,6BACF0C,wBAAWE,kBADT;AAELC,UAAM,EAAE;AAFH;AAlBwB,CAAlBH,CAAf","names":["DRAG_TOSS","IDLE","DRAGGING","SETTLING","DrawerLayout","constructor","props","_defineProperty","React","createRef","state","drawerPosition","drawerWidth","drawerType","dragXValue","dragX","touchXValue","touchX","drawerTranslation","containerWidth","Animated","multiply","Value","add","setValue","translationX","startPositionX","dragOffsetFromOnStartPosition","interpolate","inputRange","outputRange","openValue","extrapolate","gestureOptions","useNativeDriver","useNativeAnimations","onDrawerSlide","listener","ev","Math","floor","abs","nativeEvent","position","onGestureEvent","event","x","setState","layout","width","newState","drawerWillShow","onDrawerStateChanged","oldState","State","ACTIVE","handleRelease","emitStateChanged","keyboardDismissMode","Keyboard","dismiss","hideStatusBar","StatusBar","setHidden","statusBarAnimation","drawerShown","drawerLockMode","closeDrawer","velocityX","gestureStartX","dragOffsetBasedOnStart","startOffsetX","projOffsetX","shouldOpen","animateDrawer","showing","accessibilityIsModalView","current","setNativeProps","accessibilityViewIsModal","pointerEventsView","pointerEvents","minSwipeDistance","edgeWidth","fromLeft","gestureOrientation","hitSlop","left","undefined","right","panGestureHandler","activeOffsetX","fromValue","toValue","velocity","speed","nextFramePosition","min","max","willShow","updateShowing","spring","bounciness","start","finished","onDrawerOpen","onDrawerClose","options","forceUpdate","overlayOpacity","dynamicOverlayStyles","opacity","backgroundColor","overlayColor","_TapGestureHandler","onHandlerStateChange","onTapHandlerStateChange","_reactNative","View","ref","style","styles","overlay","drawerBackgroundColor","drawerContainerStyle","contentContainerStyle","drawerSlide","containerSlide","reverseContentDirection","I18nManager","isRTL","dynamicDrawerStyles","containerStyles","containerTranslateX","transform","translateX","drawerTranslateX","closedDrawerOffset","drawerStyles","flexDirection","main","onLayout","handleContainerLayout","containerOnBack","containerInFront","importantForAccessibility","children","renderOverlay","drawerContainer","renderNavigationView","onGestureRef","updateAnimatedEvent","UNSAFE_componentWillUpdate","render","_PanGestureHandler","setPanGestureRef","failOffsetY","openingHandlerStateChange","enableTrackpadTwoFingerGesture","enabled","renderDrawer","Component","Left","Right","StyleSheet","create","absoluteFillObject","zIndex","flex","overflow"],"sources":["DrawerLayout.tsx"],"sourcesContent":["// This component is based on RN's DrawerLayoutAndroid API\n//\n// It perhaps deserves to be put in a separate repo, but since it relies on\n// react-native-gesture-handler library which isn't very popular at the moment I\n// decided to keep it here for the time being. It will allow us to move faster\n// and fix issues that may arise in gesture handler library that could be found\n// when using the drawer component\n\nimport * as React from 'react';\nimport { Component } from 'react';\nimport invariant from 'invariant';\nimport {\n  Animated,\n  StyleSheet,\n  View,\n  Keyboard,\n  StatusBar,\n  I18nManager,\n  StatusBarAnimation,\n  StyleProp,\n  ViewStyle,\n  LayoutChangeEvent,\n  NativeSyntheticEvent,\n} from 'react-native';\n\nimport {\n  GestureEvent,\n  HandlerStateChangeEvent,\n} from '../handlers/gestureHandlerCommon';\nimport {\n  PanGestureHandler,\n  PanGestureHandlerEventPayload,\n} from '../handlers/PanGestureHandler';\nimport {\n  TapGestureHandler,\n  TapGestureHandlerEventPayload,\n} from '../handlers/TapGestureHandler';\nimport { State } from '../State';\n\nconst DRAG_TOSS = 0.05;\n\nconst IDLE: DrawerState = 'Idle';\nconst DRAGGING: DrawerState = 'Dragging';\nconst SETTLING: DrawerState = 'Settling';\n\nexport type DrawerPosition = 'left' | 'right';\n\nexport type DrawerState = 'Idle' | 'Dragging' | 'Settling';\n\nexport type DrawerType = 'front' | 'back' | 'slide';\n\nexport type DrawerLockMode = 'unlocked' | 'locked-closed' | 'locked-open';\n\nexport type DrawerKeyboardDismissMode = 'none' | 'on-drag';\n\nexport interface DrawerLayoutProps {\n  /**\n   * This attribute is present in the standard implementation already and is one\n   * of the required params. Gesture handler version of DrawerLayout make it\n   * possible for the function passed as `renderNavigationView` to take an\n   * Animated value as a parameter that indicates the progress of drawer\n   * opening/closing animation (progress value is 0 when closed and 1 when\n   * opened). This can be used by the drawer component to animated its children\n   * while the drawer is opening or closing.\n   */\n  renderNavigationView: (\n    progressAnimatedValue: Animated.Value\n  ) => React.ReactNode;\n\n  drawerPosition?: DrawerPosition;\n\n  drawerWidth?: number;\n\n  drawerBackgroundColor?: string;\n\n  drawerLockMode?: DrawerLockMode;\n\n  keyboardDismissMode?: DrawerKeyboardDismissMode;\n\n  /**\n   * Called when the drawer is closed.\n   */\n  onDrawerClose?: () => void;\n\n  /**\n   * Called when the drawer is opened.\n   */\n  onDrawerOpen?: () => void;\n\n  /**\n   * Called when the status of the drawer changes.\n   */\n  onDrawerStateChanged?: (\n    newState: DrawerState,\n    drawerWillShow: boolean\n  ) => void;\n  useNativeAnimations?: boolean;\n\n  drawerType?: DrawerType;\n\n  /**\n   * Defines how far from the edge of the content view the gesture should\n   * activate.\n   */\n  edgeWidth?: number;\n\n  minSwipeDistance?: number;\n\n  /**\n   * When set to true Drawer component will use\n   * {@link https://reactnative.dev/docs/statusbar StatusBar} API to hide the OS\n   * status bar whenever the drawer is pulled or when its in an \"open\" state.\n   */\n  hideStatusBar?: boolean;\n\n  /**\n   * @default 'slide'\n   *\n   * Can be used when hideStatusBar is set to true and will select the animation\n   * used for hiding/showing the status bar. See\n   * {@link https://reactnative.dev/docs/statusbar StatusBar} documentation for\n   * more details\n   */\n  statusBarAnimation?: StatusBarAnimation;\n\n  /**\n   * @default black\n   *\n   * Color of a semi-transparent overlay to be displayed on top of the content\n   * view when drawer gets open. A solid color should be used as the opacity is\n   * added by the Drawer itself and the opacity of the overlay is animated (from\n   * 0% to 70%).\n   */\n  overlayColor?: string;\n\n  contentContainerStyle?: StyleProp<ViewStyle>;\n\n  drawerContainerStyle?: StyleProp<ViewStyle>;\n\n  /**\n   * Enables two-finger gestures on supported devices, for example iPads with\n   * trackpads. If not enabled the gesture will require click + drag, with\n   * `enableTrackpadTwoFingerGesture` swiping with two fingers will also trigger\n   * the gesture.\n   */\n  enableTrackpadTwoFingerGesture?: boolean;\n\n  onDrawerSlide?: (position: number) => void;\n\n  onGestureRef?: (ref: PanGestureHandler) => void;\n}\n\nexport type DrawerLayoutState = {\n  dragX: Animated.Value;\n  touchX: Animated.Value;\n  drawerTranslation: Animated.Value;\n  containerWidth: number;\n};\n\nexport type DrawerMovementOption = {\n  velocity?: number;\n  speed?: number;\n};\nexport default class DrawerLayout extends Component<\n  DrawerLayoutProps,\n  DrawerLayoutState\n> {\n  static defaultProps = {\n    drawerWidth: 200,\n    drawerPosition: 'left',\n    useNativeAnimations: true,\n    drawerType: 'front',\n    edgeWidth: 20,\n    minSwipeDistance: 3,\n    overlayColor: 'rgba(0, 0, 0, 0.7)',\n    drawerLockMode: 'unlocked',\n    enableTrackpadTwoFingerGesture: false,\n  };\n\n  constructor(props: DrawerLayoutProps) {\n    super(props);\n\n    const dragX = new Animated.Value(0);\n    const touchX = new Animated.Value(0);\n    const drawerTranslation = new Animated.Value(0);\n\n    this.state = {\n      dragX,\n      touchX,\n      drawerTranslation,\n      containerWidth: 0,\n    };\n\n    this.updateAnimatedEvent(props, this.state);\n  }\n\n  UNSAFE_componentWillUpdate(\n    props: DrawerLayoutProps,\n    state: DrawerLayoutState\n  ) {\n    if (\n      this.props.drawerPosition !== props.drawerPosition ||\n      this.props.drawerWidth !== props.drawerWidth ||\n      this.props.drawerType !== props.drawerType ||\n      this.state.containerWidth !== state.containerWidth\n    ) {\n      this.updateAnimatedEvent(props, state);\n    }\n  }\n\n  private openValue?: Animated.AnimatedInterpolation;\n  private onGestureEvent?: (\n    event: GestureEvent<PanGestureHandlerEventPayload>\n  ) => void;\n  private accessibilityIsModalView = React.createRef<View>();\n  private pointerEventsView = React.createRef<View>();\n  private panGestureHandler = React.createRef<PanGestureHandler | null>();\n  private drawerShown = false;\n\n  static positions = {\n    Left: 'left',\n    Right: 'right',\n  };\n\n  private updateAnimatedEvent = (\n    props: DrawerLayoutProps,\n    state: DrawerLayoutState\n  ) => {\n    // Event definition is based on\n    const { drawerPosition, drawerWidth, drawerType } = props;\n    const {\n      dragX: dragXValue,\n      touchX: touchXValue,\n      drawerTranslation,\n      containerWidth,\n    } = state;\n\n    let dragX = dragXValue;\n    let touchX = touchXValue;\n\n    if (drawerPosition !== 'left') {\n      // Most of the code is written in a way to handle left-side drawer. In\n      // order to handle right-side drawer the only thing we need to do is to\n      // reverse events coming from gesture handler in a way they emulate\n      // left-side drawer gestures. E.g. dragX is simply -dragX, and touchX is\n      // calulcated by subtracing real touchX from the width of the container\n      // (such that when touch happens at the right edge the value is simply 0)\n      dragX = Animated.multiply(\n        new Animated.Value(-1),\n        dragXValue\n      ) as Animated.Value; // TODO(TS): (for all \"as\" in this file) make sure we can map this\n      touchX = Animated.add(\n        new Animated.Value(containerWidth),\n        Animated.multiply(new Animated.Value(-1), touchXValue)\n      ) as Animated.Value; // TODO(TS): make sure we can map this;\n      touchXValue.setValue(containerWidth);\n    } else {\n      touchXValue.setValue(0);\n    }\n\n    // While closing the drawer when user starts gesture outside of its area (in greyed\n    // out part of the window), we want the drawer to follow only once finger reaches the\n    // edge of the drawer.\n    // E.g. on the diagram below drawer is illustrate by X signs and the greyed out area by\n    // dots. The touch gesture starts at '*' and moves left, touch path is indicated by\n    // an arrow pointing left\n    // 1) +---------------+ 2) +---------------+ 3) +---------------+ 4) +---------------+\n    //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n    //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n    //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n    //    |XXXXXXXX|......|    |XXXXXXXX|.<-*..|    |XXXXXXXX|<--*..|    |XXXXX|<-----*..|\n    //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n    //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n    //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n    //    +---------------+    +---------------+    +---------------+    +---------------+\n    //\n    // For the above to work properly we define animated value that will keep\n    // start position of the gesture. Then we use that value to calculate how\n    // much we need to subtract from the dragX. If the gesture started on the\n    // greyed out area we take the distance from the edge of the drawer to the\n    // start position. Otherwise we don't subtract at all and the drawer be\n    // pulled back as soon as you start the pan.\n    //\n    // This is used only when drawerType is \"front\"\n    //\n    let translationX = dragX;\n    if (drawerType === 'front') {\n      const startPositionX = Animated.add(\n        touchX,\n        Animated.multiply(new Animated.Value(-1), dragX)\n      );\n\n      const dragOffsetFromOnStartPosition = startPositionX.interpolate({\n        inputRange: [drawerWidth! - 1, drawerWidth!, drawerWidth! + 1],\n        outputRange: [0, 0, 1],\n      });\n      translationX = Animated.add(\n        dragX,\n        dragOffsetFromOnStartPosition\n      ) as Animated.Value; // TODO: as above\n    }\n\n    this.openValue = Animated.add(translationX, drawerTranslation).interpolate({\n      inputRange: [0, drawerWidth!],\n      outputRange: [0, 1],\n      extrapolate: 'clamp',\n    });\n\n    const gestureOptions: {\n      useNativeDriver: boolean;\n      // TODO: make sure it is correct\n      listener?: (\n        ev: NativeSyntheticEvent<PanGestureHandlerEventPayload>\n      ) => void;\n    } = {\n      useNativeDriver: props.useNativeAnimations!,\n    };\n\n    if (this.props.onDrawerSlide) {\n      gestureOptions.listener = (ev) => {\n        const translationX = Math.floor(Math.abs(ev.nativeEvent.translationX));\n        const position = translationX / this.state.containerWidth;\n\n        this.props.onDrawerSlide?.(position);\n      };\n    }\n\n    this.onGestureEvent = Animated.event(\n      [{ nativeEvent: { translationX: dragXValue, x: touchXValue } }],\n      gestureOptions\n    );\n  };\n\n  private handleContainerLayout = ({ nativeEvent }: LayoutChangeEvent) => {\n    this.setState({ containerWidth: nativeEvent.layout.width });\n  };\n\n  private emitStateChanged = (\n    newState: DrawerState,\n    drawerWillShow: boolean\n  ) => {\n    this.props.onDrawerStateChanged?.(newState, drawerWillShow);\n  };\n\n  private openingHandlerStateChange = ({\n    nativeEvent,\n  }: HandlerStateChangeEvent<PanGestureHandlerEventPayload>) => {\n    if (nativeEvent.oldState === State.ACTIVE) {\n      this.handleRelease({ nativeEvent });\n    } else if (nativeEvent.state === State.ACTIVE) {\n      this.emitStateChanged(DRAGGING, false);\n      if (this.props.keyboardDismissMode === 'on-drag') {\n        Keyboard.dismiss();\n      }\n      if (this.props.hideStatusBar) {\n        StatusBar.setHidden(true, this.props.statusBarAnimation || 'slide');\n      }\n    }\n  };\n\n  private onTapHandlerStateChange = ({\n    nativeEvent,\n  }: HandlerStateChangeEvent<TapGestureHandlerEventPayload>) => {\n    if (\n      this.drawerShown &&\n      nativeEvent.oldState === State.ACTIVE &&\n      this.props.drawerLockMode !== 'locked-open'\n    ) {\n      this.closeDrawer();\n    }\n  };\n\n  private handleRelease = ({\n    nativeEvent,\n  }: HandlerStateChangeEvent<PanGestureHandlerEventPayload>) => {\n    const { drawerWidth, drawerPosition, drawerType } = this.props;\n    const { containerWidth } = this.state;\n    let { translationX: dragX, velocityX, x: touchX } = nativeEvent;\n\n    if (drawerPosition !== 'left') {\n      // See description in _updateAnimatedEvent about why events are flipped\n      // for right-side drawer\n      dragX = -dragX;\n      touchX = containerWidth - touchX;\n      velocityX = -velocityX;\n    }\n\n    const gestureStartX = touchX - dragX;\n    let dragOffsetBasedOnStart = 0;\n\n    if (drawerType === 'front') {\n      dragOffsetBasedOnStart =\n        gestureStartX > drawerWidth! ? gestureStartX - drawerWidth! : 0;\n    }\n\n    const startOffsetX =\n      dragX + dragOffsetBasedOnStart + (this.drawerShown ? drawerWidth! : 0);\n    const projOffsetX = startOffsetX + DRAG_TOSS * velocityX;\n\n    const shouldOpen = projOffsetX > drawerWidth! / 2;\n\n    if (shouldOpen) {\n      this.animateDrawer(startOffsetX, drawerWidth!, velocityX);\n    } else {\n      this.animateDrawer(startOffsetX, 0, velocityX);\n    }\n  };\n\n  private updateShowing = (showing: boolean) => {\n    this.drawerShown = showing;\n    this.accessibilityIsModalView.current?.setNativeProps({\n      accessibilityViewIsModal: showing,\n    });\n    this.pointerEventsView.current?.setNativeProps({\n      pointerEvents: showing ? 'auto' : 'none',\n    });\n    const { drawerPosition, minSwipeDistance, edgeWidth } = this.props;\n    const fromLeft = drawerPosition === 'left';\n    // gestureOrientation is 1 if the expected gesture is from left to right and\n    // -1 otherwise e.g. when drawer is on the left and is closed we expect left\n    // to right gesture, thus orientation will be 1.\n    const gestureOrientation =\n      (fromLeft ? 1 : -1) * (this.drawerShown ? -1 : 1);\n    // When drawer is closed we want the hitSlop to be horizontally shorter than\n    // the container size by the value of SLOP. This will make it only activate\n    // when gesture happens not further than SLOP away from the edge\n    const hitSlop = fromLeft\n      ? { left: 0, width: showing ? undefined : edgeWidth }\n      : { right: 0, width: showing ? undefined : edgeWidth };\n    // @ts-ignore internal API, maybe could be fixed in handler types\n    this.panGestureHandler.current?.setNativeProps({\n      hitSlop,\n      activeOffsetX: gestureOrientation * minSwipeDistance!,\n    });\n  };\n\n  private animateDrawer = (\n    fromValue: number | null | undefined,\n    toValue: number,\n    velocity: number,\n    speed?: number\n  ) => {\n    this.state.dragX.setValue(0);\n    this.state.touchX.setValue(\n      this.props.drawerPosition === 'left' ? 0 : this.state.containerWidth\n    );\n\n    if (fromValue != null) {\n      let nextFramePosition = fromValue;\n      if (this.props.useNativeAnimations) {\n        // When using native driver, we predict the next position of the\n        // animation because it takes one frame of a roundtrip to pass RELEASE\n        // event from native driver to JS before we can start animating. Without\n        // it, it is more noticable that the frame is dropped.\n        if (fromValue < toValue && velocity > 0) {\n          nextFramePosition = Math.min(fromValue + velocity / 60.0, toValue);\n        } else if (fromValue > toValue && velocity < 0) {\n          nextFramePosition = Math.max(fromValue + velocity / 60.0, toValue);\n        }\n      }\n      this.state.drawerTranslation.setValue(nextFramePosition);\n    }\n\n    const willShow = toValue !== 0;\n    this.updateShowing(willShow);\n    this.emitStateChanged(SETTLING, willShow);\n    if (this.props.hideStatusBar) {\n      StatusBar.setHidden(willShow, this.props.statusBarAnimation || 'slide');\n    }\n    Animated.spring(this.state.drawerTranslation, {\n      velocity,\n      bounciness: 0,\n      toValue,\n      useNativeDriver: this.props.useNativeAnimations!,\n      speed: speed ?? undefined,\n    }).start(({ finished }) => {\n      if (finished) {\n        this.emitStateChanged(IDLE, willShow);\n        if (willShow) {\n          this.props.onDrawerOpen?.();\n        } else {\n          this.props.onDrawerClose?.();\n        }\n      }\n    });\n  };\n\n  openDrawer = (options: DrawerMovementOption = {}) => {\n    this.animateDrawer(\n      // TODO: decide if it should be null or undefined is the proper value\n      undefined,\n      this.props.drawerWidth!,\n      options.velocity ? options.velocity : 0,\n      options.speed\n    );\n\n    // We need to force the update, otherwise the overlay is not rerendered and\n    // it would not be clickable\n    this.forceUpdate();\n  };\n\n  closeDrawer = (options: DrawerMovementOption = {}) => {\n    // TODO: decide if it should be null or undefined is the proper value\n    this.animateDrawer(\n      undefined,\n      0,\n      options.velocity ? options.velocity : 0,\n      options.speed\n    );\n\n    // We need to force the update, otherwise the overlay is not rerendered and\n    // it would be still clickable\n    this.forceUpdate();\n  };\n\n  private renderOverlay = () => {\n    /* Overlay styles */\n    invariant(this.openValue, 'should be set');\n    const overlayOpacity = this.openValue.interpolate({\n      inputRange: [0, 1],\n      outputRange: [0, 1],\n      extrapolate: 'clamp',\n    });\n    const dynamicOverlayStyles = {\n      opacity: overlayOpacity,\n      backgroundColor: this.props.overlayColor,\n    };\n\n    return (\n      <TapGestureHandler onHandlerStateChange={this.onTapHandlerStateChange}>\n        <Animated.View\n          pointerEvents={this.drawerShown ? 'auto' : 'none'}\n          ref={this.pointerEventsView}\n          style={[styles.overlay, dynamicOverlayStyles]}\n        />\n      </TapGestureHandler>\n    );\n  };\n\n  private renderDrawer = () => {\n    const {\n      drawerBackgroundColor,\n      drawerWidth,\n      drawerPosition,\n      drawerType,\n      drawerContainerStyle,\n      contentContainerStyle,\n    } = this.props;\n\n    const fromLeft = drawerPosition === 'left';\n    const drawerSlide = drawerType !== 'back';\n    const containerSlide = drawerType !== 'front';\n\n    // we rely on row and row-reverse flex directions to position the drawer\n    // properly. Apparently for RTL these are flipped which requires us to use\n    // the opposite setting for the drawer to appear from left or right\n    // according to the drawerPosition prop\n    const reverseContentDirection = I18nManager.isRTL ? fromLeft : !fromLeft;\n\n    const dynamicDrawerStyles = {\n      backgroundColor: drawerBackgroundColor,\n      width: drawerWidth,\n    };\n    const openValue = this.openValue;\n    invariant(openValue, 'should be set');\n\n    let containerStyles;\n    if (containerSlide) {\n      const containerTranslateX = openValue.interpolate({\n        inputRange: [0, 1],\n        outputRange: fromLeft ? [0, drawerWidth!] : [0, -drawerWidth!],\n        extrapolate: 'clamp',\n      });\n      containerStyles = {\n        transform: [{ translateX: containerTranslateX }],\n      };\n    }\n\n    let drawerTranslateX: number | Animated.AnimatedInterpolation = 0;\n    if (drawerSlide) {\n      const closedDrawerOffset = fromLeft ? -drawerWidth! : drawerWidth!;\n      drawerTranslateX = openValue.interpolate({\n        inputRange: [0, 1],\n        outputRange: [closedDrawerOffset, 0],\n        extrapolate: 'clamp',\n      });\n    }\n    const drawerStyles: {\n      transform: { translateX: number | Animated.AnimatedInterpolation }[];\n      flexDirection: 'row-reverse' | 'row';\n    } = {\n      transform: [{ translateX: drawerTranslateX }],\n      flexDirection: reverseContentDirection ? 'row-reverse' : 'row',\n    };\n\n    return (\n      <Animated.View style={styles.main} onLayout={this.handleContainerLayout}>\n        <Animated.View\n          style={[\n            drawerType === 'front'\n              ? styles.containerOnBack\n              : styles.containerInFront,\n            containerStyles,\n            contentContainerStyle,\n          ]}\n          importantForAccessibility={\n            this.drawerShown ? 'no-hide-descendants' : 'yes'\n          }>\n          {typeof this.props.children === 'function'\n            ? this.props.children(this.openValue)\n            : this.props.children}\n          {this.renderOverlay()}\n        </Animated.View>\n        <Animated.View\n          pointerEvents=\"box-none\"\n          ref={this.accessibilityIsModalView}\n          accessibilityViewIsModal={this.drawerShown}\n          style={[styles.drawerContainer, drawerStyles, drawerContainerStyle]}>\n          <View style={dynamicDrawerStyles}>\n            {this.props.renderNavigationView(this.openValue as Animated.Value)}\n          </View>\n        </Animated.View>\n      </Animated.View>\n    );\n  };\n\n  private setPanGestureRef = (ref: PanGestureHandler) => {\n    // TODO(TS): make sure it is OK taken from\n    // https://github.com/DefinitelyTyped/DefinitelyTyped/issues/31065#issuecomment-596081842\n    (this\n      .panGestureHandler as React.MutableRefObject<PanGestureHandler>).current = ref;\n    this.props.onGestureRef?.(ref);\n  };\n\n  render() {\n    const {\n      drawerPosition,\n      drawerLockMode,\n      edgeWidth,\n      minSwipeDistance,\n    } = this.props;\n\n    const fromLeft = drawerPosition === 'left';\n\n    // gestureOrientation is 1 if the expected gesture is from left to right and\n    // -1 otherwise e.g. when drawer is on the left and is closed we expect left\n    // to right gesture, thus orientation will be 1.\n    const gestureOrientation =\n      (fromLeft ? 1 : -1) * (this.drawerShown ? -1 : 1);\n\n    // When drawer is closed we want the hitSlop to be horizontally shorter than\n    // the container size by the value of SLOP. This will make it only activate\n    // when gesture happens not further than SLOP away from the edge\n    const hitSlop = fromLeft\n      ? { left: 0, width: this.drawerShown ? undefined : edgeWidth }\n      : { right: 0, width: this.drawerShown ? undefined : edgeWidth };\n\n    return (\n      <PanGestureHandler\n        // @ts-ignore could be fixed in handler types\n        ref={this.setPanGestureRef}\n        hitSlop={hitSlop}\n        activeOffsetX={gestureOrientation * minSwipeDistance!}\n        failOffsetY={[-15, 15]}\n        onGestureEvent={this.onGestureEvent}\n        onHandlerStateChange={this.openingHandlerStateChange}\n        enableTrackpadTwoFingerGesture={\n          this.props.enableTrackpadTwoFingerGesture\n        }\n        enabled={\n          drawerLockMode !== 'locked-closed' && drawerLockMode !== 'locked-open'\n        }>\n        {this.renderDrawer()}\n      </PanGestureHandler>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  drawerContainer: {\n    ...StyleSheet.absoluteFillObject,\n    zIndex: 1001,\n    flexDirection: 'row',\n  },\n  containerInFront: {\n    ...StyleSheet.absoluteFillObject,\n    zIndex: 1002,\n  },\n  containerOnBack: {\n    ...StyleSheet.absoluteFillObject,\n  },\n  main: {\n    flex: 1,\n    zIndex: 0,\n    overflow: 'hidden',\n  },\n  overlay: {\n    ...StyleSheet.absoluteFillObject,\n    zIndex: 1000,\n  },\n});\n"]}