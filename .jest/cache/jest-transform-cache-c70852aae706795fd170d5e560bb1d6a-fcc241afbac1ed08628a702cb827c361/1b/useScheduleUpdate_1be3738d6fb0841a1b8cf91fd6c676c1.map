{"version":3,"mappings":";;;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,IAAMA,qBAAqB,GAAG,mCAA9B;AAEO,IAAMC,qBAAqB,GAAGC,KAAK,CAACC,aAAND,CAGlC;AACDE,gBADC,4BACgB;AACf,UAAM,IAAIC,KAAJ,CAAUL,qBAAV,CAAN;AAFD;AAIDM,cAJC,0BAIc;AACb,UAAM,IAAID,KAAJ,CAAUL,qBAAV,CAAN;AACD;AANA,CAHkCE,CAA9B;;;AAmBQ,SAASK,iBAAT,CAA2BC,QAA3B,EAAiD;AAC9D,0BAAyCN,KAAK,CAACO,UAANP,CACvCD,qBADuCC,CAAzC;AAAA,MAAQE,cAAR,qBAAQA,cAAR;AAAA,MAAwBE,YAAxB,qBAAwBA,YAAxB;;AAIAF,gBAAc,CAACI,QAAD,CAAdJ;AAEAF,OAAK,CAACQ,SAANR,CAAgBI,YAAhBJ;AACD","names":["MISSING_CONTEXT_ERROR","ScheduleUpdateContext","React","createContext","scheduleUpdate","Error","flushUpdates","useScheduleUpdate","callback","useContext","useEffect"],"sources":["useScheduleUpdate.tsx"],"sourcesContent":["import * as React from 'react';\n\nconst MISSING_CONTEXT_ERROR = \"Couldn't find a schedule context.\";\n\nexport const ScheduleUpdateContext = React.createContext<{\n  scheduleUpdate: (callback: () => void) => void;\n  flushUpdates: () => void;\n}>({\n  scheduleUpdate() {\n    throw new Error(MISSING_CONTEXT_ERROR);\n  },\n  flushUpdates() {\n    throw new Error(MISSING_CONTEXT_ERROR);\n  },\n});\n\n/**\n * When screen config changes, we want to update the navigator in the same update phase.\n * However, navigation state is in the root component and React won't let us update it from a child.\n * This is a workaround for that, the scheduled update is stored in the ref without actually calling setState.\n * It lets all subsequent updates access the latest state so it stays correct.\n * Then we call setState during after the component updates.\n */\nexport default function useScheduleUpdate(callback: () => void) {\n  const { scheduleUpdate, flushUpdates } = React.useContext(\n    ScheduleUpdateContext\n  );\n\n  scheduleUpdate(callback);\n\n  React.useEffect(flushUpdates);\n}\n"]}