{"version":3,"mappings":";;;;;;;AAKA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAce,SAASA,eAAT,OAKK;AAAA,MAJlBC,MAIkB,QAJlBA,MAIkB;AAAA,MAHlBC,QAGkB,QAHlBA,QAGkB;AAAA,MAFbC,cAEa,QAFlBC,GAEkB;AAAA,MADlBC,QACkB,QADlBA,QACkB;;AAClB,0BAA6CC,KAAK,CAACC,UAAND,CAC3CE,iCAD2CF,CAA7C;AAAA,MAAsBG,kBAAtB,qBAAQC,YAAR;;AAIA,SAAOJ,KAAK,CAACK,WAANL,CACJF,aAAD,EAAiB;AACf,QAAMQ,KAAK,GAAGV,QAAQ,EAAtB;AACA,QAAMW,MAAM,GAAGZ,MAAM,CAACa,qBAAPb,CAA6BW,KAA7BX,EAAoCG,GAApCH,CAAf;;AAEA,QAAIY,MAAM,KAAKD,KAAf,EAAsB;AACpBP,cAAQ,CAACQ,MAAD,CAARR;AACD;;AAED,QAAII,kBAAkB,KAAKM,SAAvBN,IAAoCN,cAAc,KAAKY,SAA3D,EAAsE;AACpEN,wBAAkB,CAACN,cAAD,CAAlBM;AACD;AAXE,KAaL,CAACP,QAAD,EAAWO,kBAAX,EAA+BR,MAA/B,EAAuCI,QAAvC,EAAiDF,cAAjD,CAbKG,CAAP;AAeD","names":["useOnRouteFocus","router","getState","sourceRouteKey","key","setState","React","useContext","NavigationBuilderContext","onRouteFocusParent","onRouteFocus","useCallback","state","result","getStateForRouteFocus","undefined"],"sources":["useOnRouteFocus.tsx"],"sourcesContent":["import type {\n  NavigationAction,\n  NavigationState,\n  Router,\n} from '@react-navigation/routers';\nimport * as React from 'react';\n\nimport NavigationBuilderContext from './NavigationBuilderContext';\n\ntype Options<Action extends NavigationAction> = {\n  router: Router<NavigationState, Action>;\n  getState: () => NavigationState;\n  setState: (state: NavigationState) => void;\n  key?: string;\n};\n\n/**\n * Hook to handle focus actions for a route.\n * Focus action needs to be treated specially, coz when a nested route is focused,\n * the parent navigators also needs to be focused.\n */\nexport default function useOnRouteFocus<Action extends NavigationAction>({\n  router,\n  getState,\n  key: sourceRouteKey,\n  setState,\n}: Options<Action>) {\n  const { onRouteFocus: onRouteFocusParent } = React.useContext(\n    NavigationBuilderContext\n  );\n\n  return React.useCallback(\n    (key: string) => {\n      const state = getState();\n      const result = router.getStateForRouteFocus(state, key);\n\n      if (result !== state) {\n        setState(result);\n      }\n\n      if (onRouteFocusParent !== undefined && sourceRouteKey !== undefined) {\n        onRouteFocusParent(sourceRouteKey);\n      }\n    },\n    [getState, onRouteFocusParent, router, setState, sourceRouteKey]\n  );\n}\n"]}