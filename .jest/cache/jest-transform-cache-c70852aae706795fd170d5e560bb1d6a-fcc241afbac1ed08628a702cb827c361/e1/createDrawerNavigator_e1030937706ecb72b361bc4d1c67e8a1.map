{"version":3,"mappings":";;;;;;;;;;;;;;;AAAA;;AAWA;;AACA;;AAOA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAWA,SAASA,eAAT,OAQU;AAAA,MAPRC,gBAOQ,QAPRA,gBAOQ;AAAA,MANOC,mBAMP,QANRC,aAMQ;AAAA,MALRC,YAKQ,QALRA,YAKQ;AAAA,MAJRC,QAIQ,QAJRA,QAIQ;AAAA,MAHRC,eAGQ,QAHRA,eAGQ;AAAA,MAFRC,aAEQ,QAFRA,aAEQ;AAAA,MADLC,kBACK;AACR,MAEEC,aAFF,GAQID,kBARJ,CAEEC,aAFF;AAAA,MAIEC,IAJF,GAQIF,kBARJ,CAIEE,IAJF;AAAA,MAMEC,oBANF,GAQIH,kBARJ,CAMEG,oBANF;AAAA,MAOKC,IAPL,0CAQIJ,kBARJ;AAUA,MAAIK,oBAA6C,GAAG,EAApD;;AAEA,MAAIF,oBAAJ,EAA0B;AACxBG,2BAAcD,oBAAdC,EAAoC;AAClCC,oBAAc,EAAEJ,oBAAoB,CAACI,cADH;AAElCC,gBAAU,EAAEL,oBAAoB,CAACK,UAFC;AAGlCC,oBAAc,EAAEN,oBAAoB,CAACO,SAHH;AAIlCC,+BAAyB,EAAER,oBAAoB,CAACS,aAJd;AAKlCC,yBAAmB,EAAEV,oBAAoB,CAACU,mBALR;AAMlCC,sBAAgB,EAAEX,oBAAoB,CAACY,gBANL;AAOlCC,kBAAY,EAAEb,oBAAoB,CAACa,YAPD;AAQlCC,8BAAwB,EAAEd,oBAAoB,CAACe,kBARb;AASlCC,yBAAmB,EAAEhB,oBAAoB,CAACgB;AATR,KAApCb;AAaEA,UAAM,CAACc,IAAPd,CAAYD,oBAAZC,EACAe,OADAf,CACSgB,aAAD,EAAS;AACjB,UAAIjB,oBAAoB,CAACiB,GAAD,CAApBjB,KAA8BkB,SAAlC,EAA6C;AAE3C,eAAOlB,oBAAoB,CAACiB,GAAD,CAA3B;AACD;AANH,KACEhB;AAQF,2BACEH,oBADF,mMAEiMqB,IAAI,CAACC,SAALD,CAC7LnB,oBAD6LmB,EAE7L,IAF6LA,EAG7L,CAH6LA,CAFjM;AAQD;;AAED,MAAI,OAAOtB,IAAP,KAAgB,SAApB,EAA+B;AAC7BG,wBAAoB,CAACH,IAArBG,GAA4BH,IAA5BG;AAEA,2BACE,IADF;AAID;;AAED,MAAI,OAAOJ,aAAP,KAAyB,SAA7B,EAAwC;AACtC,2BACE,IADF;AAID;;AAED,MAAMN,aAA2B,GAC/BD,mBAAmB,KAAK6B,SAAxB7B,GACIA,mBADJA,GAEIO,aAAa,GACb,MADa,GAEb,QALN;;AAOA,cACE,kCAMEyB,oBANF,EAMgB;AACdjC,oBADc,EACdA,gBADc;AAEdE,iBAFc,EAEdA,aAFc;AAGdC,gBAHc,EAGdA,YAHc;AAIdC,YAJc,EAIdA,QAJc;AAKdC,mBALc,EAKdA,eALc;AAMdC,iBANc,EAMdA,aANc;AAOdM;AAPc,GANhB,CADF;AAAA,MAAQsB,KAAR,SAAQA,KAAR;AAAA,MAAeC,WAAf,SAAeA,WAAf;AAAA,MAA4BC,UAA5B,SAA4BA,UAA5B;AAAA,MAAwCC,iBAAxC,SAAwCA,iBAAxC;;AAiBA,SACEC,oBAACD,iBAAD,QACEC,oBAACC,mBAAD,eACM5B,IADN;AAEET,iBAAa,EAAEA,aAFjB;AAGEgC,SAAK,EAAEA,KAHT;AAIEC,eAAW,EAAEA,WAJf;AAKEC,cAAU,EAAEA;AALd,KADF,CADF;AAWD;;eAEc,oCAKbrC,eALa","names":["DrawerNavigator","initialRouteName","customDefaultStatus","defaultStatus","backBehavior","children","screenListeners","screenOptions","restWithDeprecated","openByDefault","lazy","drawerContentOptions","rest","defaultScreenOptions","Object","drawerPosition","drawerType","swipeEdgeWidth","edgeWidth","drawerHideStatusBarOnOpen","hideStatusBar","keyboardDismissMode","swipeMinDistance","minSwipeDistance","overlayColor","drawerStatusBarAnimation","statusBarAnimation","gestureHandlerProps","keys","forEach","key","undefined","JSON","stringify","DrawerRouter","state","descriptors","navigation","NavigationContent","React","_DrawerView"],"sources":["createDrawerNavigator.tsx"],"sourcesContent":["import {\n  createNavigatorFactory,\n  DefaultNavigatorOptions,\n  DrawerActionHelpers,\n  DrawerNavigationState,\n  DrawerRouter,\n  DrawerRouterOptions,\n  DrawerStatus,\n  ParamListBase,\n  useNavigationBuilder,\n} from '@react-navigation/native';\nimport * as React from 'react';\nimport warnOnce from 'warn-once';\n\nimport type {\n  DrawerNavigationConfig,\n  DrawerNavigationEventMap,\n  DrawerNavigationOptions,\n} from '../types';\nimport DrawerView from '../views/DrawerView';\n\ntype Props = DefaultNavigatorOptions<\n  ParamListBase,\n  DrawerNavigationState<ParamListBase>,\n  DrawerNavigationOptions,\n  DrawerNavigationEventMap\n> &\n  DrawerRouterOptions &\n  DrawerNavigationConfig;\n\nfunction DrawerNavigator({\n  initialRouteName,\n  defaultStatus: customDefaultStatus,\n  backBehavior,\n  children,\n  screenListeners,\n  screenOptions,\n  ...restWithDeprecated\n}: Props) {\n  const {\n    // @ts-expect-error: openByDefault is deprecated\n    openByDefault,\n    // @ts-expect-error: lazy is deprecated\n    lazy,\n    // @ts-expect-error: drawerContentOptions is deprecated\n    drawerContentOptions,\n    ...rest\n  } = restWithDeprecated;\n\n  let defaultScreenOptions: DrawerNavigationOptions = {};\n\n  if (drawerContentOptions) {\n    Object.assign(defaultScreenOptions, {\n      drawerPosition: drawerContentOptions.drawerPosition,\n      drawerType: drawerContentOptions.drawerType,\n      swipeEdgeWidth: drawerContentOptions.edgeWidth,\n      drawerHideStatusBarOnOpen: drawerContentOptions.hideStatusBar,\n      keyboardDismissMode: drawerContentOptions.keyboardDismissMode,\n      swipeMinDistance: drawerContentOptions.minSwipeDistance,\n      overlayColor: drawerContentOptions.overlayColor,\n      drawerStatusBarAnimation: drawerContentOptions.statusBarAnimation,\n      gestureHandlerProps: drawerContentOptions.gestureHandlerProps,\n    });\n\n    (\n      Object.keys(defaultScreenOptions) as (keyof DrawerNavigationOptions)[]\n    ).forEach((key) => {\n      if (defaultScreenOptions[key] === undefined) {\n        // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n        delete defaultScreenOptions[key];\n      }\n    });\n\n    warnOnce(\n      drawerContentOptions,\n      `Drawer Navigator: 'drawerContentOptions' is deprecated. Migrate the options to 'screenOptions' instead.\\n\\nPlace the following in 'screenOptions' in your code to keep current behavior:\\n\\n${JSON.stringify(\n        defaultScreenOptions,\n        null,\n        2\n      )}\\n\\nSee https://reactnavigation.org/docs/drawer-navigator#options for more details.`\n    );\n  }\n\n  if (typeof lazy === 'boolean') {\n    defaultScreenOptions.lazy = lazy;\n\n    warnOnce(\n      true,\n      `Drawer Navigator: 'lazy' in props is deprecated. Move it to 'screenOptions' instead.\\n\\nSee https://reactnavigation.org/docs/drawer-navigator/#lazy for more details.`\n    );\n  }\n\n  if (typeof openByDefault === 'boolean') {\n    warnOnce(\n      true,\n      `Drawer Navigator: 'openByDefault' is deprecated. Use 'defaultStatus' and set it to 'open' or 'closed' instead.\\n\\nSee https://reactnavigation.org/docs/drawer-navigator/#defaultstatus for more details.`\n    );\n  }\n\n  const defaultStatus: DrawerStatus =\n    customDefaultStatus !== undefined\n      ? customDefaultStatus\n      : openByDefault\n      ? 'open'\n      : 'closed';\n\n  const { state, descriptors, navigation, NavigationContent } =\n    useNavigationBuilder<\n      DrawerNavigationState<ParamListBase>,\n      DrawerRouterOptions,\n      DrawerActionHelpers<ParamListBase>,\n      DrawerNavigationOptions,\n      DrawerNavigationEventMap\n    >(DrawerRouter, {\n      initialRouteName,\n      defaultStatus,\n      backBehavior,\n      children,\n      screenListeners,\n      screenOptions,\n      defaultScreenOptions,\n    });\n\n  return (\n    <NavigationContent>\n      <DrawerView\n        {...rest}\n        defaultStatus={defaultStatus}\n        state={state}\n        descriptors={descriptors}\n        navigation={navigation}\n      />\n    </NavigationContent>\n  );\n}\n\nexport default createNavigatorFactory<\n  DrawerNavigationState<ParamListBase>,\n  DrawerNavigationOptions,\n  DrawerNavigationEventMap,\n  typeof DrawerNavigator\n>(DrawerNavigator);\n"]}