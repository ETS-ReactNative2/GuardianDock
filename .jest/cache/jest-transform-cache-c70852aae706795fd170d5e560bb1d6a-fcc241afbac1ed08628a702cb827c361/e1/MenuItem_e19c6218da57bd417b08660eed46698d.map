{"version":3,"mappings":"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","names":["MenuItem","icon","title","disabled","onPress","style","contentStyle","testID","titleStyle","accessibilityLabel","theme","disabledColor","dark","white","black","alpha","rgb","string","titleColor","colors","text","iconColor","React","_TouchableRipple","styles","container","accessibilityRole","accessibilityState","_reactNative","row","item","pointerEvents","_Icon","source","size","color","content","widthWithIcon","_Text","selectable","numberOfLines","displayName","minWidth","maxWidth","iconWidth","StyleSheet","create","paddingHorizontal","height","justifyContent","flexDirection","width","fontSize","marginHorizontal"],"sources":["MenuItem.tsx"],"sourcesContent":["import color from 'color';\nimport * as React from 'react';\nimport {\n  StyleProp,\n  StyleSheet,\n  TextStyle,\n  View,\n  ViewStyle,\n} from 'react-native';\nimport Icon, { IconSource } from '../Icon';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport Text from '../Typography/Text';\nimport { black, white } from '../../styles/colors';\nimport { withTheme } from '../../core/theming';\n\ntype Props = {\n  /**\n   * Title text for the `MenuItem`.\n   */\n  title: React.ReactNode;\n  /**\n   * Icon to display for the `MenuItem`.\n   */\n  icon?: IconSource;\n  /**\n   * Whether the 'item' is disabled. A disabled 'item' is greyed out and `onPress` is not called on touch.\n   */\n  disabled?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * @optional\n   */\n  style?: StyleProp<ViewStyle>;\n  contentStyle?: StyleProp<ViewStyle>;\n  titleStyle?: StyleProp<TextStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n  /**\n   * TestID used for testing purposes\n   */\n  testID?: string;\n  /**\n   * Accessibility label for the Touchable. This is read by the screen reader when the user taps the component.\n   */\n  accessibilityLabel?: string;\n};\n\n/**\n * A component to show a single list item inside a Menu.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/menu-item.png\" />\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { View } from 'react-native';\n * import { Menu } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <View style={{ flex: 1 }}>\n *     <Menu.Item icon=\"redo\" onPress={() => {}} title=\"Redo\" />\n *     <Menu.Item icon=\"undo\" onPress={() => {}} title=\"Undo\" />\n *     <Menu.Item icon=\"content-cut\" onPress={() => {}} title=\"Cut\" disabled />\n *     <Menu.Item icon=\"content-copy\" onPress={() => {}} title=\"Copy\" disabled />\n *     <Menu.Item icon=\"content-paste\" onPress={() => {}} title=\"Paste\" />\n *   </View>\n * );\n *\n * export default MyComponent;\n * ```\n */\nconst MenuItem = ({\n  icon,\n  title,\n  disabled,\n  onPress,\n  style,\n  contentStyle,\n  testID,\n  titleStyle,\n  accessibilityLabel,\n  theme,\n}: Props) => {\n  const disabledColor = color(theme.dark ? white : black)\n    .alpha(0.32)\n    .rgb()\n    .string();\n\n  const titleColor = disabled\n    ? disabledColor\n    : color(theme.colors.text).alpha(0.87).rgb().string();\n\n  const iconColor = disabled\n    ? disabledColor\n    : color(theme.colors.text).alpha(0.54).rgb().string();\n\n  return (\n    <TouchableRipple\n      style={[styles.container, style]}\n      onPress={onPress}\n      disabled={disabled}\n      testID={testID}\n      accessibilityLabel={accessibilityLabel}\n      accessibilityRole=\"menuitem\"\n      accessibilityState={{ disabled }}\n    >\n      <View style={styles.row}>\n        {icon ? (\n          <View style={[styles.item, styles.icon]} pointerEvents=\"box-none\">\n            <Icon source={icon} size={24} color={iconColor} />\n          </View>\n        ) : null}\n        <View\n          style={[\n            styles.item,\n            styles.content,\n            icon ? styles.widthWithIcon : null,\n            contentStyle,\n          ]}\n          pointerEvents=\"none\"\n        >\n          <Text\n            selectable={false}\n            numberOfLines={1}\n            style={[styles.title, { color: titleColor }, titleStyle]}\n          >\n            {title}\n          </Text>\n        </View>\n      </View>\n    </TouchableRipple>\n  );\n};\n\nMenuItem.displayName = 'Menu.Item';\n\nconst minWidth = 112;\nconst maxWidth = 280;\nconst iconWidth = 40;\n\nconst styles = StyleSheet.create({\n  container: {\n    paddingHorizontal: 8,\n    minWidth,\n    maxWidth,\n    height: 48,\n    justifyContent: 'center',\n  },\n  row: {\n    flexDirection: 'row',\n  },\n  icon: {\n    width: iconWidth,\n  },\n  title: {\n    fontSize: 16,\n  },\n  item: {\n    marginHorizontal: 8,\n  },\n  content: {\n    justifyContent: 'center',\n    minWidth: minWidth - 16,\n    maxWidth: maxWidth - 16,\n  },\n  widthWithIcon: {\n    maxWidth: maxWidth - (iconWidth + 48),\n  },\n});\n\nexport default withTheme(MenuItem);\n"]}