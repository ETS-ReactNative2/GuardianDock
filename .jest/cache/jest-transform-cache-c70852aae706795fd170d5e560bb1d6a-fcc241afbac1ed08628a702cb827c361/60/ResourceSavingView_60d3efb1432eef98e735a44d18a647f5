903c1da335f267f0a06c83c6d5eb4100
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _excluded = ["visible", "children", "style"];
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = ResourceSavingScene;

var React = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

function _getRequireWildcardCache(nodeInterop) {
  if (typeof WeakMap !== "function") return null;
  var cacheBabelInterop = new WeakMap();
  var cacheNodeInterop = new WeakMap();
  return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {
    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
  })(nodeInterop);
}

function _interopRequireWildcard(obj, nodeInterop) {
  if (!nodeInterop && obj && obj.__esModule) {
    return obj;
  }

  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }

  var cache = _getRequireWildcardCache(nodeInterop);

  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }

  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

  for (var key in obj) {
    if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }

  newObj.default = obj;

  if (cache) {
    cache.set(obj, newObj);
  }

  return newObj;
}

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

var FAR_FAR_AWAY = 30000;

function ResourceSavingScene(_ref) {
  var visible = _ref.visible,
      children = _ref.children,
      style = _ref.style,
      rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);

  if (_reactNative.Platform.OS === 'web') {
    return React.createElement(_reactNative.View, _extends({
      hidden: !visible,
      style: [{
        display: visible ? 'flex' : 'none'
      }, styles.container, style],
      pointerEvents: visible ? 'auto' : 'none'
    }, rest), children);
  }

  return React.createElement(_reactNative.View, {
    style: [styles.container, style],
    pointerEvents: visible ? 'auto' : 'none'
  }, React.createElement(_reactNative.View, {
    collapsable: false,
    removeClippedSubviews: _reactNative.Platform.OS === 'ios' || _reactNative.Platform.OS === 'macos' ? !visible : true,
    pointerEvents: visible ? 'auto' : 'none',
    style: visible ? styles.attached : styles.detached
  }, children));
}

var styles = _reactNative.StyleSheet.create({
  container: {
    flex: 1,
    overflow: 'hidden'
  },
  attached: {
    flex: 1
  },
  detached: {
    flex: 1,
    top: FAR_FAR_AWAY
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBQUE7O0FBQ0E7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFRQSxJQUFNQSxZQUFZLEdBQUcsS0FBckI7O0FBRWUsU0FBU0MsbUJBQVQsT0FLTDtBQUFBLE1BSlJDLE9BSVEsUUFKUkEsT0FJUTtBQUFBLE1BSFJDLFFBR1EsUUFIUkEsUUFHUTtBQUFBLE1BRlJDLEtBRVEsUUFGUkEsS0FFUTtBQUFBLE1BRExDLElBQ0s7O0FBQ1IsTUFBSUMsc0JBQVNDLEVBQVRELEtBQWdCLEtBQXBCLEVBQTJCO0FBQ3pCLFdBQ0VFLG9CQUFDQyxpQkFBRDtBQUVFQyxZQUFNLEVBQUUsQ0FBQ1IsT0FGWDtBQUdFRSxXQUFLLEVBQUUsQ0FDTDtBQUFFTyxlQUFPLEVBQUVULE9BQU8sR0FBRyxNQUFILEdBQVk7QUFBOUIsT0FESyxFQUVMVSxNQUFNLENBQUNDLFNBRkYsRUFHTFQsS0FISyxDQUhUO0FBUUVVLG1CQUFhLEVBQUVaLE9BQU8sR0FBRyxNQUFILEdBQVk7QUFScEMsT0FTTUcsSUFUTixHQVdHRixRQVhILENBREY7QUFlRDs7QUFFRCxTQUNFSyxvQkFBQ0MsaUJBQUQ7QUFDRUwsU0FBSyxFQUFFLENBQUNRLE1BQU0sQ0FBQ0MsU0FBUixFQUFtQlQsS0FBbkIsQ0FEVDtBQUdFVSxpQkFBYSxFQUFFWixPQUFPLEdBQUcsTUFBSCxHQUFZO0FBSHBDLEtBS0VNLG9CQUFDQyxpQkFBRDtBQUNFTSxlQUFXLEVBQUUsS0FEZjtBQUVFQyx5QkFBcUIsRUFHbkJWLHNCQUFTQyxFQUFURCxLQUFnQixLQUFoQkEsSUFBeUJBLHNCQUFTQyxFQUFURCxLQUFnQixPQUF6Q0EsR0FBbUQsQ0FBQ0osT0FBcERJLEdBQThELElBTGxFO0FBT0VRLGlCQUFhLEVBQUVaLE9BQU8sR0FBRyxNQUFILEdBQVksTUFQcEM7QUFRRUUsU0FBSyxFQUFFRixPQUFPLEdBQUdVLE1BQU0sQ0FBQ0ssUUFBVixHQUFxQkwsTUFBTSxDQUFDTTtBQVI1QyxLQVVHZixRQVZILENBTEYsQ0FERjtBQW9CRDs7QUFFRCxJQUFNUyxNQUFNLEdBQUdPLHdCQUFXQyxNQUFYRCxDQUFrQjtBQUMvQk4sV0FBUyxFQUFFO0FBQ1RRLFFBQUksRUFBRSxDQURHO0FBRVRDLFlBQVEsRUFBRTtBQUZELEdBRG9CO0FBSy9CTCxVQUFRLEVBQUU7QUFDUkksUUFBSSxFQUFFO0FBREUsR0FMcUI7QUFRL0JILFVBQVEsRUFBRTtBQUNSRyxRQUFJLEVBQUUsQ0FERTtBQUVSRSxPQUFHLEVBQUV2QjtBQUZHO0FBUnFCLENBQWxCbUIsQ0FBZiIsIm5hbWVzIjpbIkZBUl9GQVJfQVdBWSIsIlJlc291cmNlU2F2aW5nU2NlbmUiLCJ2aXNpYmxlIiwiY2hpbGRyZW4iLCJzdHlsZSIsInJlc3QiLCJQbGF0Zm9ybSIsIk9TIiwiUmVhY3QiLCJfcmVhY3ROYXRpdmUiLCJoaWRkZW4iLCJkaXNwbGF5Iiwic3R5bGVzIiwiY29udGFpbmVyIiwicG9pbnRlckV2ZW50cyIsImNvbGxhcHNhYmxlIiwicmVtb3ZlQ2xpcHBlZFN1YnZpZXdzIiwiYXR0YWNoZWQiLCJkZXRhY2hlZCIsIlN0eWxlU2hlZXQiLCJjcmVhdGUiLCJmbGV4Iiwib3ZlcmZsb3ciLCJ0b3AiXSwic291cmNlcyI6WyJSZXNvdXJjZVNhdmluZ1ZpZXcudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IFBsYXRmb3JtLCBTdHlsZVByb3AsIFN0eWxlU2hlZXQsIFZpZXcsIFZpZXdTdHlsZSB9IGZyb20gJ3JlYWN0LW5hdGl2ZSc7XG5cbnR5cGUgUHJvcHMgPSB7XG4gIHZpc2libGU6IGJvb2xlYW47XG4gIGNoaWxkcmVuOiBSZWFjdC5SZWFjdE5vZGU7XG4gIHN0eWxlPzogU3R5bGVQcm9wPFZpZXdTdHlsZT47XG59O1xuXG5jb25zdCBGQVJfRkFSX0FXQVkgPSAzMDAwMDsgLy8gdGhpcyBzaG91bGQgYmUgYmlnIGVub3VnaCB0byBtb3ZlIHRoZSB3aG9sZSB2aWV3IG91dCBvZiBpdHMgY29udGFpbmVyXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIFJlc291cmNlU2F2aW5nU2NlbmUoe1xuICB2aXNpYmxlLFxuICBjaGlsZHJlbixcbiAgc3R5bGUsXG4gIC4uLnJlc3Rcbn06IFByb3BzKSB7XG4gIGlmIChQbGF0Zm9ybS5PUyA9PT0gJ3dlYicpIHtcbiAgICByZXR1cm4gKFxuICAgICAgPFZpZXdcbiAgICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvcjogaGlkZGVuIGV4aXN0cyBvbiB3ZWIsIGJ1dCBub3QgaW4gUmVhY3QgTmF0aXZlXG4gICAgICAgIGhpZGRlbj17IXZpc2libGV9XG4gICAgICAgIHN0eWxlPXtbXG4gICAgICAgICAgeyBkaXNwbGF5OiB2aXNpYmxlID8gJ2ZsZXgnIDogJ25vbmUnIH0sXG4gICAgICAgICAgc3R5bGVzLmNvbnRhaW5lcixcbiAgICAgICAgICBzdHlsZSxcbiAgICAgICAgXX1cbiAgICAgICAgcG9pbnRlckV2ZW50cz17dmlzaWJsZSA/ICdhdXRvJyA6ICdub25lJ31cbiAgICAgICAgey4uLnJlc3R9XG4gICAgICA+XG4gICAgICAgIHtjaGlsZHJlbn1cbiAgICAgIDwvVmlldz5cbiAgICApO1xuICB9XG5cbiAgcmV0dXJuIChcbiAgICA8Vmlld1xuICAgICAgc3R5bGU9e1tzdHlsZXMuY29udGFpbmVyLCBzdHlsZV19XG4gICAgICAvLyBib3gtbm9uZSBkb2Vzbid0IHNlZW0gdG8gd29yayBwcm9wZXJseSBvbiBBbmRyb2lkXG4gICAgICBwb2ludGVyRXZlbnRzPXt2aXNpYmxlID8gJ2F1dG8nIDogJ25vbmUnfVxuICAgID5cbiAgICAgIDxWaWV3XG4gICAgICAgIGNvbGxhcHNhYmxlPXtmYWxzZX1cbiAgICAgICAgcmVtb3ZlQ2xpcHBlZFN1YnZpZXdzPXtcbiAgICAgICAgICAvLyBPbiBpT1MgJiBtYWNPUywgc2V0IHJlbW92ZUNsaXBwZWRTdWJ2aWV3cyB0byB0cnVlIG9ubHkgd2hlbiBub3QgZm9jdXNlZFxuICAgICAgICAgIC8vIFRoaXMgaXMgYW4gd29ya2Fyb3VuZCBmb3IgYSBidWcgd2hlcmUgdGhlIGNsaXBwZWQgdmlldyBuZXZlciByZS1hcHBlYXJzXG4gICAgICAgICAgUGxhdGZvcm0uT1MgPT09ICdpb3MnIHx8IFBsYXRmb3JtLk9TID09PSAnbWFjb3MnID8gIXZpc2libGUgOiB0cnVlXG4gICAgICAgIH1cbiAgICAgICAgcG9pbnRlckV2ZW50cz17dmlzaWJsZSA/ICdhdXRvJyA6ICdub25lJ31cbiAgICAgICAgc3R5bGU9e3Zpc2libGUgPyBzdHlsZXMuYXR0YWNoZWQgOiBzdHlsZXMuZGV0YWNoZWR9XG4gICAgICA+XG4gICAgICAgIHtjaGlsZHJlbn1cbiAgICAgIDwvVmlldz5cbiAgICA8L1ZpZXc+XG4gICk7XG59XG5cbmNvbnN0IHN0eWxlcyA9IFN0eWxlU2hlZXQuY3JlYXRlKHtcbiAgY29udGFpbmVyOiB7XG4gICAgZmxleDogMSxcbiAgICBvdmVyZmxvdzogJ2hpZGRlbicsXG4gIH0sXG4gIGF0dGFjaGVkOiB7XG4gICAgZmxleDogMSxcbiAgfSxcbiAgZGV0YWNoZWQ6IHtcbiAgICBmbGV4OiAxLFxuICAgIHRvcDogRkFSX0ZBUl9BV0FZLFxuICB9LFxufSk7XG4iXX0=