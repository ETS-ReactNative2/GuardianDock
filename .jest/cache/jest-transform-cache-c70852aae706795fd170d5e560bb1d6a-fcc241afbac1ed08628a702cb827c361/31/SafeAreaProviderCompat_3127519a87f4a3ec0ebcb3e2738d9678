c26c27719b8b1d6db79e964a52caca77
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = SafeAreaProviderCompat;

var React = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

var _reactNativeSafeAreaContext = require("react-native-safe-area-context");

function _getRequireWildcardCache(nodeInterop) {
  if (typeof WeakMap !== "function") return null;
  var cacheBabelInterop = new WeakMap();
  var cacheNodeInterop = new WeakMap();
  return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {
    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
  })(nodeInterop);
}

function _interopRequireWildcard(obj, nodeInterop) {
  if (!nodeInterop && obj && obj.__esModule) {
    return obj;
  }

  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }

  var cache = _getRequireWildcardCache(nodeInterop);

  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }

  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

  for (var key in obj) {
    if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }

  newObj.default = obj;

  if (cache) {
    cache.set(obj, newObj);
  }

  return newObj;
}

var _reactNative$Dimensio = _reactNative.Dimensions.get('window'),
    _reactNative$Dimensio2 = _reactNative$Dimensio.width,
    width = _reactNative$Dimensio2 === void 0 ? 0 : _reactNative$Dimensio2,
    _reactNative$Dimensio3 = _reactNative$Dimensio.height,
    height = _reactNative$Dimensio3 === void 0 ? 0 : _reactNative$Dimensio3;

var initialMetrics = _reactNative.Platform.OS === 'web' || _reactNativeSafeAreaContext.initialWindowMetrics == null ? {
  frame: {
    x: 0,
    y: 0,
    width: width,
    height: height
  },
  insets: {
    top: 0,
    left: 0,
    right: 0,
    bottom: 0
  }
} : _reactNativeSafeAreaContext.initialWindowMetrics;

function SafeAreaProviderCompat(_ref) {
  var children = _ref.children,
      style = _ref.style;
  return React.createElement(_reactNativeSafeAreaContext.SafeAreaInsetsContext.Consumer, null, function (insets) {
    if (insets) {
      return React.createElement(_reactNative.View, {
        style: [styles.container, style]
      }, children);
    }

    return React.createElement(_reactNativeSafeAreaContext.SafeAreaProvider, {
      initialMetrics: initialMetrics,
      style: style
    }, children);
  });
}

SafeAreaProviderCompat.initialMetrics = initialMetrics;

var styles = _reactNative.StyleSheet.create({
  container: {
    flex: 1
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBOztBQUNBOztBQVFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBV0EsNEJBQWtDQSx3QkFBV0MsR0FBWEQsQ0FBZSxRQUFmQSxDQUFsQztBQUFBLG1EQUFRRSxLQUFSO0FBQUEsSUFBUUEsS0FBUix1Q0FBZ0IsQ0FBaEI7QUFBQSxtREFBbUJDLE1BQW5CO0FBQUEsSUFBbUJBLE1BQW5CLHVDQUE0QixDQUE1Qjs7QUFLQSxJQUFNQyxjQUFjLEdBQ2xCQyxzQkFBU0MsRUFBVEQsS0FBZ0IsS0FBaEJBLElBQXlCRSxvREFBd0IsSUFBakRGLEdBQ0k7QUFDRUcsT0FBSyxFQUFFO0FBQUVDLEtBQUMsRUFBRSxDQUFMO0FBQVFDLEtBQUMsRUFBRSxDQUFYO0FBQWNSLFNBQWQsRUFBY0EsS0FBZDtBQUFxQkM7QUFBckIsR0FEVDtBQUVFUSxRQUFNLEVBQUU7QUFBRUMsT0FBRyxFQUFFLENBQVA7QUFBVUMsUUFBSSxFQUFFLENBQWhCO0FBQW1CQyxTQUFLLEVBQUUsQ0FBMUI7QUFBNkJDLFVBQU0sRUFBRTtBQUFyQztBQUZWLENBREpWLEdBS0lFLGdEQU5OOztBQVFlLFNBQVNTLHNCQUFULE9BQTREO0FBQUEsTUFBMUJDLFFBQTBCLFFBQTFCQSxRQUEwQjtBQUFBLE1BQWhCQyxLQUFnQixRQUFoQkEsS0FBZ0I7QUFDekUsU0FDRUMsb0JBQUNDLGtEQUFzQkMsUUFBdkIsUUFDSVYsZ0JBQUQsRUFBWTtBQUNYLFFBQUlBLE1BQUosRUFBWTtBQUlWLGFBQU9RLG9CQUFDRyxpQkFBRDtBQUFNSixhQUFLLEVBQUUsQ0FBQ0ssTUFBTSxDQUFDQyxTQUFSLEVBQW1CTixLQUFuQjtBQUFiLFNBQXlDRCxRQUF6QyxDQUFQO0FBQ0Q7O0FBRUQsV0FDRUUsb0JBQUNDLDRDQUFEO0FBQWtCaEIsb0JBQWMsRUFBRUEsY0FBbEM7QUFBa0RjLFdBQUssRUFBRUE7QUFBekQsT0FDR0QsUUFESCxDQURGO0FBVEosSUFERjtBQWtCRDs7QUFFREQsc0JBQXNCLENBQUNaLGNBQXZCWSxHQUF3Q1osY0FBeENZOztBQUVBLElBQU1PLE1BQU0sR0FBR0Usd0JBQVdDLE1BQVhELENBQWtCO0FBQy9CRCxXQUFTLEVBQUU7QUFDVEcsUUFBSSxFQUFFO0FBREc7QUFEb0IsQ0FBbEJGLENBQWYiLCJuYW1lcyI6WyJEaW1lbnNpb25zIiwiZ2V0Iiwid2lkdGgiLCJoZWlnaHQiLCJpbml0aWFsTWV0cmljcyIsIlBsYXRmb3JtIiwiT1MiLCJpbml0aWFsV2luZG93TWV0cmljcyIsImZyYW1lIiwieCIsInkiLCJpbnNldHMiLCJ0b3AiLCJsZWZ0IiwicmlnaHQiLCJib3R0b20iLCJTYWZlQXJlYVByb3ZpZGVyQ29tcGF0IiwiY2hpbGRyZW4iLCJzdHlsZSIsIlJlYWN0IiwiX3JlYWN0TmF0aXZlU2FmZUFyZWFDb250ZXh0IiwiQ29uc3VtZXIiLCJfcmVhY3ROYXRpdmUiLCJzdHlsZXMiLCJjb250YWluZXIiLCJTdHlsZVNoZWV0IiwiY3JlYXRlIiwiZmxleCJdLCJzb3VyY2VzIjpbIlNhZmVBcmVhUHJvdmlkZXJDb21wYXQudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7XG4gIERpbWVuc2lvbnMsXG4gIFBsYXRmb3JtLFxuICBTdHlsZVByb3AsXG4gIFN0eWxlU2hlZXQsXG4gIFZpZXcsXG4gIFZpZXdTdHlsZSxcbn0gZnJvbSAncmVhY3QtbmF0aXZlJztcbmltcG9ydCB7XG4gIGluaXRpYWxXaW5kb3dNZXRyaWNzLFxuICBTYWZlQXJlYUluc2V0c0NvbnRleHQsXG4gIFNhZmVBcmVhUHJvdmlkZXIsXG59IGZyb20gJ3JlYWN0LW5hdGl2ZS1zYWZlLWFyZWEtY29udGV4dCc7XG5cbnR5cGUgUHJvcHMgPSB7XG4gIGNoaWxkcmVuOiBSZWFjdC5SZWFjdE5vZGU7XG4gIHN0eWxlPzogU3R5bGVQcm9wPFZpZXdTdHlsZT47XG59O1xuXG5jb25zdCB7IHdpZHRoID0gMCwgaGVpZ2h0ID0gMCB9ID0gRGltZW5zaW9ucy5nZXQoJ3dpbmRvdycpO1xuXG4vLyBUbyBzdXBwb3J0IFNTUiBvbiB3ZWIsIHdlIG5lZWQgdG8gaGF2ZSBlbXB0eSBpbnNldHMgZm9yIGluaXRpYWwgdmFsdWVzXG4vLyBPdGhlcndpc2UgdGhlcmUgY2FuIGJlIG1pc21hdGNoIGJldHdlZW4gU1NSIGFuZCBjbGllbnQgb3V0cHV0XG4vLyBXZSBhbHNvIG5lZWQgdG8gc3BlY2lmeSBlbXB0eSB2YWx1ZXMgdG8gc3VwcG9ydCB0ZXN0cyBlbnZpcm9ubWVudHNcbmNvbnN0IGluaXRpYWxNZXRyaWNzID1cbiAgUGxhdGZvcm0uT1MgPT09ICd3ZWInIHx8IGluaXRpYWxXaW5kb3dNZXRyaWNzID09IG51bGxcbiAgICA/IHtcbiAgICAgICAgZnJhbWU6IHsgeDogMCwgeTogMCwgd2lkdGgsIGhlaWdodCB9LFxuICAgICAgICBpbnNldHM6IHsgdG9wOiAwLCBsZWZ0OiAwLCByaWdodDogMCwgYm90dG9tOiAwIH0sXG4gICAgICB9XG4gICAgOiBpbml0aWFsV2luZG93TWV0cmljcztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gU2FmZUFyZWFQcm92aWRlckNvbXBhdCh7IGNoaWxkcmVuLCBzdHlsZSB9OiBQcm9wcykge1xuICByZXR1cm4gKFxuICAgIDxTYWZlQXJlYUluc2V0c0NvbnRleHQuQ29uc3VtZXI+XG4gICAgICB7KGluc2V0cykgPT4ge1xuICAgICAgICBpZiAoaW5zZXRzKSB7XG4gICAgICAgICAgLy8gSWYgd2UgYWxyZWFkeSBoYXZlIGluc2V0cywgZG9uJ3Qgd3JhcCB0aGUgc3RhY2sgaW4gYW5vdGhlciBzYWZlIGFyZWEgcHJvdmlkZXJcbiAgICAgICAgICAvLyBUaGlzIGF2b2lkcyBhbiBpc3N1ZSB3aXRoIHVwZGF0ZXMgYXQgdGhlIGNvc3Qgb2YgcG90ZW50aWFsbHkgaW5jb3JyZWN0IHZhbHVlc1xuICAgICAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9yZWFjdC1uYXZpZ2F0aW9uL3JlYWN0LW5hdmlnYXRpb24vaXNzdWVzLzE3NFxuICAgICAgICAgIHJldHVybiA8VmlldyBzdHlsZT17W3N0eWxlcy5jb250YWluZXIsIHN0eWxlXX0+e2NoaWxkcmVufTwvVmlldz47XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgIDxTYWZlQXJlYVByb3ZpZGVyIGluaXRpYWxNZXRyaWNzPXtpbml0aWFsTWV0cmljc30gc3R5bGU9e3N0eWxlfT5cbiAgICAgICAgICAgIHtjaGlsZHJlbn1cbiAgICAgICAgICA8L1NhZmVBcmVhUHJvdmlkZXI+XG4gICAgICAgICk7XG4gICAgICB9fVxuICAgIDwvU2FmZUFyZWFJbnNldHNDb250ZXh0LkNvbnN1bWVyPlxuICApO1xufVxuXG5TYWZlQXJlYVByb3ZpZGVyQ29tcGF0LmluaXRpYWxNZXRyaWNzID0gaW5pdGlhbE1ldHJpY3M7XG5cbmNvbnN0IHN0eWxlcyA9IFN0eWxlU2hlZXQuY3JlYXRlKHtcbiAgY29udGFpbmVyOiB7XG4gICAgZmxleDogMSxcbiAgfSxcbn0pO1xuIl19