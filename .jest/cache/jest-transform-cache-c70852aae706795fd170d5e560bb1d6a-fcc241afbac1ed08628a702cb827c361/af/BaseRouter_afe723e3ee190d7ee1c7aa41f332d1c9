6a7b93c3e7d36cfd8b9f2a838ff964a2
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _nonSecure = require("nanoid/non-secure");

var BaseRouter = {
  getStateForAction: function getStateForAction(state, action) {
    switch (action.type) {
      case 'SET_PARAMS':
        {
          var index = action.source ? state.routes.findIndex(function (r) {
            return r.key === action.source;
          }) : state.index;

          if (index === -1) {
            return null;
          }

          return (0, _extends2.default)({}, state, {
            routes: state.routes.map(function (r, i) {
              return i === index ? (0, _extends2.default)({}, r, {
                params: (0, _extends2.default)({}, r.params, action.payload.params)
              }) : r;
            })
          });
        }

      case 'RESET':
        {
          var nextState = action.payload;

          if (nextState.routes.length === 0 || nextState.routes.some(function (route) {
            return !state.routeNames.includes(route.name);
          })) {
            return null;
          }

          if (nextState.stale === false) {
            if (state.routeNames.length !== nextState.routeNames.length || nextState.routeNames.some(function (name) {
              return !state.routeNames.includes(name);
            })) {
              return null;
            }

            return (0, _extends2.default)({}, nextState, {
              routes: nextState.routes.map(function (route) {
                return route.key ? route : (0, _extends2.default)({}, route, {
                  key: route.name + "-" + (0, _nonSecure.nanoid)()
                });
              })
            });
          }

          return nextState;
        }

      default:
        return null;
    }
  },
  shouldActionChangeFocus: function shouldActionChangeFocus(action) {
    return action.type === 'NAVIGATE';
  }
};
var _default = BaseRouter;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQTs7QUFZQSxJQUFNQSxVQUFVLEdBQUc7QUFDakJDLG1CQURpQiw2QkFFZkMsS0FGZSxFQUdmQyxNQUhlLEVBSXFCO0FBQ3BDLFlBQVFBLE1BQU0sQ0FBQ0MsSUFBZjtBQUNFLFdBQUssWUFBTDtBQUFtQjtBQUNqQixjQUFNQyxLQUFLLEdBQUdGLE1BQU0sQ0FBQ0csTUFBUEgsR0FDVkQsS0FBSyxDQUFDSyxNQUFOTCxDQUFhTSxTQUFiTixDQUF3Qk8sV0FBRDtBQUFBLG1CQUFPQSxDQUFDLENBQUNDLEdBQUZELEtBQVVOLE1BQU0sQ0FBQ0csTUFBeEI7QUFBQSxXQUF2QkosQ0FEVUMsR0FFVkQsS0FBSyxDQUFDRyxLQUZWOztBQUlBLGNBQUlBLEtBQUssS0FBSyxDQUFDLENBQWYsRUFBa0I7QUFDaEIsbUJBQU8sSUFBUDtBQUNEOztBQUVELDRDQUNLSCxLQURMO0FBRUVLLGtCQUFNLEVBQUVMLEtBQUssQ0FBQ0ssTUFBTkwsQ0FBYVMsR0FBYlQsQ0FBaUIsVUFBQ08sQ0FBRCxFQUFJRyxDQUFKO0FBQUEscUJBQ3ZCQSxDQUFDLEtBQUtQLEtBQU5PLDhCQUNTSCxDQURURztBQUNZQyxzQkFBTSw2QkFBT0osQ0FBQyxDQUFDSSxNQUFULEVBQW9CVixNQUFNLENBQUNXLE9BQVBYLENBQWVVLE1BQW5DO0FBRGxCRCxtQkFFSUgsQ0FIbUI7QUFBQSxhQUFqQlA7QUFGVjtBQVFEOztBQUVELFdBQUssT0FBTDtBQUFjO0FBQ1osY0FBTWEsU0FBUyxHQUFHWixNQUFNLENBQUNXLE9BQXpCOztBQUVBLGNBQ0VDLFNBQVMsQ0FBQ1IsTUFBVlEsQ0FBaUJDLE1BQWpCRCxLQUE0QixDQUE1QkEsSUFDQUEsU0FBUyxDQUFDUixNQUFWUSxDQUFpQkUsSUFBakJGLENBQ0dHLGVBQUQ7QUFBQSxtQkFBNkIsQ0FBQ2hCLEtBQUssQ0FBQ2lCLFVBQU5qQixDQUFpQmtCLFFBQWpCbEIsQ0FBMEJnQixLQUFLLENBQUNHLElBQWhDbkIsQ0FBOUI7QUFBQSxXQURGYSxDQUZGLEVBS0U7QUFDQSxtQkFBTyxJQUFQO0FBQ0Q7O0FBRUQsY0FBSUEsU0FBUyxDQUFDTyxLQUFWUCxLQUFvQixLQUF4QixFQUErQjtBQUM3QixnQkFDRWIsS0FBSyxDQUFDaUIsVUFBTmpCLENBQWlCYyxNQUFqQmQsS0FBNEJhLFNBQVMsQ0FBQ0ksVUFBVkosQ0FBcUJDLE1BQWpEZCxJQUNBYSxTQUFTLENBQUNJLFVBQVZKLENBQXFCRSxJQUFyQkYsQ0FDR00sY0FBRDtBQUFBLHFCQUFVLENBQUNuQixLQUFLLENBQUNpQixVQUFOakIsQ0FBaUJrQixRQUFqQmxCLENBQTBCbUIsSUFBMUJuQixDQUFYO0FBQUEsYUFERmEsQ0FGRixFQUtFO0FBQ0EscUJBQU8sSUFBUDtBQUNEOztBQUVELDhDQUNLQSxTQURMO0FBRUVSLG9CQUFNLEVBQUVRLFNBQVMsQ0FBQ1IsTUFBVlEsQ0FBaUJKLEdBQWpCSSxDQUFzQkcsZUFBRDtBQUFBLHVCQUMzQkEsS0FBSyxDQUFDUixHQUFOUSxHQUFZQSxLQUFaQSw4QkFBeUJBLEtBQXpCQTtBQUFnQ1IscUJBQUcsRUFBS1EsS0FBSyxDQUFDRyxJQUFYLFNBQW1CO0FBQXRESCxrQkFEMkI7QUFBQSxlQUFyQkg7QUFGVjtBQU1EOztBQUVELGlCQUFPQSxTQUFQO0FBQ0Q7O0FBRUQ7QUFDRSxlQUFPLElBQVA7QUF0REo7QUFMZTtBQStEakJRLHlCQS9EaUIsbUNBK0RPcEIsTUEvRFAsRUErRHVDO0FBQ3RELFdBQU9BLE1BQU0sQ0FBQ0MsSUFBUEQsS0FBZ0IsVUFBdkI7QUFDRDtBQWpFZ0IsQ0FBbkI7ZUFvRWVIIiwibmFtZXMiOlsiQmFzZVJvdXRlciIsImdldFN0YXRlRm9yQWN0aW9uIiwic3RhdGUiLCJhY3Rpb24iLCJ0eXBlIiwiaW5kZXgiLCJzb3VyY2UiLCJyb3V0ZXMiLCJmaW5kSW5kZXgiLCJyIiwia2V5IiwibWFwIiwiaSIsInBhcmFtcyIsInBheWxvYWQiLCJuZXh0U3RhdGUiLCJsZW5ndGgiLCJzb21lIiwicm91dGUiLCJyb3V0ZU5hbWVzIiwiaW5jbHVkZXMiLCJuYW1lIiwic3RhbGUiLCJzaG91bGRBY3Rpb25DaGFuZ2VGb2N1cyJdLCJzb3VyY2VzIjpbIkJhc2VSb3V0ZXIudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IG5hbm9pZCB9IGZyb20gJ25hbm9pZC9ub24tc2VjdXJlJztcblxuaW1wb3J0IHR5cGUge1xuICBDb21tb25OYXZpZ2F0aW9uQWN0aW9uLFxuICBOYXZpZ2F0aW9uU3RhdGUsXG4gIFBhcnRpYWxTdGF0ZSxcbn0gZnJvbSAnLi90eXBlcyc7XG5cbi8qKlxuICogQmFzZSByb3V0ZXIgb2JqZWN0IHRoYXQgY2FuIGJlIHVzZWQgd2hlbiB3cml0aW5nIGN1c3RvbSByb3V0ZXJzLlxuICogVGhpcyBwcm92aWRlcyBmZXcgaGVscGVyIG1ldGhvZHMgdG8gaGFuZGxlIGNvbW1vbiBhY3Rpb25zIHN1Y2ggYXMgYFJFU0VUYC5cbiAqL1xuY29uc3QgQmFzZVJvdXRlciA9IHtcbiAgZ2V0U3RhdGVGb3JBY3Rpb248U3RhdGUgZXh0ZW5kcyBOYXZpZ2F0aW9uU3RhdGU+KFxuICAgIHN0YXRlOiBTdGF0ZSxcbiAgICBhY3Rpb246IENvbW1vbk5hdmlnYXRpb25BY3Rpb25cbiAgKTogU3RhdGUgfCBQYXJ0aWFsU3RhdGU8U3RhdGU+IHwgbnVsbCB7XG4gICAgc3dpdGNoIChhY3Rpb24udHlwZSkge1xuICAgICAgY2FzZSAnU0VUX1BBUkFNUyc6IHtcbiAgICAgICAgY29uc3QgaW5kZXggPSBhY3Rpb24uc291cmNlXG4gICAgICAgICAgPyBzdGF0ZS5yb3V0ZXMuZmluZEluZGV4KChyKSA9PiByLmtleSA9PT0gYWN0aW9uLnNvdXJjZSlcbiAgICAgICAgICA6IHN0YXRlLmluZGV4O1xuXG4gICAgICAgIGlmIChpbmRleCA9PT0gLTEpIHtcbiAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgLi4uc3RhdGUsXG4gICAgICAgICAgcm91dGVzOiBzdGF0ZS5yb3V0ZXMubWFwKChyLCBpKSA9PlxuICAgICAgICAgICAgaSA9PT0gaW5kZXhcbiAgICAgICAgICAgICAgPyB7IC4uLnIsIHBhcmFtczogeyAuLi5yLnBhcmFtcywgLi4uYWN0aW9uLnBheWxvYWQucGFyYW1zIH0gfVxuICAgICAgICAgICAgICA6IHJcbiAgICAgICAgICApLFxuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICBjYXNlICdSRVNFVCc6IHtcbiAgICAgICAgY29uc3QgbmV4dFN0YXRlID0gYWN0aW9uLnBheWxvYWQgYXMgU3RhdGUgfCBQYXJ0aWFsU3RhdGU8U3RhdGU+O1xuXG4gICAgICAgIGlmIChcbiAgICAgICAgICBuZXh0U3RhdGUucm91dGVzLmxlbmd0aCA9PT0gMCB8fFxuICAgICAgICAgIG5leHRTdGF0ZS5yb3V0ZXMuc29tZShcbiAgICAgICAgICAgIChyb3V0ZTogeyBuYW1lOiBzdHJpbmcgfSkgPT4gIXN0YXRlLnJvdXRlTmFtZXMuaW5jbHVkZXMocm91dGUubmFtZSlcbiAgICAgICAgICApXG4gICAgICAgICkge1xuICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG5leHRTdGF0ZS5zdGFsZSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICBpZiAoXG4gICAgICAgICAgICBzdGF0ZS5yb3V0ZU5hbWVzLmxlbmd0aCAhPT0gbmV4dFN0YXRlLnJvdXRlTmFtZXMubGVuZ3RoIHx8XG4gICAgICAgICAgICBuZXh0U3RhdGUucm91dGVOYW1lcy5zb21lKFxuICAgICAgICAgICAgICAobmFtZSkgPT4gIXN0YXRlLnJvdXRlTmFtZXMuaW5jbHVkZXMobmFtZSlcbiAgICAgICAgICAgIClcbiAgICAgICAgICApIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAuLi5uZXh0U3RhdGUsXG4gICAgICAgICAgICByb3V0ZXM6IG5leHRTdGF0ZS5yb3V0ZXMubWFwKChyb3V0ZSkgPT5cbiAgICAgICAgICAgICAgcm91dGUua2V5ID8gcm91dGUgOiB7IC4uLnJvdXRlLCBrZXk6IGAke3JvdXRlLm5hbWV9LSR7bmFub2lkKCl9YCB9XG4gICAgICAgICAgICApLFxuICAgICAgICAgIH07XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbmV4dFN0YXRlO1xuICAgICAgfVxuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gIH0sXG5cbiAgc2hvdWxkQWN0aW9uQ2hhbmdlRm9jdXMoYWN0aW9uOiBDb21tb25OYXZpZ2F0aW9uQWN0aW9uKSB7XG4gICAgcmV0dXJuIGFjdGlvbi50eXBlID09PSAnTkFWSUdBVEUnO1xuICB9LFxufTtcblxuZXhwb3J0IGRlZmF1bHQgQmFzZVJvdXRlcjtcbiJdfQ==