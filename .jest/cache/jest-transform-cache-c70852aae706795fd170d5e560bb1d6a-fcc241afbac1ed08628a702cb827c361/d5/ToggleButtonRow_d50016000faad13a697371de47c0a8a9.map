{"version":3,"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+CA,IAAMA,eAAe,GAAG,SAAlBA,eAAkB,OAAsD;AAAA,MAAnDC,KAAmD,QAAnDA,KAAmD;AAAA,MAA5CC,aAA4C,QAA5CA,aAA4C;AAAA,MAA7BC,QAA6B,QAA7BA,QAA6B;AAAA,MAAnBC,KAAmB,QAAnBA,KAAmB;AAC5E,MAAMC,KAAK,GAAGC,KAAK,CAACC,QAAND,CAAeD,KAAfC,CAAqBH,QAArBG,CAAd;AAEA,SACEA,oBAACE,0BAAD;AAAmBP,SAAK,EAAEA,KAA1B;AAAiCC,iBAAa,EAAEA;AAAhD,KACEI,oBAACG,iBAAD;AAAML,SAAK,EAAE,CAACM,MAAM,CAACC,GAAR,EAAaP,KAAb;AAAb,KACGE,KAAK,CAACC,QAAND,CAAeM,GAAfN,CAAmBH,QAAnBG,EAA6B,UAACO,KAAD,EAAQC,CAAR,EAAc;AAE1C,QAAID,KAAK,IAAIA,KAAK,CAACE,IAANF,KAAeG,qBAA5B,EAA0C;AAExC,aAAOV,KAAK,CAACW,YAANX,CAAmBO,KAAnBP,EAA0B;AAC/BF,aAAK,EAAE,CACLM,MAAM,CAACQ,MADF,EAELJ,CAAC,KAAK,CAANA,GACIJ,MAAM,CAACS,KADXL,GAEIA,CAAC,KAAKT,KAAK,GAAG,CAAdS,GACAJ,MAAM,CAACU,IADPN,GAEAJ,MAAM,CAACW,MANN,EAQLR,KAAK,CAACS,KAANT,CAAYT,KARP;AADwB,OAA1BE,CAAP;AAYD;;AAED,WAAOO,KAAP;AAlBD,IADH,CADF,CADF;AAHF;;;AA+BAb,eAAe,CAACuB,WAAhBvB,GAA8B,kBAA9BA;;AAEA,IAAMU,MAAM,GAAGc,wBAAWC,MAAXD,CAAkB;AAC/Bb,KAAG,EAAE;AACHe,iBAAa,EAAE;AADZ,GAD0B;AAI/BR,QAAM,EAAE;AACNS,eAAW,EAAEH,wBAAWI;AADlB,GAJuB;AAQ/BT,OAAK,EAAE;AACLU,wBAAoB,EAAE,CADjB;AAELC,2BAAuB,EAAE;AAFpB,GARwB;AAa/BT,QAAM,EAAE;AACNU,gBAAY,EAAE,CADR;AAENC,mBAAe,EAAE;AAFX,GAbuB;AAkB/BZ,MAAI,EAAE;AACJY,mBAAe,EAAE,CADb;AAEJC,uBAAmB,EAAE,CAFjB;AAGJC,0BAAsB,EAAE;AAHpB;AAlByB,CAAlBV,CAAf;;eAyBexB","names":["ToggleButtonRow","value","onValueChange","children","style","count","React","Children","_ToggleButtonGroup","_reactNative","styles","row","map","child","i","type","ToggleButton","cloneElement","button","first","last","middle","props","displayName","StyleSheet","create","flexDirection","borderWidth","hairlineWidth","borderTopRightRadius","borderBottomRightRadius","borderRadius","borderLeftWidth","borderTopLeftRadius","borderBottomLeftRadius"],"sources":["ToggleButtonRow.tsx"],"sourcesContent":["import * as React from 'react';\nimport { StyleSheet, View, StyleProp, ViewStyle } from 'react-native';\nimport ToggleButtonGroup from './ToggleButtonGroup';\nimport ToggleButton from './ToggleButton';\n\ntype Props = {\n  /**\n   * Function to execute on selection change.\n   */\n  onValueChange: (value: string) => void;\n  /**\n   * Value of the currently selected toggle button.\n   */\n  value: string;\n  /**\n   * React elements containing toggle buttons.\n   */\n  children: React.ReactNode;\n  style?: StyleProp<ViewStyle>;\n};\n\n/**\n * Toggle button row renders a group of toggle buttons in a row.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/toggle-button-row.gif\" />\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { ToggleButton } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [value, setValue] = React.useState('left');\n *\n *   return (\n *     <ToggleButton.Row onValueChange={value => setValue(value)} value={value}>\n *       <ToggleButton icon=\"format-align-left\" value=\"left\" />\n *       <ToggleButton icon=\"format-align-right\" value=\"right\" />\n *     </ToggleButton.Row>\n *   );\n * };\n *\n * export default MyComponent;\n *\n *```\n */\nconst ToggleButtonRow = ({ value, onValueChange, children, style }: Props) => {\n  const count = React.Children.count(children);\n\n  return (\n    <ToggleButtonGroup value={value} onValueChange={onValueChange}>\n      <View style={[styles.row, style]}>\n        {React.Children.map(children, (child, i) => {\n          // @ts-expect-error: TypeScript complains about child.type but it doesn't matter\n          if (child && child.type === ToggleButton) {\n            // @ts-expect-error: We're sure that child is a React Element\n            return React.cloneElement(child, {\n              style: [\n                styles.button,\n                i === 0\n                  ? styles.first\n                  : i === count - 1\n                  ? styles.last\n                  : styles.middle,\n                // @ts-expect-error: We're sure that child is a React Element\n                child.props.style,\n              ],\n            });\n          }\n\n          return child;\n        })}\n      </View>\n    </ToggleButtonGroup>\n  );\n};\n\nToggleButtonRow.displayName = 'ToggleButton.Row';\n\nconst styles = StyleSheet.create({\n  row: {\n    flexDirection: 'row',\n  },\n  button: {\n    borderWidth: StyleSheet.hairlineWidth,\n  },\n\n  first: {\n    borderTopRightRadius: 0,\n    borderBottomRightRadius: 0,\n  },\n\n  middle: {\n    borderRadius: 0,\n    borderLeftWidth: 0,\n  },\n\n  last: {\n    borderLeftWidth: 0,\n    borderTopLeftRadius: 0,\n    borderBottomLeftRadius: 0,\n  },\n});\n\nexport default ToggleButtonRow;\n\n// @component-docs ignore-next-line\nexport { ToggleButtonRow };\n"]}