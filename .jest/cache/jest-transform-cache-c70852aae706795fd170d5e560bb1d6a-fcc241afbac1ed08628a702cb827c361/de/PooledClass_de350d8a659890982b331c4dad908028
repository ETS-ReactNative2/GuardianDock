bda09c317bea580f39062824888b8d8b
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _invariant = _interopRequireDefault(require("invariant"));

var oneArgumentPooler = function oneArgumentPooler(copyFieldsFrom) {
  var Klass = this;

  if (Klass.instancePool.length) {
    var _instance = Klass.instancePool.pop();

    Klass.call(_instance, copyFieldsFrom);
    return _instance;
  } else {
    return new Klass(copyFieldsFrom);
  }
};

var twoArgumentPooler = function twoArgumentPooler(a1, a2) {
  var Klass = this;

  if (Klass.instancePool.length) {
    var _instance2 = Klass.instancePool.pop();

    Klass.call(_instance2, a1, a2);
    return _instance2;
  } else {
    return new Klass(a1, a2);
  }
};

var threeArgumentPooler = function threeArgumentPooler(a1, a2, a3) {
  var Klass = this;

  if (Klass.instancePool.length) {
    var _instance3 = Klass.instancePool.pop();

    Klass.call(_instance3, a1, a2, a3);
    return _instance3;
  } else {
    return new Klass(a1, a2, a3);
  }
};

var fourArgumentPooler = function fourArgumentPooler(a1, a2, a3, a4) {
  var Klass = this;

  if (Klass.instancePool.length) {
    var _instance4 = Klass.instancePool.pop();

    Klass.call(_instance4, a1, a2, a3, a4);
    return _instance4;
  } else {
    return new Klass(a1, a2, a3, a4);
  }
};

var standardReleaser = function standardReleaser(instance) {
  var Klass = this;
  (0, _invariant.default)(instance instanceof Klass, 'Trying to release an instance into a pool of a different type.');
  instance.destructor();

  if (Klass.instancePool.length < Klass.poolSize) {
    Klass.instancePool.push(instance);
  }
};

var DEFAULT_POOL_SIZE = 10;
var DEFAULT_POOLER = oneArgumentPooler;

var addPoolingTo = function addPoolingTo(CopyConstructor, pooler) {
  var NewKlass = CopyConstructor;
  NewKlass.instancePool = [];
  NewKlass.getPooled = pooler || DEFAULT_POOLER;

  if (!NewKlass.poolSize) {
    NewKlass.poolSize = DEFAULT_POOL_SIZE;
  }

  NewKlass.release = standardReleaser;
  return NewKlass;
};

var PooledClass = {
  addPoolingTo: addPoolingTo,
  oneArgumentPooler: oneArgumentPooler,
  twoArgumentPooler: twoArgumentPooler,
  threeArgumentPooler: threeArgumentPooler,
  fourArgumentPooler: fourArgumentPooler
};
module.exports = PooledClass;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlBvb2xlZENsYXNzLmpzIl0sIm5hbWVzIjpbIm9uZUFyZ3VtZW50UG9vbGVyIiwiY29weUZpZWxkc0Zyb20iLCJLbGFzcyIsImluc3RhbmNlUG9vbCIsImxlbmd0aCIsImluc3RhbmNlIiwicG9wIiwiY2FsbCIsInR3b0FyZ3VtZW50UG9vbGVyIiwiYTEiLCJhMiIsInRocmVlQXJndW1lbnRQb29sZXIiLCJhMyIsImZvdXJBcmd1bWVudFBvb2xlciIsImE0Iiwic3RhbmRhcmRSZWxlYXNlciIsImRlc3RydWN0b3IiLCJwb29sU2l6ZSIsInB1c2giLCJERUZBVUxUX1BPT0xfU0laRSIsIkRFRkFVTFRfUE9PTEVSIiwiYWRkUG9vbGluZ1RvIiwiQ29weUNvbnN0cnVjdG9yIiwicG9vbGVyIiwiTmV3S2xhc3MiLCJnZXRQb29sZWQiLCJyZWxlYXNlIiwiUG9vbGVkQ2xhc3MiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFVQTs7OztBQUNBOztBQVNBLElBQU1BLGlCQUFpQixHQUFHLFNBQXBCQSxpQkFBb0IsQ0FBU0MsY0FBVCxFQUF5QjtBQUNqRCxNQUFNQyxLQUFLLEdBQUcsSUFBZDs7QUFDQSxNQUFJQSxLQUFLLENBQUNDLFlBQU4sQ0FBbUJDLE1BQXZCLEVBQStCO0FBQzdCLFFBQU1DLFNBQVEsR0FBR0gsS0FBSyxDQUFDQyxZQUFOLENBQW1CRyxHQUFuQixFQUFqQjs7QUFDQUosSUFBQUEsS0FBSyxDQUFDSyxJQUFOLENBQVdGLFNBQVgsRUFBcUJKLGNBQXJCO0FBQ0EsV0FBT0ksU0FBUDtBQUNELEdBSkQsTUFJTztBQUNMLFdBQU8sSUFBSUgsS0FBSixDQUFVRCxjQUFWLENBQVA7QUFDRDtBQUNGLENBVEQ7O0FBV0EsSUFBTU8saUJBQWlCLEdBQUcsU0FBcEJBLGlCQUFvQixDQUFTQyxFQUFULEVBQWFDLEVBQWIsRUFBaUI7QUFDekMsTUFBTVIsS0FBSyxHQUFHLElBQWQ7O0FBQ0EsTUFBSUEsS0FBSyxDQUFDQyxZQUFOLENBQW1CQyxN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QUFFQSxZQURJO0FBRWxCckIsRUFBQUEsaUJBQWlCLEVBQUdBLGlCQUZGO0FBR2xCUSxFQUFBQSxpQkFBaUIsRUFBR0EsaUJBSEY7QUFJbEJHLEVBQUFBLG1CQUFtQixFQUFHQSxtQkFKSjtBQUtsQkUsRUFBQUEsa0JBQWtCLEVBQUdBO0FBTEgsQ0FBcEI7QUFRQWUsTUFBTSxDQUFDQyxPQUFQLEdBQWlCRixXQUFqQiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZvcm1hdFxuICogQGZsb3dcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5pbXBvcnQgaW52YXJpYW50IGZyb20gJ2ludmFyaWFudCc7XG5cbi8qKlxuICogU3RhdGljIHBvb2xlcnMuIFNldmVyYWwgY3VzdG9tIHZlcnNpb25zIGZvciBlYWNoIHBvdGVudGlhbCBudW1iZXIgb2ZcbiAqIGFyZ3VtZW50cy4gQSBjb21wbGV0ZWx5IGdlbmVyaWMgcG9vbGVyIGlzIGVhc3kgdG8gaW1wbGVtZW50LCBidXQgd291bGRcbiAqIHJlcXVpcmUgYWNjZXNzaW5nIHRoZSBgYXJndW1lbnRzYCBvYmplY3QuIEluIGVhY2ggb2YgdGhlc2UsIGB0aGlzYCByZWZlcnMgdG9cbiAqIHRoZSBDbGFzcyBpdHNlbGYsIG5vdCBhbiBpbnN0YW5jZS4gSWYgYW55IG90aGVycyBhcmUgbmVlZGVkLCBzaW1wbHkgYWRkIHRoZW1cbiAqIGhlcmUsIG9yIGluIHRoZWlyIG93biBmaWxlcy5cbiAqL1xuY29uc3Qgb25lQXJndW1lbnRQb29sZXIgPSBmdW5jdGlvbihjb3B5RmllbGRzRnJvbSkge1xuICBjb25zdCBLbGFzcyA9IHRoaXM7XG4gIGlmIChLbGFzcy5pbnN0YW5jZVBvb2wubGVuZ3RoKSB7XG4gICAgY29uc3QgaW5zdGFuY2UgPSBLbGFzcy5pbnN0YW5jZVBvb2wucG9wKCk7XG4gICAgS2xhc3MuY2FsbChpbnN0YW5jZSwgY29weUZpZWxkc0Zyb20pO1xuICAgIHJldHVybiBpbnN0YW5jZTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gbmV3IEtsYXNzKGNvcHlGaWVsZHNGcm9tKTtcbiAgfVxufTtcblxuY29uc3QgdHdvQXJndW1lbnRQb29sZXIgPSBmdW5jdGlvbihhMSwgYTIpIHtcbiAgY29uc3QgS2xhc3MgPSB0aGlzO1xuICBpZiAoS2xhc3MuaW5zdGFuY2VQb29sLmxlbmd0aCkge1xuICAgIGNvbnN0IGluc3RhbmNlID0gS2xhc3MuaW5zdGFuY2VQb29sLnBvcCgpO1xuICAgIEtsYXNzLmNhbGwoaW5zdGFuY2UsIGExLCBhMik7XG4gICAgcmV0dXJuIGluc3RhbmNlO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBuZXcgS2xhc3MoYTEsIGEyKTtcbiAgfVxufTtcblxuY29uc3QgdGhyZWVBcmd1bWVudFBvb2xlciA9IGZ1bmN0aW9uKGExLCBhMiwgYTMpIHtcbiAgY29uc3QgS2xhc3MgPSB0aGlzO1xuICBpZiAoS2xhc3MuaW5zdGFuY2VQb29sLmxlbmd0aCkge1xuICAgIGNvbnN0IGluc3RhbmNlID0gS2xhc3MuaW5zdGFuY2VQb29sLnBvcCgpO1xuICAgIEtsYXNzLmNhbGwoaW5zdGFuY2UsIGExLCBhMiwgYTMpO1xuICAgIHJldHVybiBpbnN0YW5jZTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gbmV3IEtsYXNzKGExLCBhMiwgYTMpO1xuICB9XG59O1xuXG5jb25zdCBmb3VyQXJndW1lbnRQb29sZXIgPSBmdW5jdGlvbihhMSwgYTIsIGEzLCBhNCkge1xuICBjb25zdCBLbGFzcyA9IHRoaXM7XG4gIGlmIChLbGFzcy5pbnN0YW5jZVBvb2wubGVuZ3RoKSB7XG4gICAgY29uc3QgaW5zdGFuY2UgPSBLbGFzcy5pbnN0YW5jZVBvb2wucG9wKCk7XG4gICAgS2xhc3MuY2FsbChpbnN0YW5jZSwgYTEsIGEyLCBhMywgYTQpO1xuICAgIHJldHVybiBpbnN0YW5jZTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gbmV3IEtsYXNzKGExLCBhMiwgYTMsIGE0KTtcbiAgfVxufTtcblxuY29uc3Qgc3RhbmRhcmRSZWxlYXNlciA9IGZ1bmN0aW9uKGluc3RhbmNlKSB7XG4gIGNvbnN0IEtsYXNzID0gdGhpcztcbiAgaW52YXJpYW50KFxuICAgIGluc3RhbmNlIGluc3RhbmNlb2YgS2xhc3MsXG4gICAgJ1RyeWluZyB0byByZWxlYXNlIGFuIGluc3RhbmNlIGludG8gYSBwb29sIG9mIGEgZGlmZmVyZW50IHR5cGUuJyxcbiAgKTtcbiAgaW5zdGFuY2UuZGVzdHJ1Y3RvcigpO1xuICBpZiAoS2xhc3MuaW5zdGFuY2VQb29sLmxlbmd0aCA8IEtsYXNzLnBvb2xTaXplKSB7XG4gICAgS2xhc3MuaW5zdGFuY2VQb29sLnB1c2goaW5zdGFuY2UpO1xuICB9XG59O1xuXG5jb25zdCBERUZBVUxUX1BPT0xfU0laRSA9IDEwO1xuY29uc3QgREVGQVVMVF9QT09MRVIgPSBvbmVBcmd1bWVudFBvb2xlcjtcblxudHlwZSBQb29sZXIgPSBhbnk7XG5cbi8qKlxuICogQXVnbWVudHMgYENvcHlDb25zdHJ1Y3RvcmAgdG8gYmUgYSBwb29sYWJsZSBjbGFzcywgYXVnbWVudGluZyBvbmx5IHRoZSBjbGFzc1xuICogaXRzZWxmIChzdGF0aWNhbGx5KSBub3QgYWRkaW5nIGFueSBwcm90b3R5cGljYWwgZmllbGRzLiBBbnkgQ29weUNvbnN0cnVjdG9yXG4gKiB5b3UgZ2l2ZSB0aGlzIG1heSBoYXZlIGEgYHBvb2xTaXplYCBwcm9wZXJ0eSwgYW5kIHdpbGwgbG9vayBmb3IgYVxuICogcHJvdG90eXBpY2FsIGBkZXN0cnVjdG9yYCBvbiBpbnN0YW5jZXMuXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gQ29weUNvbnN0cnVjdG9yIENvbnN0cnVjdG9yIHRoYXQgY2FuIGJlIHVzZWQgdG8gcmVzZXQuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBwb29sZXIgQ3VzdG9taXphYmxlIHBvb2xlci5cbiAqL1xuY29uc3QgYWRkUG9vbGluZ1RvID0gZnVuY3Rpb248VD4oXG4gIENvcHlDb25zdHJ1Y3RvcjogQ2xhc3M8VD4sXG4gIHBvb2xlcjogUG9vbGVyLFxuKTogQ2xhc3M8VD4gJiB7XG4gIGdldFBvb2xlZChcbiAgICAuLi5hcmdzOiAkUmVhZE9ubHlBcnJheTxtaXhlZD5cbiAgKTogLyogYXJndW1lbnRzIG9mIHRoZSBjb25zdHJ1Y3RvciAqLyBULFxuICByZWxlYXNlKGluc3RhbmNlOiBtaXhlZCk6IHZvaWQsXG4gIC4uLlxufSB7XG4gIC8vIENhc3RpbmcgYXMgYW55IHNvIHRoYXQgZmxvdyBpZ25vcmVzIHRoZSBhY3R1YWwgaW1wbGVtZW50YXRpb24gYW5kIHRydXN0c1xuICAvLyBpdCB0byBtYXRjaCB0aGUgdHlwZSB3ZSBkZWNsYXJlZFxuICBjb25zdCBOZXdLbGFzcyA9IChDb3B5Q29uc3RydWN0b3I6IGFueSk7XG4gIE5ld0tsYXNzLmluc3RhbmNlUG9vbCA9IFtdO1xuICBOZXdLbGFzcy5nZXRQb29sZWQgPSBwb29sZXIgfHwgREVGQVVMVF9QT09MRVI7XG4gIGlmICghTmV3S2xhc3MucG9vbFNpemUpIHtcbiAgICBOZXdLbGFzcy5wb29sU2l6ZSA9IERFRkFVTFRfUE9PTF9TSVpFO1xuICB9XG4gIE5ld0tsYXNzLnJlbGVhc2UgPSBzdGFuZGFyZFJlbGVhc2VyO1xuICByZXR1cm4gTmV3S2xhc3M7XG59O1xuXG5jb25zdCBQb29sZWRDbGFzcyA9IHtcbiAgYWRkUG9vbGluZ1RvOiBhZGRQb29saW5nVG8sXG4gIG9uZUFyZ3VtZW50UG9vbGVyOiAob25lQXJndW1lbnRQb29sZXI6IFBvb2xlciksXG4gIHR3b0FyZ3VtZW50UG9vbGVyOiAodHdvQXJndW1lbnRQb29sZXI6IFBvb2xlciksXG4gIHRocmVlQXJndW1lbnRQb29sZXI6ICh0aHJlZUFyZ3VtZW50UG9vbGVyOiBQb29sZXIpLFxuICBmb3VyQXJndW1lbnRQb29sZXI6IChmb3VyQXJndW1lbnRQb29sZXI6IFBvb2xlciksXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFBvb2xlZENsYXNzO1xuIl19