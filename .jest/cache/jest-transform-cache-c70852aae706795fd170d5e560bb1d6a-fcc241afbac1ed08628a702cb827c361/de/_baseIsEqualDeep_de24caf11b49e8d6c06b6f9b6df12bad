7bcc2fc8dad7737ab6d7805c51a906b7
var Stack = require("./_Stack"),
    equalArrays = require("./_equalArrays"),
    equalByTag = require("./_equalByTag"),
    equalObjects = require("./_equalObjects"),
    getTag = require("./_getTag"),
    isArray = require("./isArray"),
    isBuffer = require("./isBuffer"),
    isTypedArray = require("./isTypedArray");

var COMPARE_PARTIAL_FLAG = 1;
var argsTag = '[object Arguments]',
    arrayTag = '[object Array]',
    objectTag = '[object Object]';
var objectProto = Object.prototype;
var hasOwnProperty = objectProto.hasOwnProperty;

function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
  var objIsArr = isArray(object),
      othIsArr = isArray(other),
      objTag = objIsArr ? arrayTag : getTag(object),
      othTag = othIsArr ? arrayTag : getTag(other);
  objTag = objTag == argsTag ? objectTag : objTag;
  othTag = othTag == argsTag ? objectTag : othTag;
  var objIsObj = objTag == objectTag,
      othIsObj = othTag == objectTag,
      isSameTag = objTag == othTag;

  if (isSameTag && isBuffer(object)) {
    if (!isBuffer(other)) {
      return false;
    }

    objIsArr = true;
    objIsObj = false;
  }

  if (isSameTag && !objIsObj) {
    stack || (stack = new Stack());
    return objIsArr || isTypedArray(object) ? equalArrays(object, other, bitmask, customizer, equalFunc, stack) : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
  }

  if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
    var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
        othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

    if (objIsWrapped || othIsWrapped) {
      var objUnwrapped = objIsWrapped ? object.value() : object,
          othUnwrapped = othIsWrapped ? other.value() : other;
      stack || (stack = new Stack());
      return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
    }
  }

  if (!isSameTag) {
    return false;
  }

  stack || (stack = new Stack());
  return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
}

module.exports = baseIsEqualDeep;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIl9iYXNlSXNFcXVhbERlZXAuanMiXSwibmFtZXMiOlsiU3RhY2siLCJyZXF1aXJlIiwiZXF1YWxBcnJheXMiLCJlcXVhbEJ5VGFnIiwiZXF1YWxPYmplY3RzIiwiZ2V0VGFnIiwiaXNBcnJheSIsImlzQnVmZmVyIiwiaXNUeXBlZEFycmF5IiwiQ09NUEFSRV9QQVJUSUFMX0ZMQUciLCJhcmdzVGFnIiwiYXJyYXlUYWciLCJvYmplY3RUYWciLCJvYmplY3RQcm90byIsIk9iamVjdCIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiYmFzZUlzRXF1YWxEZWVwIiwib2JqZWN0Iiwib3RoZXIiLCJiaXRtYXNrIiwiY3VzdG9taXplciIsImVxdWFsRnVuYyIsInN0YWNrIiwib2JqSXNBcnIiLCJvdGhJc0FyciIsIm9ialRhZyIsIm90aFRhZyIsIm9iaklzT2JqIiwib3RoSXNPYmoiLCJpc1NhbWVUYWciLCJvYmpJc1dyYXBwZWQiLCJjYWxsIiwib3RoSXNXcmFwcGVkIiwib2JqVW53cmFwcGVkIiwidmFsdWUiLCJvdGhVbndyYXBwZWQiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQSxJQUFJQSxLQUFLLEdBQUdDLE9BQU8sWUFBbkI7QUFBQSxJQUNJQyxXQUFXLEdBQUdELE9BQU8sa0JBRHpCO0FBQUEsSUFFSUUsVUFBVSxHQUFHRixPQUFPLGlCQUZ4QjtBQUFBLElBR0lHLFlBQVksR0FBR0gsT0FBTyxtQkFIMUI7QUFBQSxJQUlJSSxNQUFNLEdBQUdKLE9BQU8sYUFKcEI7QUFBQSxJQUtJSyxPQUFPLEdBQUdMLE9BQU8sYUFMckI7QUFBQSxJQU1JTSxRQUFRLEdBQUdOLE9BQU8sY0FOdEI7QUFBQSxJQU9JTyxZQUFZLEdBQUdQLE9BQU8sa0JBUDFCOztBQVVBLElBQUlRLG9CQUFvQixHQUFHLENBQTNCO0FBR0EsSUFBSUMsT0FBTyxHQUFHLG9CQUFkO0FBQUEsSUFDSUMsUUFBUSxHQUFHLGdCQURmO0FBQUEsSUFFSUMsU0FBUyxHQUFH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QUl2QixLQUFKLEVBQWIsQ0FBTDtBQUNBLFNBQU9JLFlBQVksQ0FBQ2MsTUFBRCxFQUFTQyxLQUFULEVBQWdCQyxPQUFoQixFQUF5QkMsVUFBekIsRUFBcUNDLFNBQXJDLEVBQWdEQyxLQUFoRCxDQUFuQjtBQUNEOztBQUVEYyxNQUFNLENBQUNDLE9BQVAsR0FBaUJyQixlQUFqQiIsInNvdXJjZXNDb250ZW50IjpbInZhciBTdGFjayA9IHJlcXVpcmUoJy4vX1N0YWNrJyksXG4gICAgZXF1YWxBcnJheXMgPSByZXF1aXJlKCcuL19lcXVhbEFycmF5cycpLFxuICAgIGVxdWFsQnlUYWcgPSByZXF1aXJlKCcuL19lcXVhbEJ5VGFnJyksXG4gICAgZXF1YWxPYmplY3RzID0gcmVxdWlyZSgnLi9fZXF1YWxPYmplY3RzJyksXG4gICAgZ2V0VGFnID0gcmVxdWlyZSgnLi9fZ2V0VGFnJyksXG4gICAgaXNBcnJheSA9IHJlcXVpcmUoJy4vaXNBcnJheScpLFxuICAgIGlzQnVmZmVyID0gcmVxdWlyZSgnLi9pc0J1ZmZlcicpLFxuICAgIGlzVHlwZWRBcnJheSA9IHJlcXVpcmUoJy4vaXNUeXBlZEFycmF5Jyk7XG5cbi8qKiBVc2VkIHRvIGNvbXBvc2UgYml0bWFza3MgZm9yIHZhbHVlIGNvbXBhcmlzb25zLiAqL1xudmFyIENPTVBBUkVfUEFSVElBTF9GTEFHID0gMTtcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIGFyZ3NUYWcgPSAnW29iamVjdCBBcmd1bWVudHNdJyxcbiAgICBhcnJheVRhZyA9ICdbb2JqZWN0IEFycmF5XScsXG4gICAgb2JqZWN0VGFnID0gJ1tvYmplY3QgT2JqZWN0XSc7XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xudmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlSXNFcXVhbGAgZm9yIGFycmF5cyBhbmQgb2JqZWN0cyB3aGljaCBwZXJmb3Jtc1xuICogZGVlcCBjb21wYXJpc29ucyBhbmQgdHJhY2tzIHRyYXZlcnNlZCBvYmplY3RzIGVuYWJsaW5nIG9iamVjdHMgd2l0aCBjaXJjdWxhclxuICogcmVmZXJlbmNlcyB0byBiZSBjb21wYXJlZC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGNvbXBhcmUuXG4gKiBAcGFyYW0ge09iamVjdH0gb3RoZXIgVGhlIG90aGVyIG9iamVjdCB0byBjb21wYXJlLlxuICogQHBhcmFtIHtudW1iZXJ9IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuIFNlZSBgYmFzZUlzRXF1YWxgIGZvciBtb3JlIGRldGFpbHMuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjdXN0b21pemVyIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY29tcGFyaXNvbnMuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBlcXVhbEZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGRldGVybWluZSBlcXVpdmFsZW50cyBvZiB2YWx1ZXMuXG4gKiBAcGFyYW0ge09iamVjdH0gW3N0YWNrXSBUcmFja3MgdHJhdmVyc2VkIGBvYmplY3RgIGFuZCBgb3RoZXJgIG9iamVjdHMuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIG9iamVjdHMgYXJlIGVxdWl2YWxlbnQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gYmFzZUlzRXF1YWxEZWVwKG9iamVjdCwgb3RoZXIsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGVxdWFsRnVuYywgc3RhY2spIHtcbiAgdmFyIG9iaklzQXJyID0gaXNBcnJheShvYmplY3QpLFxuICAgICAgb3RoSXNBcnIgPSBpc0FycmF5KG90aGVyKSxcbiAgICAgIG9ialRhZyA9IG9iaklzQXJyID8gYXJyYXlUYWcgOiBnZXRUYWcob2JqZWN0KSxcbiAgICAgIG90aFRhZyA9IG90aElzQXJyID8gYXJyYXlUYWcgOiBnZXRUYWcob3RoZXIpO1xuXG4gIG9ialRhZyA9IG9ialRhZyA9PSBhcmdzVGFnID8gb2JqZWN0VGFnIDogb2JqVGFnO1xuICBvdGhUYWcgPSBvdGhUYWcgPT0gYXJnc1RhZyA/IG9iamVjdFRhZyA6IG90aFRhZztcblxuICB2YXIgb2JqSXNPYmogPSBvYmpUYWcgPT0gb2JqZWN0VGFnLFxuICAgICAgb3RoSXNPYmogPSBvdGhUYWcgPT0gb2JqZWN0VGFnLFxuICAgICAgaXNTYW1lVGFnID0gb2JqVGFnID09IG90aFRhZztcblxuICBpZiAoaXNTYW1lVGFnICYmIGlzQnVmZmVyKG9iamVjdCkpIHtcbiAgICBpZiAoIWlzQnVmZmVyKG90aGVyKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBvYmpJc0FyciA9IHRydWU7XG4gICAgb2JqSXNPYmogPSBmYWxzZTtcbiAgfVxuICBpZiAoaXNTYW1lVGFnICYmICFvYmpJc09iaikge1xuICAgIHN0YWNrIHx8IChzdGFjayA9IG5ldyBTdGFjayk7XG4gICAgcmV0dXJuIChvYmpJc0FyciB8fCBpc1R5cGVkQXJyYXkob2JqZWN0KSlcbiAgICAgID8gZXF1YWxBcnJheXMob2JqZWN0LCBvdGhlciwgYml0bWFzaywgY3VzdG9taXplciwgZXF1YWxGdW5jLCBzdGFjaylcbiAgICAgIDogZXF1YWxCeVRhZyhvYmplY3QsIG90aGVyLCBvYmpUYWcsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGVxdWFsRnVuYywgc3RhY2spO1xuICB9XG4gIGlmICghKGJpdG1hc2sgJiBDT01QQVJFX1BBUlRJQUxfRkxBRykpIHtcbiAgICB2YXIgb2JqSXNXcmFwcGVkID0gb2JqSXNPYmogJiYgaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsICdfX3dyYXBwZWRfXycpLFxuICAgICAgICBvdGhJc1dyYXBwZWQgPSBvdGhJc09iaiAmJiBoYXNPd25Qcm9wZXJ0eS5jYWxsKG90aGVyLCAnX193cmFwcGVkX18nKTtcblxuICAgIGlmIChvYmpJc1dyYXBwZWQgfHwgb3RoSXNXcmFwcGVkKSB7XG4gICAgICB2YXIgb2JqVW53cmFwcGVkID0gb2JqSXNXcmFwcGVkID8gb2JqZWN0LnZhbHVlKCkgOiBvYmplY3QsXG4gICAgICAgICAgb3RoVW53cmFwcGVkID0gb3RoSXNXcmFwcGVkID8gb3RoZXIudmFsdWUoKSA6IG90aGVyO1xuXG4gICAgICBzdGFjayB8fCAoc3RhY2sgPSBuZXcgU3RhY2spO1xuICAgICAgcmV0dXJuIGVxdWFsRnVuYyhvYmpVbndyYXBwZWQsIG90aFVud3JhcHBlZCwgYml0bWFzaywgY3VzdG9taXplciwgc3RhY2spO1xuICAgIH1cbiAgfVxuICBpZiAoIWlzU2FtZVRhZykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBzdGFjayB8fCAoc3RhY2sgPSBuZXcgU3RhY2spO1xuICByZXR1cm4gZXF1YWxPYmplY3RzKG9iamVjdCwgb3RoZXIsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGVxdWFsRnVuYywgc3RhY2spO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VJc0VxdWFsRGVlcDtcbiJdfQ==