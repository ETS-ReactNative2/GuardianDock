a0215a08aa17c92d52fae02c2b74119c
'use strict';

var logListeners;

function unstable_setLogListeners(listeners) {
  logListeners = listeners;
}

var deepDiffer = function deepDiffer(one, two) {
  var maxDepthOrOptions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : -1;
  var maybeOptions = arguments.length > 3 ? arguments[3] : undefined;
  var options = typeof maxDepthOrOptions === 'number' ? maybeOptions : maxDepthOrOptions;
  var maxDepth = typeof maxDepthOrOptions === 'number' ? maxDepthOrOptions : -1;

  if (maxDepth === 0) {
    return true;
  }

  if (one === two) {
    return false;
  }

  if (typeof one === 'function' && typeof two === 'function') {
    var unsafelyIgnoreFunctions = options == null ? void 0 : options.unsafelyIgnoreFunctions;

    if (unsafelyIgnoreFunctions == null) {
      if (logListeners && logListeners.onDifferentFunctionsIgnored && (!options || !('unsafelyIgnoreFunctions' in options))) {
        logListeners.onDifferentFunctionsIgnored(one.name, two.name);
      }

      unsafelyIgnoreFunctions = true;
    }

    return !unsafelyIgnoreFunctions;
  }

  if (typeof one !== 'object' || one === null) {
    return one !== two;
  }

  if (typeof two !== 'object' || two === null) {
    return true;
  }

  if (one.constructor !== two.constructor) {
    return true;
  }

  if (Array.isArray(one)) {
    var len = one.length;

    if (two.length !== len) {
      return true;
    }

    for (var ii = 0; ii < len; ii++) {
      if (deepDiffer(one[ii], two[ii], maxDepth - 1, options)) {
        return true;
      }
    }
  } else {
    for (var key in one) {
      if (deepDiffer(one[key], two[key], maxDepth - 1, options)) {
        return true;
      }
    }

    for (var twoKey in two) {
      if (one[twoKey] === undefined && two[twoKey] !== undefined) {
        return true;
      }
    }
  }

  return false;
};

module.exports = deepDiffer;
module.exports.unstable_setLogListeners = unstable_setLogListeners;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImRlZXBEaWZmZXIuanMiXSwibmFtZXMiOlsibG9nTGlzdGVuZXJzIiwidW5zdGFibGVfc2V0TG9nTGlzdGVuZXJzIiwibGlzdGVuZXJzIiwiZGVlcERpZmZlciIsIm9uZSIsInR3byIsIm1heERlcHRoT3JPcHRpb25zIiwibWF5YmVPcHRpb25zIiwib3B0aW9ucyIsIm1heERlcHRoIiwidW5zYWZlbHlJZ25vcmVGdW5jdGlvbnMiLCJvbkRpZmZlcmVudEZ1bmN0aW9uc0lnbm9yZWQiLCJuYW1lIiwiY29uc3RydWN0b3IiLCJBcnJheSIsImlzQXJyYXkiLCJsZW4iLCJsZW5ndGgiLCJpaSIsImtleSIsInR3b0tleSIsInVuZGVmaW5lZCIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQVVBOztBQUVBLElBQUlBLFlBQUo7O0FBUUEsU0FBU0Msd0JBQVQsQ0FBa0NDLFNBQWxDLEVBQTREO0FBQzFERixFQUFBQSxZQUFZLEdBQUdFLFNBQWY7QUFDRDs7QUFLRCxJQUFNQyxVQUFVLEdBQUcsU0FBYkEsVUFBYSxDQUNqQkMsR0FEaUIsRUFFakJDLEdBRmlCLEVBS1I7QUFBQSxNQUZUQyxpQkFFUyx1RUFGNkIsQ0FBQyxDQUU5QjtBQUFBLE1BRFRDLFlBQ1M7QUFDVCxNQUFNQyxPQUFPLEdBQ1gsT0FBT0YsaUJBQVAsS0FBNkIsUUFBN0IsR0FBd0NDLFlBQXhDLEdBQXVERCxpQkFEekQ7QUFFQSxNQUFNRyxRQUFRLEdBQ1osT0FBT0gsaUJBQVAsS0FBNkIsUUFBN0IsR0FBd0NBLGlCQUF4QyxHQUE0RCxDQUFDLENBRC9EOztBQUVBLE1BQUlHLFFBQVEsS0FBSyxDQUFqQixFQUFvQjtBQUNsQixXQUFPLElBQVA7QUFDRDs7QUFDRCxNQUFJTCxHQUFHLEtBQUtDLEdBQVosRUFBaUI7QUFFZixXQUFPLEtBQVA7QUFDRDs7QUFDRCxNQUFJLE9BQU9ELEdBQVAsS0FBZSxVQUFmLElBQTZCLE9BQU9DLEdBQVAsS0FBZSxVQUFoRCxFQUE0RDtBQUUxRCxRQUFJSyx1QkFBdUIsR0FBR0YsT0FBSCxvQkFBR0EsT0FBTyxDQUFFRSx1QkFBdkM7O0FBQ0EsUUFBSUEsdUJBQXVCLElBQUksSUFBL0IsRUFBcUM7QUFDbkMsVUFDRVYsWUFBWSxJQUNaQSxZQUFZLENBQUNXLDJCQURiLEtBRUMsQ0FBQ0gsT0FBRCxJQUFZLEVBQUUsNkJBQTZCQSxPQUEvQixDQUZiLENBREYsRUFJRTtBQUNBUixRQUFBQSxZQUFZLENBQUNXLDJCQUFiLENBQXlDUCxHQUFHLENBQUNRLElBQTdDLEVBQW1EUCxHQUFHLENBQUNPLElBQXZEO0FBQ0Q7O0FBQ0RGLE1BQUFBLHVCQUF1QixHQUFHLElBQTFCO0FBQ0Q7O0FBQ0QsV0FBTyxDQUFDQSx1QkFBUjtBQUNEOztBQUNELE1BQUksT0FBT04sR0FBUCxLQUFlLFFBQWYsSUFBMkJBLEdBQUcsS0FBSyxJQUF2QyxFQUE2QztBQUUzQyxXQUFPQSxHQUFHLEtBQUtDLEdBQWY7QUFDRDs7QUFDRCxNQUFJLE9BQU9BLEdBQVAsS0FBZSxRQUFmLElBQTJCQSxHQUFHLEtBQUssSUFBdkMsRUFBNkM7QUFHM0MsV0FBTyxJQUFQO0FBQ0Q7O0FBQ0QsTUFBSUQsR0FBRyxDQUFDUyxXQUFKLEtBQW9CUixHQUFHLENBQUNRLFdBQTVCLEVBQXlDO0FBQ3ZDLFdBQU8sSUFBUDtBQUNEOztBQUNELE1BQUlDLEtBQUssQ0FBQ0MsT0FBTixDQUFjWCxHQUFkLENBQUosRUFBd0I7QUFFdEIsUUFBTVksR0FBRyxHQUFHWixHQUFHLENBQUNhLE1BQWhCOztBQUNBLFFBQUlaLEdBQUcsQ0FBQ1ksTUFBSixLQUFlRCxHQUFuQixFQUF3QjtBQUN0QixhQUFPLElBQVA7QUFDRDs7QUFDRCxTQUFLLElBQUlFLEVBQUUsR0FBRyxDQUFkLEVBQWlCQSxFQUFFLEdBQUdGLEdBQXRCLEVBQTJCRSxFQUFFLEVBQTdCLEVBQWlDO0FBQy9CLFVBQUlmLFVBQVUsQ0FBQ0MsR0FBRyxDQUFDYyxFQUFELENBQUosRUFBVWIsR0FBRyxDQUFDYSxFQUFELENBQWIsRUFBbUJULFFBQVEsR0FBRyxDQUE5QixFQUFpQ0QsT0FBakMsQ0FBZCxFQUF5RDtBQUN2RCxlQUFPLElBQVA7QUFDRDtBQUNGO0FBQ0YsR0FYRCxNQVdPO0FBQ0wsU0FBSyxJQUFNVyxHQUFYLElBQWtCZixHQUFsQixFQUF1QjtBQUNyQixVQUFJRCxVQUFVLENBQUNDLEdBQUcsQ0FBQ2UsR0FBRCxDQUFKLEVBQVdkLEdBQUcsQ0FBQ2MsR0FBRCxDQUFkLEVBQXFCVixRQUFRLEdBQUcsQ0FBaEMsRUFBbUNELE9BQW5DLENBQWQsRUFBMkQ7QUFDekQsZUFBTyxJQUFQO0FBQ0Q7QUFDRjs7QUFDRCxTQUFLLElBQU1ZLE1BQVgsSUFBcUJmLEdBQXJCLEVBQTBCO0FBR3hCLFVBQUlELEdBQUcsQ0FBQ2dCLE1BQUQsQ0FBSCxLQUFnQkMsU0FBaEIsSUFBNkJoQixHQUFHLENBQUNlLE1BQUQsQ0FBSCxLQUFnQkMsU0FBakQsRUFBNEQ7QUFDMUQsZUFBTyxJQUFQO0FBQ0Q7QUFDRjtBQUNGOztBQUNELFNBQU8sS0FBUDtBQUNELENBdEVEOztBQXdFQUMsTUFBTSxDQUFDQyxPQUFQLEdBQWlCcEIsVUFBakI7QUFDQW1CLE1BQU0sQ0FBQ0MsT0FBUCxDQUFldEIsd0JBQWYsR0FBMENBLHdCQUExQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZvcm1hdFxuICogQGZsb3dcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbmxldCBsb2dMaXN0ZW5lcnM7XG5cbnR5cGUgTG9nTGlzdGVuZXJzID0ge3xcbiAgK29uRGlmZmVyZW50RnVuY3Rpb25zSWdub3JlZDogKG5hbWVPbmU6ID9zdHJpbmcsIG5hbWVUd286ID9zdHJpbmcpID0+IHZvaWQsXG58fTtcblxudHlwZSBPcHRpb25zID0ge3wrdW5zYWZlbHlJZ25vcmVGdW5jdGlvbnM/OiBib29sZWFufH07XG5cbmZ1bmN0aW9uIHVuc3RhYmxlX3NldExvZ0xpc3RlbmVycyhsaXN0ZW5lcnM6ID9Mb2dMaXN0ZW5lcnMpIHtcbiAgbG9nTGlzdGVuZXJzID0gbGlzdGVuZXJzO1xufVxuXG4vKlxuICogQHJldHVybnMge2Jvb2x9IHRydWUgaWYgZGlmZmVyZW50LCBmYWxzZSBpZiBlcXVhbFxuICovXG5jb25zdCBkZWVwRGlmZmVyID0gZnVuY3Rpb24oXG4gIG9uZTogYW55LFxuICB0d286IGFueSxcbiAgbWF4RGVwdGhPck9wdGlvbnM6IE9wdGlvbnMgfCBudW1iZXIgPSAtMSxcbiAgbWF5YmVPcHRpb25zPzogT3B0aW9ucyxcbik6IGJvb2xlYW4ge1xuICBjb25zdCBvcHRpb25zID1cbiAgICB0eXBlb2YgbWF4RGVwdGhPck9wdGlvbnMgPT09ICdudW1iZXInID8gbWF5YmVPcHRpb25zIDogbWF4RGVwdGhPck9wdGlvbnM7XG4gIGNvbnN0IG1heERlcHRoID1cbiAgICB0eXBlb2YgbWF4RGVwdGhPck9wdGlvbnMgPT09ICdudW1iZXInID8gbWF4RGVwdGhPck9wdGlvbnMgOiAtMTtcbiAgaWYgKG1heERlcHRoID09PSAwKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgaWYgKG9uZSA9PT0gdHdvKSB7XG4gICAgLy8gU2hvcnQgY2lyY3VpdCBvbiBpZGVudGljYWwgb2JqZWN0IHJlZmVyZW5jZXMgaW5zdGVhZCBvZiB0cmF2ZXJzaW5nIHRoZW0uXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGlmICh0eXBlb2Ygb25lID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiB0d28gPT09ICdmdW5jdGlvbicpIHtcbiAgICAvLyBXZSBjb25zaWRlciBhbGwgZnVuY3Rpb25zIGVxdWFsIHVubGVzcyBleHBsaWNpdGx5IGNvbmZpZ3VyZWQgb3RoZXJ3aXNlXG4gICAgbGV0IHVuc2FmZWx5SWdub3JlRnVuY3Rpb25zID0gb3B0aW9ucz8udW5zYWZlbHlJZ25vcmVGdW5jdGlvbnM7XG4gICAgaWYgKHVuc2FmZWx5SWdub3JlRnVuY3Rpb25zID09IG51bGwpIHtcbiAgICAgIGlmIChcbiAgICAgICAgbG9nTGlzdGVuZXJzICYmXG4gICAgICAgIGxvZ0xpc3RlbmVycy5vbkRpZmZlcmVudEZ1bmN0aW9uc0lnbm9yZWQgJiZcbiAgICAgICAgKCFvcHRpb25zIHx8ICEoJ3Vuc2FmZWx5SWdub3JlRnVuY3Rpb25zJyBpbiBvcHRpb25zKSlcbiAgICAgICkge1xuICAgICAgICBsb2dMaXN0ZW5lcnMub25EaWZmZXJlbnRGdW5jdGlvbnNJZ25vcmVkKG9uZS5uYW1lLCB0d28ubmFtZSk7XG4gICAgICB9XG4gICAgICB1bnNhZmVseUlnbm9yZUZ1bmN0aW9ucyA9IHRydWU7XG4gICAgfVxuICAgIHJldHVybiAhdW5zYWZlbHlJZ25vcmVGdW5jdGlvbnM7XG4gIH1cbiAgaWYgKHR5cGVvZiBvbmUgIT09ICdvYmplY3QnIHx8IG9uZSA9PT0gbnVsbCkge1xuICAgIC8vIFByaW1pdGl2ZXMgY2FuIGJlIGRpcmVjdGx5IGNvbXBhcmVkXG4gICAgcmV0dXJuIG9uZSAhPT0gdHdvO1xuICB9XG4gIGlmICh0eXBlb2YgdHdvICE9PSAnb2JqZWN0JyB8fCB0d28gPT09IG51bGwpIHtcbiAgICAvLyBXZSBrbm93IHRoZXkgYXJlIGRpZmZlcmVudCBiZWNhdXNlIHRoZSBwcmV2aW91cyBjYXNlIHdvdWxkIGhhdmUgdHJpZ2dlcmVkXG4gICAgLy8gb3RoZXJ3aXNlLlxuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIGlmIChvbmUuY29uc3RydWN0b3IgIT09IHR3by5jb25zdHJ1Y3Rvcikge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIGlmIChBcnJheS5pc0FycmF5KG9uZSkpIHtcbiAgICAvLyBXZSBrbm93IHR3byBpcyBhbHNvIGFuIGFycmF5IGJlY2F1c2UgdGhlIGNvbnN0cnVjdG9ycyBhcmUgZXF1YWxcbiAgICBjb25zdCBsZW4gPSBvbmUubGVuZ3RoO1xuICAgIGlmICh0d28ubGVuZ3RoICE9PSBsZW4pIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBmb3IgKGxldCBpaSA9IDA7IGlpIDwgbGVuOyBpaSsrKSB7XG4gICAgICBpZiAoZGVlcERpZmZlcihvbmVbaWldLCB0d29baWldLCBtYXhEZXB0aCAtIDEsIG9wdGlvbnMpKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBmb3IgKGNvbnN0IGtleSBpbiBvbmUpIHtcbiAgICAgIGlmIChkZWVwRGlmZmVyKG9uZVtrZXldLCB0d29ba2V5XSwgbWF4RGVwdGggLSAxLCBvcHRpb25zKSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgZm9yIChjb25zdCB0d29LZXkgaW4gdHdvKSB7XG4gICAgICAvLyBUaGUgb25seSBjYXNlIHdlIGhhdmVuJ3QgY2hlY2tlZCB5ZXQgaXMga2V5cyB0aGF0IGFyZSBpbiB0d28gYnV0IGFyZW4ndFxuICAgICAgLy8gaW4gb25lLCB3aGljaCBtZWFucyB0aGV5IGFyZSBkaWZmZXJlbnQuXG4gICAgICBpZiAob25lW3R3b0tleV0gPT09IHVuZGVmaW5lZCAmJiB0d29bdHdvS2V5XSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gZmFsc2U7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGRlZXBEaWZmZXI7XG5tb2R1bGUuZXhwb3J0cy51bnN0YWJsZV9zZXRMb2dMaXN0ZW5lcnMgPSB1bnN0YWJsZV9zZXRMb2dMaXN0ZW5lcnM7XG4iXX0=