9a2415b3e9213c3d5a7322cf9a7261a5
'use strict';

var Promise = require("./core.js");

module.exports = Promise;
var TRUE = valuePromise(true);
var FALSE = valuePromise(false);
var NULL = valuePromise(null);
var UNDEFINED = valuePromise(undefined);
var ZERO = valuePromise(0);
var EMPTYSTRING = valuePromise('');

function valuePromise(value) {
  var p = new Promise(Promise._0);
  p._V = 1;
  p._W = value;
  return p;
}

Promise.resolve = function (value) {
  if (value instanceof Promise) return value;
  if (value === null) return NULL;
  if (value === undefined) return UNDEFINED;
  if (value === true) return TRUE;
  if (value === false) return FALSE;
  if (value === 0) return ZERO;
  if (value === '') return EMPTYSTRING;

  if (typeof value === 'object' || typeof value === 'function') {
    try {
      var then = value.then;

      if (typeof then === 'function') {
        return new Promise(then.bind(value));
      }
    } catch (ex) {
      return new Promise(function (resolve, reject) {
        reject(ex);
      });
    }
  }

  return valuePromise(value);
};

var _iterableToArray = function iterableToArray(iterable) {
  if (typeof Array.from === 'function') {
    _iterableToArray = Array.from;
    return Array.from(iterable);
  }

  _iterableToArray = function iterableToArray(x) {
    return Array.prototype.slice.call(x);
  };

  return Array.prototype.slice.call(iterable);
};

Promise.all = function (arr) {
  var args = _iterableToArray(arr);

  return new Promise(function (resolve, reject) {
    if (args.length === 0) return resolve([]);
    var remaining = args.length;

    function res(i, val) {
      if (val && (typeof val === 'object' || typeof val === 'function')) {
        if (val instanceof Promise && val.then === Promise.prototype.then) {
          while (val._V === 3) {
            val = val._W;
          }

          if (val._V === 1) return res(i, val._W);
          if (val._V === 2) reject(val._W);
          val.then(function (val) {
            res(i, val);
          }, reject);
          return;
        } else {
          var then = val.then;

          if (typeof then === 'function') {
            var p = new Promise(then.bind(val));
            p.then(function (val) {
              res(i, val);
            }, reject);
            return;
          }
        }
      }

      args[i] = val;

      if (--remaining === 0) {
        resolve(args);
      }
    }

    for (var i = 0; i < args.length; i++) {
      res(i, args[i]);
    }
  });
};

Promise.reject = function (value) {
  return new Promise(function (resolve, reject) {
    reject(value);
  });
};

Promise.race = function (values) {
  return new Promise(function (resolve, reject) {
    _iterableToArray(values).forEach(function (value) {
      Promise.resolve(value).then(resolve, reject);
    });
  });
};

Promise.prototype['catch'] = function (onRejected) {
  return this.then(null, onRejected);
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImVzNi1leHRlbnNpb25zLmpzIl0sIm5hbWVzIjpbIlByb21pc2UiLCJyZXF1aXJlIiwibW9kdWxlIiwiZXhwb3J0cyIsIlRSVUUiLCJ2YWx1ZVByb21pc2UiLCJGQUxTRSIsIk5VTEwiLCJVTkRFRklORUQiLCJ1bmRlZmluZWQiLCJaRVJPIiwiRU1QVFlTVFJJTkciLCJ2YWx1ZSIsInAiLCJfMCIsIl9WIiwiX1ciLCJyZXNvbHZlIiwidGhlbiIsImJpbmQiLCJleCIsInJlamVjdCIsIml0ZXJhYmxlVG9BcnJheSIsIml0ZXJhYmxlIiwiQXJyYXkiLCJmcm9tIiwieCIsInByb3RvdHlwZSIsInNsaWNlIiwiY2FsbCIsImFsbCIsImFyciIsImFyZ3MiLCJsZW5ndGgiLCJyZW1haW5pbmciLCJyZXMiLCJpIiwidmFsIiwicmFjZSIsInZhbHVlcyIsImZvckVhY2giLCJvblJlamVjdGVkIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFJQSxJQUFJQSxPQUFPLEdBQUdDLE9BQU8sYUFBckI7O0FBRUFDLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQkgsT0FBakI7QUFJQSxJQUFJSSxJQUFJLEdBQUdDLFlBQVksQ0FBQyxJQUFELENBQXZCO0FBQ0EsSUFBSUMsS0FBSyxHQUFHRCxZQUFZLENBQUMsS0FBRCxDQUF4QjtBQUNBLElBQUlFLElBQUksR0FBR0YsWUFBWSxDQUFDLElBQUQsQ0FBdkI7QUFDQSxJQUFJRyxTQUFTLEdBQUdILFlBQVksQ0FBQ0ksU0FBRCxDQUE1QjtBQUNBLElBQUlDLElBQUksR0FBR0wsWUFBWSxDQUFDLENBQUQsQ0FBdkI7QUFDQSxJQUFJTSxXQUFXLEdBQUdOLFlBQVksQ0FBQyxFQUFELENBQTlCOztBQUVBLFNBQVNBLFlBQVQsQ0FBc0JPLEtBQXRCLEVBQTZCO0FBQzNCLE1BQUlDLENBQUMsR0FBRyxJQUFJYixPQUFKLENBQVlBLE9BQU8sQ0FBQ2MsRUFBcEIsQ0FBUjtBQUNBRCxFQUFBQSxDQUFDLENBQUNFLEVBQUYsR0FBTyxDQUFQO0FBQ0FGLEVB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UixDQUFIO0FBQ0Q7QUFDRixHQWxDTSxDQUFQO0FBbUNELENBdENEOztBQXdDQXBDLE9BQU8sQ0FBQ3FCLE1BQVIsR0FBaUIsVUFBVVQsS0FBVixFQUFpQjtBQUNoQyxTQUFPLElBQUlaLE9BQUosQ0FBWSxVQUFVaUIsT0FBVixFQUFtQkksTUFBbkIsRUFBMkI7QUFDNUNBLElBQUFBLE1BQU0sQ0FBQ1QsS0FBRCxDQUFOO0FBQ0QsR0FGTSxDQUFQO0FBR0QsQ0FKRDs7QUFNQVosT0FBTyxDQUFDc0MsSUFBUixHQUFlLFVBQVVDLE1BQVYsRUFBa0I7QUFDL0IsU0FBTyxJQUFJdkMsT0FBSixDQUFZLFVBQVVpQixPQUFWLEVBQW1CSSxNQUFuQixFQUEyQjtBQUM1Q0MsSUFBQUEsZ0JBQWUsQ0FBQ2lCLE1BQUQsQ0FBZixDQUF3QkMsT0FBeEIsQ0FBZ0MsVUFBUzVCLEtBQVQsRUFBZTtBQUM3Q1osTUFBQUEsT0FBTyxDQUFDaUIsT0FBUixDQUFnQkwsS0FBaEIsRUFBdUJNLElBQXZCLENBQTRCRCxPQUE1QixFQUFxQ0ksTUFBckM7QUFDRCxLQUZEO0FBR0QsR0FKTSxDQUFQO0FBS0QsQ0FORDs7QUFVQXJCLE9BQU8sQ0FBQzJCLFNBQVIsQ0FBa0IsT0FBbEIsSUFBNkIsVUFBVWMsVUFBVixFQUFzQjtBQUNqRCxTQUFPLEtBQUt2QixJQUFMLENBQVUsSUFBVixFQUFnQnVCLFVBQWhCLENBQVA7QUFDRCxDQUZEIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG4vL1RoaXMgZmlsZSBjb250YWlucyB0aGUgRVM2IGV4dGVuc2lvbnMgdG8gdGhlIGNvcmUgUHJvbWlzZXMvQSsgQVBJXG5cbnZhciBQcm9taXNlID0gcmVxdWlyZSgnLi9jb3JlLmpzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gUHJvbWlzZTtcblxuLyogU3RhdGljIEZ1bmN0aW9ucyAqL1xuXG52YXIgVFJVRSA9IHZhbHVlUHJvbWlzZSh0cnVlKTtcbnZhciBGQUxTRSA9IHZhbHVlUHJvbWlzZShmYWxzZSk7XG52YXIgTlVMTCA9IHZhbHVlUHJvbWlzZShudWxsKTtcbnZhciBVTkRFRklORUQgPSB2YWx1ZVByb21pc2UodW5kZWZpbmVkKTtcbnZhciBaRVJPID0gdmFsdWVQcm9taXNlKDApO1xudmFyIEVNUFRZU1RSSU5HID0gdmFsdWVQcm9taXNlKCcnKTtcblxuZnVuY3Rpb24gdmFsdWVQcm9taXNlKHZhbHVlKSB7XG4gIHZhciBwID0gbmV3IFByb21pc2UoUHJvbWlzZS5fMCk7XG4gIHAuX1YgPSAxO1xuICBwLl9XID0gdmFsdWU7XG4gIHJldHVybiBwO1xufVxuUHJvbWlzZS5yZXNvbHZlID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gIGlmICh2YWx1ZSBpbnN0YW5jZW9mIFByb21pc2UpIHJldHVybiB2YWx1ZTtcblxuICBpZiAodmFsdWUgPT09IG51bGwpIHJldHVybiBOVUxMO1xuICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCkgcmV0dXJuIFVOREVGSU5FRDtcbiAgaWYgKHZhbHVlID09PSB0cnVlKSByZXR1cm4gVFJVRTtcbiAgaWYgKHZhbHVlID09PSBmYWxzZSkgcmV0dXJuIEZBTFNFO1xuICBpZiAodmFsdWUgPT09IDApIHJldHVybiBaRVJPO1xuICBpZiAodmFsdWUgPT09ICcnKSByZXR1cm4gRU1QVFlTVFJJTkc7XG5cbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgfHwgdHlwZW9mIHZhbHVlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgdHJ5IHtcbiAgICAgIHZhciB0aGVuID0gdmFsdWUudGhlbjtcbiAgICAgIGlmICh0eXBlb2YgdGhlbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UodGhlbi5iaW5kKHZhbHVlKSk7XG4gICAgICB9XG4gICAgfSBjYXRjaCAoZXgpIHtcbiAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgIHJlamVjdChleCk7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHZhbHVlUHJvbWlzZSh2YWx1ZSk7XG59O1xuXG52YXIgaXRlcmFibGVUb0FycmF5ID0gZnVuY3Rpb24gKGl0ZXJhYmxlKSB7XG4gIGlmICh0eXBlb2YgQXJyYXkuZnJvbSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIC8vIEVTMjAxNSssIGl0ZXJhYmxlcyBleGlzdFxuICAgIGl0ZXJhYmxlVG9BcnJheSA9IEFycmF5LmZyb207XG4gICAgcmV0dXJuIEFycmF5LmZyb20oaXRlcmFibGUpO1xuICB9XG5cbiAgLy8gRVM1LCBvbmx5IGFycmF5cyBhbmQgYXJyYXktbGlrZXMgZXhpc3RcbiAgaXRlcmFibGVUb0FycmF5ID0gZnVuY3Rpb24gKHgpIHsgcmV0dXJuIEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKHgpOyB9O1xuICByZXR1cm4gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoaXRlcmFibGUpO1xufVxuXG5Qcm9taXNlLmFsbCA9IGZ1bmN0aW9uIChhcnIpIHtcbiAgdmFyIGFyZ3MgPSBpdGVyYWJsZVRvQXJyYXkoYXJyKTtcblxuICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgIGlmIChhcmdzLmxlbmd0aCA9PT0gMCkgcmV0dXJuIHJlc29sdmUoW10pO1xuICAgIHZhciByZW1haW5pbmcgPSBhcmdzLmxlbmd0aDtcbiAgICBmdW5jdGlvbiByZXMoaSwgdmFsKSB7XG4gICAgICBpZiAodmFsICYmICh0eXBlb2YgdmFsID09PSAnb2JqZWN0JyB8fCB0eXBlb2YgdmFsID09PSAnZnVuY3Rpb24nKSkge1xuICAgICAgICBpZiAodmFsIGluc3RhbmNlb2YgUHJvbWlzZSAmJiB2YWwudGhlbiA9PT0gUHJvbWlzZS5wcm90b3R5cGUudGhlbikge1xuICAgICAgICAgIHdoaWxlICh2YWwuX1YgPT09IDMpIHtcbiAgICAgICAgICAgIHZhbCA9IHZhbC5fVztcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHZhbC5fViA9PT0gMSkgcmV0dXJuIHJlcyhpLCB2YWwuX1cpO1xuICAgICAgICAgIGlmICh2YWwuX1YgPT09IDIpIHJlamVjdCh2YWwuX1cpO1xuICAgICAgICAgIHZhbC50aGVuKGZ1bmN0aW9uICh2YWwpIHtcbiAgICAgICAgICAgIHJlcyhpLCB2YWwpO1xuICAgICAgICAgIH0sIHJlamVjdCk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciB0aGVuID0gdmFsLnRoZW47XG4gICAgICAgICAgaWYgKHR5cGVvZiB0aGVuID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICB2YXIgcCA9IG5ldyBQcm9taXNlKHRoZW4uYmluZCh2YWwpKTtcbiAgICAgICAgICAgIHAudGhlbihmdW5jdGlvbiAodmFsKSB7XG4gICAgICAgICAgICAgIHJlcyhpLCB2YWwpO1xuICAgICAgICAgICAgfSwgcmVqZWN0KTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGFyZ3NbaV0gPSB2YWw7XG4gICAgICBpZiAoLS1yZW1haW5pbmcgPT09IDApIHtcbiAgICAgICAgcmVzb2x2ZShhcmdzKTtcbiAgICAgIH1cbiAgICB9XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmdzLmxlbmd0aDsgaSsrKSB7XG4gICAgICByZXMoaSwgYXJnc1tpXSk7XG4gICAgfVxuICB9KTtcbn07XG5cblByb21pc2UucmVqZWN0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgcmVqZWN0KHZhbHVlKTtcbiAgfSk7XG59O1xuXG5Qcm9taXNlLnJhY2UgPSBmdW5jdGlvbiAodmFsdWVzKSB7XG4gIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgaXRlcmFibGVUb0FycmF5KHZhbHVlcykuZm9yRWFjaChmdW5jdGlvbih2YWx1ZSl7XG4gICAgICBQcm9taXNlLnJlc29sdmUodmFsdWUpLnRoZW4ocmVzb2x2ZSwgcmVqZWN0KTtcbiAgICB9KTtcbiAgfSk7XG59O1xuXG4vKiBQcm90b3R5cGUgTWV0aG9kcyAqL1xuXG5Qcm9taXNlLnByb3RvdHlwZVsnY2F0Y2gnXSA9IGZ1bmN0aW9uIChvblJlamVjdGVkKSB7XG4gIHJldHVybiB0aGlzLnRoZW4obnVsbCwgb25SZWplY3RlZCk7XG59O1xuIl19