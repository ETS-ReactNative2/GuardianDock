{"version":3,"sources":["TouchableNativeFeedback.js"],"names":["TouchableNativeFeedback","state","pressability","Pressability","_createPressabilityConfig","cancelable","props","rejectResponderTermination","disabled","accessibilityState","hitSlop","delayLongPress","delayPressIn","delayPressOut","minPressDuration","pressRectOffset","pressRetentionOffset","android_disableSound","touchSoundDisabled","onLongPress","onPress","onPressIn","event","Platform","OS","_dispatchHotspotUpdate","_dispatchPressedStateChange","onPressMove","onPressOut","pressed","hostComponentRef","ReactNative","findHostInstance_DEPRECATED","console","warn","Commands","setPressed","nativeEvent","locationX","locationY","hotspotUpdate","element","React","Children","only","children","__DEV__","type","View","push","getEventHandlers","onBlur","onFocus","eventHandlersWithoutBlurAndFocus","cloneElement","getBackgroundProp","background","undefined","SelectableBackground","useForeground","accessible","accessibilityHint","accessibilityLabel","accessibilityRole","accessibilityActions","onAccessibilityAction","accessibilityValue","importantForAccessibility","accessibilityLiveRegion","accessibilityViewIsModal","accessibilityElementsHidden","hasTVPreferredFocus","focusable","nativeID","nextFocusDown","nextFocusForward","nextFocusLeft","nextFocusRight","nextFocusUp","onLayout","testID","prevProps","prevState","configure","reset","Component","rippleRadius","attribute","SelectableBackgroundBorderless","Ripple","color","borderless","processedColor","canUseNativeForeground","Version","nativeForegroundAndroid","nativeBackgroundAndroid","displayName","module","exports"],"mappings":";;;;;;;;;;;;;;;;AAUA;;AAGA;;AAEA;;AACA;;AAEA;;AACA;;AACA;;AACA;;AACA;;;;;;;;;;;;;;IA0EMA,uB;;;;;;;;;;;;;;;UAmEJC,K,GAAe;AACbC,MAAAA,YAAY,EAAE,IAAIC,qBAAJ,CAAiB,MAAKC,yBAAL,EAAjB;AADD,K;;;;;;WAIf,qCAAgD;AAAA;AAAA;;AAC9C,aAAO;AACLC,QAAAA,UAAU,EAAE,CAAC,KAAKC,KAAL,CAAWC,0BADnB;AAELC,QAAAA,QAAQ,EACN,KAAKF,KAAL,CAAWE,QAAX,IAAuB,IAAvB,GACI,KAAKF,KAAL,CAAWE,QADf,4BAEI,KAAKF,KAAL,CAAWG,kBAFf,qBAEI,sBAA+BD,QALhC;AAMLE,QAAAA,OAAO,EAAE,KAAKJ,KAAL,CAAWI,OANf;AAOLC,QAAAA,cAAc,EAAE,KAAKL,KAAL,CAAWK,cAPtB;AAQLC,QAAAA,YAAY,EAAE,KAAKN,KAAL,CAAWM,YARpB;AASLC,QAAAA,aAAa,EAAE,KAAKP,KAAL,CAAWO,aATrB;AAULC,QAAAA,gBAAgB,EAAE,CAVb;AAWLC,QAAAA,eAAe,EAAE,KAAKT,KAAL,CAAWU,oBAXvB;AAYLC,QAAAA,oBAAoB,EAAE,KAAKX,KAAL,CAAWY,kBAZ5B;AAaLC,QAAAA,WAAW,EAAE,KAAKb,KAAL,CAAWa,WAbnB;AAcLC,QAAAA,OAAO,EAAE,KAAKd,KAAL,CAAWc,OAdf;AAeLC,QAAAA,SAAS,EAAE,mBAAAC,KAAK,EAAI;AAClB,cAAIC,kBAASC,EAAT,KAAgB,SAApB,EAA+B;AAC7B,YAAA,MAAI,CAACC,sBAAL,CAA4BH,KAA5B;;AACA,YAAA,MAAI,CAACI,2BAAL,CAAiC,IAAjC;AACD;;AACD,cAAI,MAAI,CAACpB,KAAL,CAAWe,SAAX,IAAwB,IAA5B,EAAkC;AAChC,YAAA,MAAI,CAACf,KAAL,CAAWe,SAAX,CAAqBC,KAArB;AACD;AACF,SAvBI;AAwBLK,QAAAA,WAAW,EAAE,qBAAAL,KAAK,EAAI;AACpB,cAAIC,kBAASC,EAAT,KAAgB,SAApB,EAA+B;AAC7B,YAAA,MAAI,CAACC,sBAAL,CAA4BH,KAA5B;AACD;AACF,SA5BI;AA6BLM,QAAAA,UAAU,EAAE,oBAAAN,KAAK,EAAI;AACnB,cAAIC,kBAASC,EAAT,KAAgB,SAApB,EAA+B;AAC7B,YAAA,MAAI,CAACE,2BAAL,CAAiC,KAAjC;AACD;;AACD,cAAI,MAAI,CAACpB,KAAL,CAAWsB,UAAX,IAAyB,IAA7B,EAAmC;AACjC,YAAA,MAAI,CAACtB,KAAL,CAAWsB,UAAX,CAAsBN,KAAtB;AACD;AACF;AApCI,OAAP;AAsCD;;;WAED,qCAA4BO,OAA5B,EAAoD;AAClD,UAAIN,kBAASC,EAAT,KAAgB,SAApB,EAA+B;AAC7B,YAAMM,gBAAgB,GAAGC,qBAAYC,2BAAZ,CAAwC,IAAxC,CAAzB;;AACA,YAAIF,gBAAgB,IAAI,IAAxB,EAA8B;AAC5BG,UAAAA,OAAO,CAACC,IAAR,CACE,uDACE,8CAFJ;AAID,SALD,MAKO;AACLC,wCAASC,UAAT,CAAoBN,gBAApB,EAAsCD,OAAtC;AACD;AACF;AACF;;;WAED,gCAAuBP,KAAvB,EAAgD;AAC9C,UAAIC,kBAASC,EAAT,KAAgB,SAApB,EAA+B;AAC7B,iCAA+BF,KAAK,CAACe,WAArC;AAAA,YAAOC,SAAP,sBAAOA,SAAP;AAAA,YAAkBC,SAAlB,sBAAkBA,SAAlB;;AACA,YAAMT,gBAAgB,GAAGC,qBAAYC,2BAAZ,CAAwC,IAAxC,CAAzB;;AACA,YAAIF,gBAAgB,IAAI,IAAxB,EAA8B;AAC5BG,UAAAA,OAAO,CAACC,IAAR,CACE,uDACE,8CAFJ;AAID,SALD,MAKO;AACLC,wCAASK,aAAT,CACEV,gBADF,EAEEQ,SAFF,WAEEA,SAFF,GAEe,CAFf,EAGEC,SAHF,WAGEA,SAHF,GAGe,CAHf;AAKD;AACF;AACF;;;WAED,kBAAqB;AACnB,UAAME,OAAO,GAAGC,KAAK,CAACC,QAAN,CAAeC,IAAf,CAAoB,KAAKtC,KAAL,CAAWuC,QAA/B,CAAhB;AACA,UAAMA,QAAQ,GAAG,CAACJ,OAAO,CAACnC,KAAR,CAAcuC,QAAf,CAAjB;;AACA,UAAIC,OAAJ,EAAa;AACX,YAAIL,OAAO,CAACM,IAAR,KAAiBC,aAArB,EAA2B;AACzBH,UAAAA,QAAQ,CAACI,IAAT,CACE,qBAAC,wCAAD;AAAuB,YAAA,KAAK,EAAC,OAA7B;AAAqC,YAAA,OAAO,EAAE,KAAK3C,KAAL,CAAWI;AAAzD,YADF;AAGD;AACF;;AAID,kCAII,KAAKT,KAAL,CAAWC,YAAX,CAAwBgD,gBAAxB,EAJJ;AAAA,UACEC,MADF,yBACEA,MADF;AAAA,UAEEC,OAFF,yBAEEA,OAFF;AAAA,UAGKC,gCAHL;;AAMA,UAAM5C,kBAAkB,GACtB,KAAKH,KAAL,CAAWE,QAAX,IAAuB,IAAvB,8BAES,KAAKF,KAAL,CAAWG,kBAFpB;AAGMD,QAAAA,QAAQ,EAAE,KAAKF,KAAL,CAAWE;AAH3B,WAKI,KAAKF,KAAL,CAAWG,kBANjB;AAQA,aAAOiC,KAAK,CAACY,YAAN,OAAAZ,KAAK,GACVD,OADU,6BAGLY,gCAHK,EAILE,iBAAiB,CAClB,KAAKjD,KAAL,CAAWkD,UAAX,KAA0BC,SAA1B,GACIzD,uBAAuB,CAAC0D,oBAAxB,EADJ,GAEI,KAAKpD,KAAL,CAAWkD,UAHG,EAIlB,KAAKlD,KAAL,CAAWqD,aAAX,KAA6B,IAJX,CAJZ;AAURC,QAAAA,UAAU,EAAE,KAAKtD,KAAL,CAAWsD,UAAX,KAA0B,KAV9B;AAWRC,QAAAA,iBAAiB,EAAE,KAAKvD,KAAL,CAAWuD,iBAXtB;AAYRC,QAAAA,kBAAkB,EAAE,KAAKxD,KAAL,CAAWwD,kBAZvB;AAaRC,QAAAA,iBAAiB,EAAE,KAAKzD,KAAL,CAAWyD,iBAbtB;AAcRtD,QAAAA,kBAAkB,EAAEA,kBAdZ;AAeRuD,QAAAA,oBAAoB,EAAE,KAAK1D,KAAL,CAAW0D,oBAfzB;AAgBRC,QAAAA,qBAAqB,EAAE,KAAK3D,KAAL,CAAW2D,qBAhB1B;AAiBRC,QAAAA,kBAAkB,EAAE,KAAK5D,KAAL,CAAW4D,kBAjBvB;AAkBRC,QAAAA,yBAAyB,EAAE,KAAK7D,KAAL,CAAW6D,yBAlB9B;AAmBRC,QAAAA,uBAAuB,EAAE,KAAK9D,KAAL,CAAW8D,uBAnB5B;AAoBRC,QAAAA,wBAAwB,EAAE,KAAK/D,KAAL,CAAW+D,wBApB7B;AAqBRC,QAAAA,2BAA2B,EAAE,KAAKhE,KAAL,CAAWgE,2BArBhC;AAsBRC,QAAAA,mBAAmB,EAAE,KAAKjE,KAAL,CAAWiE,mBAtBxB;AAuBR7D,QAAAA,OAAO,EAAE,KAAKJ,KAAL,CAAWI,OAvBZ;AAwBR8D,QAAAA,SAAS,EACP,KAAKlE,KAAL,CAAWkE,SAAX,KAAyB,KAAzB,IACA,KAAKlE,KAAL,CAAWc,OAAX,KAAuBqC,SADvB,IAEA,CAAC,KAAKnD,KAAL,CAAWE,QA3BN;AA4BRiE,QAAAA,QAAQ,EAAE,KAAKnE,KAAL,CAAWmE,QA5Bb;AA6BRC,QAAAA,aAAa,EAAE,KAAKpE,KAAL,CAAWoE,aA7BlB;AA8BRC,QAAAA,gBAAgB,EAAE,KAAKrE,KAAL,CAAWqE,gBA9BrB;AA+BRC,QAAAA,aAAa,EAAE,KAAKtE,KAAL,CAAWsE,aA/BlB;AAgCRC,QAAAA,cAAc,EAAE,KAAKvE,KAAL,CAAWuE,cAhCnB;AAiCRC,QAAAA,WAAW,EAAE,KAAKxE,KAAL,CAAWwE,WAjChB;AAkCRC,QAAAA,QAAQ,EAAE,KAAKzE,KAAL,CAAWyE,QAlCb;AAmCRC,QAAAA,MAAM,EAAE,KAAK1E,KAAL,CAAW0E;AAnCX,iBAqCPnC,QArCO,EAAZ;AAuCD;;;WAED,4BAAmBoC,SAAnB,EAAqCC,SAArC,EAAuD;AACrD,WAAKjF,KAAL,CAAWC,YAAX,CAAwBiF,SAAxB,CAAkC,KAAK/E,yBAAL,EAAlC;AACD;;;WAED,gCAA6B;AAC3B,WAAKH,KAAL,CAAWC,YAAX,CAAwBkF,KAAxB;AACD;;;EA3NmC1C,KAAK,CAAC2C,S;;AAAtCrF,uB,CAKG0D,oB,GAMD,UAAC4B,YAAD;AAAA,SAA4B;AAChCvC,IAAAA,IAAI,EAAE,kBAD0B;AAEhCwC,IAAAA,SAAS,EAAE,0BAFqB;AAGhCD,IAAAA,YAAY,EAAZA;AAHgC,GAA5B;AAAA,C;;AAXFtF,uB,CAqBGwF,8B,GAMD,UAACF,YAAD;AAAA,SAA4B;AAChCvC,IAAAA,IAAI,EAAE,kBAD0B;AAEhCwC,IAAAA,SAAS,EAAE,oCAFqB;AAGhCD,IAAAA,YAAY,EAAZA;AAHgC,GAA5B;AAAA,C;;AA3BFtF,uB,CAsCGyF,M,GASD,UAACC,KAAD,EAAgBC,UAAhB,EAAqCL,YAArC,EAA+D;AACnE,MAAMM,cAAc,GAAG,2BAAaF,KAAb,CAAvB;AACA,0BACEE,cAAc,IAAI,IAAlB,IAA0B,OAAOA,cAAP,KAA0B,QADtD,EAEE,yCAFF;AAIA,SAAO;AACL7C,IAAAA,IAAI,EAAE,eADD;AAEL2C,IAAAA,KAAK,EAAEE,cAFF;AAGLD,IAAAA,UAAU,EAAVA,UAHK;AAILL,IAAAA,YAAY,EAAZA;AAJK,GAAP;AAMD,C;;AA3DGtF,uB,CAgEG6F,sB,GAAwC;AAAA,SAC7CtE,kBAASC,EAAT,KAAgB,SAAhB,IAA6BD,kBAASuE,OAAT,IAAoB,EADJ;AAAA,C;;AA8JjD,IAAMvC,iBAAiB,GACrBhC,kBAASC,EAAT,KAAgB,SAAhB,GACI,UAACgC,UAAD,EAAaG,aAAb;AAAA,SACEA,aAAa,IAAI3D,uBAAuB,CAAC6F,sBAAxB,EAAjB,GACI;AAACE,IAAAA,uBAAuB,EAAEvC;AAA1B,GADJ,GAEI;AAACwC,IAAAA,uBAAuB,EAAExC;AAA1B,GAHN;AAAA,CADJ,GAKI,UAACA,UAAD,EAAaG,aAAb;AAAA,SAA+B,IAA/B;AAAA,CANN;AAQA3D,uBAAuB,CAACiG,WAAxB,GAAsC,yBAAtC;AAEAC,MAAM,CAACC,OAAP,GAAiBnG,uBAAjB","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\nimport Pressability, {\n  type PressabilityConfig,\n} from '../../Pressability/Pressability';\nimport {PressabilityDebugView} from '../../Pressability/PressabilityDebug';\nimport typeof TouchableWithoutFeedback from './TouchableWithoutFeedback';\nimport {Commands} from 'react-native/Libraries/Components/View/ViewNativeComponent';\nimport ReactNative from 'react-native/Libraries/Renderer/shims/ReactNative';\nimport type {PressEvent} from 'react-native/Libraries/Types/CoreEventTypes';\nimport Platform from '../../Utilities/Platform';\nimport View from '../../Components/View/View';\nimport processColor from '../../StyleSheet/processColor';\nimport * as React from 'react';\nimport invariant from 'invariant';\n\ntype Props = $ReadOnly<{|\n  ...React.ElementConfig<TouchableWithoutFeedback>,\n\n  /**\n   * Determines the type of background drawable that's going to be used to\n   * display feedback. It takes an object with `type` property and extra data\n   * depending on the `type`. It's recommended to use one of the static\n   * methods to generate that dictionary.\n   */\n  background?: ?(\n    | $ReadOnly<{|\n        type: 'ThemeAttrAndroid',\n        attribute:\n          | 'selectableItemBackground'\n          | 'selectableItemBackgroundBorderless',\n        rippleRadius: ?number,\n      |}>\n    | $ReadOnly<{|\n        type: 'RippleAndroid',\n        color: ?number,\n        borderless: boolean,\n        rippleRadius: ?number,\n      |}>\n  ),\n\n  /**\n   * TV preferred focus (see documentation for the View component).\n   */\n  hasTVPreferredFocus?: ?boolean,\n\n  /**\n   * TV next focus down (see documentation for the View component).\n   */\n  nextFocusDown?: ?number,\n\n  /**\n   * TV next focus forward (see documentation for the View component).\n   */\n  nextFocusForward?: ?number,\n\n  /**\n   * TV next focus left (see documentation for the View component).\n   */\n  nextFocusLeft?: ?number,\n\n  /**\n   * TV next focus right (see documentation for the View component).\n   */\n  nextFocusRight?: ?number,\n\n  /**\n   * TV next focus up (see documentation for the View component).\n   */\n  nextFocusUp?: ?number,\n\n  /**\n   * Set to true to add the ripple effect to the foreground of the view, instead\n   * of the background. This is useful if one of your child views has a\n   * background of its own, or you're e.g. displaying images, and you don't want\n   * the ripple to be covered by them.\n   *\n   * Check TouchableNativeFeedback.canUseNativeForeground() first, as this is\n   * only available on Android 6.0 and above. If you try to use this on older\n   * versions, this will fallback to background.\n   */\n  useForeground?: ?boolean,\n|}>;\n\ntype State = $ReadOnly<{|\n  pressability: Pressability,\n|}>;\n\nclass TouchableNativeFeedback extends React.Component<Props, State> {\n  /**\n   * Creates a value for the `background` prop that uses the Android theme's\n   * default background for selectable elements.\n   */\n  static SelectableBackground: (\n    rippleRadius: ?number,\n  ) => $ReadOnly<{|\n    attribute: 'selectableItemBackground',\n    type: 'ThemeAttrAndroid',\n    rippleRadius: ?number,\n  |}> = (rippleRadius: ?number) => ({\n    type: 'ThemeAttrAndroid',\n    attribute: 'selectableItemBackground',\n    rippleRadius,\n  });\n\n  /**\n   * Creates a value for the `background` prop that uses the Android theme's\n   * default background for borderless selectable elements. Requires API 21+.\n   */\n  static SelectableBackgroundBorderless: (\n    rippleRadius: ?number,\n  ) => $ReadOnly<{|\n    attribute: 'selectableItemBackgroundBorderless',\n    type: 'ThemeAttrAndroid',\n    rippleRadius: ?number,\n  |}> = (rippleRadius: ?number) => ({\n    type: 'ThemeAttrAndroid',\n    attribute: 'selectableItemBackgroundBorderless',\n    rippleRadius,\n  });\n\n  /**\n   * Creates a value for the `background` prop that uses the Android ripple with\n   * the supplied color. If `borderless` is true, the ripple will render outside\n   * of the view bounds. Requires API 21+.\n   */\n  static Ripple: (\n    color: string,\n    borderless: boolean,\n    rippleRadius: ?number,\n  ) => $ReadOnly<{|\n    borderless: boolean,\n    color: ?number,\n    rippleRadius: ?number,\n    type: 'RippleAndroid',\n  |}> = (color: string, borderless: boolean, rippleRadius: ?number) => {\n    const processedColor = processColor(color);\n    invariant(\n      processedColor == null || typeof processedColor === 'number',\n      'Unexpected color given for Ripple color',\n    );\n    return {\n      type: 'RippleAndroid',\n      color: processedColor,\n      borderless,\n      rippleRadius,\n    };\n  };\n\n  /**\n   * Whether `useForeground` is supported.\n   */\n  static canUseNativeForeground: () => boolean = () =>\n    Platform.OS === 'android' && Platform.Version >= 23;\n\n  state: State = {\n    pressability: new Pressability(this._createPressabilityConfig()),\n  };\n\n  _createPressabilityConfig(): PressabilityConfig {\n    return {\n      cancelable: !this.props.rejectResponderTermination,\n      disabled:\n        this.props.disabled != null\n          ? this.props.disabled\n          : this.props.accessibilityState?.disabled,\n      hitSlop: this.props.hitSlop,\n      delayLongPress: this.props.delayLongPress,\n      delayPressIn: this.props.delayPressIn,\n      delayPressOut: this.props.delayPressOut,\n      minPressDuration: 0,\n      pressRectOffset: this.props.pressRetentionOffset,\n      android_disableSound: this.props.touchSoundDisabled,\n      onLongPress: this.props.onLongPress,\n      onPress: this.props.onPress,\n      onPressIn: event => {\n        if (Platform.OS === 'android') {\n          this._dispatchHotspotUpdate(event);\n          this._dispatchPressedStateChange(true);\n        }\n        if (this.props.onPressIn != null) {\n          this.props.onPressIn(event);\n        }\n      },\n      onPressMove: event => {\n        if (Platform.OS === 'android') {\n          this._dispatchHotspotUpdate(event);\n        }\n      },\n      onPressOut: event => {\n        if (Platform.OS === 'android') {\n          this._dispatchPressedStateChange(false);\n        }\n        if (this.props.onPressOut != null) {\n          this.props.onPressOut(event);\n        }\n      },\n    };\n  }\n\n  _dispatchPressedStateChange(pressed: boolean): void {\n    if (Platform.OS === 'android') {\n      const hostComponentRef = ReactNative.findHostInstance_DEPRECATED(this);\n      if (hostComponentRef == null) {\n        console.warn(\n          'Touchable: Unable to find HostComponent instance. ' +\n            'Has your Touchable component been unmounted?',\n        );\n      } else {\n        Commands.setPressed(hostComponentRef, pressed);\n      }\n    }\n  }\n\n  _dispatchHotspotUpdate(event: PressEvent): void {\n    if (Platform.OS === 'android') {\n      const {locationX, locationY} = event.nativeEvent;\n      const hostComponentRef = ReactNative.findHostInstance_DEPRECATED(this);\n      if (hostComponentRef == null) {\n        console.warn(\n          'Touchable: Unable to find HostComponent instance. ' +\n            'Has your Touchable component been unmounted?',\n        );\n      } else {\n        Commands.hotspotUpdate(\n          hostComponentRef,\n          locationX ?? 0,\n          locationY ?? 0,\n        );\n      }\n    }\n  }\n\n  render(): React.Node {\n    const element = React.Children.only(this.props.children);\n    const children = [element.props.children];\n    if (__DEV__) {\n      if (element.type === View) {\n        children.push(\n          <PressabilityDebugView color=\"brown\" hitSlop={this.props.hitSlop} />,\n        );\n      }\n    }\n\n    // BACKWARD-COMPATIBILITY: Focus and blur events were never supported before\n    // adopting `Pressability`, so preserve that behavior.\n    const {\n      onBlur,\n      onFocus,\n      ...eventHandlersWithoutBlurAndFocus\n    } = this.state.pressability.getEventHandlers();\n\n    const accessibilityState =\n      this.props.disabled != null\n        ? {\n            ...this.props.accessibilityState,\n            disabled: this.props.disabled,\n          }\n        : this.props.accessibilityState;\n\n    return React.cloneElement(\n      element,\n      {\n        ...eventHandlersWithoutBlurAndFocus,\n        ...getBackgroundProp(\n          this.props.background === undefined\n            ? TouchableNativeFeedback.SelectableBackground()\n            : this.props.background,\n          this.props.useForeground === true,\n        ),\n        accessible: this.props.accessible !== false,\n        accessibilityHint: this.props.accessibilityHint,\n        accessibilityLabel: this.props.accessibilityLabel,\n        accessibilityRole: this.props.accessibilityRole,\n        accessibilityState: accessibilityState,\n        accessibilityActions: this.props.accessibilityActions,\n        onAccessibilityAction: this.props.onAccessibilityAction,\n        accessibilityValue: this.props.accessibilityValue,\n        importantForAccessibility: this.props.importantForAccessibility,\n        accessibilityLiveRegion: this.props.accessibilityLiveRegion,\n        accessibilityViewIsModal: this.props.accessibilityViewIsModal,\n        accessibilityElementsHidden: this.props.accessibilityElementsHidden,\n        hasTVPreferredFocus: this.props.hasTVPreferredFocus,\n        hitSlop: this.props.hitSlop,\n        focusable:\n          this.props.focusable !== false &&\n          this.props.onPress !== undefined &&\n          !this.props.disabled,\n        nativeID: this.props.nativeID,\n        nextFocusDown: this.props.nextFocusDown,\n        nextFocusForward: this.props.nextFocusForward,\n        nextFocusLeft: this.props.nextFocusLeft,\n        nextFocusRight: this.props.nextFocusRight,\n        nextFocusUp: this.props.nextFocusUp,\n        onLayout: this.props.onLayout,\n        testID: this.props.testID,\n      },\n      ...children,\n    );\n  }\n\n  componentDidUpdate(prevProps: Props, prevState: State) {\n    this.state.pressability.configure(this._createPressabilityConfig());\n  }\n\n  componentWillUnmount(): void {\n    this.state.pressability.reset();\n  }\n}\n\nconst getBackgroundProp =\n  Platform.OS === 'android'\n    ? (background, useForeground) =>\n        useForeground && TouchableNativeFeedback.canUseNativeForeground()\n          ? {nativeForegroundAndroid: background}\n          : {nativeBackgroundAndroid: background}\n    : (background, useForeground) => null;\n\nTouchableNativeFeedback.displayName = 'TouchableNativeFeedback';\n\nmodule.exports = TouchableNativeFeedback;\n"]}