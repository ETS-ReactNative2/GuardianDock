{"version":3,"mappings":";;;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAMA,IAAMA,wBAAwB,6SAA9B;AAEO,IAAMC,sBAAsB,GAAGC,KAAK,CAACC,aAAND,CAMpCE,SANoCF,CAA/B;;;AAWQ,SAASG,qBAAT,OAAoD;AAAA,MAAnBC,QAAmB,QAAnBA,QAAmB;AACjE,MAAMC,eAAe,GAAGL,KAAK,CAACM,MAANN,EAAxB;AAEA,MAAMO,KAAK,GAAGP,KAAK,CAACQ,OAANR,CACZ;AAAA,WAAO;AACLS,cADK,oBACIC,GADJ,EACiB;AACpB,YAAMC,UAAU,GAAGN,eAAe,CAACO,OAAnC;;AAEA,YAAID,UAAU,KAAKT,SAAfS,IAA4BD,GAAG,KAAKC,UAAxC,EAAoD;AAClD,gBAAM,IAAIE,KAAJ,CAAUf,wBAAV,CAAN;AACD;;AAEDO,uBAAe,CAACO,OAAhBP,GAA0BK,GAA1BL;AARG;AAULS,gBAVK,sBAUMJ,GAVN,EAUmB;AACtB,YAAMC,UAAU,GAAGN,eAAe,CAACO,OAAnC;;AAEA,YAAIF,GAAG,KAAKC,UAAZ,EAAwB;AACtB;AACD;;AAEDN,uBAAe,CAACO,OAAhBP,GAA0BH,SAA1BG;AACD;AAlBI,KAAP;AAAA,GADYL,EAqBZ,EArBYA,CAAd;AAwBA,SACEA,oBAACD,sBAAD,CAAwBgB,QAAxB;AAAiCR,SAAK,EAAEA;AAAxC,KACGH,QADH,CADF;AAKD","names":["MULTIPLE_NAVIGATOR_ERROR","SingleNavigatorContext","React","createContext","undefined","EnsureSingleNavigator","children","navigatorKeyRef","useRef","value","useMemo","register","key","currentKey","current","Error","unregister","Provider"],"sources":["EnsureSingleNavigator.tsx"],"sourcesContent":["import * as React from 'react';\n\ntype Props = {\n  children: React.ReactNode;\n};\n\nconst MULTIPLE_NAVIGATOR_ERROR = `Another navigator is already registered for this container. You likely have multiple navigators under a single \"NavigationContainer\" or \"Screen\". Make sure each navigator is under a separate \"Screen\" container. See https://reactnavigation.org/docs/nesting-navigators for a guide on nesting.`;\n\nexport const SingleNavigatorContext = React.createContext<\n  | {\n      register(key: string): void;\n      unregister(key: string): void;\n    }\n  | undefined\n>(undefined);\n\n/**\n * Component which ensures that there's only one navigator nested under it.\n */\nexport default function EnsureSingleNavigator({ children }: Props) {\n  const navigatorKeyRef = React.useRef<string | undefined>();\n\n  const value = React.useMemo(\n    () => ({\n      register(key: string) {\n        const currentKey = navigatorKeyRef.current;\n\n        if (currentKey !== undefined && key !== currentKey) {\n          throw new Error(MULTIPLE_NAVIGATOR_ERROR);\n        }\n\n        navigatorKeyRef.current = key;\n      },\n      unregister(key: string) {\n        const currentKey = navigatorKeyRef.current;\n\n        if (key !== currentKey) {\n          return;\n        }\n\n        navigatorKeyRef.current = undefined;\n      },\n    }),\n    []\n  );\n\n  return (\n    <SingleNavigatorContext.Provider value={value}>\n      {children}\n    </SingleNavigatorContext.Provider>\n  );\n}\n"]}