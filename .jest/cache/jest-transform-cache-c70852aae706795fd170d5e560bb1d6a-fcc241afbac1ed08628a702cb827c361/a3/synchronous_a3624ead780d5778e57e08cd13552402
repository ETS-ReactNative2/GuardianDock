037cd95725062c4c0530d3e61faff3c7
'use strict';

var Promise = require("./core.js");

module.exports = Promise;

Promise.enableSynchronous = function () {
  Promise.prototype.isPending = function () {
    return this.getState() == 0;
  };

  Promise.prototype.isFulfilled = function () {
    return this.getState() == 1;
  };

  Promise.prototype.isRejected = function () {
    return this.getState() == 2;
  };

  Promise.prototype.getValue = function () {
    if (this._V === 3) {
      return this._W.getValue();
    }

    if (!this.isFulfilled()) {
      throw new Error('Cannot get a value of an unfulfilled promise.');
    }

    return this._W;
  };

  Promise.prototype.getReason = function () {
    if (this._V === 3) {
      return this._W.getReason();
    }

    if (!this.isRejected()) {
      throw new Error('Cannot get a rejection reason of a non-rejected promise.');
    }

    return this._W;
  };

  Promise.prototype.getState = function () {
    if (this._V === 3) {
      return this._W.getState();
    }

    if (this._V === -1 || this._V === -2) {
      return 0;
    }

    return this._V;
  };
};

Promise.disableSynchronous = function () {
  Promise.prototype.isPending = undefined;
  Promise.prototype.isFulfilled = undefined;
  Promise.prototype.isRejected = undefined;
  Promise.prototype.getValue = undefined;
  Promise.prototype.getReason = undefined;
  Promise.prototype.getState = undefined;
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInN5bmNocm9ub3VzLmpzIl0sIm5hbWVzIjpbIlByb21pc2UiLCJyZXF1aXJlIiwibW9kdWxlIiwiZXhwb3J0cyIsImVuYWJsZVN5bmNocm9ub3VzIiwicHJvdG90eXBlIiwiaXNQZW5kaW5nIiwiZ2V0U3RhdGUiLCJpc0Z1bGZpbGxlZCIsImlzUmVqZWN0ZWQiLCJnZXRWYWx1ZSIsIl9WIiwiX1ciLCJFcnJvciIsImdldFJlYXNvbiIsImRpc2FibGVTeW5jaHJvbm91cyIsInVuZGVmaW5lZCJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUEsSUFBSUEsT0FBTyxHQUFHQyxPQUFPLGFBQXJCOztBQUVBQyxNQUFNLENBQUNDLE9BQVAsR0FBaUJILE9BQWpCOztBQUNBQSxPQUFPLENBQUNJLGlCQUFSLEdBQTRCLFlBQVk7QUFDdENKLEVBQUFBLE9BQU8sQ0FBQ0ssU0FBUixDQUFrQkMsU0FBbEIsR0FBOEIsWUFBVztBQUN2QyxXQUFPLEtBQUtDLFFBQUwsTUFBbUIsQ0FBMUI7QUFDRCxHQUZEOztBQUlBUCxFQUFBQSxPQUFPLENBQUNLLFNBQVIsQ0FBa0JHLFdBQWxCLEdBQWdDLFlBQVc7QUFDekMsV0FBTyxLQUFLRCxRQUFMLE1BQW1CLENBQTFCO0FBQ0QsR0FGRDs7QUFJQVAsRUFBQUEsT0FBTyxDQUFDSyxTQUFSLENBQWtCSSxVQUFsQixHQUErQixZQUFXO0FBQ3hDLFdBQU8sS0FBS0YsUUFBTCxNQUFtQixDQUExQjtBQUNELEdBRkQ7O0FBSUFQLEVBQUFBLE9BQU8sQ0FBQ0ssU0FBUixDQUFrQkssUUFBbEIsR0FBNkIsWUFBWTtBQUN2QyxRQUFJLEtBQUtDLEVBQUwsS0FBWSxDQUFoQixFQUFtQjtBQUNqQixhQUFPLEtBQUtDLEVBQUwsQ0FBUUYsUUFBUixFQUFQO0FBQ0Q7O0FBRUQsUUFBSSxDQUFDLEtBQUtGLFdBQUwsRUFBTCxFQUF5QjtBQUN2QixZQUFNLElBQUlLLEtBQUosQ0FBVSwrQ0FBVixDQUFOO0FBQ0Q7O0FBRUQsV0FBTyxLQUFLRCxFQUFaO0FBQ0QsR0FWRDs7QUFZQVosRUFBQUEsT0FBTyxDQUFDSyxTQUFSLENBQWtCUyxTQUFsQixHQUE4QixZQUFZO0FBQ3hDLFFBQUksS0FBS0gsRUFBTCxLQUFZLENBQWhCLEVBQW1CO0FBQ2pCLGFBQU8sS0FBS0MsRUFBTCxDQUFRRSxTQUFSLEVBQVA7QUFDRDs7QUFFRCxRQUFJLENBQUMsS0FBS0wsVUFBTCxFQUFMLEVBQXdCO0FBQ3RCLFlBQU0sSUFBSUksS0FBSixDQUFVLDBEQUFWLENBQU47QUFDRDs7QUFFRCxXQUFPLEtBQUtELEVBQVo7QUFDRCxHQVZEOztBQVlBWixFQUFBQSxPQUFPLENBQUNLLFNBQVIsQ0FBa0JFLFFBQWxCLEdBQTZCLFlBQVk7QUFDdkMsUUFBSSxLQUFLSSxFQUFMLEtBQVksQ0FBaEIsRUFBbUI7QUFDakIsYUFBTyxLQUFLQyxFQUFMLENBQVFMLFFBQVIsRUFBUDtBQUNEOztBQUNELFFBQUksS0FBS0ksRUFBTCxLQUFZLENBQUMsQ0FBYixJQUFrQixLQUFLQSxFQUFMLEtBQVksQ0FBQyxDQUFuQyxFQUFzQztBQUNwQyxhQUFPLENBQVA7QUFDRDs7QUFFRCxXQUFPLEtBQUtBLEVBQVo7QUFDRCxHQVREO0FBVUQsQ0EvQ0Q7O0FBaURBWCxPQUFPLENBQUNlLGtCQUFSLEdBQTZCLFlBQVc7QUFDdENmLEVBQUFBLE9BQU8sQ0FBQ0ssU0FBUixDQUFrQkMsU0FBbEIsR0FBOEJVLFNBQTlCO0FBQ0FoQixFQUFBQSxPQUFPLENBQUNLLFNBQVIsQ0FBa0JHLFdBQWxCLEdBQWdDUSxTQUFoQztBQUNBaEIsRUFBQUEsT0FBTyxDQUFDSyxTQUFSLENBQWtCSSxVQUFsQixHQUErQk8sU0FBL0I7QUFDQWhCLEVBQUFBLE9BQU8sQ0FBQ0ssU0FBUixDQUFrQkssUUFBbEIsR0FBNkJNLFNBQTdCO0FBQ0FoQixFQUFBQSxPQUFPLENBQUNLLFNBQVIsQ0FBa0JTLFNBQWxCLEdBQThCRSxTQUE5QjtBQUNBaEIsRUFBQUEsT0FBTyxDQUFDSyxTQUFSLENBQWtCRSxRQUFsQixHQUE2QlMsU0FBN0I7QUFDRCxDQVBEIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgUHJvbWlzZSA9IHJlcXVpcmUoJy4vY29yZS5qcycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFByb21pc2U7XG5Qcm9taXNlLmVuYWJsZVN5bmNocm9ub3VzID0gZnVuY3Rpb24gKCkge1xuICBQcm9taXNlLnByb3RvdHlwZS5pc1BlbmRpbmcgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRTdGF0ZSgpID09IDA7XG4gIH07XG5cbiAgUHJvbWlzZS5wcm90b3R5cGUuaXNGdWxmaWxsZWQgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRTdGF0ZSgpID09IDE7XG4gIH07XG5cbiAgUHJvbWlzZS5wcm90b3R5cGUuaXNSZWplY3RlZCA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLmdldFN0YXRlKCkgPT0gMjtcbiAgfTtcblxuICBQcm9taXNlLnByb3RvdHlwZS5nZXRWYWx1ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAodGhpcy5fViA9PT0gMykge1xuICAgICAgcmV0dXJuIHRoaXMuX1cuZ2V0VmFsdWUoKTtcbiAgICB9XG5cbiAgICBpZiAoIXRoaXMuaXNGdWxmaWxsZWQoKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdDYW5ub3QgZ2V0IGEgdmFsdWUgb2YgYW4gdW5mdWxmaWxsZWQgcHJvbWlzZS4nKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5fVztcbiAgfTtcblxuICBQcm9taXNlLnByb3RvdHlwZS5nZXRSZWFzb24gPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHRoaXMuX1YgPT09IDMpIHtcbiAgICAgIHJldHVybiB0aGlzLl9XLmdldFJlYXNvbigpO1xuICAgIH1cblxuICAgIGlmICghdGhpcy5pc1JlamVjdGVkKCkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignQ2Fubm90IGdldCBhIHJlamVjdGlvbiByZWFzb24gb2YgYSBub24tcmVqZWN0ZWQgcHJvbWlzZS4nKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5fVztcbiAgfTtcblxuICBQcm9taXNlLnByb3RvdHlwZS5nZXRTdGF0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAodGhpcy5fViA9PT0gMykge1xuICAgICAgcmV0dXJuIHRoaXMuX1cuZ2V0U3RhdGUoKTtcbiAgICB9XG4gICAgaWYgKHRoaXMuX1YgPT09IC0xIHx8IHRoaXMuX1YgPT09IC0yKSB7XG4gICAgICByZXR1cm4gMDtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5fVjtcbiAgfTtcbn07XG5cblByb21pc2UuZGlzYWJsZVN5bmNocm9ub3VzID0gZnVuY3Rpb24oKSB7XG4gIFByb21pc2UucHJvdG90eXBlLmlzUGVuZGluZyA9IHVuZGVmaW5lZDtcbiAgUHJvbWlzZS5wcm90b3R5cGUuaXNGdWxmaWxsZWQgPSB1bmRlZmluZWQ7XG4gIFByb21pc2UucHJvdG90eXBlLmlzUmVqZWN0ZWQgPSB1bmRlZmluZWQ7XG4gIFByb21pc2UucHJvdG90eXBlLmdldFZhbHVlID0gdW5kZWZpbmVkO1xuICBQcm9taXNlLnByb3RvdHlwZS5nZXRSZWFzb24gPSB1bmRlZmluZWQ7XG4gIFByb21pc2UucHJvdG90eXBlLmdldFN0YXRlID0gdW5kZWZpbmVkO1xufTtcbiJdfQ==