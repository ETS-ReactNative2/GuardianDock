{"version":3,"mappings":";;;;;;;AACA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAYe,SAASA,cAAT,OAGI;AAAA,MAFjBC,KAEiB,QAFjBA,KAEiB;AAAA,MADjBC,OACiB,QADjBA,OACiB;AACjB,MAAMC,UAAU,GAAGC,KAAK,CAACC,UAAND,CAAiBE,0BAAjBF,CAAnB;AACA,MAAMG,iBAAiB,GAAGH,KAAK,CAACI,MAANJ,EAA1B;AAEA,MAAMK,iBAAiB,GAAGR,KAAK,CAACS,MAANT,CAAaA,KAAK,CAACU,KAAnBV,EAA0BW,GAApD;AAIAR,OAAK,CAACS,SAANT,CACE;AAAA,WACED,UADF,SACEA,cADF,WACEA,GADF,MACEA,aAAU,CAAEW,WAAZX,CAAwB,OAAxBA,EAAiC,YAAM;AACrCI,uBAAiB,CAACQ,OAAlBR,GAA4BE,iBAA5BF;AACAL,aAAO,CAACc,IAARd,CAAa;AAAEe,YAAI,EAAE,OAAR;AAAiBC,cAAM,EAAET;AAAzB,OAAbP;AAFF,MADF;AAAA,GADFE,EAME,CAACK,iBAAD,EAAoBP,OAApB,EAA6BC,UAA7B,CANFC;AASAA,OAAK,CAACS,SAANT,CACE;AAAA,WACED,UADF,SACEA,cADF,WACEA,GADF,MACEA,aAAU,CAAEW,WAAZX,CAAwB,MAAxBA,EAAgC,YAAM;AACpCI,uBAAiB,CAACQ,OAAlBR,GAA4BY,SAA5BZ;AACAL,aAAO,CAACc,IAARd,CAAa;AAAEe,YAAI,EAAE,MAAR;AAAgBC,cAAM,EAAET;AAAxB,OAAbP;AAFF,MADF;AAAA,GADFE,EAME,CAACK,iBAAD,EAAoBP,OAApB,EAA6BC,UAA7B,CANFC;AASAA,OAAK,CAACS,SAANT,CAAgB,YAAM;AACpB,QAAMgB,cAAc,GAAGb,iBAAiB,CAACQ,OAAzC;AAEAR,qBAAiB,CAACQ,OAAlBR,GAA4BE,iBAA5BF;;AAIA,QAAIa,cAAc,KAAKD,SAAnBC,IAAgC,CAACjB,UAArC,EAAiD;AAC/CD,aAAO,CAACc,IAARd,CAAa;AAAEe,YAAI,EAAE,OAAR;AAAiBC,cAAM,EAAET;AAAzB,OAAbP;AARkB;;AAapB,QACEkB,cAAc,KAAKX,iBAAnBW,IACA,EAAEjB,UAAU,GAAGA,UAAU,CAACkB,SAAXlB,EAAH,GAA4B,IAAxC,CAFF,EAGE;AACA;AACD;;AAED,QAAIiB,cAAc,KAAKD,SAAvB,EAAkC;AAEhC;AACD;;AAEDjB,WAAO,CAACc,IAARd,CAAa;AAAEe,UAAI,EAAE,MAAR;AAAgBC,YAAM,EAAEE;AAAxB,KAAblB;AACAA,WAAO,CAACc,IAARd,CAAa;AAAEe,UAAI,EAAE,OAAR;AAAiBC,YAAM,EAAET;AAAzB,KAAbP;AA1BF,KA2BG,CAACO,iBAAD,EAAoBP,OAApB,EAA6BC,UAA7B,CA3BHC;AA4BD","names":["useFocusEvents","state","emitter","navigation","React","useContext","NavigationContext","lastFocusedKeyRef","useRef","currentFocusedKey","routes","index","key","useEffect","addListener","current","emit","type","target","undefined","lastFocusedKey","isFocused"],"sources":["useFocusEvents.tsx"],"sourcesContent":["import type { NavigationState } from '@react-navigation/routers';\nimport * as React from 'react';\n\nimport NavigationContext from './NavigationContext';\nimport type { EventMapCore } from './types';\nimport type { NavigationEventEmitter } from './useEventEmitter';\n\ntype Options<State extends NavigationState> = {\n  state: State;\n  emitter: NavigationEventEmitter<EventMapCore<State>>;\n};\n\n/**\n * Hook to take care of emitting `focus` and `blur` events.\n */\nexport default function useFocusEvents<State extends NavigationState>({\n  state,\n  emitter,\n}: Options<State>) {\n  const navigation = React.useContext(NavigationContext);\n  const lastFocusedKeyRef = React.useRef<string | undefined>();\n\n  const currentFocusedKey = state.routes[state.index].key;\n\n  // When the parent screen changes its focus state, we also need to change child's focus\n  // Coz the child screen can't be focused if the parent screen is out of focus\n  React.useEffect(\n    () =>\n      navigation?.addListener('focus', () => {\n        lastFocusedKeyRef.current = currentFocusedKey;\n        emitter.emit({ type: 'focus', target: currentFocusedKey });\n      }),\n    [currentFocusedKey, emitter, navigation]\n  );\n\n  React.useEffect(\n    () =>\n      navigation?.addListener('blur', () => {\n        lastFocusedKeyRef.current = undefined;\n        emitter.emit({ type: 'blur', target: currentFocusedKey });\n      }),\n    [currentFocusedKey, emitter, navigation]\n  );\n\n  React.useEffect(() => {\n    const lastFocusedKey = lastFocusedKeyRef.current;\n\n    lastFocusedKeyRef.current = currentFocusedKey;\n\n    // We wouldn't have `lastFocusedKey` on initial mount\n    // Fire focus event for the current route on mount if there's no parent navigator\n    if (lastFocusedKey === undefined && !navigation) {\n      emitter.emit({ type: 'focus', target: currentFocusedKey });\n    }\n\n    // We should only emit events when the focused key changed and navigator is focused\n    // When navigator is not focused, screens inside shouldn't receive focused status either\n    if (\n      lastFocusedKey === currentFocusedKey ||\n      !(navigation ? navigation.isFocused() : true)\n    ) {\n      return;\n    }\n\n    if (lastFocusedKey === undefined) {\n      // Only fire events after initial mount\n      return;\n    }\n\n    emitter.emit({ type: 'blur', target: lastFocusedKey });\n    emitter.emit({ type: 'focus', target: currentFocusedKey });\n  }, [currentFocusedKey, emitter, navigation]);\n}\n"]}