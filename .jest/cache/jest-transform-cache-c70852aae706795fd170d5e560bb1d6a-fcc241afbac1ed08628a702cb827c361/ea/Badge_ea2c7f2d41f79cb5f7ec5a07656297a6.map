{"version":3,"mappings":";;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,IAAMA,WAAW,GAAG,EAApB;;AAkDA,IAAMC,KAAK,GAAG,SAARA,KAAQ,OAOD;AAAA,MANXC,QAMW,QANXA,QAMW;AAAA,uBALXC,IAKW;AAAA,MALXA,IAKW,0BALJH,WAKI;AAAA,MAJXI,KAIW,QAJXA,KAIW;AAAA,MAHXC,KAGW,QAHXA,KAGW;AAAA,0BAFXC,OAEW;AAAA,MAFXA,OAEW,6BAFD,IAEC;AAAA,MADRC,IACQ;;AACX,sBAA6BC,KAAK,CAACC,MAAND,CAC3B,IAAIE,sBAASC,KAAb,CAAmBL,OAAO,GAAG,CAAH,GAAO,CAAjC,CAD2BE,CAA7B;AAAA,MAAiBI,OAAjB,iBAAQC,OAAR;;AAGA,MAAMC,gBAAgB,GAAGN,KAAK,CAACC,MAAND,CAAsB,IAAtBA,CAAzB;AAEA,MACeO,KADf,GAEIV,KAFJ,CACEW,SADF,CACeD,KADf;AAIAP,OAAK,CAACS,SAANT,CAAgB,YAAM;AAEpB,QAAIM,gBAAgB,CAACD,OAArB,EAA8B;AAC5BC,sBAAgB,CAACD,OAAjBC,GAA2B,KAA3BA;AACA;AACD;;AAEDJ,0BAASQ,MAATR,CAAgBE,OAAhBF,EAAyB;AACvBS,aAAO,EAAEb,OAAO,GAAG,CAAH,GAAO,CADA;AAEvBc,cAAQ,EAAE,MAAML,KAFO;AAGvBM,qBAAe,EAAE;AAHM,KAAzBX,EAIGY,KAJHZ;AAPF,KAYG,CAACJ,OAAD,EAAUM,OAAV,EAAmBG,KAAnB,CAZHP;;AAcA,cAGKe,wBAAWC,OAAXD,CAAmBnB,KAAnBmB,KAA6B,EAHlC;AAAA,oCACEE,eADF;AAAA,MACEA,eADF,sCACoBpB,KAAK,CAACqB,MAANrB,CAAasB,YADjC;AAAA,MAEKC,SAFL;;AAKA,MAAMC,SAAS,GAAG,kCAAoBJ,eAApB,EAAqCK,aAArC,EAA4CC,aAA5C,CAAlB;AAEA,MAAMC,YAAY,GAAG7B,IAAI,GAAG,CAA5B;AAEA,SACEK,oBAACyB,sBAASC,IAAV;AACEC,iBAAa,EAAE,CADjB;AAEE/B,SAAK,EAAE;AAEHQ,aADF,EACEA,OAFG;AAGHa,qBAFF,EAEEA,eAHG;AAIHW,WAAK,EAAEP,SAJJ;AAKHQ,cAAQ,EAAElC,IAAI,GAAG;AALd,OAMAE,KAAK,CAACiC,KAANjC,CAAYkC,OANZ;AAOHC,gBAAU,EAAErC,IAPT;AAQHsC,YAAM,EAAEtC,IARL;AASHuC,cAAQ,EAAEvC,IATP;AAUH6B;AAVG,QAYLW,MAAM,CAACC,SAZF,EAaLhB,SAbK;AAFT,KAiBMrB,IAjBN,GAmBGL,QAnBH,CADF;AAxCF;;eAiEe,wBAAUD,KAAV;;;;AAEf,IAAM0C,MAAM,GAAGpB,wBAAWsB,MAAXtB,CAAkB;AAC/BqB,WAAS,EAAE;AACTE,aAAS,EAAE,UADF;AAETC,aAAS,EAAE,QAFF;AAGTC,qBAAiB,EAAE,QAHV;AAITC,qBAAiB,EAAE,CAJV;AAKTC,YAAQ,EAAE;AALD;AADoB,CAAlB3B,CAAf","names":["defaultSize","Badge","children","size","style","theme","visible","rest","React","useRef","Animated","Value","opacity","current","isFirstRendering","scale","animation","useEffect","timing","toValue","duration","useNativeDriver","start","StyleSheet","flatten","backgroundColor","colors","notification","restStyle","textColor","white","black","borderRadius","_reactNative","Text","numberOfLines","color","fontSize","fonts","regular","lineHeight","height","minWidth","styles","container","create","alignSelf","textAlign","textAlignVertical","paddingHorizontal","overflow"],"sources":["Badge.tsx"],"sourcesContent":["import * as React from 'react';\nimport { Animated, StyleSheet, StyleProp, TextStyle } from 'react-native';\nimport { white, black } from '../styles/colors';\nimport { withTheme } from '../core/theming';\nimport getContrastingColor from '../utils/getContrastingColor';\n\nconst defaultSize = 20;\n\ntype Props = React.ComponentProps<typeof Animated.Text> & {\n  /**\n   * Whether the badge is visible\n   */\n  visible?: boolean;\n  /**\n   * Content of the `Badge`.\n   */\n  children?: string | number;\n  /**\n   * Size of the `Badge`.\n   */\n  size?: number;\n  style?: StyleProp<TextStyle>;\n  ref?: React.RefObject<typeof Animated.Text>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n};\n\n/**\n * Badges are small status descriptors for UI elements.\n * A badge consists of a small circle, typically containing a number or other short set of characters, that appears in proximity to another object.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"small\" src=\"screenshots/badge-1.png\" />\n *     <figcaption>Badge with content</figcaption>\n *   </figure>\n *   <figure>\n *     <img class=\"small\" src=\"screenshots/badge-2.png\" />\n *     <figcaption>Badge without content</figcaption>\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Badge } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <Badge>3</Badge>\n * );\n *\n * export default MyComponent;\n * ```\n */\nconst Badge = ({\n  children,\n  size = defaultSize,\n  style,\n  theme,\n  visible = true,\n  ...rest\n}: Props) => {\n  const { current: opacity } = React.useRef<Animated.Value>(\n    new Animated.Value(visible ? 1 : 0)\n  );\n  const isFirstRendering = React.useRef<boolean>(true);\n\n  const {\n    animation: { scale },\n  } = theme;\n\n  React.useEffect(() => {\n    // Do not run animation on very first rendering\n    if (isFirstRendering.current) {\n      isFirstRendering.current = false;\n      return;\n    }\n\n    Animated.timing(opacity, {\n      toValue: visible ? 1 : 0,\n      duration: 150 * scale,\n      useNativeDriver: true,\n    }).start();\n  }, [visible, opacity, scale]);\n\n  const {\n    backgroundColor = theme.colors.notification,\n    ...restStyle\n  } = (StyleSheet.flatten(style) || {}) as TextStyle;\n\n  const textColor = getContrastingColor(backgroundColor, white, black);\n\n  const borderRadius = size / 2;\n\n  return (\n    <Animated.Text\n      numberOfLines={1}\n      style={[\n        {\n          opacity,\n          backgroundColor,\n          color: textColor,\n          fontSize: size * 0.5,\n          ...theme.fonts.regular,\n          lineHeight: size,\n          height: size,\n          minWidth: size,\n          borderRadius,\n        },\n        styles.container,\n        restStyle,\n      ]}\n      {...rest}\n    >\n      {children}\n    </Animated.Text>\n  );\n};\n\nexport default withTheme(Badge);\n\nconst styles = StyleSheet.create({\n  container: {\n    alignSelf: 'flex-end',\n    textAlign: 'center',\n    textAlignVertical: 'center',\n    paddingHorizontal: 4,\n    overflow: 'hidden',\n  },\n});\n"]}