{"version":3,"mappings":"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","names":["HelperText","style","type","visible","theme","onLayout","padding","rest","React","useRef","Animated","Value","shown","current","textHeight","scale","animation","useEffect","timing","toValue","duration","useNativeDriver","start","handleTextLayout","e","nativeEvent","layout","height","colors","dark","textColor","error","text","alpha","rgb","string","_AnimatedText","styles","color","opacity","transform","translateY","interpolate","inputRange","outputRange","children","StyleSheet","create","fontSize","paddingVertical","paddingHorizontal"],"sources":["HelperText.tsx"],"sourcesContent":["import * as React from 'react';\nimport color from 'color';\nimport {\n  Animated,\n  StyleSheet,\n  StyleProp,\n  TextStyle,\n  LayoutChangeEvent,\n} from 'react-native';\nimport AnimatedText from './Typography/AnimatedText';\nimport { withTheme } from '../core/theming';\nimport type { $Omit } from '../types';\n\ntype Props = $Omit<\n  $Omit<React.ComponentPropsWithRef<typeof AnimatedText>, 'padding'>,\n  'type'\n> & {\n  /**\n   * Type of the helper text.\n   */\n  type: 'error' | 'info';\n  /**\n   * Whether to display the helper text.\n   */\n  visible?: boolean;\n  /**\n   * Whether to apply padding to the helper text.\n   */\n  padding?: 'none' | 'normal';\n  /**\n   * Text content of the HelperText.\n   */\n  children: React.ReactNode;\n  style?: StyleProp<TextStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n  /**\n   * TestID used for testing purposes\n   */\n  testID?: string;\n};\n\n/**\n * Helper text is used in conjuction with input elements to provide additional hints for the user.\n *\n * <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/helper-text.gif\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { View } from 'react-native';\n * import { HelperText, TextInput } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [text, setText] = React.useState('');\n *\n *    const onChangeText = text => setText(text);\n *\n *   const hasErrors = () => {\n *     return !text.includes('@');\n *   };\n *\n *  return (\n *     <View>\n *       <TextInput label=\"Email\" value={text} onChangeText={onChangeText} />\n *       <HelperText type=\"error\" visible={hasErrors()}>\n *         Email address is invalid!\n *       </HelperText>\n *     </View>\n *   );\n * };\n *\n * export default MyComponent;\n * ```\n */\nconst HelperText = ({\n  style,\n  type = 'info',\n  visible = true,\n  theme,\n  onLayout,\n  padding = 'normal',\n  ...rest\n}: Props) => {\n  const { current: shown } = React.useRef<Animated.Value>(\n    new Animated.Value(visible ? 1 : 0)\n  );\n\n  let { current: textHeight } = React.useRef<number>(0);\n\n  const { scale } = theme.animation;\n\n  React.useEffect(() => {\n    if (visible) {\n      // show text\n      Animated.timing(shown, {\n        toValue: 1,\n        duration: 150 * scale,\n        useNativeDriver: true,\n      }).start();\n    } else {\n      // hide text\n      Animated.timing(shown, {\n        toValue: 0,\n        duration: 180 * scale,\n        useNativeDriver: true,\n      }).start();\n    }\n  }, [visible, scale, shown]);\n\n  const handleTextLayout = (e: LayoutChangeEvent) => {\n    onLayout?.(e);\n    textHeight = e.nativeEvent.layout.height;\n  };\n\n  const { colors, dark } = theme;\n\n  const textColor =\n    type === 'error'\n      ? colors.error\n      : color(colors.text)\n          .alpha(dark ? 0.7 : 0.54)\n          .rgb()\n          .string();\n\n  return (\n    <AnimatedText\n      onLayout={handleTextLayout}\n      style={[\n        styles.text,\n        padding !== 'none' ? styles.padding : {},\n        {\n          color: textColor,\n          opacity: shown,\n          transform:\n            visible && type === 'error'\n              ? [\n                  {\n                    translateY: shown.interpolate({\n                      inputRange: [0, 1],\n                      outputRange: [-textHeight / 2, 0],\n                    }),\n                  },\n                ]\n              : [],\n        },\n        style,\n      ]}\n      {...rest}\n    >\n      {rest.children}\n    </AnimatedText>\n  );\n};\n\nconst styles = StyleSheet.create({\n  text: {\n    fontSize: 12,\n    paddingVertical: 4,\n  },\n  padding: {\n    paddingHorizontal: 12,\n  },\n});\n\nexport default withTheme(HelperText);\n"]}