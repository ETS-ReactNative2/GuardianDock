{"version":3,"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AAEA;;AACA;;AACA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0BA,IAAMA,gBAAwB,GAAG,EAAjC;;AA+CA,IAAMC,MAAM,GAAG,SAATA,MAAS;AAAA,MACbC,QADa,QACbA,QADa;AAAA,8BAEbC,WAFa;AAAA,MAEbA,WAFa,iCAEC,IAFD;AAAA,MAGbC,SAHa,QAGbA,SAHa;AAAA,0BAIbC,OAJa;AAAA,MAIbA,OAJa,6BAIH,KAJG;AAAA,MAKbC,KALa,QAKbA,KALa;AAAA,MAMbC,KANa,QAMbA,KANa;AAAA,SAQbC,oBAACC,cAAD;AACEN,eAAW,EAAEA,WADf;AAEEC,aAAS,EAAEA,SAFb;AAGEC,WAAO,EAAEA,OAHX;AAIEK,yBAAqB,EAAE,CACrB;AACEC,kBAAY,EAAEJ,KAAK,CAACK,SADtB;AAEEC,qBAAe,EACbN,KAAK,CAACO,IAANP,IAAcA,KAAK,CAACQ,IAANR,KAAe,UAA7BA,GACI,sBAAQP,gBAAR,EAA0BO,KAAK,CAACS,MAANT,CAAaU,OAAvC,CADJV,GAEIA,KAAK,CAACS,MAANT,CAAaU;AALrB,KADqB,EAQrBC,MAAM,CAACC,SARc,EASrBb,KATqB;AAJzB,KAgBGE,KAAK,CAACY,QAANZ,CAAea,OAAfb,CAAuBN,QAAvBM,EACEc,MADFd,CACUe,eAAD;AAAA,WAAWA,KAAK,IAAI,IAATA,IAAiB,OAAOA,KAAP,KAAiB,SAA7C;AAAA,GADTf,EAEEgB,GAFFhB,CAEM,UAACe,KAAD,EAAQE,CAAR,EAAc;AACjB,QACEA,CAAC,KAAK,CAANA,IACAjB,KAAK,CAACkB,cAANlB,CAAqBe,KAArBf,CADAiB,IAEAF,KAAK,CAACI,IAANJ,KAAeK,sBAHjB,EAIE;AAEA,aAAOpB,KAAK,CAACqB,YAANrB,CAAmBe,KAAnBf,EAA0B;AAC/BF,aAAK,EAAE,CAAC;AAAEwB,oBAAU,EAAE;AAAd,SAAD,EAAqBP,KAAK,CAACQ,KAANR,CAAYjB,KAAjC;AADwB,OAA1BE,CAAP;AAGD;;AAED,WAAOe,KAAP;AAdH,IAhBH,CARa;AAAA,CAAf;;AA4CAtB,MAAM,CAAC+B,OAAP/B,GAAiB2B,sBAAjB3B;AAEAA,MAAM,CAACgC,OAAPhC,GAAiBiC,sBAAjBjC;AAEAA,MAAM,CAACkC,KAAPlC,GAAemC,qBAAfnC;AAEAA,MAAM,CAACoC,UAAPpC,GAAoBqC,yBAApBrC;;AAEA,IAAMiB,MAAM,GAAGqB,wBAAWC,MAAXD,CAAkB;AAC/BpB,WAAS,EAAE;AAQTsB,kBAAc,EAAEC,sBAASC,EAATD,KAAgB,SAAhBA,GAA4B,EAA5BA,GAAiC,CARxC;AASTE,oBAAgB,EAAE,EATT;AAUTC,aAAS,EAAE7C,gBAVF;AAWT8C,kBAAc,EAAE;AAXP;AADoB,CAAlBP,CAAf;;eAgBe,wBAAUtC,MAAV","names":["DIALOG_ELEVATION","Dialog","children","dismissable","onDismiss","visible","style","theme","React","_Modal","contentContainerStyle","borderRadius","roundness","backgroundColor","dark","mode","colors","surface","styles","container","Children","toArray","filter","child","map","i","isValidElement","type","DialogContent","cloneElement","paddingTop","props","Content","Actions","DialogActions","Title","DialogTitle","ScrollArea","DialogScrollArea","StyleSheet","create","marginVertical","Platform","OS","marginHorizontal","elevation","justifyContent"],"sources":["Dialog.tsx"],"sourcesContent":["import * as React from 'react';\nimport { StyleSheet, Platform, StyleProp, ViewStyle } from 'react-native';\nimport Modal from '../Modal';\nimport DialogContent from './DialogContent';\nimport DialogActions from './DialogActions';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport DialogTitle, { DialogTitle as _DialogTitle } from './DialogTitle';\nimport DialogScrollArea from './DialogScrollArea';\nimport { withTheme } from '../../core/theming';\nimport overlay from '../../styles/overlay';\n\ntype Props = {\n  /**\n   * Determines whether clicking outside the dialog dismiss it.\n   */\n  dismissable?: boolean;\n  /**\n   * Callback that is called when the user dismisses the dialog.\n   */\n  onDismiss?: () => void;\n  /**\n   * Determines Whether the dialog is visible.\n   */\n  visible: boolean;\n  /**\n   * Content of the `Dialog`.\n   */\n  children: React.ReactNode;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n};\n\nconst DIALOG_ELEVATION: number = 24;\n\n/**\n * Dialogs inform users about a specific task and may contain critical information, require decisions, or involve multiple tasks.\n * To render the `Dialog` above other components, you'll need to wrap it with the [`Portal`](portal.html) component.\n *\n *  <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/dialog-1.png\" />\n *   <img class=\"medium\" src=\"screenshots/dialog-2.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { View } from 'react-native';\n * import { Button, Paragraph, Dialog, Portal, Provider } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [visible, setVisible] = React.useState(false);\n *\n *   const showDialog = () => setVisible(true);\n *\n *   const hideDialog = () => setVisible(false);\n *\n *   return (\n *     <Provider>\n *       <View>\n *         <Button onPress={showDialog}>Show Dialog</Button>\n *         <Portal>\n *           <Dialog visible={visible} onDismiss={hideDialog}>\n *             <Dialog.Title>Alert</Dialog.Title>\n *             <Dialog.Content>\n *               <Paragraph>This is simple dialog</Paragraph>\n *             </Dialog.Content>\n *             <Dialog.Actions>\n *               <Button onPress={hideDialog}>Done</Button>\n *             </Dialog.Actions>\n *           </Dialog>\n *         </Portal>\n *       </View>\n *     </Provider>\n *   );\n * };\n *\n * export default MyComponent;\n * ```\n */\nconst Dialog = ({\n  children,\n  dismissable = true,\n  onDismiss,\n  visible = false,\n  style,\n  theme,\n}: Props) => (\n  <Modal\n    dismissable={dismissable}\n    onDismiss={onDismiss}\n    visible={visible}\n    contentContainerStyle={[\n      {\n        borderRadius: theme.roundness,\n        backgroundColor:\n          theme.dark && theme.mode === 'adaptive'\n            ? overlay(DIALOG_ELEVATION, theme.colors.surface)\n            : theme.colors.surface,\n      },\n      styles.container,\n      style,\n    ]}\n  >\n    {React.Children.toArray(children)\n      .filter((child) => child != null && typeof child !== 'boolean')\n      .map((child, i) => {\n        if (\n          i === 0 &&\n          React.isValidElement(child) &&\n          child.type === DialogContent\n        ) {\n          // Dialog content is the first item, so we add a top padding\n          return React.cloneElement(child, {\n            style: [{ paddingTop: 24 }, child.props.style],\n          });\n        }\n\n        return child;\n      })}\n  </Modal>\n);\n\n// @component ./DialogContent.tsx\nDialog.Content = DialogContent;\n// @component ./DialogActions.tsx\nDialog.Actions = DialogActions;\n// @component ./DialogTitle.tsx\nDialog.Title = DialogTitle;\n// @component ./DialogScrollArea.tsx\nDialog.ScrollArea = DialogScrollArea;\n\nconst styles = StyleSheet.create({\n  container: {\n    /**\n     * This prevents the shadow from being clipped on Android since Android\n     * doesn't support `overflow: visible`.\n     * One downside for this fix is that it will disable clicks on the area\n     * of the shadow around the dialog, consequently, if you click around the\n     * dialog (44 pixel from the top and bottom) it won't be dismissed.\n     */\n    marginVertical: Platform.OS === 'android' ? 44 : 0,\n    marginHorizontal: 26,\n    elevation: DIALOG_ELEVATION,\n    justifyContent: 'flex-start',\n  },\n});\n\nexport default withTheme(Dialog);\n"]}