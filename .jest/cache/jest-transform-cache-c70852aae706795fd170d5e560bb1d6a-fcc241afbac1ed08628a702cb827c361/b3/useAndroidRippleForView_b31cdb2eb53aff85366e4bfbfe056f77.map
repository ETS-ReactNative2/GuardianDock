{"version":3,"sources":["useAndroidRippleForView.js"],"names":["useAndroidRippleForView","rippleConfig","viewRef","color","borderless","radius","foreground","Platform","OS","Version","processedColor","nativeRippleValue","type","rippleRadius","viewProps","nativeForegroundAndroid","nativeBackgroundAndroid","onPressIn","event","view","current","Commands","hotspotUpdate","nativeEvent","locationX","locationY","setPressed","onPressMove","onPressOut"],"mappings":";;;;;;;AAUA;;AACA;;AAGA;;AACA;;;;;;AAqBe,SAASA,uBAAT,CACbC,YADa,EAEbC,OAFa,EAUX;AACF,aAAgDD,YAAhD,WAAgDA,YAAhD,GAAgE,EAAhE;AAAA,MAAOE,KAAP,QAAOA,KAAP;AAAA,MAAcC,UAAd,QAAcA,UAAd;AAAA,MAA0BC,MAA1B,QAA0BA,MAA1B;AAAA,MAAkCC,UAAlC,QAAkCA,UAAlC;;AAEA,SAAO,mBAAQ,YAAM;AACnB,QACEC,sBAASC,EAAT,KAAgB,SAAhB,IACAD,sBAASE,OAAT,IAAoB,EADpB,KAECN,KAAK,IAAI,IAAT,IAAiBC,UAAU,IAAI,IAA/B,IAAuCC,MAAM,IAAI,IAFlD,CADF,EAIE;AACA,UAAMK,cAAc,GAAG,+BAAaP,KAAb,CAAvB;AACA,8BACEO,cAAc,IAAI,IAAlB,IAA0B,OAAOA,cAAP,KAA0B,QADtD,EAEE,yCAFF;AAKA,UAAMC,iBAAiB,GAAG;AACxBC,QAAAA,IAAI,EAAE,eADkB;AAExBT,QAAAA,KAAK,EAAEO,cAFiB;AAGxBN,QAAAA,UAAU,EAAEA,UAAU,KAAK,IAHH;AAIxBS,QAAAA,YAAY,EAAER;AAJU,OAA1B;AAOA,aAAO;AACLS,QAAAA,SAAS,EACPR,UAAU,KAAK,IAAf,GACI;AAACS,UAAAA,uBAAuB,EAAEJ;AAA1B,SADJ,GAEI;AAACK,UAAAA,uBAAuB,EAAEL;AAA1B,SAJD;AAKLM,QAAAA,SALK,qBAKKC,KALL,EAK8B;AACjC,cAAMC,IAAI,GAAGjB,OAAO,CAACkB,OAArB;;AACA,cAAID,IAAI,IAAI,IAAZ,EAAkB;AAAA;;AAChBE,0CAASC,aAAT,CACEH,IADF,2BAEED,KAAK,CAACK,WAAN,CAAkBC,SAFpB,oCAEiC,CAFjC,4BAGEN,KAAK,CAACK,WAAN,CAAkBE,SAHpB,qCAGiC,CAHjC;;AAKAJ,0CAASK,UAAT,CAAoBP,IAApB,EAA0B,IAA1B;AACD;AACF,SAfI;AAgBLQ,QAAAA,WAhBK,uBAgBOT,KAhBP,EAgBgC;AACnC,cAAMC,IAAI,GAAGjB,OAAO,CAACkB,OAArB;;AACA,cAAID,IAAI,IAAI,IAAZ,EAAkB;AAAA;;AAChBE,0CAASC,aAAT,CACEH,IADF,4BAEED,KAAK,CAACK,WAAN,CAAkBC,SAFpB,qCAEiC,CAFjC,4BAGEN,KAAK,CAACK,WAAN,CAAkBE,SAHpB,qCAGiC,CAHjC;AAKD;AACF,SAzBI;AA0BLG,QAAAA,UA1BK,sBA0BMV,KA1BN,EA0B+B;AAClC,cAAMC,IAAI,GAAGjB,OAAO,CAACkB,OAArB;;AACA,cAAID,IAAI,IAAI,IAAZ,EAAkB;AAChBE,0CAASK,UAAT,CAAoBP,IAApB,EAA0B,KAA1B;AACD;AACF;AA/BI,OAAP;AAiCD;;AACD,WAAO,IAAP;AACD,GAtDM,EAsDJ,CAACf,UAAD,EAAaD,KAAb,EAAoBG,UAApB,EAAgCD,MAAhC,EAAwCH,OAAxC,CAtDI,CAAP;AAuDD","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\nimport invariant from 'invariant';\nimport {Commands} from '../View/ViewNativeComponent';\nimport type {ColorValue} from '../../StyleSheet/StyleSheet';\nimport type {PressEvent} from '../../Types/CoreEventTypes';\nimport {Platform, View, processColor} from 'react-native';\nimport * as React from 'react';\nimport {useMemo} from 'react';\n\ntype NativeBackgroundProp = $ReadOnly<{|\n  type: 'RippleAndroid',\n  color: ?number,\n  borderless: boolean,\n  rippleRadius: ?number,\n|}>;\n\nexport type RippleConfig = {|\n  color?: ColorValue,\n  borderless?: boolean,\n  radius?: number,\n  foreground?: boolean,\n|};\n\n/**\n * Provides the event handlers and props for configuring the ripple effect on\n * supported versions of Android.\n */\nexport default function useAndroidRippleForView(\n  rippleConfig: ?RippleConfig,\n  viewRef: {|current: null | React.ElementRef<typeof View>|},\n): ?$ReadOnly<{|\n  onPressIn: (event: PressEvent) => void,\n  onPressMove: (event: PressEvent) => void,\n  onPressOut: (event: PressEvent) => void,\n  viewProps:\n    | $ReadOnly<{|nativeBackgroundAndroid: NativeBackgroundProp|}>\n    | $ReadOnly<{|nativeForegroundAndroid: NativeBackgroundProp|}>,\n|}> {\n  const {color, borderless, radius, foreground} = rippleConfig ?? {};\n\n  return useMemo(() => {\n    if (\n      Platform.OS === 'android' &&\n      Platform.Version >= 21 &&\n      (color != null || borderless != null || radius != null)\n    ) {\n      const processedColor = processColor(color);\n      invariant(\n        processedColor == null || typeof processedColor === 'number',\n        'Unexpected color given for Ripple color',\n      );\n\n      const nativeRippleValue = {\n        type: 'RippleAndroid',\n        color: processedColor,\n        borderless: borderless === true,\n        rippleRadius: radius,\n      };\n\n      return {\n        viewProps:\n          foreground === true\n            ? {nativeForegroundAndroid: nativeRippleValue}\n            : {nativeBackgroundAndroid: nativeRippleValue},\n        onPressIn(event: PressEvent): void {\n          const view = viewRef.current;\n          if (view != null) {\n            Commands.hotspotUpdate(\n              view,\n              event.nativeEvent.locationX ?? 0,\n              event.nativeEvent.locationY ?? 0,\n            );\n            Commands.setPressed(view, true);\n          }\n        },\n        onPressMove(event: PressEvent): void {\n          const view = viewRef.current;\n          if (view != null) {\n            Commands.hotspotUpdate(\n              view,\n              event.nativeEvent.locationX ?? 0,\n              event.nativeEvent.locationY ?? 0,\n            );\n          }\n        },\n        onPressOut(event: PressEvent): void {\n          const view = viewRef.current;\n          if (view != null) {\n            Commands.setPressed(view, false);\n          }\n        },\n      };\n    }\n    return null;\n  }, [borderless, color, foreground, radius, viewRef]);\n}\n"]}