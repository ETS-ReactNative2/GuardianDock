{"version":3,"mappings":";;;;;;;;;;;AAAA;;AAOA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAWA,IAAMA,uBAAuB,GAAG,SAA1BA,uBAA0B,CAC9BC,UAD8B,EAE9BC,KAF8B,EAGb;AACjB,MAAMC,MAAM,GAAGF,UAAU,CAACG,SAAXH,EAAf;;AAEA,MAAIE,MAAJ,EAAY;AACV,QAAME,WAAW,GAAGF,MAAM,CAACG,QAAPH,EAApB;AAEA,WAAOH,uBAAuB,CAACG,MAAD,EAAS;AACrCI,WAAK,EAAE,CAD8B;AAErCC,YAAM,EAAE,4BAEDH,WAAW,CAACG,MAAZH,CAAmBA,WAAW,CAACE,KAA/BF,CAFC;AAGJH,aAAK,EAAEA;AAHH;AAF6B,KAAT,CAA9B;AASD;;AAED,SAAOA,KAAP;AApBF;;AA2Be,SAASO,cAAT,GAA0B;AACvC,MAAMR,UAAU,GAAGS,KAAK,CAACC,UAAND,CAAiBE,8BAAjBF,CAAnB;AACA,MAAMG,OAAO,GAAGH,KAAK,CAACC,UAAND,CAAiBI,uBAAjBJ,CAAhB;AAEA,MAAMK,SAAS,GAAGL,KAAK,CAACM,WAANN,CAChB,UAACO,IAAD,EAAeC,MAAf,EAAmC;AACjC,QAAQC,OAAR,GAAoBN,OAApB,CAAQM,OAAR;;AAEA,QAAI,QAAO,SAAPA,WAAO,WAAPA,mBAAO,CAAEC,OAAT,MAAqB,KAAzB,EAAgC;AAC9B,aAAOC,SAAP;AACD;;AAED,QAAMnB,KAAK,GAAGD,UAAU,GACpBD,uBAAuB,CAACC,UAAD,EAAa;AAClCM,WAAK,EAAE,CAD2B;AAElCC,YAAM,EAAE,CAAC;AAAES,YAAF,EAAEA,IAAF;AAAQC;AAAR,OAAD;AAF0B,KAAb,CADH,GAOpB;AACEX,WAAK,EAAE,CADT;AAEEC,YAAM,EAAE,CAAC;AAAES,YAAF,EAAEA,IAAF;AAAQC;AAAR,OAAD;AAFV,KAPJ;AAYA,QAAMI,IAAI,GAAGH,OAAO,SAAPA,WAAO,WAAPA,WAAO,CAAEI,gBAATJ,GACTA,OAAO,CAACI,gBAARJ,CAAyBjB,KAAzBiB,EAAgCA,OAAhC,SAAgCA,WAAhC,WAAgCA,GAAhC,MAAgCA,UAAO,CAAEK,MAAzCL,CADSA,GAET,4BAAiBjB,KAAjB,EAAwBiB,OAAxB,SAAwBA,WAAxB,WAAwBA,GAAxB,MAAwBA,UAAO,CAAEK,MAAjC,CAFJ;AAIA,WAAOF,IAAP;AAxBc,KA0BhB,CAACT,OAAD,EAAUZ,UAAV,CA1BgBS,CAAlB;AA6BA,SAAOK,SAAP;AACD","names":["getRootStateForNavigate","navigation","state","parent","getParent","parentState","getState","index","routes","useLinkBuilder","React","useContext","NavigationHelpersContext","linking","LinkingContext","buildLink","useCallback","name","params","options","enabled","undefined","path","getPathFromState","config"],"sources":["useLinkBuilder.tsx"],"sourcesContent":["import {\n  getPathFromState,\n  NavigationHelpers,\n  NavigationHelpersContext,\n  NavigationProp,\n  ParamListBase,\n} from '@react-navigation/core';\nimport * as React from 'react';\n\nimport LinkingContext from './LinkingContext';\n\ntype NavigationObject =\n  | NavigationHelpers<ParamListBase>\n  | NavigationProp<ParamListBase>;\n\ntype MinimalState = {\n  index: number;\n  routes: { name: string; params?: object; state?: MinimalState }[];\n};\n\nconst getRootStateForNavigate = (\n  navigation: NavigationObject,\n  state: MinimalState\n): MinimalState => {\n  const parent = navigation.getParent();\n\n  if (parent) {\n    const parentState = parent.getState();\n\n    return getRootStateForNavigate(parent, {\n      index: 0,\n      routes: [\n        {\n          ...parentState.routes[parentState.index],\n          state: state,\n        },\n      ],\n    });\n  }\n\n  return state;\n};\n\n/**\n * Build destination link for a navigate action.\n * Useful for showing anchor tags on the web for buttons that perform navigation.\n */\nexport default function useLinkBuilder() {\n  const navigation = React.useContext(NavigationHelpersContext);\n  const linking = React.useContext(LinkingContext);\n\n  const buildLink = React.useCallback(\n    (name: string, params?: object) => {\n      const { options } = linking;\n\n      if (options?.enabled === false) {\n        return undefined;\n      }\n\n      const state = navigation\n        ? getRootStateForNavigate(navigation, {\n            index: 0,\n            routes: [{ name, params }],\n          })\n        : // If we couldn't find a navigation object in context, we're at root\n          // So we'll construct a basic state object to use\n          {\n            index: 0,\n            routes: [{ name, params }],\n          };\n\n      const path = options?.getPathFromState\n        ? options.getPathFromState(state, options?.config)\n        : getPathFromState(state, options?.config);\n\n      return path;\n    },\n    [linking, navigation]\n  );\n\n  return buildLink;\n}\n"]}