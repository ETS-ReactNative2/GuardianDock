{"version":3,"mappings":"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","names":["OUTLINE_MINIMIZED_LABEL_Y_OFFSET","LABEL_PADDING_TOP","MIN_HEIGHT","MIN_DENSE_HEIGHT","INPUT_PADDING_HORIZONTAL","TextInputOutlined","render","props","disabled","editable","label","error","selectionColor","underlineColor","customOutlineColor","outlineColor","activeOutlineColor","dense","style","theme","multiline","parentState","innerRef","onFocus","forceFocus","onBlur","onChangeText","onLayoutAnimatedText","onLeftAffixLayoutChange","onRightAffixLayoutChange","left","right","placeholderTextColor","rest","adornmentConfig","colors","fonts","font","regular","hasActiveOutline","focused","StyleSheet","flatten","fontSizeStyle","fontSize","fontWeight","lineHeight","height","backgroundColor","background","textAlign","viewStyle","MAXIMIZED_LABEL_FONT_SIZE","inputTextColor","activeColor","placeholderColor","errorColor","isTransparent","alpha","text","rgb","string","primary","placeholder","labelScale","MINIMIZED_LABEL_FONT_SIZE","fontScale","labelWidth","labelLayout","width","labelHeight","labelHalfWidth","labelHalfHeight","baseLabelTranslateX","I18nManager","isRTL","labelTranslationXOffset","isAdornmentLeftIcon","some","side","type","AdornmentSide","Left","AdornmentType","Icon","ADORNMENT_SIZE","ADORNMENT_OFFSET","minInputHeight","inputHeight","topPosition","console","warn","paddingSettings","offset","scale","isAndroid","Platform","OS","styles","inputOutlinedDense","inputOutlined","pad","paddingOut","baseLabelTranslateY","placeholderOpacity","labeled","measured","labelProps","placeholderStyle","wiggleOffsetX","LABEL_WIGGLE_X_OFFSET","roundness","minHeight","leftLayout","rightLayout","leftAffixTopPosition","affixHeight","labelYOffset","rightAffixTopPosition","iconTopPosition","rightAffixWidth","leftAffixWidth","adornmentStyleAdjustmentForNativeInput","mode","affixTopPosition","Right","onAffixChange","adornmentProps","Affix","isTextInputFocused","length","textStyle","visible","React","_reactNative","Outline","labelContainer","paddingTop","_InputLabel","labelBackground","LabelBackground","testID","ref","underlineColorAndroid","input","color","textAlignVertical","outline","_TextInputAdornment","Component","pointerEvents","borderRadius","borderWidth","borderColor","create","position","paddingHorizontal","top","bottom","paddingBottom","flexGrow","margin","zIndex"],"sources":["TextInputOutlined.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  View,\n  TextInput as NativeTextInput,\n  StyleSheet,\n  I18nManager,\n  Platform,\n  TextStyle,\n  ColorValue,\n} from 'react-native';\nimport color from 'color';\nimport TextInputAdornment, {\n  getAdornmentConfig,\n  getAdornmentStyleAdjustmentForNativeInput,\n  TextInputAdornmentProps,\n} from './Adornment/TextInputAdornment';\n\nimport InputLabel from './Label/InputLabel';\nimport LabelBackground from './Label/LabelBackground';\nimport type { RenderProps, ChildTextInputProps } from './types';\n\nimport {\n  MAXIMIZED_LABEL_FONT_SIZE,\n  MINIMIZED_LABEL_FONT_SIZE,\n  LABEL_WIGGLE_X_OFFSET,\n  ADORNMENT_SIZE,\n  ADORNMENT_OFFSET,\n} from './constants';\n\nimport {\n  calculateLabelTopPosition,\n  calculateInputHeight,\n  calculatePadding,\n  adjustPaddingOut,\n  Padding,\n  interpolatePlaceholder,\n  calculateOutlinedIconAndAffixTopPosition,\n} from './helpers';\nimport { AdornmentType, AdornmentSide } from './Adornment/enums';\n\nconst OUTLINE_MINIMIZED_LABEL_Y_OFFSET = -6;\nconst LABEL_PADDING_TOP = 8;\nconst MIN_HEIGHT = 64;\nconst MIN_DENSE_HEIGHT = 48;\nconst INPUT_PADDING_HORIZONTAL = 14;\n\nclass TextInputOutlined extends React.Component<ChildTextInputProps> {\n  static defaultProps = {\n    disabled: false,\n    error: false,\n    multiline: false,\n    editable: true,\n    render: (props: RenderProps) => <NativeTextInput {...props} />,\n  };\n\n  render() {\n    const {\n      disabled,\n      editable,\n      label,\n      error,\n      selectionColor,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      underlineColor,\n      outlineColor: customOutlineColor,\n      activeOutlineColor,\n      dense,\n      style,\n      theme,\n      render,\n      multiline,\n      parentState,\n      innerRef,\n      onFocus,\n      forceFocus,\n      onBlur,\n      onChangeText,\n      onLayoutAnimatedText,\n      onLeftAffixLayoutChange,\n      onRightAffixLayoutChange,\n      left,\n      right,\n      placeholderTextColor,\n      ...rest\n    } = this.props;\n\n    const adornmentConfig = getAdornmentConfig({ left, right });\n\n    const { colors, fonts } = theme;\n    const font = fonts.regular;\n    const hasActiveOutline = parentState.focused || error;\n\n    const {\n      fontSize: fontSizeStyle,\n      fontWeight,\n      lineHeight,\n      height,\n      backgroundColor = colors.background,\n      textAlign,\n      ...viewStyle\n    } = (StyleSheet.flatten(style) || {}) as TextStyle;\n    const fontSize = fontSizeStyle || MAXIMIZED_LABEL_FONT_SIZE;\n\n    let inputTextColor, activeColor, outlineColor, placeholderColor, errorColor;\n\n    if (disabled) {\n      const isTransparent = color(customOutlineColor).alpha() === 0;\n\n      inputTextColor = activeColor = color(colors.text)\n        .alpha(0.54)\n        .rgb()\n        .string();\n      placeholderColor = colors.disabled;\n      outlineColor = isTransparent ? customOutlineColor : colors.disabled;\n    } else {\n      inputTextColor = colors.text;\n      activeColor = error ? colors.error : activeOutlineColor || colors.primary;\n      placeholderColor = colors.placeholder;\n      outlineColor = customOutlineColor || colors.placeholder;\n      errorColor = colors.error;\n    }\n\n    const labelScale = MINIMIZED_LABEL_FONT_SIZE / fontSize;\n    const fontScale = MAXIMIZED_LABEL_FONT_SIZE / fontSize;\n\n    const labelWidth = parentState.labelLayout.width;\n    const labelHeight = parentState.labelLayout.height;\n    const labelHalfWidth = labelWidth / 2;\n    const labelHalfHeight = labelHeight / 2;\n\n    const baseLabelTranslateX =\n      (I18nManager.isRTL ? 1 : -1) *\n      (labelHalfWidth -\n        (labelScale * labelWidth) / 2 -\n        (fontSize - MINIMIZED_LABEL_FONT_SIZE) * labelScale);\n\n    let labelTranslationXOffset = 0;\n    const isAdornmentLeftIcon = adornmentConfig.some(\n      ({ side, type }) =>\n        side === AdornmentSide.Left && type === AdornmentType.Icon\n    );\n    if (isAdornmentLeftIcon) {\n      labelTranslationXOffset =\n        (I18nManager.isRTL ? -1 : 1) * (ADORNMENT_SIZE + ADORNMENT_OFFSET - 8);\n    }\n\n    const minInputHeight =\n      (dense ? MIN_DENSE_HEIGHT : MIN_HEIGHT) - LABEL_PADDING_TOP;\n\n    const inputHeight = calculateInputHeight(\n      labelHeight,\n      height,\n      minInputHeight\n    );\n\n    const topPosition = calculateLabelTopPosition(\n      labelHeight,\n      inputHeight,\n      LABEL_PADDING_TOP\n    );\n\n    if (height && typeof height !== 'number') {\n      // eslint-disable-next-line\n      console.warn('Currently we support only numbers in height prop');\n    }\n\n    const paddingSettings = {\n      height: height ? +height : null,\n      labelHalfHeight,\n      offset: LABEL_PADDING_TOP,\n      multiline: multiline ? multiline : null,\n      dense: dense ? dense : null,\n      topPosition,\n      fontSize,\n      lineHeight,\n      label,\n      scale: fontScale,\n      isAndroid: Platform.OS === 'android',\n      styles: StyleSheet.flatten(\n        dense ? styles.inputOutlinedDense : styles.inputOutlined\n      ) as Padding,\n    };\n\n    const pad = calculatePadding(paddingSettings);\n\n    const paddingOut = adjustPaddingOut({ ...paddingSettings, pad });\n\n    const baseLabelTranslateY =\n      -labelHalfHeight - (topPosition + OUTLINE_MINIMIZED_LABEL_Y_OFFSET);\n\n    const placeholderOpacity = hasActiveOutline\n      ? interpolatePlaceholder(parentState.labeled, hasActiveOutline)\n      : parentState.labelLayout.measured\n      ? 1\n      : 0;\n\n    const labelProps = {\n      label,\n      onLayoutAnimatedText,\n      placeholderOpacity,\n      error,\n      placeholderStyle: styles.placeholder,\n      baseLabelTranslateY,\n      baseLabelTranslateX,\n      font,\n      fontSize,\n      fontWeight,\n      labelScale,\n      wiggleOffsetX: LABEL_WIGGLE_X_OFFSET,\n      topPosition,\n      hasActiveOutline,\n      activeColor,\n      placeholderColor,\n      backgroundColor: backgroundColor as ColorValue,\n      errorColor,\n      labelTranslationXOffset,\n      roundness: theme.roundness,\n    };\n\n    const minHeight = (height ||\n      (dense ? MIN_DENSE_HEIGHT : MIN_HEIGHT)) as number;\n\n    const { leftLayout, rightLayout } = parentState;\n\n    const leftAffixTopPosition = calculateOutlinedIconAndAffixTopPosition({\n      height: minHeight,\n      affixHeight: leftLayout.height || 0,\n      labelYOffset: -OUTLINE_MINIMIZED_LABEL_Y_OFFSET,\n    });\n\n    const rightAffixTopPosition = calculateOutlinedIconAndAffixTopPosition({\n      height: minHeight,\n      affixHeight: rightLayout.height || 0,\n      labelYOffset: -OUTLINE_MINIMIZED_LABEL_Y_OFFSET,\n    });\n    const iconTopPosition = calculateOutlinedIconAndAffixTopPosition({\n      height: minHeight,\n      affixHeight: ADORNMENT_SIZE,\n      labelYOffset: -OUTLINE_MINIMIZED_LABEL_Y_OFFSET,\n    });\n\n    const rightAffixWidth = right\n      ? rightLayout.width || ADORNMENT_SIZE\n      : ADORNMENT_SIZE;\n\n    const leftAffixWidth = left\n      ? leftLayout.width || ADORNMENT_SIZE\n      : ADORNMENT_SIZE;\n\n    const adornmentStyleAdjustmentForNativeInput = getAdornmentStyleAdjustmentForNativeInput(\n      {\n        adornmentConfig,\n        rightAffixWidth,\n        leftAffixWidth,\n        mode: 'outlined',\n      }\n    );\n    const affixTopPosition = {\n      [AdornmentSide.Left]: leftAffixTopPosition,\n      [AdornmentSide.Right]: rightAffixTopPosition,\n    };\n    const onAffixChange = {\n      [AdornmentSide.Left]: onLeftAffixLayoutChange,\n      [AdornmentSide.Right]: onRightAffixLayoutChange,\n    };\n\n    let adornmentProps: TextInputAdornmentProps = {\n      adornmentConfig,\n      forceFocus,\n      topPosition: {\n        [AdornmentType.Icon]: iconTopPosition,\n        [AdornmentType.Affix]: affixTopPosition,\n      },\n      onAffixChange,\n      isTextInputFocused: parentState.focused,\n    };\n    if (adornmentConfig.length) {\n      adornmentProps = {\n        ...adornmentProps,\n        left,\n        right,\n        textStyle: { ...font, fontSize, fontWeight },\n        visible: this.props.parentState.labeled,\n      };\n    }\n\n    return (\n      <View style={viewStyle}>\n        {/*\n          Render the outline separately from the container\n          This is so that the label can overlap the outline\n          Otherwise the border will cut off the label on Android\n          */}\n        <Outline\n          theme={theme}\n          hasActiveOutline={hasActiveOutline}\n          focused={parentState.focused}\n          activeColor={activeColor}\n          outlineColor={outlineColor}\n          backgroundColor={backgroundColor}\n        />\n        <View>\n          <View\n            style={[\n              styles.labelContainer,\n              {\n                paddingTop: LABEL_PADDING_TOP,\n                minHeight,\n              },\n            ]}\n          >\n            <InputLabel\n              parentState={parentState}\n              labelProps={labelProps}\n              labelBackground={LabelBackground}\n            />\n            {render?.({\n              testID: 'text-input-outlined',\n              ...rest,\n              ref: innerRef,\n              onChangeText,\n              placeholder: label\n                ? parentState.placeholder\n                : this.props.placeholder,\n              placeholderTextColor: placeholderTextColor || placeholderColor,\n              editable: !disabled && editable,\n              selectionColor:\n                typeof selectionColor === 'undefined'\n                  ? activeColor\n                  : selectionColor,\n              onFocus,\n              onBlur,\n              underlineColorAndroid: 'transparent',\n              multiline,\n              style: [\n                styles.input,\n                !multiline || (multiline && height)\n                  ? { height: inputHeight }\n                  : {},\n                paddingOut,\n                {\n                  ...font,\n                  fontSize,\n                  fontWeight,\n                  color: inputTextColor,\n                  textAlignVertical: multiline ? 'top' : 'center',\n                  textAlign: textAlign\n                    ? textAlign\n                    : I18nManager.isRTL\n                    ? 'right'\n                    : 'left',\n                },\n                Platform.OS === 'web' && { outline: 'none' },\n                adornmentStyleAdjustmentForNativeInput,\n              ],\n            } as RenderProps)}\n          </View>\n          <TextInputAdornment {...adornmentProps} />\n        </View>\n      </View>\n    );\n  }\n}\n\nexport default TextInputOutlined;\n\ntype OutlineProps = {\n  activeColor: string;\n  hasActiveOutline?: boolean;\n  focused?: boolean;\n  outlineColor?: string;\n  backgroundColor: ColorValue;\n  theme: ReactNativePaper.Theme;\n};\n\nconst Outline = ({\n  theme,\n  hasActiveOutline,\n  activeColor,\n  outlineColor,\n  focused,\n  backgroundColor,\n}: OutlineProps) => (\n  <View\n    testID=\"text-input-outline\"\n    pointerEvents=\"none\"\n    style={[\n      styles.outline,\n      // eslint-disable-next-line react-native/no-inline-styles\n      {\n        backgroundColor,\n        borderRadius: theme.roundness,\n        borderWidth: focused ? 2 : 1,\n        borderColor: hasActiveOutline ? activeColor : outlineColor,\n      },\n    ]}\n  />\n);\n\nconst styles = StyleSheet.create({\n  placeholder: {\n    position: 'absolute',\n    left: 0,\n    paddingHorizontal: INPUT_PADDING_HORIZONTAL,\n  },\n  outline: {\n    position: 'absolute',\n    left: 0,\n    right: 0,\n    top: 6,\n    bottom: 0,\n  },\n  labelContainer: {\n    paddingBottom: 0,\n  },\n  input: {\n    flexGrow: 1,\n    paddingHorizontal: INPUT_PADDING_HORIZONTAL,\n    margin: 0,\n    zIndex: 1,\n  },\n  inputOutlined: {\n    paddingTop: 8,\n    paddingBottom: 8,\n  },\n  inputOutlinedDense: {\n    paddingTop: 4,\n    paddingBottom: 4,\n  },\n});\n"]}