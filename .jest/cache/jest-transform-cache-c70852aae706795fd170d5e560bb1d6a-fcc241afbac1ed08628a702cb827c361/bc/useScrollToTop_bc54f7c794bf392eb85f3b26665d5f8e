471fb13dd2d0f06767ba2c97224428a3
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = useScrollToTop;

var _core = require("@react-navigation/core");

var React = _interopRequireWildcard(require("react"));

function _getRequireWildcardCache(nodeInterop) {
  if (typeof WeakMap !== "function") return null;
  var cacheBabelInterop = new WeakMap();
  var cacheNodeInterop = new WeakMap();
  return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {
    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
  })(nodeInterop);
}

function _interopRequireWildcard(obj, nodeInterop) {
  if (!nodeInterop && obj && obj.__esModule) {
    return obj;
  }

  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }

  var cache = _getRequireWildcardCache(nodeInterop);

  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }

  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

  for (var key in obj) {
    if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }

  newObj.default = obj;

  if (cache) {
    cache.set(obj, newObj);
  }

  return newObj;
}

function getScrollableNode(ref) {
  if (ref.current == null) {
    return null;
  }

  if ('scrollToTop' in ref.current || 'scrollTo' in ref.current || 'scrollToOffset' in ref.current || 'scrollResponderScrollTo' in ref.current) {
    return ref.current;
  } else if ('getScrollResponder' in ref.current) {
    return ref.current.getScrollResponder();
  } else if ('getNode' in ref.current) {
    return ref.current.getNode();
  } else {
    return ref.current;
  }
}

function useScrollToTop(ref) {
  var navigation = (0, _core.useNavigation)();
  var route = (0, _core.useRoute)();
  React.useEffect(function () {
    var current = navigation;

    while (current && current.getState().type !== 'tab') {
      current = current.getParent();
    }

    if (!current) {
      return;
    }

    var unsubscribe = current.addListener('tabPress', function (e) {
      var isFocused = navigation.isFocused();
      var isFirst = navigation === current || navigation.getState().routes[0].key === route.key;
      requestAnimationFrame(function () {
        var scrollable = getScrollableNode(ref);

        if (isFocused && isFirst && scrollable && !e.defaultPrevented) {
          if ('scrollToTop' in scrollable) {
            scrollable.scrollToTop();
          } else if ('scrollTo' in scrollable) {
            scrollable.scrollTo({
              x: 0,
              y: 0,
              animated: true
            });
          } else if ('scrollToOffset' in scrollable) {
            scrollable.scrollToOffset({
              offset: 0,
              animated: true
            });
          } else if ('scrollResponderScrollTo' in scrollable) {
            scrollable.scrollResponderScrollTo({
              y: 0,
              animated: true
            });
          }
        }
      });
    });
    return unsubscribe;
  }, [navigation, ref, route.key]);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBOztBQUNBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBZUEsU0FBU0EsaUJBQVQsQ0FBMkJDLEdBQTNCLEVBQW9FO0FBQ2xFLE1BQUlBLEdBQUcsQ0FBQ0MsT0FBSkQsSUFBZSxJQUFuQixFQUF5QjtBQUN2QixXQUFPLElBQVA7QUFDRDs7QUFFRCxNQUNFLGlCQUFpQkEsR0FBRyxDQUFDQyxPQUFyQixJQUNBLGNBQWNELEdBQUcsQ0FBQ0MsT0FEbEIsSUFFQSxvQkFBb0JELEdBQUcsQ0FBQ0MsT0FGeEIsSUFHQSw2QkFBNkJELEdBQUcsQ0FBQ0MsT0FKbkMsRUFLRTtBQUVBLFdBQU9ELEdBQUcsQ0FBQ0MsT0FBWDtBQVBGLFNBUU8sSUFBSSx3QkFBd0JELEdBQUcsQ0FBQ0MsT0FBaEMsRUFBeUM7QUFHOUMsV0FBT0QsR0FBRyxDQUFDQyxPQUFKRCxDQUFZRSxrQkFBWkYsRUFBUDtBQUhLLFNBSUEsSUFBSSxhQUFhQSxHQUFHLENBQUNDLE9BQXJCLEVBQThCO0FBS25DLFdBQU9ELEdBQUcsQ0FBQ0MsT0FBSkQsQ0FBWUcsT0FBWkgsRUFBUDtBQUxLLFNBTUE7QUFDTCxXQUFPQSxHQUFHLENBQUNDLE9BQVg7QUFDRDtBQUNGOztBQUVjLFNBQVNHLGNBQVQsQ0FDYkosR0FEYSxFQUViO0FBQ0EsTUFBTUssVUFBVSxHQUFHLDBCQUFuQjtBQUNBLE1BQU1DLEtBQUssR0FBRyxxQkFBZDtBQUVBQyxPQUFLLENBQUNDLFNBQU5ELENBQWdCLFlBQU07QUFDcEIsUUFBSU4sT0FBTyxHQUFHSSxVQUFkOztBQUlBLFdBQU9KLE9BQU8sSUFBSUEsT0FBTyxDQUFDUSxRQUFSUixHQUFtQlMsSUFBbkJULEtBQTRCLEtBQTlDLEVBQXFEO0FBQ25EQSxhQUFPLEdBQUdBLE9BQU8sQ0FBQ1UsU0FBUlYsRUFBVkE7QUFDRDs7QUFFRCxRQUFJLENBQUNBLE9BQUwsRUFBYztBQUNaO0FBQ0Q7O0FBRUQsUUFBTVcsV0FBVyxHQUFHWCxPQUFPLENBQUNZLFdBQVJaLENBSWxCLFVBSmtCQSxFQUtqQmEsV0FBRCxFQUFtQztBQUVqQyxVQUFNQyxTQUFTLEdBQUdWLFVBQVUsQ0FBQ1UsU0FBWFYsRUFBbEI7QUFJQSxVQUFNVyxPQUFPLEdBQ1hYLFVBQVUsS0FBS0osT0FBZkksSUFDQUEsVUFBVSxDQUFDSSxRQUFYSixHQUFzQlksTUFBdEJaLENBQTZCLENBQTdCQSxFQUFnQ2EsR0FBaENiLEtBQXdDQyxLQUFLLENBQUNZLEdBRmhEO0FBTUFDLDJCQUFxQixDQUFDLFlBQU07QUFDMUIsWUFBTUMsVUFBVSxHQUFHckIsaUJBQWlCLENBQUNDLEdBQUQsQ0FBcEM7O0FBRUEsWUFBSWUsU0FBUyxJQUFJQyxPQUFiRCxJQUF3QkssVUFBeEJMLElBQXNDLENBQUNELENBQUMsQ0FBQ08sZ0JBQTdDLEVBQStEO0FBQzdELGNBQUksaUJBQWlCRCxVQUFyQixFQUFpQztBQUMvQkEsc0JBQVUsQ0FBQ0UsV0FBWEY7QUFERixpQkFFTyxJQUFJLGNBQWNBLFVBQWxCLEVBQThCO0FBQ25DQSxzQkFBVSxDQUFDRyxRQUFYSCxDQUFvQjtBQUFFSSxlQUFDLEVBQUUsQ0FBTDtBQUFRQyxlQUFDLEVBQUUsQ0FBWDtBQUFjQyxzQkFBUSxFQUFFO0FBQXhCLGFBQXBCTjtBQURLLGlCQUVBLElBQUksb0JBQW9CQSxVQUF4QixFQUFvQztBQUN6Q0Esc0JBQVUsQ0FBQ08sY0FBWFAsQ0FBMEI7QUFBRVEsb0JBQU0sRUFBRSxDQUFWO0FBQWFGLHNCQUFRLEVBQUU7QUFBdkIsYUFBMUJOO0FBREssaUJBRUEsSUFBSSw2QkFBNkJBLFVBQWpDLEVBQTZDO0FBQ2xEQSxzQkFBVSxDQUFDUyx1QkFBWFQsQ0FBbUM7QUFBRUssZUFBQyxFQUFFLENBQUw7QUFBUUMsc0JBQVEsRUFBRTtBQUFsQixhQUFuQ047QUFDRDtBQUNGO0FBYmtCLFFBQXJCRDtBQWpCZ0IsTUFBcEI7QUFtQ0EsV0FBT1AsV0FBUDtBQWhERixLQWlERyxDQUFDUCxVQUFELEVBQWFMLEdBQWIsRUFBa0JNLEtBQUssQ0FBQ1ksR0FBeEIsQ0FqREhYO0FBa0REIiwibmFtZXMiOlsiZ2V0U2Nyb2xsYWJsZU5vZGUiLCJyZWYiLCJjdXJyZW50IiwiZ2V0U2Nyb2xsUmVzcG9uZGVyIiwiZ2V0Tm9kZSIsInVzZVNjcm9sbFRvVG9wIiwibmF2aWdhdGlvbiIsInJvdXRlIiwiUmVhY3QiLCJ1c2VFZmZlY3QiLCJnZXRTdGF0ZSIsInR5cGUiLCJnZXRQYXJlbnQiLCJ1bnN1YnNjcmliZSIsImFkZExpc3RlbmVyIiwiZSIsImlzRm9jdXNlZCIsImlzRmlyc3QiLCJyb3V0ZXMiLCJrZXkiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJzY3JvbGxhYmxlIiwiZGVmYXVsdFByZXZlbnRlZCIsInNjcm9sbFRvVG9wIiwic2Nyb2xsVG8iLCJ4IiwieSIsImFuaW1hdGVkIiwic2Nyb2xsVG9PZmZzZXQiLCJvZmZzZXQiLCJzY3JvbGxSZXNwb25kZXJTY3JvbGxUbyJdLCJzb3VyY2VzIjpbInVzZVNjcm9sbFRvVG9wLnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFdmVudEFyZywgdXNlTmF2aWdhdGlvbiwgdXNlUm91dGUgfSBmcm9tICdAcmVhY3QtbmF2aWdhdGlvbi9jb3JlJztcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcblxudHlwZSBTY3JvbGxPcHRpb25zID0geyB4PzogbnVtYmVyOyB5PzogbnVtYmVyOyBhbmltYXRlZD86IGJvb2xlYW4gfTtcblxudHlwZSBTY3JvbGxhYmxlVmlldyA9XG4gIHwgeyBzY3JvbGxUb1RvcCgpOiB2b2lkIH1cbiAgfCB7IHNjcm9sbFRvKG9wdGlvbnM6IFNjcm9sbE9wdGlvbnMpOiB2b2lkIH1cbiAgfCB7IHNjcm9sbFRvT2Zmc2V0KG9wdGlvbnM6IHsgb2Zmc2V0PzogbnVtYmVyOyBhbmltYXRlZD86IGJvb2xlYW4gfSk6IHZvaWQgfVxuICB8IHsgc2Nyb2xsUmVzcG9uZGVyU2Nyb2xsVG8ob3B0aW9uczogU2Nyb2xsT3B0aW9ucyk6IHZvaWQgfTtcblxudHlwZSBTY3JvbGxhYmxlV3JhcHBlciA9XG4gIHwgeyBnZXRTY3JvbGxSZXNwb25kZXIoKTogUmVhY3QuUmVhY3ROb2RlIH1cbiAgfCB7IGdldE5vZGUoKTogU2Nyb2xsYWJsZVZpZXcgfVxuICB8IFNjcm9sbGFibGVWaWV3O1xuXG5mdW5jdGlvbiBnZXRTY3JvbGxhYmxlTm9kZShyZWY6IFJlYWN0LlJlZk9iamVjdDxTY3JvbGxhYmxlV3JhcHBlcj4pIHtcbiAgaWYgKHJlZi5jdXJyZW50ID09IG51bGwpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGlmIChcbiAgICAnc2Nyb2xsVG9Ub3AnIGluIHJlZi5jdXJyZW50IHx8XG4gICAgJ3Njcm9sbFRvJyBpbiByZWYuY3VycmVudCB8fFxuICAgICdzY3JvbGxUb09mZnNldCcgaW4gcmVmLmN1cnJlbnQgfHxcbiAgICAnc2Nyb2xsUmVzcG9uZGVyU2Nyb2xsVG8nIGluIHJlZi5jdXJyZW50XG4gICkge1xuICAgIC8vIFRoaXMgaXMgYWxyZWFkeSBhIHNjcm9sbGFibGUgbm9kZS5cbiAgICByZXR1cm4gcmVmLmN1cnJlbnQ7XG4gIH0gZWxzZSBpZiAoJ2dldFNjcm9sbFJlc3BvbmRlcicgaW4gcmVmLmN1cnJlbnQpIHtcbiAgICAvLyBJZiB0aGUgdmlldyBpcyBhIHdyYXBwZXIgbGlrZSBGbGF0TGlzdCwgU2VjdGlvbkxpc3QgZXRjLlxuICAgIC8vIFdlIG5lZWQgdG8gdXNlIGBnZXRTY3JvbGxSZXNwb25kZXJgIHRvIGdldCBhY2Nlc3MgdG8gdGhlIHNjcm9sbCByZXNwb25kZXJcbiAgICByZXR1cm4gcmVmLmN1cnJlbnQuZ2V0U2Nyb2xsUmVzcG9uZGVyKCk7XG4gIH0gZWxzZSBpZiAoJ2dldE5vZGUnIGluIHJlZi5jdXJyZW50KSB7XG4gICAgLy8gV2hlbiBhIGBTY3JvbGxWaWV3YCBpcyB3cmFwZWQgaW4gYEFuaW1hdGVkLmNyZWF0ZUFuaW1hdGVkQ29tcG9uZW50YFxuICAgIC8vIHdlIG5lZWQgdG8gdXNlIGBnZXROb2RlYCB0byBnZXQgdGhlIHJlZiB0byB0aGUgYWN0dWFsIHNjcm9sbHZpZXcuXG4gICAgLy8gTm90ZSB0aGF0IGBnZXROb2RlYCBpcyBkZXByZWNhdGVkIGluIG5ld2VyIHZlcnNpb25zIG9mIHJlYWN0LW5hdGl2ZVxuICAgIC8vIHRoaXMgaXMgd2h5IHdlIGNoZWNrIGlmIHdlIGFscmVhZHkgaGF2ZSBhIHNjcm9sbGFibGUgbm9kZSBhYm92ZS5cbiAgICByZXR1cm4gcmVmLmN1cnJlbnQuZ2V0Tm9kZSgpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiByZWYuY3VycmVudDtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB1c2VTY3JvbGxUb1RvcChcbiAgcmVmOiBSZWFjdC5SZWZPYmplY3Q8U2Nyb2xsYWJsZVdyYXBwZXI+XG4pIHtcbiAgY29uc3QgbmF2aWdhdGlvbiA9IHVzZU5hdmlnYXRpb24oKTtcbiAgY29uc3Qgcm91dGUgPSB1c2VSb3V0ZSgpO1xuXG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgbGV0IGN1cnJlbnQgPSBuYXZpZ2F0aW9uO1xuXG4gICAgLy8gVGhlIHNjcmVlbiBtaWdodCBiZSBpbnNpZGUgYW5vdGhlciBuYXZpZ2F0b3Igc3VjaCBhcyBzdGFjayBuZXN0ZWQgaW4gdGFic1xuICAgIC8vIFdlIG5lZWQgdG8gZmluZCB0aGUgY2xvc2VzdCB0YWIgbmF2aWdhdG9yIGFuZCBhZGQgdGhlIGxpc3RlbmVyIHRoZXJlXG4gICAgd2hpbGUgKGN1cnJlbnQgJiYgY3VycmVudC5nZXRTdGF0ZSgpLnR5cGUgIT09ICd0YWInKSB7XG4gICAgICBjdXJyZW50ID0gY3VycmVudC5nZXRQYXJlbnQoKTtcbiAgICB9XG5cbiAgICBpZiAoIWN1cnJlbnQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCB1bnN1YnNjcmliZSA9IGN1cnJlbnQuYWRkTGlzdGVuZXIoXG4gICAgICAvLyBXZSBkb24ndCB3YW5uYSBpbXBvcnQgdGFiIHR5cGVzIGhlcmUgdG8gYXZvaWQgZXh0cmEgZGVwc1xuICAgICAgLy8gaW4gYWRkaXRpb24sIHRoZXJlIGFyZSBtdWx0aXBsZSB0YWIgaW1wbGVtZW50YXRpb25zXG4gICAgICAvLyBAdHMtZXhwZWN0LWVycm9yXG4gICAgICAndGFiUHJlc3MnLFxuICAgICAgKGU6IEV2ZW50QXJnPCd0YWJQcmVzcycsIHRydWU+KSA9PiB7XG4gICAgICAgIC8vIFdlIHNob3VsZCBzY3JvbGwgdG8gdG9wIG9ubHkgd2hlbiB0aGUgc2NyZWVuIGlzIGZvY3VzZWRcbiAgICAgICAgY29uc3QgaXNGb2N1c2VkID0gbmF2aWdhdGlvbi5pc0ZvY3VzZWQoKTtcblxuICAgICAgICAvLyBJbiBhIG5lc3RlZCBzdGFjayBuYXZpZ2F0b3IsIHRhYiBwcmVzcyByZXNldHMgdGhlIHN0YWNrIHRvIGZpcnN0IHNjcmVlblxuICAgICAgICAvLyBTbyB3ZSBzaG91bGQgc2Nyb2xsIHRvIHRvcCBvbmx5IHdoZW4gd2UgYXJlIG9uIGZpcnN0IHNjcmVlblxuICAgICAgICBjb25zdCBpc0ZpcnN0ID1cbiAgICAgICAgICBuYXZpZ2F0aW9uID09PSBjdXJyZW50IHx8XG4gICAgICAgICAgbmF2aWdhdGlvbi5nZXRTdGF0ZSgpLnJvdXRlc1swXS5rZXkgPT09IHJvdXRlLmtleTtcblxuICAgICAgICAvLyBSdW4gdGhlIG9wZXJhdGlvbiBpbiB0aGUgbmV4dCBmcmFtZSBzbyB3ZSdyZSBzdXJlIGFsbCBsaXN0ZW5lcnMgaGF2ZSBiZWVuIHJ1blxuICAgICAgICAvLyBUaGlzIGlzIG5lY2Vzc2FyeSB0byBrbm93IGlmIHByZXZlbnREZWZhdWx0KCkgaGFzIGJlZW4gY2FsbGVkXG4gICAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7XG4gICAgICAgICAgY29uc3Qgc2Nyb2xsYWJsZSA9IGdldFNjcm9sbGFibGVOb2RlKHJlZikgYXMgU2Nyb2xsYWJsZVdyYXBwZXI7XG5cbiAgICAgICAgICBpZiAoaXNGb2N1c2VkICYmIGlzRmlyc3QgJiYgc2Nyb2xsYWJsZSAmJiAhZS5kZWZhdWx0UHJldmVudGVkKSB7XG4gICAgICAgICAgICBpZiAoJ3Njcm9sbFRvVG9wJyBpbiBzY3JvbGxhYmxlKSB7XG4gICAgICAgICAgICAgIHNjcm9sbGFibGUuc2Nyb2xsVG9Ub3AoKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoJ3Njcm9sbFRvJyBpbiBzY3JvbGxhYmxlKSB7XG4gICAgICAgICAgICAgIHNjcm9sbGFibGUuc2Nyb2xsVG8oeyB4OiAwLCB5OiAwLCBhbmltYXRlZDogdHJ1ZSB9KTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoJ3Njcm9sbFRvT2Zmc2V0JyBpbiBzY3JvbGxhYmxlKSB7XG4gICAgICAgICAgICAgIHNjcm9sbGFibGUuc2Nyb2xsVG9PZmZzZXQoeyBvZmZzZXQ6IDAsIGFuaW1hdGVkOiB0cnVlIH0pO1xuICAgICAgICAgICAgfSBlbHNlIGlmICgnc2Nyb2xsUmVzcG9uZGVyU2Nyb2xsVG8nIGluIHNjcm9sbGFibGUpIHtcbiAgICAgICAgICAgICAgc2Nyb2xsYWJsZS5zY3JvbGxSZXNwb25kZXJTY3JvbGxUbyh7IHk6IDAsIGFuaW1hdGVkOiB0cnVlIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgKTtcblxuICAgIHJldHVybiB1bnN1YnNjcmliZTtcbiAgfSwgW25hdmlnYXRpb24sIHJlZiwgcm91dGUua2V5XSk7XG59XG4iXX0=