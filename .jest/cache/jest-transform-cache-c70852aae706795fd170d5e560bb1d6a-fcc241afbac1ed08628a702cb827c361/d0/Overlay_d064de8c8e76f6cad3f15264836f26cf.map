{"version":3,"mappings":";;;;;;;;;;;;;;AAAA;;AACA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,4BAMIA,8BANJ;AAAA,IAEeC,qBAFf,yBAEEC,WAFF;AAAA,IAGEC,eAHF,yBAGEA,eAHF;AAAA,IAIEC,IAJF,yBAIEA,IAJF;AAAA,IAKEC,WALF,yBAKEA,WALF;AAQA,IAAMH,WAAmC,GACvCC,eADuC,SACvCA,mBADuC,WACvCA,qBAAmBF,qBADrB;AAGA,IAAMK,gBAAgB,GAAG,IAAzB;AAOA,IAAMC,OAAO,GAAGC,KAAK,CAACC,UAAND,CAAiB,SAASD,OAAT,OAE/BG,GAF+B,EAG/B;AAAA,MAFEC,QAEF,QAFEA,QAEF;AAAA,MAFYC,OAEZ,QAFYA,OAEZ;AAAA,MAFqBC,KAErB,QAFqBA,KAErB;AAAA,MAF+BC,KAE/B;AACA,MAAMC,aAAa,GAAG;AACpBC,WAAO,EAAEd,WAAW,CAACS,QAAD,EAAW;AAK7BM,gBAAU,EACRC,sBAASC,EAATD,KAAgB,SAAhBA,IAA6BA,sBAASC,EAATD,KAAgB,OAA7CA,GACI,CAAC,CAAD,EAAI,CAAJ,CADJA,GAEI,CAACZ,gBAAD,EAAmB,CAAnB,CARuB;AAS7Bc,iBAAW,EAAE,CAAC,CAAD,EAAI,CAAJ;AATgB,KAAX,CADA;AAepBC,UAAM,EAAEjB,IAAI,CAACC,WAAW,CAACM,QAAD,EAAWL,gBAAX,CAAZ,EAA0C,CAA1C,EAA6C,CAAC,CAA9C;AAfQ,GAAtB;AAkBA,SACEE,oBAACc,+BAASC,IAAV,eACMT,KADN;AAEEJ,OAAG,EAAEA,GAFP;AAGEG,SAAK,EAAE,CAACW,MAAM,CAACC,OAAR,EAAiBC,YAAjB,EAA+BX,aAA/B,EAA8CF,KAA9C;AAHT,MAKEL,oBAACmB,sBAAD;AAAWf,WAAO,EAAEA,OAApB;AAA6BC,SAAK,EAAEW,MAAM,CAACI;AAA3C,IALF,CADF;AAtBc,EAAhB;;AAiCA,IAAMF,YAAY,GAAGR,sBAASW,MAATX,CAAwC;AAC3DY,KAAG,EAAE;AAGHC,2BAAuB,EAAE;AAHtB,GADsD;AAM3DC,SAAO,EAAE;AANkD,CAAxCd,CAArB;;AASA,IAAMM,MAAM,GAAGS,wBAAWC,MAAXD,CAAkB;AAC/BR,SAAO,6BACFQ,wBAAWE,kBADT;AAELC,mBAAe,EAAE;AAFZ,IADwB;AAK/BR,WAAS,EAAE;AACTS,QAAI,EAAE;AADG;AALoB,CAAlBJ,CAAf;;eAUe1B","names":["Animated","interpolateDeprecated","interpolate","interpolateNode","cond","greaterThan","PROGRESS_EPSILON","Overlay","React","forwardRef","ref","progress","onPress","style","props","animatedStyle","opacity","inputRange","Platform","OS","outputRange","zIndex","_reactNativeReanimated","View","styles","overlay","overlayStyle","_reactNative","pressable","select","web","WebkitTapHighlightColor","default","StyleSheet","create","absoluteFillObject","backgroundColor","flex"],"sources":["Overlay.tsx"],"sourcesContent":["import * as React from 'react';\nimport { Platform, Pressable, StyleSheet } from 'react-native';\nimport Animated from 'react-native-reanimated';\n\nconst {\n  // @ts-expect-error: this is to support reanimated 1\n  interpolate: interpolateDeprecated,\n  interpolateNode,\n  cond,\n  greaterThan,\n} = Animated;\n\nconst interpolate: typeof interpolateNode =\n  interpolateNode ?? interpolateDeprecated;\n\nconst PROGRESS_EPSILON = 0.05;\n\ntype Props = React.ComponentProps<typeof Animated.View> & {\n  progress: Animated.Node<number>;\n  onPress: () => void;\n};\n\nconst Overlay = React.forwardRef(function Overlay(\n  { progress, onPress, style, ...props }: Props,\n  ref: React.Ref<Animated.View>\n) {\n  const animatedStyle = {\n    opacity: interpolate(progress, {\n      // Default input range is [PROGRESS_EPSILON, 1]\n      // On Windows, the output value is 1 when input value is out of range for some reason\n      // The default value 0 will be interpolated to 1 in this case, which is not what we want.\n      // Therefore changing input range on Windows to [0,1] instead.\n      inputRange:\n        Platform.OS === 'windows' || Platform.OS === 'macos'\n          ? [0, 1]\n          : [PROGRESS_EPSILON, 1],\n      outputRange: [0, 1],\n    }),\n    // We don't want the user to be able to press through the overlay when drawer is open\n    // One approach is to adjust the pointerEvents based on the progress\n    // But we can also send the overlay behind the screen, which works, and is much less code\n    zIndex: cond(greaterThan(progress, PROGRESS_EPSILON), 0, -1),\n  };\n\n  return (\n    <Animated.View\n      {...props}\n      ref={ref}\n      style={[styles.overlay, overlayStyle, animatedStyle, style]}\n    >\n      <Pressable onPress={onPress} style={styles.pressable} />\n    </Animated.View>\n  );\n});\n\nconst overlayStyle = Platform.select<Record<string, string>>({\n  web: {\n    // Disable touch highlight on mobile Safari.\n    // WebkitTapHighlightColor must be used outside of StyleSheet.create because react-native-web will omit the property.\n    WebkitTapHighlightColor: 'transparent',\n  },\n  default: {},\n});\n\nconst styles = StyleSheet.create({\n  overlay: {\n    ...StyleSheet.absoluteFillObject,\n    backgroundColor: 'rgba(0, 0, 0, 0.5)',\n  },\n  pressable: {\n    flex: 1,\n  },\n});\n\nexport default Overlay;\n"]}