5c01683e1d68df2b14a01598c2a490f4
'use strict';

var token = '%[a-f0-9]{2}';
var singleMatcher = new RegExp(token, 'gi');
var multiMatcher = new RegExp('(' + token + ')+', 'gi');

function decodeComponents(components, split) {
  try {
    return decodeURIComponent(components.join(''));
  } catch (err) {}

  if (components.length === 1) {
    return components;
  }

  split = split || 1;
  var left = components.slice(0, split);
  var right = components.slice(split);
  return Array.prototype.concat.call([], decodeComponents(left), decodeComponents(right));
}

function decode(input) {
  try {
    return decodeURIComponent(input);
  } catch (err) {
    var tokens = input.match(singleMatcher);

    for (var i = 1; i < tokens.length; i++) {
      input = decodeComponents(tokens, i).join('');
      tokens = input.match(singleMatcher);
    }

    return input;
  }
}

function customDecodeURIComponent(input) {
  var replaceMap = {
    '%FE%FF': "\uFFFD\uFFFD",
    '%FF%FE': "\uFFFD\uFFFD"
  };
  var match = multiMatcher.exec(input);

  while (match) {
    try {
      replaceMap[match[0]] = decodeURIComponent(match[0]);
    } catch (err) {
      var result = decode(match[0]);

      if (result !== match[0]) {
        replaceMap[match[0]] = result;
      }
    }

    match = multiMatcher.exec(input);
  }

  replaceMap['%C2'] = "\uFFFD";
  var entries = Object.keys(replaceMap);

  for (var i = 0; i < entries.length; i++) {
    var key = entries[i];
    input = input.replace(new RegExp(key, 'g'), replaceMap[key]);
  }

  return input;
}

module.exports = function (encodedURI) {
  if (typeof encodedURI !== 'string') {
    throw new TypeError('Expected `encodedURI` to be of type `string`, got `' + typeof encodedURI + '`');
  }

  try {
    encodedURI = encodedURI.replace(/\+/g, ' ');
    return decodeURIComponent(encodedURI);
  } catch (err) {
    return customDecodeURIComponent(encodedURI);
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sIm5hbWVzIjpbInRva2VuIiwic2luZ2xlTWF0Y2hlciIsIlJlZ0V4cCIsIm11bHRpTWF0Y2hlciIsImRlY29kZUNvbXBvbmVudHMiLCJjb21wb25lbnRzIiwic3BsaXQiLCJkZWNvZGVVUklDb21wb25lbnQiLCJqb2luIiwiZXJyIiwibGVuZ3RoIiwibGVmdCIsInNsaWNlIiwicmlnaHQiLCJBcnJheSIsInByb3RvdHlwZSIsImNvbmNhdCIsImNhbGwiLCJkZWNvZGUiLCJpbnB1dCIsInRva2VucyIsIm1hdGNoIiwiaSIsImN1c3RvbURlY29kZVVSSUNvbXBvbmVudCIsInJlcGxhY2VNYXAiLCJleGVjIiwicmVzdWx0IiwiZW50cmllcyIsIk9iamVjdCIsImtleXMiLCJrZXkiLCJyZXBsYWNlIiwibW9kdWxlIiwiZXhwb3J0cyIsImVuY29kZWRVUkkiLCJUeXBlRXJyb3IiXSwibWFwcGluZ3MiOiJBQUFBOztBQUNBLElBQUlBLEtBQUssR0FBRyxjQUFaO0FBQ0EsSUFBSUMsYUFBYSxHQUFHLElBQUlDLE1BQUosQ0FBV0YsS0FBWCxFQUFrQixJQUFsQixDQUFwQjtBQUNBLElBQUlHLFlBQVksR0FBRyxJQUFJRCxNQUFKLENBQVcsTUFBTUYsS0FBTixHQUFjLElBQXpCLEVBQStCLElBQS9CLENBQW5COztBQUVBLFNBQVNJLGdCQUFULENBQTBCQyxVQUExQixFQUFzQ0MsS0FBdEMsRUFBNkM7QUFDNUMsTUFBSTtBQUVILFdBQU9DLGtCQUFrQixDQUFDRixVQUFVLENBQUNHLElBQVgsQ0FBZ0IsRUFBaEIsQ0FBRCxDQUF6QjtBQUNBLEdBSEQsQ0FHRSxPQUFPQyxHQUFQLEVBQVksQ0FFYjs7QUFFRCxNQUFJSixVQUFVLENBQUNLLE1BQVgsS0FBc0IsQ0FBMUIsRUFBNkI7QUFDNUIsV0FBT0wsVUFBUDtBQUNBOztBQUVEQyxFQUFBQSxLQUFLLEdBQUdBLEtBQUssSUFBSSxDQUFqQjtBQUdBLE1BQUlLLElBQUksR0FBR04sVUFBVSxDQUFDTyxL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Q0FBQ0gsT0FBWCxDQUFtQixLQUFuQixFQUEwQixHQUExQixDQUFiO0FBR0EsV0FBT3hCLGtCQUFrQixDQUFDMkIsVUFBRCxDQUF6QjtBQUNBLEdBTEQsQ0FLRSxPQUFPekIsR0FBUCxFQUFZO0FBRWIsV0FBT2Msd0JBQXdCLENBQUNXLFVBQUQsQ0FBL0I7QUFDQTtBQUNELENBZEQiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG52YXIgdG9rZW4gPSAnJVthLWYwLTldezJ9JztcbnZhciBzaW5nbGVNYXRjaGVyID0gbmV3IFJlZ0V4cCh0b2tlbiwgJ2dpJyk7XG52YXIgbXVsdGlNYXRjaGVyID0gbmV3IFJlZ0V4cCgnKCcgKyB0b2tlbiArICcpKycsICdnaScpO1xuXG5mdW5jdGlvbiBkZWNvZGVDb21wb25lbnRzKGNvbXBvbmVudHMsIHNwbGl0KSB7XG5cdHRyeSB7XG5cdFx0Ly8gVHJ5IHRvIGRlY29kZSB0aGUgZW50aXJlIHN0cmluZyBmaXJzdFxuXHRcdHJldHVybiBkZWNvZGVVUklDb21wb25lbnQoY29tcG9uZW50cy5qb2luKCcnKSk7XG5cdH0gY2F0Y2ggKGVycikge1xuXHRcdC8vIERvIG5vdGhpbmdcblx0fVxuXG5cdGlmIChjb21wb25lbnRzLmxlbmd0aCA9PT0gMSkge1xuXHRcdHJldHVybiBjb21wb25lbnRzO1xuXHR9XG5cblx0c3BsaXQgPSBzcGxpdCB8fCAxO1xuXG5cdC8vIFNwbGl0IHRoZSBhcnJheSBpbiAyIHBhcnRzXG5cdHZhciBsZWZ0ID0gY29tcG9uZW50cy5zbGljZSgwLCBzcGxpdCk7XG5cdHZhciByaWdodCA9IGNvbXBvbmVudHMuc2xpY2Uoc3BsaXQpO1xuXG5cdHJldHVybiBBcnJheS5wcm90b3R5cGUuY29uY2F0LmNhbGwoW10sIGRlY29kZUNvbXBvbmVudHMobGVmdCksIGRlY29kZUNvbXBvbmVudHMocmlnaHQpKTtcbn1cblxuZnVuY3Rpb24gZGVjb2RlKGlucHV0KSB7XG5cdHRyeSB7XG5cdFx0cmV0dXJuIGRlY29kZVVSSUNvbXBvbmVudChpbnB1dCk7XG5cdH0gY2F0Y2ggKGVycikge1xuXHRcdHZhciB0b2tlbnMgPSBpbnB1dC5tYXRjaChzaW5nbGVNYXRjaGVyKTtcblxuXHRcdGZvciAodmFyIGkgPSAxOyBpIDwgdG9rZW5zLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRpbnB1dCA9IGRlY29kZUNvbXBvbmVudHModG9rZW5zLCBpKS5qb2luKCcnKTtcblxuXHRcdFx0dG9rZW5zID0gaW5wdXQubWF0Y2goc2luZ2xlTWF0Y2hlcik7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGlucHV0O1xuXHR9XG59XG5cbmZ1bmN0aW9uIGN1c3RvbURlY29kZVVSSUNvbXBvbmVudChpbnB1dCkge1xuXHQvLyBLZWVwIHRyYWNrIG9mIGFsbCB0aGUgcmVwbGFjZW1lbnRzIGFuZCBwcmVmaWxsIHRoZSBtYXAgd2l0aCB0aGUgYEJPTWBcblx0dmFyIHJlcGxhY2VNYXAgPSB7XG5cdFx0JyVGRSVGRic6ICdcXHVGRkZEXFx1RkZGRCcsXG5cdFx0JyVGRiVGRSc6ICdcXHVGRkZEXFx1RkZGRCdcblx0fTtcblxuXHR2YXIgbWF0Y2ggPSBtdWx0aU1hdGNoZXIuZXhlYyhpbnB1dCk7XG5cdHdoaWxlIChtYXRjaCkge1xuXHRcdHRyeSB7XG5cdFx0XHQvLyBEZWNvZGUgYXMgYmlnIGNodW5rcyBhcyBwb3NzaWJsZVxuXHRcdFx0cmVwbGFjZU1hcFttYXRjaFswXV0gPSBkZWNvZGVVUklDb21wb25lbnQobWF0Y2hbMF0pO1xuXHRcdH0gY2F0Y2ggKGVycikge1xuXHRcdFx0dmFyIHJlc3VsdCA9IGRlY29kZShtYXRjaFswXSk7XG5cblx0XHRcdGlmIChyZXN1bHQgIT09IG1hdGNoWzBdKSB7XG5cdFx0XHRcdHJlcGxhY2VNYXBbbWF0Y2hbMF1dID0gcmVzdWx0O1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdG1hdGNoID0gbXVsdGlNYXRjaGVyLmV4ZWMoaW5wdXQpO1xuXHR9XG5cblx0Ly8gQWRkIGAlQzJgIGF0IHRoZSBlbmQgb2YgdGhlIG1hcCB0byBtYWtlIHN1cmUgaXQgZG9lcyBub3QgcmVwbGFjZSB0aGUgY29tYmluYXRvciBiZWZvcmUgZXZlcnl0aGluZyBlbHNlXG5cdHJlcGxhY2VNYXBbJyVDMiddID0gJ1xcdUZGRkQnO1xuXG5cdHZhciBlbnRyaWVzID0gT2JqZWN0LmtleXMocmVwbGFjZU1hcCk7XG5cblx0Zm9yICh2YXIgaSA9IDA7IGkgPCBlbnRyaWVzLmxlbmd0aDsgaSsrKSB7XG5cdFx0Ly8gUmVwbGFjZSBhbGwgZGVjb2RlZCBjb21wb25lbnRzXG5cdFx0dmFyIGtleSA9IGVudHJpZXNbaV07XG5cdFx0aW5wdXQgPSBpbnB1dC5yZXBsYWNlKG5ldyBSZWdFeHAoa2V5LCAnZycpLCByZXBsYWNlTWFwW2tleV0pO1xuXHR9XG5cblx0cmV0dXJuIGlucHV0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChlbmNvZGVkVVJJKSB7XG5cdGlmICh0eXBlb2YgZW5jb2RlZFVSSSAhPT0gJ3N0cmluZycpIHtcblx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCBgZW5jb2RlZFVSSWAgdG8gYmUgb2YgdHlwZSBgc3RyaW5nYCwgZ290IGAnICsgdHlwZW9mIGVuY29kZWRVUkkgKyAnYCcpO1xuXHR9XG5cblx0dHJ5IHtcblx0XHRlbmNvZGVkVVJJID0gZW5jb2RlZFVSSS5yZXBsYWNlKC9cXCsvZywgJyAnKTtcblxuXHRcdC8vIFRyeSB0aGUgYnVpbHQgaW4gZGVjb2RlciBmaXJzdFxuXHRcdHJldHVybiBkZWNvZGVVUklDb21wb25lbnQoZW5jb2RlZFVSSSk7XG5cdH0gY2F0Y2ggKGVycikge1xuXHRcdC8vIEZhbGxiYWNrIHRvIGEgbW9yZSBhZHZhbmNlZCBkZWNvZGVyXG5cdFx0cmV0dXJuIGN1c3RvbURlY29kZVVSSUNvbXBvbmVudChlbmNvZGVkVVJJKTtcblx0fVxufTtcbiJdfQ==