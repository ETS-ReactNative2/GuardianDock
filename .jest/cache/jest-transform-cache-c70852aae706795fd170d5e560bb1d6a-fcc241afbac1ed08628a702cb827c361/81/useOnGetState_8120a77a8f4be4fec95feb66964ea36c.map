{"version":3,"mappings":";;;;;;;;;;;AACA;;AAEA;;AACA;;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAOe,SAASA,aAAT,OAGH;AAAA,MAFVC,QAEU,QAFVA,QAEU;AAAA,MADVC,iBACU,QADVA,iBACU;;AACV,0BAA6BC,KAAK,CAACC,UAAND,CAAiBE,iCAAjBF,CAA7B;AAAA,MAAQG,gBAAR,qBAAQA,gBAAR;;AACA,MAAMC,KAAK,GAAGJ,KAAK,CAACC,UAAND,CAAiBK,+BAAjBL,CAAd;AACA,MAAMM,GAAG,GAAGF,KAAK,GAAGA,KAAK,CAACE,GAAT,GAAe,MAAhC;AAEA,MAAMC,kBAAkB,GAAGP,KAAK,CAACQ,WAANR,CAAkB,YAAM;AACjD,QAAMS,KAAK,GAAGX,QAAQ,EAAtB;AAGA,QAAMY,MAAM,GAAGD,KAAK,CAACC,MAAND,CAAaE,GAAbF,CAAkBL,eAAD,EAAW;AAAA;;AACzC,UAAMQ,UAAU,4BAAGb,iBAAiB,CAACK,KAAK,CAACE,GAAP,CAApB,0DAAGO,6CAAnB;;AAEA,UAAIT,KAAK,CAACK,KAANL,KAAgBQ,UAApB,EAAgC;AAC9B,eAAOR,KAAP;AACD;;AAED,wCAAYA,KAAZ;AAAmBK,aAAK,EAAEG;AAA1B;AAPa,MAAf;;AAUA,QAAI,2BAAaH,KAAK,CAACC,MAAnB,EAA2BA,MAA3B,CAAJ,EAAwC;AACtC,aAAOD,KAAP;AACD;;AAED,sCAAYA,KAAZ;AAAmBC;AAAnB;AAlByB,KAmBxB,CAACZ,QAAD,EAAWC,iBAAX,CAnBwBC,CAA3B;AAqBAA,OAAK,CAACc,SAANd,CAAgB,YAAM;AACpB,WAAOG,gBAAP,SAAOA,oBAAP,WAAOA,GAAP,MAAOA,mBAAgB,CAAG,UAAH,EAAeG,GAAf,EAAoBC,kBAApB,CAAvB;AADF,KAEG,CAACJ,gBAAD,EAAmBI,kBAAnB,EAAuCD,GAAvC,CAFHN;AAGD","names":["useOnGetState","getState","getStateListeners","React","useContext","NavigationBuilderContext","addKeyedListener","route","NavigationRouteContext","key","getRehydratedState","useCallback","state","routes","map","childState","_getStateListeners$ro","useEffect"],"sources":["useOnGetState.tsx"],"sourcesContent":["import type { NavigationState } from '@react-navigation/routers';\nimport * as React from 'react';\n\nimport isArrayEqual from './isArrayEqual';\nimport NavigationBuilderContext, {\n  GetStateListener,\n} from './NavigationBuilderContext';\nimport NavigationRouteContext from './NavigationRouteContext';\n\ntype Options = {\n  getState: () => NavigationState;\n  getStateListeners: Record<string, GetStateListener | undefined>;\n};\n\nexport default function useOnGetState({\n  getState,\n  getStateListeners,\n}: Options) {\n  const { addKeyedListener } = React.useContext(NavigationBuilderContext);\n  const route = React.useContext(NavigationRouteContext);\n  const key = route ? route.key : 'root';\n\n  const getRehydratedState = React.useCallback(() => {\n    const state = getState();\n\n    // Avoid returning new route objects if we don't need to\n    const routes = state.routes.map((route) => {\n      const childState = getStateListeners[route.key]?.();\n\n      if (route.state === childState) {\n        return route;\n      }\n\n      return { ...route, state: childState };\n    });\n\n    if (isArrayEqual(state.routes, routes)) {\n      return state;\n    }\n\n    return { ...state, routes };\n  }, [getState, getStateListeners]);\n\n  React.useEffect(() => {\n    return addKeyedListener?.('getState', key, getRehydratedState);\n  }, [addKeyedListener, getRehydratedState, key]);\n}\n"]}