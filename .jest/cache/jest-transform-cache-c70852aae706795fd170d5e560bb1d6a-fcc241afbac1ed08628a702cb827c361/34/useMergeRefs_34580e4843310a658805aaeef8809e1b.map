{"version":3,"sources":["useMergeRefs.js"],"names":["useMergeRefs","refs","current","ref"],"mappings":";;;;;AAUA;;;;;;;;AAgBe,SAASA,YAAT,GAEG;AAAA,oCADbC,IACa;AADbA,IAAAA,IACa;AAAA;;AAChB,SAAO,wBACL,UAACC,OAAD,EAAgB;AACd,yDAAkBD,IAAlB,wCAAwB;AAAA,UAAbE,GAAa;;AACtB,UAAIA,GAAG,IAAI,IAAX,EAAiB;AACf,YAAI,OAAOA,GAAP,KAAe,UAAnB,EAA+B;AAC7BA,UAAAA,GAAG,CAACD,OAAD,CAAH;AACD,SAFD,MAEO;AACLC,UAAAA,GAAG,CAACD,OAAJ,GAAcA,OAAd;AACD;AACF;AACF;AACF,GAXI,YAYDD,IAZC,EAAP;AAcD","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict\n * @format\n */\n\nimport {useCallback} from 'react';\n\ntype CallbackRef<T> = T => mixed;\ntype ObjectRef<T> = {current: T, ...};\n\ntype Ref<T> = CallbackRef<T> | ObjectRef<T>;\n\n/**\n * Constructs a new ref that forwards new values to each of the given refs. The\n * given refs will always be invoked in the order that they are supplied.\n *\n * WARNING: A known problem of merging refs using this approach is that if any\n * of the given refs change, the returned callback ref will also be changed. If\n * the returned callback ref is supplied as a `ref` to a React element, this may\n * lead to problems with the given refs being invoked more times than desired.\n */\nexport default function useMergeRefs<T>(\n  ...refs: $ReadOnlyArray<?Ref<T>>\n): CallbackRef<T> {\n  return useCallback(\n    (current: T) => {\n      for (const ref of refs) {\n        if (ref != null) {\n          if (typeof ref === 'function') {\n            ref(current);\n          } else {\n            ref.current = current;\n          }\n        }\n      }\n    },\n    [...refs], // eslint-disable-line react-hooks/exhaustive-deps\n  );\n}\n"]}