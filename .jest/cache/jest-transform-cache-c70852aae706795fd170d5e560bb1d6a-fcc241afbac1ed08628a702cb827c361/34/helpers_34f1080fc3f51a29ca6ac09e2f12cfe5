3676fe8d4af9ae3fc57cf09ce1b79259
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.calculateFlatAffixTopPosition = calculateFlatAffixTopPosition;
exports.calculateOutlinedIconAndAffixTopPosition = calculateOutlinedIconAndAffixTopPosition;
exports.areLabelsEqual = areLabelsEqual;
exports.calculateFlatInputHorizontalPadding = exports.interpolatePlaceholder = exports.adjustPaddingFlat = exports.adjustPaddingOut = exports.calculatePadding = exports.calculateInputHeight = exports.calculateLabelTopPosition = void 0;

var _constants = require("./constants");

var _enums = require("./Adornment/enums");

var calculateLabelTopPosition = function calculateLabelTopPosition(labelHeight) {
  var height = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
  var optionalPadding = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
  var customHeight = height > 0 ? height : 0;
  return Math.floor((customHeight - labelHeight) / 2 + optionalPadding);
};

exports.calculateLabelTopPosition = calculateLabelTopPosition;

var calculateInputHeight = function calculateInputHeight(labelHeight) {
  var height = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
  var minHeight = arguments.length > 2 ? arguments[2] : undefined;
  var finalHeight = height > 0 ? height : labelHeight;
  if (height > 0) return height;
  return finalHeight < minHeight ? minHeight : finalHeight;
};

exports.calculateInputHeight = calculateInputHeight;

var calculatePadding = function calculatePadding(props) {
  var height = props.height,
      _props$multiline = props.multiline,
      multiline = _props$multiline === void 0 ? false : _props$multiline;
  var result = 0;

  if (multiline) {
    if (height && multiline) {
      result = calculateTextAreaPadding(props);
    } else {
      result = calculateInputPadding(props);
    }
  }

  return Math.max(0, result);
};

exports.calculatePadding = calculatePadding;

var calculateTextAreaPadding = function calculateTextAreaPadding(props) {
  var dense = props.dense;
  return dense ? 10 : 20;
};

var calculateInputPadding = function calculateInputPadding(_ref) {
  var topPosition = _ref.topPosition,
      fontSize = _ref.fontSize,
      multiline = _ref.multiline,
      scale = _ref.scale,
      dense = _ref.dense,
      offset = _ref.offset,
      isAndroid = _ref.isAndroid;
  var refFontSize = scale * fontSize;
  var result = Math.floor(topPosition / 2);
  result = result + Math.floor((refFontSize - fontSize) / 2) - (scale < 1 ? offset / 2 : 0);
  if (multiline && isAndroid) result = Math.min(dense ? offset / 2 : offset, result);
  return result;
};

var adjustPaddingOut = function adjustPaddingOut(_ref2) {
  var pad = _ref2.pad,
      multiline = _ref2.multiline,
      label = _ref2.label,
      scale = _ref2.scale,
      height = _ref2.height,
      fontSize = _ref2.fontSize,
      lineHeight = _ref2.lineHeight,
      dense = _ref2.dense,
      offset = _ref2.offset,
      isAndroid = _ref2.isAndroid;
  var fontHeight = lineHeight !== null && lineHeight !== void 0 ? lineHeight : fontSize;
  var refFontHeight = scale * fontSize;
  var result = pad;

  if (height && !multiline) {
    return {
      paddingTop: Math.max(0, (height - fontHeight) / 2),
      paddingBottom: Math.max(0, (height - fontHeight) / 2)
    };
  }

  if (!isAndroid && multiline) {
    if (dense) {
      if (label) {
        result += scale < 1 ? Math.min(offset, refFontHeight / 2 * scale) : 0;
      } else {
        result += 0;
      }
    }

    if (!dense) {
      if (label) {
        result += scale < 1 ? Math.min(offset, refFontHeight * scale) : Math.min(offset / 2, refFontHeight * scale);
      } else {
        result += scale < 1 ? Math.min(offset / 2, refFontHeight * scale) : 0;
      }
    }

    result = Math.floor(result);
  }

  return {
    paddingTop: result,
    paddingBottom: result
  };
};

exports.adjustPaddingOut = adjustPaddingOut;

var adjustPaddingFlat = function adjustPaddingFlat(_ref3) {
  var pad = _ref3.pad,
      scale = _ref3.scale,
      multiline = _ref3.multiline,
      label = _ref3.label,
      height = _ref3.height,
      offset = _ref3.offset,
      dense = _ref3.dense,
      fontSize = _ref3.fontSize,
      isAndroid = _ref3.isAndroid,
      styles = _ref3.styles;
  var result = pad;
  var topResult = result;
  var bottomResult = result;
  var paddingTop = styles.paddingTop,
      paddingBottom = styles.paddingBottom;
  var refFontSize = scale * fontSize;

  if (!multiline) {
    if (label) {
      return {
        paddingTop: paddingTop,
        paddingBottom: paddingBottom
      };
    }

    return {
      paddingTop: result,
      paddingBottom: result
    };
  }

  if (label) {
    topResult = paddingTop;
    bottomResult = paddingBottom;

    if (!isAndroid) {
      if (dense) {
        topResult += scale < 1 ? Math.min(result, refFontSize * scale) - result / 2 : Math.min(result, refFontSize * scale) - result / 2;
      }

      if (!dense) {
        topResult += scale < 1 ? Math.min(offset / 2, refFontSize * scale) : Math.min(result, refFontSize * scale) - offset / 2;
      }
    }

    topResult = Math.floor(topResult);
  } else {
    if (height) {
      return {
        paddingTop: Math.max(0, (height - fontSize) / 2),
        paddingBottom: Math.max(0, (height - fontSize) / 2)
      };
    }

    if (!isAndroid) {
      if (dense) {
        result += scale < 1 ? Math.min(offset / 2, fontSize / 2 * scale) : Math.min(offset / 2, scale);
      }

      if (!dense) {
        result += scale < 1 ? Math.min(offset, fontSize * scale) : Math.min(fontSize, offset / 2 * scale);
      }

      result = Math.floor(result);
      topResult = result;
      bottomResult = result;
    }
  }

  return {
    paddingTop: Math.max(0, topResult),
    paddingBottom: Math.max(0, bottomResult)
  };
};

exports.adjustPaddingFlat = adjustPaddingFlat;

var interpolatePlaceholder = function interpolatePlaceholder(labeled, hasActiveOutline) {
  return labeled.interpolate({
    inputRange: [0, 1],
    outputRange: [hasActiveOutline ? 0 : 1, 1]
  });
};

exports.interpolatePlaceholder = interpolatePlaceholder;

function calculateFlatAffixTopPosition(_ref4) {
  var height = _ref4.height,
      paddingTop = _ref4.paddingTop,
      paddingBottom = _ref4.paddingBottom,
      affixHeight = _ref4.affixHeight;
  var inputHeightWithoutPadding = height - paddingTop - paddingBottom;
  var halfOfTheInputHeightDecreasedByAffixHeight = (inputHeightWithoutPadding - affixHeight) / 2;
  return paddingTop + halfOfTheInputHeightDecreasedByAffixHeight;
}

function calculateOutlinedIconAndAffixTopPosition(_ref5) {
  var height = _ref5.height,
      affixHeight = _ref5.affixHeight,
      labelYOffset = _ref5.labelYOffset;
  return (height - affixHeight + labelYOffset) / 2;
}

var calculateFlatInputHorizontalPadding = function calculateFlatInputHorizontalPadding(_ref6) {
  var adornmentConfig = _ref6.adornmentConfig;
  var paddingLeft = _constants.LABEL_PADDING_HORIZONTAL;
  var paddingRight = _constants.LABEL_PADDING_HORIZONTAL;
  adornmentConfig.forEach(function (_ref7) {
    var type = _ref7.type,
        side = _ref7.side;

    if (type === _enums.AdornmentType.Icon && side === _enums.AdornmentSide.Left) {
      paddingLeft = _constants.ADORNMENT_SIZE + _constants.ADORNMENT_OFFSET + _constants.FLAT_INPUT_OFFSET;
    } else if (side === _enums.AdornmentSide.Right) {
      if (type === _enums.AdornmentType.Affix) {
        paddingRight = _constants.ADORNMENT_SIZE + _constants.ADORNMENT_OFFSET + _constants.FLAT_INPUT_OFFSET;
      } else if (type === _enums.AdornmentType.Icon) {
        paddingRight = _constants.ADORNMENT_SIZE + _constants.ADORNMENT_OFFSET + _constants.FLAT_INPUT_OFFSET;
      }
    }
  });
  return {
    paddingLeft: paddingLeft,
    paddingRight: paddingRight
  };
};

exports.calculateFlatInputHorizontalPadding = calculateFlatInputHorizontalPadding;

function areLabelsEqual(label1, label2) {
  if (label1 === label2) {
    return true;
  }

  if (!(label1 || label2)) {
    return true;
  }

  if (!(label1 && label2)) {
    return false;
  }

  if (typeof label1 !== typeof label2) {
    return false;
  }

  if (typeof label1 === 'string' || label1 instanceof String || typeof label2 === 'string' || label2 instanceof String) {
    return false;
  }

  if (label1.type !== label2.type) {
    return false;
  }

  var label1Props = label1.props || {};
  var label2Props = label2.props || {};

  if (JSON.stringify(label1Props) !== JSON.stringify(label2Props)) {
    return false;
  }

  if (!(label1Props.children || label2Props.children)) {
    return true;
  }

  if (!(label1Props.children && label2Props.children)) {
    return false;
  }

  var label1IsArray = Array.isArray(label1Props.children);
  var label2IsArray = Array.isArray(label2Props.children);

  if (label1IsArray && label2IsArray) {
    var children1 = label1Props.children;
    var children2 = label2Props.children;

    if (children1.length !== children2.length) {
      return false;
    }

    for (var i = 0; i < children1.length; i++) {
      if (!areLabelsEqual(children1[i], children2[i])) {
        return false;
      }
    }

    return true;
  }

  if (label1IsArray || label2IsArray) {
    return false;
  }

  return areLabelsEqual(label1Props.children, label2Props.children);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,