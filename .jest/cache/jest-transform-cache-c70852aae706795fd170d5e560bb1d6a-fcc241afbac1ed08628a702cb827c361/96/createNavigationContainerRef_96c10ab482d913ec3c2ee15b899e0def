878369ece58fdfa041338dfaab9bf349
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.NOT_INITIALIZED_ERROR = void 0;
exports.default = createNavigationContainerRef;

var _routers = require("@react-navigation/routers");

var NOT_INITIALIZED_ERROR = "The 'navigation' object hasn't been initialized yet. This might happen if you don't have a navigator mounted, or if the navigator hasn't finished mounting. See https://reactnavigation.org/docs/navigating-without-navigation-prop#handling-initialization for more details.";
exports.NOT_INITIALIZED_ERROR = NOT_INITIALIZED_ERROR;

function createNavigationContainerRef() {
  var methods = [].concat((0, _toConsumableArray2.default)(Object.keys(_routers.CommonActions)), ['addListener', 'removeListener', 'resetRoot', 'dispatch', 'isFocused', 'canGoBack', 'getRootState', 'getState', 'getParent', 'getCurrentRoute', 'getCurrentOptions']);
  var listeners = {};

  var removeListener = function removeListener(event, callback) {
    if (listeners[event]) {
      listeners[event] = listeners[event].filter(function (cb) {
        return cb !== callback;
      });
    }
  };

  var current = null;
  var ref = (0, _extends2.default)({
    get current() {
      return current;
    },

    set current(value) {
      current = value;

      if (value != null) {
        Object.entries(listeners).forEach(function (_ref) {
          var _ref2 = (0, _slicedToArray2.default)(_ref, 2),
              event = _ref2[0],
              callbacks = _ref2[1];

          callbacks.forEach(function (callback) {
            value.addListener(event, callback);
          });
        });
      }
    },

    isReady: function isReady() {
      if (current == null) {
        return false;
      }

      return current.isReady();
    }
  }, methods.reduce(function (acc, name) {
    acc[name] = function () {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      if (current == null) {
        switch (name) {
          case 'addListener':
            {
              var event = args[0],
                  callback = args[1];
              listeners[event] = listeners[event] || [];
              listeners[event].push(callback);
              return function () {
                return removeListener(event, callback);
              };
            }

          case 'removeListener':
            {
              var _event = args[0],
                  _callback = args[1];
              removeListener(_event, _callback);
              break;
            }

          default:
            console.error(NOT_INITIALIZED_ERROR);
        }
      } else {
        var _current;

        return (_current = current)[name].apply(_current, args);
      }
    };

    return acc;
  }, {}));
  return ref;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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TyxFQUFDVSxJQUFELENBQVBWLGlCQUFpQlcsSUFBakJYLENBQVA7QUFDRDtBQXZCSDs7QUF5QkEsV0FBT1MsR0FBUDtBQTFCQyxLQTJCQSxFQTNCQW5CLENBekJrRCxDQUF2RDtBQXVEQSxTQUFPVyxHQUFQO0FBQ0QiLCJuYW1lcyI6WyJOT1RfSU5JVElBTElaRURfRVJST1IiLCJjcmVhdGVOYXZpZ2F0aW9uQ29udGFpbmVyUmVmIiwibWV0aG9kcyIsIk9iamVjdCIsImtleXMiLCJDb21tb25BY3Rpb25zIiwibGlzdGVuZXJzIiwicmVtb3ZlTGlzdGVuZXIiLCJldmVudCIsImNhbGxiYWNrIiwiZmlsdGVyIiwiY2IiLCJjdXJyZW50IiwicmVmIiwidmFsdWUiLCJlbnRyaWVzIiwiZm9yRWFjaCIsImNhbGxiYWNrcyIsImFkZExpc3RlbmVyIiwiaXNSZWFkeSIsInJlZHVjZSIsImFjYyIsIm5hbWUiLCJhcmdzIiwiYXJndW1lbnRzIiwicHVzaCIsImNvbnNvbGUiLCJlcnJvciJdLCJzb3VyY2VzIjpbImNyZWF0ZU5hdmlnYXRpb25Db250YWluZXJSZWYudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbW1vbkFjdGlvbnMgfSBmcm9tICdAcmVhY3QtbmF2aWdhdGlvbi9yb3V0ZXJzJztcblxuaW1wb3J0IHR5cGUge1xuICBOYXZpZ2F0aW9uQ29udGFpbmVyRXZlbnRNYXAsXG4gIE5hdmlnYXRpb25Db250YWluZXJSZWYsXG4gIE5hdmlnYXRpb25Db250YWluZXJSZWZXaXRoQ3VycmVudCxcbn0gZnJvbSAnLi90eXBlcyc7XG5cbmV4cG9ydCBjb25zdCBOT1RfSU5JVElBTElaRURfRVJST1IgPVxuICBcIlRoZSAnbmF2aWdhdGlvbicgb2JqZWN0IGhhc24ndCBiZWVuIGluaXRpYWxpemVkIHlldC4gVGhpcyBtaWdodCBoYXBwZW4gaWYgeW91IGRvbid0IGhhdmUgYSBuYXZpZ2F0b3IgbW91bnRlZCwgb3IgaWYgdGhlIG5hdmlnYXRvciBoYXNuJ3QgZmluaXNoZWQgbW91bnRpbmcuIFNlZSBodHRwczovL3JlYWN0bmF2aWdhdGlvbi5vcmcvZG9jcy9uYXZpZ2F0aW5nLXdpdGhvdXQtbmF2aWdhdGlvbi1wcm9wI2hhbmRsaW5nLWluaXRpYWxpemF0aW9uIGZvciBtb3JlIGRldGFpbHMuXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNyZWF0ZU5hdmlnYXRpb25Db250YWluZXJSZWY8XG4gIFBhcmFtTGlzdCBleHRlbmRzIHt9ID0gUmVhY3ROYXZpZ2F0aW9uLlJvb3RQYXJhbUxpc3Rcbj4oKTogTmF2aWdhdGlvbkNvbnRhaW5lclJlZldpdGhDdXJyZW50PFBhcmFtTGlzdD4ge1xuICBjb25zdCBtZXRob2RzID0gW1xuICAgIC4uLk9iamVjdC5rZXlzKENvbW1vbkFjdGlvbnMpLFxuICAgICdhZGRMaXN0ZW5lcicsXG4gICAgJ3JlbW92ZUxpc3RlbmVyJyxcbiAgICAncmVzZXRSb290JyxcbiAgICAnZGlzcGF0Y2gnLFxuICAgICdpc0ZvY3VzZWQnLFxuICAgICdjYW5Hb0JhY2snLFxuICAgICdnZXRSb290U3RhdGUnLFxuICAgICdnZXRTdGF0ZScsXG4gICAgJ2dldFBhcmVudCcsXG4gICAgJ2dldEN1cnJlbnRSb3V0ZScsXG4gICAgJ2dldEN1cnJlbnRPcHRpb25zJyxcbiAgXSBhcyBjb25zdDtcblxuICBjb25zdCBsaXN0ZW5lcnM6IFJlY29yZDxzdHJpbmcsICgoLi4uYXJnczogYW55W10pID0+IHZvaWQpW10+ID0ge307XG5cbiAgY29uc3QgcmVtb3ZlTGlzdGVuZXIgPSAoXG4gICAgZXZlbnQ6IHN0cmluZyxcbiAgICBjYWxsYmFjazogKC4uLmFyZ3M6IGFueVtdKSA9PiB2b2lkXG4gICkgPT4ge1xuICAgIGlmIChsaXN0ZW5lcnNbZXZlbnRdKSB7XG4gICAgICBsaXN0ZW5lcnNbZXZlbnRdID0gbGlzdGVuZXJzW2V2ZW50XS5maWx0ZXIoKGNiKSA9PiBjYiAhPT0gY2FsbGJhY2spO1xuICAgIH1cbiAgfTtcblxuICBsZXQgY3VycmVudDogTmF2aWdhdGlvbkNvbnRhaW5lclJlZjxQYXJhbUxpc3Q+IHwgbnVsbCA9IG51bGw7XG5cbiAgY29uc3QgcmVmOiBOYXZpZ2F0aW9uQ29udGFpbmVyUmVmV2l0aEN1cnJlbnQ8UGFyYW1MaXN0PiA9IHtcbiAgICBnZXQgY3VycmVudCgpIHtcbiAgICAgIHJldHVybiBjdXJyZW50O1xuICAgIH0sXG4gICAgc2V0IGN1cnJlbnQodmFsdWU6IE5hdmlnYXRpb25Db250YWluZXJSZWY8UGFyYW1MaXN0PiB8IG51bGwpIHtcbiAgICAgIGN1cnJlbnQgPSB2YWx1ZTtcblxuICAgICAgaWYgKHZhbHVlICE9IG51bGwpIHtcbiAgICAgICAgT2JqZWN0LmVudHJpZXMobGlzdGVuZXJzKS5mb3JFYWNoKChbZXZlbnQsIGNhbGxiYWNrc10pID0+IHtcbiAgICAgICAgICBjYWxsYmFja3MuZm9yRWFjaCgoY2FsbGJhY2spID0+IHtcbiAgICAgICAgICAgIHZhbHVlLmFkZExpc3RlbmVyKFxuICAgICAgICAgICAgICBldmVudCBhcyBrZXlvZiBOYXZpZ2F0aW9uQ29udGFpbmVyRXZlbnRNYXAsXG4gICAgICAgICAgICAgIGNhbGxiYWNrXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGlzUmVhZHk6ICgpID0+IHtcbiAgICAgIGlmIChjdXJyZW50ID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gY3VycmVudC5pc1JlYWR5KCk7XG4gICAgfSxcbiAgICAuLi5tZXRob2RzLnJlZHVjZTxhbnk+KChhY2MsIG5hbWUpID0+IHtcbiAgICAgIGFjY1tuYW1lXSA9ICguLi5hcmdzOiBhbnlbXSkgPT4ge1xuICAgICAgICBpZiAoY3VycmVudCA9PSBudWxsKSB7XG4gICAgICAgICAgc3dpdGNoIChuYW1lKSB7XG4gICAgICAgICAgICBjYXNlICdhZGRMaXN0ZW5lcic6IHtcbiAgICAgICAgICAgICAgY29uc3QgW2V2ZW50LCBjYWxsYmFja10gPSBhcmdzO1xuXG4gICAgICAgICAgICAgIGxpc3RlbmVyc1tldmVudF0gPSBsaXN0ZW5lcnNbZXZlbnRdIHx8IFtdO1xuICAgICAgICAgICAgICBsaXN0ZW5lcnNbZXZlbnRdLnB1c2goY2FsbGJhY2spO1xuXG4gICAgICAgICAgICAgIHJldHVybiAoKSA9PiByZW1vdmVMaXN0ZW5lcihldmVudCwgY2FsbGJhY2spO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSAncmVtb3ZlTGlzdGVuZXInOiB7XG4gICAgICAgICAgICAgIGNvbnN0IFtldmVudCwgY2FsbGJhY2tdID0gYXJncztcblxuICAgICAgICAgICAgICByZW1vdmVMaXN0ZW5lcihldmVudCwgY2FsbGJhY2spO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoTk9UX0lOSVRJQUxJWkVEX0VSUk9SKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvcjogdGhpcyBpcyBva1xuICAgICAgICAgIHJldHVybiBjdXJyZW50W25hbWVdKC4uLmFyZ3MpO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgICAgcmV0dXJuIGFjYztcbiAgICB9LCB7fSksXG4gIH07XG5cbiAgcmV0dXJuIHJlZjtcbn1cbiJdfQ==