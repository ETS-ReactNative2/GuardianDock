{"version":3,"mappings":";;;;;;;;;;;;;;;;AAAA;;AAQO,IAAMA,qBAAqB,GAChC,+QADK;;;AAGQ,SAASC,4BAAT,GAEmC;AAChD,MAAMC,OAAO,8CACRC,MAAM,CAACC,IAAPD,CAAYE,sBAAZF,CADQ,IAEX,aAFW,EAGX,gBAHW,EAIX,WAJW,EAKX,UALW,EAMX,WANW,EAOX,WAPW,EAQX,cARW,EASX,UATW,EAUX,WAVW,EAWX,iBAXW,EAYX,mBAZW,EAAb;AAeA,MAAMG,SAAuD,GAAG,EAAhE;;AAEA,MAAMC,cAAc,GAAG,SAAjBA,cAAiB,CACrBC,KADqB,EAErBC,QAFqB,EAGlB;AACH,QAAIH,SAAS,CAACE,KAAD,CAAb,EAAsB;AACpBF,eAAS,CAACE,KAAD,CAATF,GAAmBA,SAAS,CAACE,KAAD,CAATF,CAAiBI,MAAjBJ,CAAyBK,YAAD;AAAA,eAAQA,EAAE,KAAKF,QAAf;AAAA,OAAxBH,CAAnBA;AACD;AANH;;AASA,MAAIM,OAAiD,GAAG,IAAxD;AAEA,MAAMC,GAAiD;AACrD,QAAID,OAAJ,GAAc;AACZ,aAAOA,OAAP;AAFsD,KAAH;;AAIrD,QAAIA,OAAJ,CAAYE,KAAZ,EAA6D;AAC3DF,aAAO,GAAGE,KAAVF;;AAEA,UAAIE,KAAK,IAAI,IAAb,EAAmB;AACjBX,cAAM,CAACY,OAAPZ,CAAeG,SAAfH,EAA0Ba,OAA1Bb,CAAkC,gBAAwB;AAAA;AAAA,cAAtBK,KAAsB;AAAA,cAAfS,SAAe;;AACxDA,mBAAS,CAACD,OAAVC,CAAmBR,kBAAD,EAAc;AAC9BK,iBAAK,CAACI,WAANJ,CACEN,KADFM,EAEEL,QAFFK;AADF;AADF;AAQD;AAhBqD,KAAH;;AAkBrDK,WAAO,EAAE,mBAAM;AACb,UAAIP,OAAO,IAAI,IAAf,EAAqB;AACnB,eAAO,KAAP;AACD;;AAED,aAAOA,OAAO,CAACO,OAARP,EAAP;AAvBsD;AAAH,KAyBlDV,OAAO,CAACkB,MAARlB,CAAoB,UAACmB,GAAD,EAAMC,IAAN,EAAe;AACpCD,OAAG,CAACC,IAAD,CAAHD,GAAY,YAAoB;AAAA,wCAAhBE,IAAgB;AAAhBA,YAAgB,MAAhBA,GAAgBC,eAAhBD;AAAgB;;AAC9B,UAAIX,OAAO,IAAI,IAAf,EAAqB;AACnB,gBAAQU,IAAR;AACE,eAAK,aAAL;AAAoB;AAClB,kBAAOd,KAAP,GAA0Be,IAA1B;AAAA,kBAAcd,QAAd,GAA0Bc,IAA1B;AAEAjB,uBAAS,CAACE,KAAD,CAATF,GAAmBA,SAAS,CAACE,KAAD,CAATF,IAAoB,EAAvCA;AACAA,uBAAS,CAACE,KAAD,CAATF,CAAiBmB,IAAjBnB,CAAsBG,QAAtBH;AAEA,qBAAO;AAAA,uBAAMC,cAAc,CAACC,KAAD,EAAQC,QAAR,CAApB;AAAA,eAAP;AACD;;AACD,eAAK,gBAAL;AAAuB;AACrB,kBAAOD,MAAP,GAA0Be,IAA1B;AAAA,kBAAcd,SAAd,GAA0Bc,IAA1B;AAEAhB,4BAAc,CAACC,MAAD,EAAQC,SAAR,CAAdF;AACA;AACD;;AACD;AACEmB,mBAAO,CAACC,KAARD,CAAc1B,qBAAd0B;AAhBJ;AADF,aAmBO;AAAA;;AAEL,eAAOd,mBAAO,EAACU,IAAD,CAAPV,iBAAiBW,IAAjBX,CAAP;AACD;AAvBH;;AAyBA,WAAOS,GAAP;AA1BC,KA2BA,EA3BAnB,CAzBkD,CAAvD;AAuDA,SAAOW,GAAP;AACD","names":["NOT_INITIALIZED_ERROR","createNavigationContainerRef","methods","Object","keys","CommonActions","listeners","removeListener","event","callback","filter","cb","current","ref","value","entries","forEach","callbacks","addListener","isReady","reduce","acc","name","args","arguments","push","console","error"],"sources":["createNavigationContainerRef.tsx"],"sourcesContent":["import { CommonActions } from '@react-navigation/routers';\n\nimport type {\n  NavigationContainerEventMap,\n  NavigationContainerRef,\n  NavigationContainerRefWithCurrent,\n} from './types';\n\nexport const NOT_INITIALIZED_ERROR =\n  \"The 'navigation' object hasn't been initialized yet. This might happen if you don't have a navigator mounted, or if the navigator hasn't finished mounting. See https://reactnavigation.org/docs/navigating-without-navigation-prop#handling-initialization for more details.\";\n\nexport default function createNavigationContainerRef<\n  ParamList extends {} = ReactNavigation.RootParamList\n>(): NavigationContainerRefWithCurrent<ParamList> {\n  const methods = [\n    ...Object.keys(CommonActions),\n    'addListener',\n    'removeListener',\n    'resetRoot',\n    'dispatch',\n    'isFocused',\n    'canGoBack',\n    'getRootState',\n    'getState',\n    'getParent',\n    'getCurrentRoute',\n    'getCurrentOptions',\n  ] as const;\n\n  const listeners: Record<string, ((...args: any[]) => void)[]> = {};\n\n  const removeListener = (\n    event: string,\n    callback: (...args: any[]) => void\n  ) => {\n    if (listeners[event]) {\n      listeners[event] = listeners[event].filter((cb) => cb !== callback);\n    }\n  };\n\n  let current: NavigationContainerRef<ParamList> | null = null;\n\n  const ref: NavigationContainerRefWithCurrent<ParamList> = {\n    get current() {\n      return current;\n    },\n    set current(value: NavigationContainerRef<ParamList> | null) {\n      current = value;\n\n      if (value != null) {\n        Object.entries(listeners).forEach(([event, callbacks]) => {\n          callbacks.forEach((callback) => {\n            value.addListener(\n              event as keyof NavigationContainerEventMap,\n              callback\n            );\n          });\n        });\n      }\n    },\n    isReady: () => {\n      if (current == null) {\n        return false;\n      }\n\n      return current.isReady();\n    },\n    ...methods.reduce<any>((acc, name) => {\n      acc[name] = (...args: any[]) => {\n        if (current == null) {\n          switch (name) {\n            case 'addListener': {\n              const [event, callback] = args;\n\n              listeners[event] = listeners[event] || [];\n              listeners[event].push(callback);\n\n              return () => removeListener(event, callback);\n            }\n            case 'removeListener': {\n              const [event, callback] = args;\n\n              removeListener(event, callback);\n              break;\n            }\n            default:\n              console.error(NOT_INITIALIZED_ERROR);\n          }\n        } else {\n          // @ts-expect-error: this is ok\n          return current[name](...args);\n        }\n      };\n      return acc;\n    }, {}),\n  };\n\n  return ref;\n}\n"]}