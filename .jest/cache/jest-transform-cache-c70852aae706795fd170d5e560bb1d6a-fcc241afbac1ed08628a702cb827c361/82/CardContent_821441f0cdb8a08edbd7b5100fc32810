8fffa0e1c219a5021080dd017319a76a
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _excluded = ["index", "total", "siblings", "style"];
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var React = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

function _getRequireWildcardCache() {
  if (typeof WeakMap !== "function") return null;
  var cache = new WeakMap();

  _getRequireWildcardCache = function _getRequireWildcardCache() {
    return cache;
  };

  return cache;
}

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  }

  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }

  var cache = _getRequireWildcardCache();

  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }

  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }

  newObj.default = obj;

  if (cache) {
    cache.set(obj, newObj);
  }

  return newObj;
}

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

var CardContent = function CardContent(_ref) {
  var index = _ref.index,
      total = _ref.total,
      siblings = _ref.siblings,
      style = _ref.style,
      rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);
  var cover = 'withTheme(CardCover)';
  var title = 'withTheme(CardTitle)';
  var contentStyle, prev, next;

  if (typeof index === 'number' && siblings) {
    prev = siblings[index - 1];
    next = siblings[index + 1];
  }

  if (prev === cover && next === cover || prev === title && next === title || total === 1) {
    contentStyle = styles.only;
  } else if (index === 0) {
    if (next === cover || next === title) {
      contentStyle = styles.only;
    } else {
      contentStyle = styles.first;
    }
  } else if (typeof total === 'number' && index === total - 1) {
    if (prev === cover || prev === title) {
      contentStyle = styles.only;
    } else {
      contentStyle = styles.last;
    }
  } else if (prev === cover || prev === title) {
    contentStyle = styles.first;
  } else if (next === cover || next === title) {
    contentStyle = styles.last;
  }

  return React.createElement(_reactNative.View, _extends({}, rest, {
    style: [styles.container, contentStyle, style]
  }));
};

CardContent.displayName = 'Card.Content';

var styles = _reactNative.StyleSheet.create({
  container: {
    paddingHorizontal: 16
  },
  first: {
    paddingTop: 16
  },
  last: {
    paddingBottom: 16
  },
  only: {
    paddingVertical: 16
  }
});

var _default = CardContent;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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b3ZlciIsInRpdGxlIiwiY29udGVudFN0eWxlIiwicHJldiIsIm5leHQiLCJzdHlsZXMiLCJvbmx5IiwiZmlyc3QiLCJsYXN0IiwiUmVhY3QiLCJfcmVhY3ROYXRpdmUiLCJjb250YWluZXIiLCJkaXNwbGF5TmFtZSIsIlN0eWxlU2hlZXQiLCJjcmVhdGUiLCJwYWRkaW5nSG9yaXpvbnRhbCIsInBhZGRpbmdUb3AiLCJwYWRkaW5nQm90dG9tIiwicGFkZGluZ1ZlcnRpY2FsIl0sInNvdXJjZXMiOlsiQ2FyZENvbnRlbnQudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IFN0eWxlU2hlZXQsIFN0eWxlUHJvcCwgVmlldywgVmlld1N0eWxlIH0gZnJvbSAncmVhY3QtbmF0aXZlJztcblxudHlwZSBQcm9wcyA9IFJlYWN0LkNvbXBvbmVudFByb3BzV2l0aFJlZjx0eXBlb2YgVmlldz4gJiB7XG4gIC8qKlxuICAgKiBJdGVtcyBpbnNpZGUgdGhlIGBDYXJkLkNvbnRlbnRgLlxuICAgKi9cbiAgY2hpbGRyZW46IFJlYWN0LlJlYWN0Tm9kZTtcbiAgLyoqXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgaW5kZXg/OiBudW1iZXI7XG4gIC8qKlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIHRvdGFsPzogbnVtYmVyO1xuICAvKipcbiAgICogQGludGVybmFsXG4gICAqL1xuICBzaWJsaW5ncz86IEFycmF5PHN0cmluZz47XG4gIHN0eWxlPzogU3R5bGVQcm9wPFZpZXdTdHlsZT47XG59O1xuXG4vKipcbiAqIEEgY29tcG9uZW50IHRvIHNob3cgY29udGVudCBpbnNpZGUgYSBDYXJkLlxuICpcbiAqIDxkaXYgY2xhc3M9XCJzY3JlZW5zaG90c1wiPlxuICogICA8ZmlndXJlPlxuICogICAgIDxpbWcgY2xhc3M9XCJtZWRpdW1cIiBzcmM9XCJzY3JlZW5zaG90cy9jYXJkLWNvbnRlbnQtZXhhbXBsZS5wbmdcIiAvPlxuICogICA8L2ZpZ3VyZT5cbiAqIDwvZGl2PlxuICpcbiAqXG4gKiAjIyBVc2FnZVxuICogYGBganNcbiAqIGltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbiAqIGltcG9ydCB7IENhcmQsIFRpdGxlLCBQYXJhZ3JhcGggfSBmcm9tICdyZWFjdC1uYXRpdmUtcGFwZXInO1xuICpcbiAqIGNvbnN0IE15Q29tcG9uZW50ID0gKCkgPT4gKFxuICogICA8Q2FyZD5cbiAqICAgICA8Q2FyZC5Db250ZW50PlxuICogICAgICAgPFRpdGxlPkNhcmQgdGl0bGU8L1RpdGxlPlxuICogICAgICAgPFBhcmFncmFwaD5DYXJkIGNvbnRlbnQ8L1BhcmFncmFwaD5cbiAqICAgICA8L0NhcmQuQ29udGVudD5cbiAqICAgPC9DYXJkPlxuICogKTtcbiAqXG4gKiBleHBvcnQgZGVmYXVsdCBNeUNvbXBvbmVudDtcbiAqIGBgYFxuICovXG5jb25zdCBDYXJkQ29udGVudCA9ICh7IGluZGV4LCB0b3RhbCwgc2libGluZ3MsIHN0eWxlLCAuLi5yZXN0IH06IFByb3BzKSA9PiB7XG4gIGNvbnN0IGNvdmVyID0gJ3dpdGhUaGVtZShDYXJkQ292ZXIpJztcbiAgY29uc3QgdGl0bGUgPSAnd2l0aFRoZW1lKENhcmRUaXRsZSknO1xuXG4gIGxldCBjb250ZW50U3R5bGUsIHByZXYsIG5leHQ7XG5cbiAgaWYgKHR5cGVvZiBpbmRleCA9PT0gJ251bWJlcicgJiYgc2libGluZ3MpIHtcbiAgICBwcmV2ID0gc2libGluZ3NbaW5kZXggLSAxXTtcbiAgICBuZXh0ID0gc2libGluZ3NbaW5kZXggKyAxXTtcbiAgfVxuXG4gIGlmIChcbiAgICAocHJldiA9PT0gY292ZXIgJiYgbmV4dCA9PT0gY292ZXIpIHx8XG4gICAgKHByZXYgPT09IHRpdGxlICYmIG5leHQgPT09IHRpdGxlKSB8fFxuICAgIHRvdGFsID09PSAxXG4gICkge1xuICAgIGNvbnRlbnRTdHlsZSA9IHN0eWxlcy5vbmx5O1xuICB9IGVsc2UgaWYgKGluZGV4ID09PSAwKSB7XG4gICAgaWYgKG5leHQgPT09IGNvdmVyIHx8IG5leHQgPT09IHRpdGxlKSB7XG4gICAgICBjb250ZW50U3R5bGUgPSBzdHlsZXMub25seTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29udGVudFN0eWxlID0gc3R5bGVzLmZpcnN0O1xuICAgIH1cbiAgfSBlbHNlIGlmICh0eXBlb2YgdG90YWwgPT09ICdudW1iZXInICYmIGluZGV4ID09PSB0b3RhbCAtIDEpIHtcbiAgICBpZiAocHJldiA9PT0gY292ZXIgfHwgcHJldiA9PT0gdGl0bGUpIHtcbiAgICAgIGNvbnRlbnRTdHlsZSA9IHN0eWxlcy5vbmx5O1xuICAgIH0gZWxzZSB7XG4gICAgICBjb250ZW50U3R5bGUgPSBzdHlsZXMubGFzdDtcbiAgICB9XG4gIH0gZWxzZSBpZiAocHJldiA9PT0gY292ZXIgfHwgcHJldiA9PT0gdGl0bGUpIHtcbiAgICBjb250ZW50U3R5bGUgPSBzdHlsZXMuZmlyc3Q7XG4gIH0gZWxzZSBpZiAobmV4dCA9PT0gY292ZXIgfHwgbmV4dCA9PT0gdGl0bGUpIHtcbiAgICBjb250ZW50U3R5bGUgPSBzdHlsZXMubGFzdDtcbiAgfVxuXG4gIHJldHVybiA8VmlldyB7Li4ucmVzdH0gc3R5bGU9e1tzdHlsZXMuY29udGFpbmVyLCBjb250ZW50U3R5bGUsIHN0eWxlXX0gLz47XG59O1xuXG5DYXJkQ29udGVudC5kaXNwbGF5TmFtZSA9ICdDYXJkLkNvbnRlbnQnO1xuXG5jb25zdCBzdHlsZXMgPSBTdHlsZVNoZWV0LmNyZWF0ZSh7XG4gIGNvbnRhaW5lcjoge1xuICAgIHBhZGRpbmdIb3Jpem9udGFsOiAxNixcbiAgfSxcbiAgZmlyc3Q6IHtcbiAgICBwYWRkaW5nVG9wOiAxNixcbiAgfSxcbiAgbGFzdDoge1xuICAgIHBhZGRpbmdCb3R0b206IDE2LFxuICB9LFxuICBvbmx5OiB7XG4gICAgcGFkZGluZ1ZlcnRpY2FsOiAxNixcbiAgfSxcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBDYXJkQ29udGVudDtcbiJdfQ==