347a07f347c9195afd86c58d6466bd75
"use strict";

var _interopRequireDefault2 = require("@babel/runtime/helpers/interopRequireDefault");

var _objectWithoutProperties2 = _interopRequireDefault2(require("@babel/runtime/helpers/objectWithoutProperties"));

var _excluded = ["children", "style", "theme"];
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DataTableHeader = exports.default = void 0;

var React = _interopRequireWildcard(require("react"));

var _color = _interopRequireDefault(require("color"));

var _reactNative = require("react-native");

var _colors = require("../../styles/colors");

var _theming = require("../../core/theming");

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

function _getRequireWildcardCache() {
  if (typeof WeakMap !== "function") return null;
  var cache = new WeakMap();

  _getRequireWildcardCache = function _getRequireWildcardCache() {
    return cache;
  };

  return cache;
}

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  }

  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }

  var cache = _getRequireWildcardCache();

  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }

  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }

  newObj.default = obj;

  if (cache) {
    cache.set(obj, newObj);
  }

  return newObj;
}

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

var DataTableHeader = function DataTableHeader(_ref) {
  var children = _ref.children,
      style = _ref.style,
      theme = _ref.theme,
      rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);
  var borderBottomColor = (0, _color.default)(theme.dark ? _colors.white : _colors.black).alpha(0.12).rgb().string();
  return React.createElement(_reactNative.View, _extends({}, rest, {
    style: [styles.header, {
      borderBottomColor: borderBottomColor
    }, style]
  }), children);
};

exports.DataTableHeader = DataTableHeader;
DataTableHeader.displayName = 'DataTable.Header';

var styles = _reactNative.StyleSheet.create({
  header: {
    flexDirection: 'row',
    height: 48,
    paddingHorizontal: 16,
    borderBottomWidth: _reactNative.StyleSheet.hairlineWidth * 2
  }
});

var _default = (0, _theming.withTheme)(DataTableHeader);

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBQUE7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQStDQSxJQUFNQSxlQUFlLEdBQUcsU0FBbEJBLGVBQWtCLE9BQWdEO0FBQUEsTUFBN0NDLFFBQTZDLFFBQTdDQSxRQUE2QztBQUFBLE1BQW5DQyxLQUFtQyxRQUFuQ0EsS0FBbUM7QUFBQSxNQUE1QkMsS0FBNEIsUUFBNUJBLEtBQTRCO0FBQUEsTUFBbEJDLElBQWtCO0FBQ3RFLE1BQU1DLGlCQUFpQixHQUFHLG9CQUFNRixLQUFLLENBQUNHLElBQU5ILEdBQWFJLGFBQWJKLEdBQXFCSyxhQUEzQixFQUN2QkMsS0FEdUIsQ0FDakIsSUFEaUIsRUFFdkJDLEdBRnVCLEdBR3ZCQyxNQUh1QixFQUExQjtBQUtBLFNBQ0VDLG9CQUFDQyxpQkFBRCxlQUFVVCxJQUFWO0FBQWdCRixTQUFLLEVBQUUsQ0FBQ1ksTUFBTSxDQUFDQyxNQUFSLEVBQWdCO0FBQUVWO0FBQUYsS0FBaEIsRUFBdUNILEtBQXZDO0FBQXZCLE1BQ0dELFFBREgsQ0FERjtBQU5GOzs7QUFhQUQsZUFBZSxDQUFDZ0IsV0FBaEJoQixHQUE4QixrQkFBOUJBOztBQUVBLElBQU1jLE1BQU0sR0FBR0csd0JBQVdDLE1BQVhELENBQWtCO0FBQy9CRixRQUFNLEVBQUU7QUFDTkksaUJBQWEsRUFBRSxLQURUO0FBRU5DLFVBQU0sRUFBRSxFQUZGO0FBR05DLHFCQUFpQixFQUFFLEVBSGI7QUFJTkMscUJBQWlCLEVBQUVMLHdCQUFXTSxhQUFYTixHQUEyQjtBQUp4QztBQUR1QixDQUFsQkEsQ0FBZjs7ZUFTZSx3QkFBVWpCLGVBQVYiLCJuYW1lcyI6WyJEYXRhVGFibGVIZWFkZXIiLCJjaGlsZHJlbiIsInN0eWxlIiwidGhlbWUiLCJyZXN0IiwiYm9yZGVyQm90dG9tQ29sb3IiLCJkYXJrIiwid2hpdGUiLCJibGFjayIsImFscGhhIiwicmdiIiwic3RyaW5nIiwiUmVhY3QiLCJfcmVhY3ROYXRpdmUiLCJzdHlsZXMiLCJoZWFkZXIiLCJkaXNwbGF5TmFtZSIsIlN0eWxlU2hlZXQiLCJjcmVhdGUiLCJmbGV4RGlyZWN0aW9uIiwiaGVpZ2h0IiwicGFkZGluZ0hvcml6b250YWwiLCJib3JkZXJCb3R0b21XaWR0aCIsImhhaXJsaW5lV2lkdGgiXSwic291cmNlcyI6WyJEYXRhVGFibGVIZWFkZXIudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBjb2xvciBmcm9tICdjb2xvcic7XG5pbXBvcnQgeyBTdHlsZVNoZWV0LCBTdHlsZVByb3AsIFZpZXcsIFZpZXdTdHlsZSB9IGZyb20gJ3JlYWN0LW5hdGl2ZSc7XG5pbXBvcnQgeyBibGFjaywgd2hpdGUgfSBmcm9tICcuLi8uLi9zdHlsZXMvY29sb3JzJztcbmltcG9ydCB7IHdpdGhUaGVtZSB9IGZyb20gJy4uLy4uL2NvcmUvdGhlbWluZyc7XG5cbnR5cGUgUHJvcHMgPSBSZWFjdC5Db21wb25lbnRQcm9wc1dpdGhSZWY8dHlwZW9mIFZpZXc+ICYge1xuICAvKipcbiAgICogQ29udGVudCBvZiB0aGUgYERhdGFUYWJsZUhlYWRlcmAuXG4gICAqL1xuICBjaGlsZHJlbjogUmVhY3QuUmVhY3ROb2RlO1xuICBzdHlsZT86IFN0eWxlUHJvcDxWaWV3U3R5bGU+O1xuICAvKipcbiAgICogQG9wdGlvbmFsXG4gICAqL1xuICB0aGVtZTogUmVhY3ROYXRpdmVQYXBlci5UaGVtZTtcbn07XG5cbi8qKlxuICogQSBjb21wb25lbnQgdG8gZGlzcGxheSB0aXRsZSBpbiB0YWJsZSBoZWFkZXIuXG4gKlxuICogPGRpdiBjbGFzcz1cInNjcmVlbnNob3RzXCI+XG4gKiAgIDxmaWd1cmU+XG4gKiAgICAgPGltZyBjbGFzcz1cIm1lZGl1bVwiIHNyYz1cInNjcmVlbnNob3RzL2RhdGEtdGFibGUtaGVhZGVyLnBuZ1wiIC8+XG4gKiAgIDwvZmlndXJlPlxuICogPC9kaXY+XG4gKlxuICpcbiAqICMjIFVzYWdlXG4gKiBgYGBqc1xuICogaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuICogaW1wb3J0IHsgRGF0YVRhYmxlIH0gZnJvbSAncmVhY3QtbmF0aXZlLXBhcGVyJztcbiAqXG4gKiBjb25zdCBNeUNvbXBvbmVudCA9ICgpID0+IChcbiAqICAgICAgIDxEYXRhVGFibGU+XG4gKiAgICAgICAgIDxEYXRhVGFibGUuSGVhZGVyPlxuICogICAgICAgICAgIDxEYXRhVGFibGUuVGl0bGVcbiAqICAgICAgICAgICAgIHNvcnREaXJlY3Rpb249J2Rlc2NlbmRpbmcnXG4gKiAgICAgICAgICAgPlxuICogICAgICAgICAgICAgRGVzc2VydFxuICogICAgICAgICAgIDwvRGF0YVRhYmxlLlRpdGxlPlxuICogICAgICAgICAgIDxEYXRhVGFibGUuVGl0bGUgbnVtZXJpYz5DYWxvcmllczwvRGF0YVRhYmxlLlRpdGxlPlxuICogICAgICAgICAgIDxEYXRhVGFibGUuVGl0bGUgbnVtZXJpYz5GYXQgKGcpPC9EYXRhVGFibGUuVGl0bGU+XG4gKiAgICAgICAgIDwvRGF0YVRhYmxlLkhlYWRlcj5cbiAqICAgICAgIDwvRGF0YVRhYmxlPlxuICogKTtcbiAqXG4gKiBleHBvcnQgZGVmYXVsdCBNeUNvbXBvbmVudDtcbiAqIGBgYFxuICovXG5cbmNvbnN0IERhdGFUYWJsZUhlYWRlciA9ICh7IGNoaWxkcmVuLCBzdHlsZSwgdGhlbWUsIC4uLnJlc3QgfTogUHJvcHMpID0+IHtcbiAgY29uc3QgYm9yZGVyQm90dG9tQ29sb3IgPSBjb2xvcih0aGVtZS5kYXJrID8gd2hpdGUgOiBibGFjaylcbiAgICAuYWxwaGEoMC4xMilcbiAgICAucmdiKClcbiAgICAuc3RyaW5nKCk7XG5cbiAgcmV0dXJuIChcbiAgICA8VmlldyB7Li4ucmVzdH0gc3R5bGU9e1tzdHlsZXMuaGVhZGVyLCB7IGJvcmRlckJvdHRvbUNvbG9yIH0sIHN0eWxlXX0+XG4gICAgICB7Y2hpbGRyZW59XG4gICAgPC9WaWV3PlxuICApO1xufTtcblxuRGF0YVRhYmxlSGVhZGVyLmRpc3BsYXlOYW1lID0gJ0RhdGFUYWJsZS5IZWFkZXInO1xuXG5jb25zdCBzdHlsZXMgPSBTdHlsZVNoZWV0LmNyZWF0ZSh7XG4gIGhlYWRlcjoge1xuICAgIGZsZXhEaXJlY3Rpb246ICdyb3cnLFxuICAgIGhlaWdodDogNDgsXG4gICAgcGFkZGluZ0hvcml6b250YWw6IDE2LFxuICAgIGJvcmRlckJvdHRvbVdpZHRoOiBTdHlsZVNoZWV0LmhhaXJsaW5lV2lkdGggKiAyLFxuICB9LFxufSk7XG5cbmV4cG9ydCBkZWZhdWx0IHdpdGhUaGVtZShEYXRhVGFibGVIZWFkZXIpO1xuXG4vLyBAY29tcG9uZW50LWRvY3MgaWdub3JlLW5leHQtbGluZVxuZXhwb3J0IHsgRGF0YVRhYmxlSGVhZGVyIH07XG4iXX0=